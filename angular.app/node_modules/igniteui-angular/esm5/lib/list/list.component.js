import { __decorate, __extends, __param, __values } from "tslib";
import { CommonModule } from '@angular/common';
import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, Input, NgModule, Output, QueryList, TemplateRef, ViewChild, Optional, Inject, Directive } from '@angular/core';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxListItemComponent } from './list-item.component';
import { IgxListBaseDirective, IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective, IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective } from './list.common';
import { DisplayDensityToken, DisplayDensity } from '../core/density';
var NEXT_ID = 0;
/**
 * **Ignite UI for Angular List** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)
 *
 * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering
 * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.
 *
 * Example:
 * ```html
 * <igx-list>
 *   <igx-list-item isHeader="true">Contacts</igx-list-item>
 *   <igx-list-item *ngFor="let contact of contacts">
 *     <span class="name">{{ contact.name }}</span>
 *     <span class="phone">{{ contact.phone }}</span>
 *   </igx-list-item>
 * </igx-list>
 * ```
 */
/**
 * igxListThumbnail is container for the List media
 * Use it to wrap anything you want to be used as a thumbnail.
 */
var IgxListThumbnailDirective = /** @class */ (function () {
    function IgxListThumbnailDirective() {
    }
    IgxListThumbnailDirective = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[igxListThumbnail]'
        })
    ], IgxListThumbnailDirective);
    return IgxListThumbnailDirective;
}());
export { IgxListThumbnailDirective };
/**
 * igxListAction is container for the List action
 * Use it to wrap anything you want to be used as a list action: icon, checkbox...
 */
var IgxListActionDirective = /** @class */ (function () {
    function IgxListActionDirective() {
    }
    IgxListActionDirective = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[igxListAction]'
        })
    ], IgxListActionDirective);
    return IgxListActionDirective;
}());
export { IgxListActionDirective };
/**
 * igxListLine is container for the List text content
 * Use it to wrap anything you want to be used as a plane text.
 */
var IgxListLineDirective = /** @class */ (function () {
    function IgxListLineDirective() {
    }
    IgxListLineDirective = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[igxListLine]'
        })
    ], IgxListLineDirective);
    return IgxListLineDirective;
}());
export { IgxListLineDirective };
/**
 * igxListLineTitle is a directive that add class to the target element
 * Use it to make anything to look like list Title.
 */
var IgxListLineTitleDirective = /** @class */ (function () {
    function IgxListLineTitleDirective() {
        this.cssClass = 'igx-list__item-line-title';
    }
    __decorate([
        HostBinding('class.igx-list__item-line-title')
    ], IgxListLineTitleDirective.prototype, "cssClass", void 0);
    IgxListLineTitleDirective = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[igxListLineTitle]'
        })
    ], IgxListLineTitleDirective);
    return IgxListLineTitleDirective;
}());
export { IgxListLineTitleDirective };
/**
 * igxListLineSubTitle is a directive that add class to the target element
 * Use it to make anything to look like list Subtitle.
 */
var IgxListLineSubTitleDirective = /** @class */ (function () {
    function IgxListLineSubTitleDirective() {
        this.cssClass = 'igx-list__item-line-subtitle';
    }
    __decorate([
        HostBinding('class.igx-list__item-line-subtitle')
    ], IgxListLineSubTitleDirective.prototype, "cssClass", void 0);
    IgxListLineSubTitleDirective = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[igxListLineSubTitle]'
        })
    ], IgxListLineSubTitleDirective);
    return IgxListLineSubTitleDirective;
}());
export { IgxListLineSubTitleDirective };
var IgxListComponent = /** @class */ (function (_super) {
    __extends(IgxListComponent, _super);
    function IgxListComponent(element, _displayDensityOptions) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this.element = element;
        _this._displayDensityOptions = _displayDensityOptions;
        /**
         * Provides a threshold after which the item's panning will be completed automatically.
         * By default this property is set to 0.5 which is 50% of the list item's width.
         * ```typescript
         * this.list.panEndTriggeringThreshold = 0.8;
         * ```
         */
        _this.panEndTriggeringThreshold = 0.5;
        /**
         * Sets/gets the `id` of the list.
         * If not set, the `id` of the first list component will be `"igx-list-0"`.
         * ```html
         * <igx-list id = "my-first-list"></igx-list>
         * ```
         * ```typescript
         * let listId =  this.list.id;
         * ```
         * @memberof IgxListComponent
         */
        _this.id = "igx-list-" + NEXT_ID++;
        /**
         * Sets/gets whether the left panning of an item is allowed.
         * Default value is `false`.
         * ```html
         *  <igx-list [allowLeftPanning] = "true"></igx-list>
         * ```
         * ```typescript
         * let isLeftPanningAllowed = this.list.allowLeftPanning;
         * ```
         * @memberof IgxListComponent
         */
        _this.allowLeftPanning = false;
        /**
         * Sets/gets whether the right panning of an item is allowed.
         * Default value is `false`.
         * ```html
         *  <igx-list [allowRightPanning] = "true"></igx-list>
         * ```
         * ```typescript
         * let isRightPanningAllowed = this.list.allowRightPanning;
         * ```
         * @memberof IgxListComponent
         */
        _this.allowRightPanning = false;
        /**
         * Sets/gets whether the list is currently loading data.
         * Set it to display the dataLoadingTemplate while data is being retrieved.
         * Default value is `false`.
         * ```html
         *  <igx-list [isLoading]="true"></igx-list>
         * ```
         * ```typescript
         * let isLoading = this.list.isLoading;
         * ```
         * @memberof IgxListComponent
         */
        _this.isLoading = false;
        /**
         * Emits an event within the current list when left pan gesture is executed on a list item.
         * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
         * ```html
         * <igx-list [allowLeftPanning]="true" (onLeftPan)="onLeftPan($event)"></igx-list>
         * ```
         * @memberof IgxListComponent
         */
        _this.onLeftPan = new EventEmitter();
        /**
         * Emits an event within the current list when right pan gesture is executed on a list item.
         * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
         * ```html
         * <igx-list [allowRightPanning]="true" (onRightPan)="onRightPan($event)"></igx-list>
         * ```
         * @memberof IgxListComponent
         */
        _this.onRightPan = new EventEmitter();
        /**
        * Emits an event within the current list when pan gesture is executed on list item.
        * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.
        * ```html
        * <igx-list (onPanStateChange) = "onPanStateChange($event)"></igx-list>
        * ```
        * @memberof IgxListComponent
        */
        _this.onPanStateChange = new EventEmitter();
        /**
         * Emits an event within the current list when a list item has been clicked.
         * Provides references to the `IgxListItemComponent` and `Event` as event arguments.
         *  ```html
         * <igx-list (onItemClicked) = "onItemClicked($event)"></igx-list>
         * ```
         * @memberof IgxListComponent
         */
        _this.onItemClicked = new EventEmitter();
        return _this;
    }
    IgxListComponent_1 = IgxListComponent;
    Object.defineProperty(IgxListComponent.prototype, "sortedChildren", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            if (this.children !== undefined) {
                return this.children.toArray()
                    .sort(function (a, b) {
                    return a.index - b.index;
                });
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "role", {
        /**
         * Gets the `role` attribute.
         * ```typescript
         * let listRole =  this.list.role;
         * ```
         * @memberof IgxListComponent
         */
        get: function () {
            return 'list';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "isListEmpty", {
        /**
         * Returns boolean indicating if the list is empty.
         * ```typescript
         * let isEmpty =  this.list.isListEmpty;
         * ```
         * @memberof IgxListComponent
         */
        get: function () {
            return !this.children || this.children.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "cssClass", {
        /**
         * @hidden
         */
        get: function () {
            return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "cssClassCompact", {
        /**
         * @hidden
         */
        get: function () {
            return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "cssClassCosy", {
        /**
         * @hidden
         */
        get: function () {
            return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "items", {
        /**
         * Returns the `items` in the list excluding the headers.
         * ```typescript
         * let listItems: IgxListItemComponent[] = this.list.items;
         * ```
         * @memberof IgxListComponent
         */
        get: function () {
            var e_1, _a;
            var items = [];
            if (this.children !== undefined) {
                try {
                    for (var _b = __values(this.sortedChildren), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var child = _c.value;
                        if (!child.isHeader) {
                            items.push(child);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return items;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "headers", {
        /**
         * Returns the headers in the list.
         * ```typescript
         * let listHeaders: IgxListItemComponent[] =  this.list.headers;
         * ```
         * @memberof IgxListComponent
         */
        get: function () {
            var e_2, _a;
            var headers = [];
            if (this.children !== undefined) {
                try {
                    for (var _b = __values(this.children.toArray()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var child = _c.value;
                        if (child.isHeader) {
                            headers.push(child);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            return headers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "context", {
        /**
         * Returns the `context` object which represents the `template context` binding into the `list container`
         * by providing the `$implicit` declaration which is the `IgxListComponent` itself.
         * ```typescript
         * let listComponent =  this.list.context;
         * ```
         */
        get: function () {
            return {
                $implicit: this
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "template", {
        /**
         * Returns the `template` of an empty list.
         * ```typescript
         * let listTemplate = this.list.template;
         * ```
         * @memberof IgxListComponent
         */
        get: function () {
            if (this.isLoading) {
                return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;
            }
            else {
                return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    var IgxListComponent_1;
    IgxListComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    __decorate([
        ContentChildren(forwardRef(function () { return IgxListItemComponent; }), { descendants: true })
    ], IgxListComponent.prototype, "children", void 0);
    __decorate([
        ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective })
    ], IgxListComponent.prototype, "emptyListTemplate", void 0);
    __decorate([
        ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective })
    ], IgxListComponent.prototype, "dataLoadingTemplate", void 0);
    __decorate([
        ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective })
    ], IgxListComponent.prototype, "listItemLeftPanningTemplate", void 0);
    __decorate([
        ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective })
    ], IgxListComponent.prototype, "listItemRightPanningTemplate", void 0);
    __decorate([
        Input()
    ], IgxListComponent.prototype, "panEndTriggeringThreshold", void 0);
    __decorate([
        ViewChild('defaultEmptyList', { read: TemplateRef, static: true })
    ], IgxListComponent.prototype, "defaultEmptyListTemplate", void 0);
    __decorate([
        ViewChild('defaultDataLoading', { read: TemplateRef, static: true })
    ], IgxListComponent.prototype, "defaultDataLoadingTemplate", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxListComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxListComponent.prototype, "allowLeftPanning", void 0);
    __decorate([
        Input()
    ], IgxListComponent.prototype, "allowRightPanning", void 0);
    __decorate([
        Input()
    ], IgxListComponent.prototype, "isLoading", void 0);
    __decorate([
        Output()
    ], IgxListComponent.prototype, "onLeftPan", void 0);
    __decorate([
        Output()
    ], IgxListComponent.prototype, "onRightPan", void 0);
    __decorate([
        Output()
    ], IgxListComponent.prototype, "onPanStateChange", void 0);
    __decorate([
        Output()
    ], IgxListComponent.prototype, "onItemClicked", void 0);
    __decorate([
        HostBinding('attr.role')
    ], IgxListComponent.prototype, "role", null);
    __decorate([
        HostBinding('class.igx-list-empty')
    ], IgxListComponent.prototype, "isListEmpty", null);
    __decorate([
        HostBinding('class.igx-list')
    ], IgxListComponent.prototype, "cssClass", null);
    __decorate([
        HostBinding('class.igx-list--compact')
    ], IgxListComponent.prototype, "cssClassCompact", null);
    __decorate([
        HostBinding('class.igx-list--cosy')
    ], IgxListComponent.prototype, "cssClassCosy", null);
    IgxListComponent = IgxListComponent_1 = __decorate([
        Component({
            selector: 'igx-list',
            template: "<ng-content></ng-content>\n\n<ng-template #defaultEmptyList>\n    <article class=\"message\">\n        There are no items in the list.\n    </article>\n</ng-template>\n\n<ng-template #defaultDataLoading>\n    <article class=\"message\">\n        Loading data from the server...\n    </article>\n</ng-template>\n\n<ng-container *ngIf=\"!children || children.length === 0 || isLoading\">\n    <ng-container *ngTemplateOutlet=\"template; context: context\">\n    </ng-container>\n</ng-container>\n",
            providers: [{ provide: IgxListBaseDirective, useExisting: IgxListComponent_1 }]
        }),
        __param(1, Optional()), __param(1, Inject(DisplayDensityToken))
    ], IgxListComponent);
    return IgxListComponent;
}(IgxListBaseDirective));
export { IgxListComponent };
/**
 * @hidden
 */
var IgxListModule = /** @class */ (function () {
    function IgxListModule() {
    }
    IgxListModule = __decorate([
        NgModule({
            declarations: [
                IgxListBaseDirective,
                IgxListComponent,
                IgxListItemComponent,
                IgxListThumbnailDirective,
                IgxListActionDirective,
                IgxListLineDirective,
                IgxListLineTitleDirective,
                IgxListLineSubTitleDirective,
                IgxDataLoadingTemplateDirective,
                IgxEmptyListTemplateDirective,
                IgxListItemLeftPanningTemplateDirective,
                IgxListItemRightPanningTemplateDirective
            ],
            exports: [
                IgxListComponent,
                IgxListItemComponent,
                IgxListThumbnailDirective,
                IgxListActionDirective,
                IgxListLineDirective,
                IgxListLineTitleDirective,
                IgxListLineSubTitleDirective,
                IgxDataLoadingTemplateDirective,
                IgxEmptyListTemplateDirective,
                IgxListItemLeftPanningTemplateDirective,
                IgxListItemRightPanningTemplateDirective
            ],
            imports: [
                CommonModule,
                IgxRippleModule
            ]
        })
    ], IgxListModule);
    return IgxListModule;
}());
export { IgxListModule };
//# sourceMappingURL=data:application/json;base64,
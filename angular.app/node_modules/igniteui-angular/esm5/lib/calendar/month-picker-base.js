import { __decorate, __extends } from "tslib";
import { IgxCalendarBaseDirective } from './calendar-base';
import { ViewChild, HostBinding, Directive } from '@angular/core';
/**
 * Sets the calender view - days, months or years.
 */
export var CalendarView;
(function (CalendarView) {
    CalendarView[CalendarView["DEFAULT"] = 0] = "DEFAULT";
    CalendarView[CalendarView["YEAR"] = 1] = "YEAR";
    CalendarView[CalendarView["DECADE"] = 2] = "DECADE";
})(CalendarView || (CalendarView = {}));
var IgxMonthPickerBaseDirective = /** @class */ (function (_super) {
    __extends(IgxMonthPickerBaseDirective, _super);
    function IgxMonthPickerBaseDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * The default `tabindex` attribute for the component.
         *
         * @hidden
         */
        _this.tabindex = 0;
        /**
         *@hidden
         */
        _this._activeView = CalendarView.DEFAULT;
        return _this;
    }
    Object.defineProperty(IgxMonthPickerBaseDirective.prototype, "activeView", {
        /**
         * Gets the current active view.
         */
        get: function () {
            return this._activeView;
        },
        /**
         * Sets the current active view.
         */
        set: function (val) {
            this._activeView = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMonthPickerBaseDirective.prototype, "isDefaultView", {
        /**
         * @hidden
         */
        get: function () {
            return this._activeView === CalendarView.DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMonthPickerBaseDirective.prototype, "isDecadeView", {
        /**
         * @hidden
         */
        get: function () {
            return this._activeView === CalendarView.DECADE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxMonthPickerBaseDirective.prototype.changeYear = function (event) {
        var _this = this;
        this.viewDate = new Date(event.getFullYear(), this.viewDate.getMonth());
        this._activeView = CalendarView.DEFAULT;
        requestAnimationFrame(function () {
            if (_this.yearsBtn) {
                _this.yearsBtn.nativeElement.focus();
            }
        });
    };
    /**
     * @hidden
     */
    IgxMonthPickerBaseDirective.prototype.activeViewDecade = function (args) {
        this._activeView = CalendarView.DECADE;
    };
    /**
     * @hidden
     */
    IgxMonthPickerBaseDirective.prototype.activeViewDecadeKB = function (event, args) {
        if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
            event.preventDefault();
            this.activeViewDecade(args);
        }
    };
    /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     */
    IgxMonthPickerBaseDirective.prototype.formattedYear = function (value) {
        if (this.formatViews.year) {
            return this.formatterYear.format(value);
        }
        return "" + value.getFullYear();
    };
    __decorate([
        ViewChild('yearsBtn')
    ], IgxMonthPickerBaseDirective.prototype, "yearsBtn", void 0);
    __decorate([
        HostBinding('attr.tabindex')
    ], IgxMonthPickerBaseDirective.prototype, "tabindex", void 0);
    IgxMonthPickerBaseDirective = __decorate([
        Directive({
            selector: '[igxMonthPickerBase]'
        })
    ], IgxMonthPickerBaseDirective);
    return IgxMonthPickerBaseDirective;
}(IgxCalendarBaseDirective));
export { IgxMonthPickerBaseDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGgtcGlja2VyLWJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2NhbGVuZGFyL21vbnRoLXBpY2tlci1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsU0FBUyxFQUFjLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHOUU7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxZQUlYO0FBSkQsV0FBWSxZQUFZO0lBQ3BCLHFEQUFPLENBQUE7SUFDUCwrQ0FBSSxDQUFBO0lBQ0osbURBQU0sQ0FBQTtBQUNWLENBQUMsRUFKVyxZQUFZLEtBQVosWUFBWSxRQUl2QjtBQUlEO0lBQWlELCtDQUF3QjtJQUF6RTtRQUFBLHFFQTBGQztRQWxGRzs7OztXQUlHO1FBRUksY0FBUSxHQUFHLENBQUMsQ0FBQztRQThCcEI7O1dBRUc7UUFDSyxpQkFBVyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7O0lBMkMvQyxDQUFDO0lBdkVHLHNCQUFXLG1EQUFVO1FBSHJCOztXQUVHO2FBQ0g7WUFDSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDNUIsQ0FBQztRQUVEOztXQUVHO2FBQ0gsVUFBc0IsR0FBaUI7WUFDbkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7UUFDM0IsQ0FBQzs7O09BUEE7SUFZRCxzQkFBVyxzREFBYTtRQUh4Qjs7V0FFRzthQUNIO1lBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxLQUFLLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFDckQsQ0FBQzs7O09BQUE7SUFLRCxzQkFBVyxxREFBWTtRQUh2Qjs7V0FFRzthQUNIO1lBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxLQUFLLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDcEQsQ0FBQzs7O09BQUE7SUFPRDs7T0FFRztJQUNJLGdEQUFVLEdBQWpCLFVBQWtCLEtBQVc7UUFBN0IsaUJBT0M7UUFORyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDeEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO1FBRXhDLHFCQUFxQixDQUFDO1lBQ2xCLElBQUksS0FBSSxDQUFDLFFBQVEsRUFBRTtnQkFBRSxLQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUFFO1FBQy9ELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOztPQUVHO0lBQ0ksc0RBQWdCLEdBQXZCLFVBQXdCLElBQVc7UUFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQzNDLENBQUM7SUFFRDs7T0FFRztJQUNJLHdEQUFrQixHQUF6QixVQUEwQixLQUFLLEVBQUUsSUFBVztRQUN4QyxJQUFJLEtBQUssQ0FBQyxHQUFHLG9CQUFlLElBQUksS0FBSyxDQUFDLEdBQUcsOEJBQWtCLElBQUksS0FBSyxDQUFDLEdBQUcsd0JBQWUsRUFBRTtZQUNyRixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksbURBQWEsR0FBcEIsVUFBcUIsS0FBVztRQUM1QixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLEtBQUcsS0FBSyxDQUFDLFdBQVcsRUFBSSxDQUFDO0lBQ3BDLENBQUM7SUFuRkQ7UUFEQyxTQUFTLENBQUMsVUFBVSxDQUFDO2lFQUNNO0lBUTVCO1FBREMsV0FBVyxDQUFDLGVBQWUsQ0FBQztpRUFDVDtJQWRYLDJCQUEyQjtRQUh2QyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsc0JBQXNCO1NBQ25DLENBQUM7T0FDVywyQkFBMkIsQ0EwRnZDO0lBQUQsa0NBQUM7Q0FBQSxBQTFGRCxDQUFpRCx3QkFBd0IsR0EwRnhFO1NBMUZZLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElneENhbGVuZGFyQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vY2FsZW5kYXItYmFzZSc7XG5pbXBvcnQgeyBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEtFWVMgfSBmcm9tICcuLi9jb3JlL3V0aWxzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBjYWxlbmRlciB2aWV3IC0gZGF5cywgbW9udGhzIG9yIHllYXJzLlxuICovXG5leHBvcnQgZW51bSBDYWxlbmRhclZpZXcge1xuICAgIERFRkFVTFQsXG4gICAgWUVBUixcbiAgICBERUNBREVcbn1cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneE1vbnRoUGlja2VyQmFzZV0nXG59KVxuZXhwb3J0IGNsYXNzIElneE1vbnRoUGlja2VyQmFzZURpcmVjdGl2ZSBleHRlbmRzIElneENhbGVuZGFyQmFzZURpcmVjdGl2ZSB7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZCgneWVhcnNCdG4nKVxuICAgIHB1YmxpYyB5ZWFyc0J0bjogRWxlbWVudFJlZjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IGB0YWJpbmRleGAgYXR0cmlidXRlIGZvciB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci50YWJpbmRleCcpXG4gICAgcHVibGljIHRhYmluZGV4ID0gMDtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgYWN0aXZlIHZpZXcuXG4gICAgICovXG4gICAgcHVibGljIGdldCBhY3RpdmVWaWV3KCk6IENhbGVuZGFyVmlldyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVWaWV3O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgYWN0aXZlIHZpZXcuXG4gICAgICovXG4gICAgcHVibGljIHNldCBhY3RpdmVWaWV3KHZhbDogQ2FsZW5kYXJWaWV3KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVZpZXcgPSB2YWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgaXNEZWZhdWx0VmlldygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVZpZXcgPT09IENhbGVuZGFyVmlldy5ERUZBVUxUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGlzRGVjYWRlVmlldygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVZpZXcgPT09IENhbGVuZGFyVmlldy5ERUNBREU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfYWN0aXZlVmlldyA9IENhbGVuZGFyVmlldy5ERUZBVUxUO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBjaGFuZ2VZZWFyKGV2ZW50OiBEYXRlKSB7XG4gICAgICAgIHRoaXMudmlld0RhdGUgPSBuZXcgRGF0ZShldmVudC5nZXRGdWxsWWVhcigpLCB0aGlzLnZpZXdEYXRlLmdldE1vbnRoKCkpO1xuICAgICAgICB0aGlzLl9hY3RpdmVWaWV3ID0gQ2FsZW5kYXJWaWV3LkRFRkFVTFQ7XG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnllYXJzQnRuKSB7IHRoaXMueWVhcnNCdG4ubmF0aXZlRWxlbWVudC5mb2N1cygpOyB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aXZlVmlld0RlY2FkZShhcmdzPzogRGF0ZSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9hY3RpdmVWaWV3ID0gQ2FsZW5kYXJWaWV3LkRFQ0FERTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGFjdGl2ZVZpZXdEZWNhZGVLQihldmVudCwgYXJncz86IERhdGUpIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gS0VZUy5TUEFDRSB8fCBldmVudC5rZXkgPT09IEtFWVMuU1BBQ0VfSUUgfHwgZXZlbnQua2V5ID09PSBLRVlTLkVOVEVSKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVWaWV3RGVjYWRlKGFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbG9jYWxlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB5ZWFyIGluIHRoZSB5ZWFyIHZpZXcgaWYgZW5hYmxlZCxcbiAgICAgKiBvdGhlcndpc2UgcmV0dXJucyB0aGUgZGVmYXVsdCBgRGF0ZS5nZXRGdWxsWWVhcigpYCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZm9ybWF0dGVkWWVhcih2YWx1ZTogRGF0ZSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdFZpZXdzLnllYXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlclllYXIuZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dmFsdWUuZ2V0RnVsbFllYXIoKX1gO1xuICAgIH1cbn1cbiJdfQ==
import { __decorate, __extends, __param } from "tslib";
import { Component, ChangeDetectorRef, EventEmitter, ElementRef, HostBinding, Input, Output, ViewChild, Renderer2, TemplateRef, Inject, Optional } from '@angular/core';
import { DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';
import { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';
import { fromEvent } from 'rxjs';
import { take, filter } from 'rxjs/operators';
var CHIP_ID = 0;
var IgxChipComponent = /** @class */ (function (_super) {
    __extends(IgxChipComponent, _super);
    function IgxChipComponent(cdr, elementRef, renderer, _displayDensityOptions) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this.cdr = cdr;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this._displayDensityOptions = _displayDensityOptions;
        /**
         * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
         * ```html
         * <igx-chip [id]="'igx-chip-1'"></igx-chip>
         * ```
         */
        _this.id = "igx-chip-" + CHIP_ID++;
        /**
         * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.
         * By default it is set to false.
         * ```html
         * <igx-chip [id]="'igx-chip-1'" [draggable]="true"></igx-chip>
         * ```
         */
        _this.draggable = false;
        /**
     * An @Input property that enables/disables the draggable element animation when the element is released.
     * By default it's set to true.
     * ```html
     * <igx-chip [id]="'igx-chip-1'" [draggable]="true" [animateOnRelease]="false"></igx-chip>
     * ```
     */
        _this.animateOnRelease = true;
        /**
         * An @Input property that enables/disables the hiding of the base element that has been dragged.
         * By default it's set to true.
         * ```html
         * <igx-chip [id]="'igx-chip-1'" [draggable]="true" [hideBaseOnDrag]="false"></igx-chip>
         * ```
         */
        _this.hideBaseOnDrag = true;
        /**
         * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.
         * By default it is set to false.
         * ```html
         * <igx-chip [id]="'igx-chip-1'" [draggable]="true" [removable]="true"></igx-chip>
         * ```
         */
        _this.removable = false;
        /**
         * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,
         * By default it is set to false.
         * ```html
         * <igx-chip [id]="chip.id" [draggable]="true" [removable]="true" [selectable]="true"></igx-chip>
         * ```
         */
        _this.selectable = false;
        /**
         * @hidden
         */
        _this.class = '';
        /**
         * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions
         * like focusing on click or tab, selection on click or Space, dragging.
         * By default it is set to false.
         * ```html
         * <igx-chip [id]="chip.id" [disabled]="true"></igx-chip>
         * ```
         */
        _this.disabled = false;
        /**
         *@hidden
         */
        _this.selectedChange = new EventEmitter();
        /**
         * Emits an event when the `IgxChipComponent` moving starts.
         * Returns the moving `IgxChipComponent`.
         * ```typescript
         * moveStarted(event: IBaseChipEventArgs){
         *     let movingChip = event.owner;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onMoveStart)="moveStarted($event)">
         * ```
         */
        _this.onMoveStart = new EventEmitter();
        /**
         * Emits an event when the `IgxChipComponent` moving ends.
         * Returns the moved `IgxChipComponent`.
         * ```typescript
         * moveEnded(event: IBaseChipEventArgs){
         *     let movedChip = event.owner;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onMoveEnd)="moveEnded($event)">
         * ```
         */
        _this.onMoveEnd = new EventEmitter();
        /**
         * Emits an event when the `IgxChipComponent` is removed.
         * Returns the removed `IgxChipComponent`.
         * ```typescript
         * remove(event: IBaseChipEventArgs){
         *     let removedChip = event.owner;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onRemove)="remove($event)">
         * ```
         */
        _this.onRemove = new EventEmitter();
        /**
         * Emits an event when the `IgxChipComponent` is clicked.
         * Returns the clicked `IgxChipComponent`, whether the event should be canceled.
         * ```typescript
         * chipClick(event: IChipClickEventArgs){
         *     let clickedChip = event.owner;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onClick)="chipClick($event)">
         * ```
         */
        _this.onClick = new EventEmitter();
        /**
         * Emits event when the `IgxChipComponent` is selected/deselected.
         * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and
         * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.
         * ```typescript
         * chipSelect(event: IChipSelectEventArgs){
         *     let selectedChip = event.owner;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [selectable]="true" (onSelection)="chipSelect($event)">
         * ```
         */
        _this.onSelection = new EventEmitter();
        /**
         * Emits event when the `IgxChipComponent` is selected/deselected and any related animations and transitions also end.
         * ```typescript
         * chipSelectEnd(event: IBaseChipEventArgs){
         *     let selectedChip = event.owner;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [selectable]="true" (onSelectionDone)="chipSelectEnd($event)">
         * ```
         */
        _this.onSelectionDone = new EventEmitter();
        /**
         * Emits an event when the `IgxChipComponent` keyboard navigation is being used.
         * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,
         * if the `alt`, `shift` or `control` key is pressed and the pressed key name.
         * ```typescript
         * chipKeyDown(event: IChipKeyDownEventArgs){
         *     let keyDown = event.key;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onKeyDown)="chipKeyDown($event)">
         * ```
         */
        _this.onKeyDown = new EventEmitter();
        /**
         * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.
         * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as
         * the original drop event arguments.
         * ```typescript
         * chipEnter(event: IChipEnterDragAreaEventArgs){
         *     let targetChip = event.targetChip;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onDragEnter)="chipEnter($event)">
         * ```
         */
        _this.onDragEnter = new EventEmitter();
        _this._selected = false;
        _this._selectedItemClass = 'igx-chip__item--selected';
        _this._movedWhileRemoving = false;
        return _this;
    }
    Object.defineProperty(IgxChipComponent.prototype, "selected", {
        /**
         * Returns if the `IgxChipComponent` is selected.
         * ```typescript
         * @ViewChild('myChip')
         * public chip: IgxChipComponent;
         * selectedChip(){
         *     let selectedChip = this.chip.selected;
         * }
         * ```
         */
        get: function () {
            return this._selected;
        },
        /**
         * Sets the `IgxChipComponent` selected state.
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [selectable]="true" [selected]="true">
         * ```
         *
         * Two-way data binding:
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [selectable]="true" [(selected)]="model.isSelected">
         * ```
         */
        set: function (newValue) {
            this.changeSelection(newValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxChipComponent.prototype, "color", {
        /**
         * Returns the background color of the `IgxChipComponent`.
         * ```typescript
         * @ViewChild('myChip')
         * public chip: IgxChipComponent;
         * ngAfterViewInit(){
         *     let chipColor = this.chip.color;
         * }
         * ```
         */
        get: function () {
            return this.chipArea.nativeElement.style.backgroundColor;
        },
        /**
         * An @Input property that sets the `IgxChipComponent` background color.
         * The `color` property supports string, rgb, hex.
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [color]="'#ff0000'"></igx-chip>
         * ```
         */
        set: function (newColor) {
            this.chipArea.nativeElement.style.backgroundColor = newColor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxChipComponent.prototype, "hostClass", {
        /**
         * @hidden
         */
        get: function () {
            var classes = [this.getComponentDensityClass('igx-chip')];
            classes.push(this.disabled ? 'igx-chip--disabled' : '');
            // The custom classes should be at the end.
            classes.push(this.class);
            return classes.join(' ');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxChipComponent.prototype, "removeButtonTemplate", {
        /**
         * @hidden
         */
        get: function () {
            return this.removeIcon || this.defaultRemoveIcon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxChipComponent.prototype, "selectIconTemplate", {
        /**
         * @hidden
         */
        get: function () {
            return this.selectIcon || this.defaultSelectIcon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxChipComponent.prototype, "ghostClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.getComponentDensityClass('igx-chip__ghost');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxChipComponent.prototype, "chipTabindex", {
        get: function () {
            return !this.disabled ? 0 : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxChipComponent.prototype.selectClass = function (condition) {
        var _a;
        var SELECT_CLASS = 'igx-chip__select';
        return _a = {},
            _a[SELECT_CLASS] = condition,
            _a[SELECT_CLASS + "--hidden"] = !condition,
            _a;
    };
    IgxChipComponent.prototype.changeSelection = function (newValue, srcEvent) {
        var _this = this;
        if (srcEvent === void 0) { srcEvent = null; }
        var onSelectArgs = {
            originalEvent: srcEvent,
            owner: this,
            selected: false,
            cancel: false
        };
        fromEvent(this.selectContainer.nativeElement, 'transitionend')
            .pipe(filter(function (event) { return event.propertyName === 'width'; }), take(1))
            .subscribe(function (event) { return _this.onSelectTransitionDone(event); });
        if (newValue && !this._selected) {
            onSelectArgs.selected = true;
            this.onSelection.emit(onSelectArgs);
            if (!onSelectArgs.cancel) {
                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);
                this._selected = newValue;
                this.selectedChange.emit(this._selected);
            }
        }
        else if (!newValue && this._selected) {
            this.onSelection.emit(onSelectArgs);
            if (!onSelectArgs.cancel) {
                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);
                this._selected = newValue;
                this.selectedChange.emit(this._selected);
            }
        }
    };
    IgxChipComponent.prototype.onSelectTransitionDone = function (event) {
        if (!!event.target.tagName) {
            // Trigger onSelectionDone on when `width` property is changed and the target is valid element(not comment).
            this.onSelectionDone.emit({
                owner: this,
                originalEvent: event
            });
        }
    };
    /**
     * @hidden
     */
    IgxChipComponent.prototype.onChipKeyDown = function (event) {
        var keyDownArgs = {
            originalEvent: event,
            owner: this,
            cancel: false
        };
        this.onKeyDown.emit(keyDownArgs);
        if (keyDownArgs.cancel) {
            return;
        }
        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {
            this.onRemove.emit({
                originalEvent: event,
                owner: this
            });
        }
        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {
            this.changeSelection(!this.selected, event);
        }
        if (event.key !== 'Tab') {
            event.preventDefault();
        }
    };
    /**
     * @hidden
     */
    IgxChipComponent.prototype.onRemoveBtnKeyDown = function (event) {
        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {
            this.onRemove.emit({
                originalEvent: event,
                owner: this
            });
            event.preventDefault();
            event.stopPropagation();
        }
    };
    IgxChipComponent.prototype.onRemoveMouseDown = function (event) {
        event.stopPropagation();
    };
    /**
     * @hidden
     */
    IgxChipComponent.prototype.onRemoveClick = function (event) {
        this.onRemove.emit({
            originalEvent: event,
            owner: this
        });
    };
    /**
     * @hidden
     */
    IgxChipComponent.prototype.onRemoveTouchMove = function () {
        // We don't remove chip if user starting touch interacting on the remove button moves the chip
        this._movedWhileRemoving = true;
    };
    /**
     * @hidden
     */
    IgxChipComponent.prototype.onRemoveTouchEnd = function (event) {
        if (!this._movedWhileRemoving) {
            this.onRemoveClick(event);
        }
        this._movedWhileRemoving = false;
    };
    /**
     * @hidden
     */
    // -----------------------------
    // Start chip igxDrag behavior
    IgxChipComponent.prototype.onChipDragStart = function (event) {
        this.onMoveStart.emit({
            originalEvent: event,
            owner: this
        });
        event.cancel = !this.draggable || this.disabled;
    };
    /**
     * @hidden
     */
    IgxChipComponent.prototype.onChipDragEnd = function () {
        if (this.animateOnRelease) {
            this.dragDirective.transitionToOrigin();
        }
    };
    /**
     * @hidden
     */
    IgxChipComponent.prototype.onChipMoveEnd = function (event) {
        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.
        this.onMoveEnd.emit({
            originalEvent: event,
            owner: this
        });
        if (this.selected) {
            this.chipArea.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    IgxChipComponent.prototype.onChipDragClicked = function (event) {
        var clickEventArgs = {
            originalEvent: event,
            owner: this,
            cancel: false
        };
        this.onClick.emit(clickEventArgs);
        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {
            this.changeSelection(!this.selected, event);
        }
    };
    // End chip igxDrag behavior
    /**
     * @hidden
     */
    // -----------------------------
    // Start chip igxDrop behavior
    IgxChipComponent.prototype.onChipDragEnterHandler = function (event) {
        if (this.dragDirective === event.drag || !event.drag.data || !event.drag.data.chip) {
            return;
        }
        var eventArgs = {
            owner: this,
            dragChip: event.drag.data.chip,
            originalEvent: event
        };
        this.onDragEnter.emit(eventArgs);
    };
    /**
     * @hidden
     */
    IgxChipComponent.prototype.onChipDrop = function (event) {
        // Cancel the default drop logic
        event.cancel = true;
    };
    IgxChipComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxChipComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxChipComponent.prototype, "data", void 0);
    __decorate([
        Input()
    ], IgxChipComponent.prototype, "draggable", void 0);
    __decorate([
        Input()
    ], IgxChipComponent.prototype, "animateOnRelease", void 0);
    __decorate([
        Input()
    ], IgxChipComponent.prototype, "hideBaseOnDrag", void 0);
    __decorate([
        Input()
    ], IgxChipComponent.prototype, "removable", void 0);
    __decorate([
        Input()
    ], IgxChipComponent.prototype, "removeIcon", void 0);
    __decorate([
        Input()
    ], IgxChipComponent.prototype, "selectable", void 0);
    __decorate([
        Input()
    ], IgxChipComponent.prototype, "selectIcon", void 0);
    __decorate([
        Input()
    ], IgxChipComponent.prototype, "class", void 0);
    __decorate([
        Input()
    ], IgxChipComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], IgxChipComponent.prototype, "selected", null);
    __decorate([
        Output()
    ], IgxChipComponent.prototype, "selectedChange", void 0);
    __decorate([
        Input()
    ], IgxChipComponent.prototype, "color", null);
    __decorate([
        Output()
    ], IgxChipComponent.prototype, "onMoveStart", void 0);
    __decorate([
        Output()
    ], IgxChipComponent.prototype, "onMoveEnd", void 0);
    __decorate([
        Output()
    ], IgxChipComponent.prototype, "onRemove", void 0);
    __decorate([
        Output()
    ], IgxChipComponent.prototype, "onClick", void 0);
    __decorate([
        Output()
    ], IgxChipComponent.prototype, "onSelection", void 0);
    __decorate([
        Output()
    ], IgxChipComponent.prototype, "onSelectionDone", void 0);
    __decorate([
        Output()
    ], IgxChipComponent.prototype, "onKeyDown", void 0);
    __decorate([
        Output()
    ], IgxChipComponent.prototype, "onDragEnter", void 0);
    __decorate([
        HostBinding('attr.class')
    ], IgxChipComponent.prototype, "hostClass", null);
    __decorate([
        ViewChild('chipArea', { read: IgxDragDirective, static: true })
    ], IgxChipComponent.prototype, "dragDirective", void 0);
    __decorate([
        ViewChild('chipArea', { read: ElementRef, static: true })
    ], IgxChipComponent.prototype, "chipArea", void 0);
    __decorate([
        ViewChild('selectContainer', { read: ElementRef, static: true })
    ], IgxChipComponent.prototype, "selectContainer", void 0);
    __decorate([
        ViewChild('defaultRemoveIcon', { read: TemplateRef, static: true })
    ], IgxChipComponent.prototype, "defaultRemoveIcon", void 0);
    __decorate([
        ViewChild('defaultSelectIcon', { read: TemplateRef, static: true })
    ], IgxChipComponent.prototype, "defaultSelectIcon", void 0);
    IgxChipComponent = __decorate([
        Component({
            selector: 'igx-chip',
            template: "<div #chipArea class=\"igx-chip__item\"\n    [attr.tabindex]=\"chipTabindex\"\n    (keydown)=\"onChipKeyDown($event)\"\n    [igxDrag]=\"{chip: this}\"\n    [hideBaseOnDrag]=\"hideBaseOnDrag\"\n    [ghostClass]=\"ghostClass\"\n    (dragStart)=\"onChipDragStart($event)\"\n    (dragEnd)=\"onChipDragEnd()\"\n    (transitioned)=\"onChipMoveEnd($event)\"\n    (dragClick)=\"onChipDragClicked($event)\"\n    igxDrop\n    (enter)=\"onChipDragEnterHandler($event)\"\n    (dropped)=\"onChipDrop($event)\">\n\n    <div #selectContainer [ngClass]=\"selectClass(selected)\">\n        <ng-container *ngTemplateOutlet=\"selectIconTemplate\"></ng-container>\n    </div>\n\n    <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n\n    <div class=\"igx-chip__content\">\n        <ng-content></ng-content>\n    </div>\n\n    <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n\n    <div class=\"igx-chip__remove\" *ngIf=\"removable\"\n        tabindex=\"0\"\n        (keydown)=\"onRemoveBtnKeyDown($event)\"\n        (pointerdown)=\"onRemoveMouseDown($event)\"\n        (mousedown)=\"onRemoveMouseDown($event)\"\n        (click)=\"onRemoveClick($event)\"\n        (touchmove)=\"onRemoveTouchMove()\"\n        (touchend)=\"onRemoveTouchEnd($event)\">\n        <ng-container *ngTemplateOutlet=\"removeButtonTemplate\"></ng-container>\n    </div>\n</div>\n\n<ng-template #defaultSelectIcon>\n    <igx-icon>done</igx-icon>\n</ng-template>\n\n<ng-template #defaultRemoveIcon>\n    <igx-icon>cancel</igx-icon>\n</ng-template>\n"
        }),
        __param(3, Optional()), __param(3, Inject(DisplayDensityToken))
    ], IgxChipComponent);
    return IgxChipComponent;
}(DisplayDensityBase));
export { IgxChipComponent };
//# sourceMappingURL=data:application/json;base64,
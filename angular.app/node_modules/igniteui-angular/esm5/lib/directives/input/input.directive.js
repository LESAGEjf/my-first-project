import { __decorate, __param, __values } from "tslib";
import { AfterViewInit, ChangeDetectorRef, Directive, ElementRef, HostBinding, HostListener, Inject, Input, OnDestroy, Optional, Self } from '@angular/core';
import { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';
import { IgxInputGroupBase } from '../../input-group/input-group.common';
var nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];
export var IgxInputState;
(function (IgxInputState) {
    IgxInputState[IgxInputState["INITIAL"] = 0] = "INITIAL";
    IgxInputState[IgxInputState["VALID"] = 1] = "VALID";
    IgxInputState[IgxInputState["INVALID"] = 2] = "INVALID";
})(IgxInputState || (IgxInputState = {}));
var IgxInputDirective = /** @class */ (function () {
    function IgxInputDirective(inputGroup, ngModel, formControl, element, cdr) {
        this.inputGroup = inputGroup;
        this.ngModel = ngModel;
        this.formControl = formControl;
        this.element = element;
        this.cdr = cdr;
        this._valid = IgxInputState.INITIAL;
        /**
         * Sets/gets whether the `"igx-input-group__input"` class is added to the host element.
         * Default value is `false`.
         * ```typescript
         * this.igxInput.isInput = true;
         * ```
         * ```typescript
         * let isCLassAdded = this.igxInput.isInput;
         * ```
         * @memberof IgxInputDirective
         */
        this.isInput = false;
        /**
         * Sets/gets whether the `"class.igx-input-group__textarea"` class is added to the host element.
         * Default value is `false`.
         * ```typescript
         * this.igxInput.isTextArea = true;
         * ```
         * ```typescript
         * let isCLassAdded = this.igxInput.isTextArea;
         * ```
         * @memberof IgxInputDirective
         */
        this.isTextArea = false;
    }
    Object.defineProperty(IgxInputDirective.prototype, "ngControl", {
        get: function () {
            return this.ngModel ? this.ngModel : this.formControl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputDirective.prototype, "value", {
        /**
         * Gets the `value` propery.
         * ```typescript
         * @ViewChild('igxInput', {read: IgxInputDirective})
         *  public igxInput: IgxInputDirective;
         * let inputValue = this.igxInput.value;
         * ```
         * @memberof IgxInputDirective
         */
        get: function () {
            return this.nativeElement.value;
        },
        /**
         * Sets the `value` property.
         * ```html
         * <input-group>
         *  <input igxInput #igxInput [value]="'IgxInput Value'">
         * </input-group>
         * ```
         * @memberof IgxInputDirective
         */
        set: function (value) {
            this.nativeElement.value = value;
            this.checkValidity();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputDirective.prototype, "disabled", {
        /**
         * Gets the `disabled` property
         * ```typescript
         * @ViewChild('igxInput', {read: IgxInputDirective})
         *  public igxInput: IgxInputDirective;
         * let isDisabled = this.igxInput.disabled;
         * ```
         * @memberof IgxInputDirective
         */
        get: function () {
            return this.nativeElement.hasAttribute('disabled');
        },
        /**
         * Sets the `disabled` property.
         * ```html
         * <input-group>
         *  <input igxInput #igxInput [disabled]="true">
         * </input-group>
         * ```
         * @memberof IgxInputDirective
         */
        set: function (value) {
            this.nativeElement.disabled = value;
            this.inputGroup.disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputDirective.prototype, "required", {
        /**
         * Gets whether the igxInput is required.
         * ```typescript
         * let isRequired = this.igxInput.required;
         * ```
         * @memberof IgxInputDirective
         */
        get: function () {
            return this.nativeElement.hasAttribute('required');
        },
        /**
         * Sets the `required` property.
         * ```html
         * <input-group>
         *  <input igxInput #igxInput [required]="true">
         * </input-group>
         * ```
         * @memberof IgxInputDirective
         */
        set: function (value) {
            if (typeof value === 'boolean') {
                this.nativeElement.required = this.inputGroup.isRequired = value;
                if (value && !this.nativeElement.checkValidity()) {
                    this._valid = IgxInputState.INVALID;
                }
                else {
                    this._valid = IgxInputState.INITIAL;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     *@hidden
     */
    IgxInputDirective.prototype.onFocus = function (event) {
        this.inputGroup.isFocused = true;
    };
    /**
     *@hidden
     */
    IgxInputDirective.prototype.onBlur = function (event) {
        this.inputGroup.isFocused = false;
        this._valid = IgxInputState.INITIAL;
        if (this.ngControl) {
            if (!this.ngControl.valid) {
                this._valid = IgxInputState.INVALID;
            }
        }
        else if (this._hasValidators() && !this.nativeElement.checkValidity()) {
            this._valid = IgxInputState.INVALID;
        }
    };
    /**
     *@hidden
     */
    IgxInputDirective.prototype.onInput = function () {
        this.checkValidity();
    };
    /**
     *@hidden
     */
    IgxInputDirective.prototype.ngAfterViewInit = function () {
        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');
        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');
        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');
        // Make sure we do not invalidate the input on init
        if (!this.ngControl) {
            this._valid = IgxInputState.INITIAL;
        }
        // Also check the control's validators for required
        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {
            var validation = this.ngControl.control.validator({});
            this.inputGroup.isRequired = validation && validation.required;
        }
        var elTag = this.nativeElement.tagName.toLowerCase();
        if (elTag === 'textarea') {
            this.isTextArea = true;
        }
        else {
            this.isInput = true;
        }
        if (this.ngControl) {
            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));
        }
        this.cdr.detectChanges();
    };
    /**
     *@hidden
     */
    IgxInputDirective.prototype.ngOnDestroy = function () {
        if (this._statusChanges$) {
            this._statusChanges$.unsubscribe();
        }
    };
    /**
     * Sets a focus on the igxInput.
     * ```typescript
     * this.igxInput.focus();
     * ```
     * @memberof IgxInputDirective
     */
    IgxInputDirective.prototype.focus = function () {
        this.nativeElement.focus();
    };
    Object.defineProperty(IgxInputDirective.prototype, "nativeElement", {
        /**
         * Gets the `nativeElement` of the igxInput.
         * ```typescript
         * let igxInputNativeElement = this.igxInput.nativeElement;
         * ```
         * @memberof IgxInputDirective
         */
        get: function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *@hidden
     */
    IgxInputDirective.prototype.onStatusChanged = function () {
        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {
            if (this.ngControl.control.touched || this.ngControl.control.dirty) {
                //  TODO: check the logic when control is touched or dirty
                if (this.inputGroup.isFocused) {
                    // the user is still typing in the control
                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;
                }
                else {
                    // the user had touched the control previously but now the value is changing due to changes in the form
                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;
                }
            }
            else {
                //  if control is untouched and pristine its state is initial. This is when user did not interact
                //  with the input or when form/control is reset
                this._valid = IgxInputState.INITIAL;
            }
        }
    };
    Object.defineProperty(IgxInputDirective.prototype, "hasPlaceholder", {
        /**
         * Gets whether the igxInput has a placeholder.
         * ```typescript
         * let hasPlaceholder = this.igxInput.hasPlaceholder;
         * ```
         * @memberof IgxInputDirective
         */
        get: function () {
            return this.nativeElement.hasAttribute('placeholder');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputDirective.prototype, "placeholder", {
        /**
         * Gets the placeholder element of the igxInput.
         * ```typescript
         * let igxInputPlaceholder = this.igxInput.placeholder;
         * ```
         * @memberof IgxInputDirective
         */
        get: function () {
            return this.nativeElement.placeholder;
        },
        enumerable: true,
        configurable: true
    });
    IgxInputDirective.prototype._hasValidators = function () {
        var e_1, _a;
        try {
            for (var nativeValidationAttributes_1 = __values(nativeValidationAttributes), nativeValidationAttributes_1_1 = nativeValidationAttributes_1.next(); !nativeValidationAttributes_1_1.done; nativeValidationAttributes_1_1 = nativeValidationAttributes_1.next()) {
                var nativeValidationAttribute = nativeValidationAttributes_1_1.value;
                if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (nativeValidationAttributes_1_1 && !nativeValidationAttributes_1_1.done && (_a = nativeValidationAttributes_1.return)) _a.call(nativeValidationAttributes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);
    };
    Object.defineProperty(IgxInputDirective.prototype, "focused", {
        /**
         * Gets whether the igxInput is focused.
         * ```typescript
         * let isFocused = this.igxInput.focused;
         * ```
         * @memberof IgxInputDirective
         */
        get: function () {
            return this.inputGroup.isFocused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputDirective.prototype, "valid", {
        /**
         * Gets the state of the igxInput.
         * ```typescript
         * let igxInputState = this.igxInput.valid;
         * ```
         * @memberof IgxInputDirective
         */
        get: function () {
            return this._valid;
        },
        /**
         * Sets the state of the igxInput.
         * ```typescript
         * this.igxInput.valid = IgxInputState.INVALID;
         * ```
         * @memberof IgxInputDirective
         */
        set: function (value) {
            this._valid = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputDirective.prototype, "isValid", {
        /**
         * Gets whether the igxInput is valid.
         * ```typescript
         * let valid = this.igxInput.isValid;
         * ```
         * @memberof IgxInputDirective
         */
        get: function () {
            return this.valid !== IgxInputState.INVALID;
        },
        enumerable: true,
        configurable: true
    });
    IgxInputDirective.prototype.checkValidity = function () {
        if (!this.ngControl && this._hasValidators()) {
            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;
        }
    };
    IgxInputDirective.ctorParameters = function () { return [
        { type: IgxInputGroupBase },
        { type: NgModel, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgModel,] }] },
        { type: FormControlName, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [FormControlName,] }] },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input('value')
    ], IgxInputDirective.prototype, "value", null);
    __decorate([
        Input()
    ], IgxInputDirective.prototype, "disabled", null);
    __decorate([
        Input()
    ], IgxInputDirective.prototype, "required", null);
    __decorate([
        HostBinding('class.igx-input-group__input')
    ], IgxInputDirective.prototype, "isInput", void 0);
    __decorate([
        HostBinding('class.igx-input-group__textarea')
    ], IgxInputDirective.prototype, "isTextArea", void 0);
    __decorate([
        HostListener('focus', ['$event'])
    ], IgxInputDirective.prototype, "onFocus", null);
    __decorate([
        HostListener('blur', ['$event'])
    ], IgxInputDirective.prototype, "onBlur", null);
    __decorate([
        HostListener('input')
    ], IgxInputDirective.prototype, "onInput", null);
    IgxInputDirective = __decorate([
        Directive({
            selector: '[igxInput]',
            exportAs: 'igxInput'
        }),
        __param(1, Optional()), __param(1, Self()), __param(1, Inject(NgModel)),
        __param(2, Optional()), __param(2, Self()), __param(2, Inject(FormControlName))
    ], IgxInputDirective);
    return IgxInputDirective;
}());
export { IgxInputDirective };
//# sourceMappingURL=data:application/json;base64,
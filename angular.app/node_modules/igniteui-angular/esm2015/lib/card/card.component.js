import { __decorate, __param } from "tslib";
import { CommonModule } from '@angular/common';
import { Component, Directive, HostBinding, Optional, Inject, Input, NgModule } from '@angular/core';
import { IgxButtonModule } from '../directives/button/button.directive';
let NEXT_ID = 0;
/**
 * IgxCardMedia is container for the card media section.
 * Use it to wrap images and videos.
 */
let IgxCardMediaDirective = class IgxCardMediaDirective {
    constructor() {
        /**
         * @hidden
         */
        this.cssClass = 'igx-card__media';
        /**
         * An @Input property that sets the `width` and `min-width` style property
         * of the media container. If not provided it will be set to `auto`.
         * ```html
         * <igx-card-media width="300px"></igx-card-media>
         * ```
         */
        this.width = 'auto';
        /**
         * An @Input property that sets the `height` style property of the media container.
         * If not provided it will be set to `auto`.
         * ```html
         * <igx-card-media height="50%"></igx-card-media>
         * ```
         */
        this.height = 'auto';
        /**
         * An @Input property that sets the `role` attribute of the media container.
         */
        this.role = 'img';
    }
};
__decorate([
    HostBinding('class.igx-card__media')
], IgxCardMediaDirective.prototype, "cssClass", void 0);
__decorate([
    HostBinding('style.width'),
    HostBinding('style.min-width'),
    Input()
], IgxCardMediaDirective.prototype, "width", void 0);
__decorate([
    HostBinding('style.height'),
    Input()
], IgxCardMediaDirective.prototype, "height", void 0);
__decorate([
    HostBinding('attr.role'),
    Input()
], IgxCardMediaDirective.prototype, "role", void 0);
IgxCardMediaDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: 'igx-card-media'
    })
], IgxCardMediaDirective);
export { IgxCardMediaDirective };
/**
 * IgxCardHeader is container for the card header
 */
let IgxCardHeaderComponent = class IgxCardHeaderComponent {
    constructor() {
        /**
         * @hidden
         */
        this.cssClass = 'igx-card-header';
        /**
         * An @Input property that sets the layout style of the header.
         * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.
         * ```html
         * <igx-card-header [vertical]="true"></igx-card-header>
         * ```
         */
        this.vertical = false;
        /**
         * An @Input property that sets the value of the `role` attribute of the card header.
         * By default the value is set to `header`.
         * ```html
         * <igx-card-header role="header"></igx-card-header>
         * ```
         */
        this.role = 'header';
    }
};
__decorate([
    HostBinding('class.igx-card-header')
], IgxCardHeaderComponent.prototype, "cssClass", void 0);
__decorate([
    HostBinding('class.igx-card-header--vertical'),
    Input()
], IgxCardHeaderComponent.prototype, "vertical", void 0);
__decorate([
    HostBinding('attr.role')
], IgxCardHeaderComponent.prototype, "role", void 0);
IgxCardHeaderComponent = __decorate([
    Component({
        selector: 'igx-card-header',
        template: "<div class=\"igx-card-header__thumbnail\">\n    <ng-content select=\"igx-avatar, igx-card-media, [igxCardThumbnail]\"></ng-content>\n</div>\n\n<div class=\"igx-card-header__titles\">\n    <ng-content select=\"\n        [igxCardHeaderTitle],\n        [igxCardHeaderSubtitle],\n        .igx-card-header__title,\n        .igx-card-header__subtitle\">\n    </ng-content>\n</div>\n\n<ng-content></ng-content>\n"
    })
], IgxCardHeaderComponent);
export { IgxCardHeaderComponent };
/**
 * IgxCardThumbnail is container for the card thumbnail section.
 * Use it to wrap anything you want to be used as a thumbnail.
 */
let IgxCardThumbnailDirective = class IgxCardThumbnailDirective {
};
IgxCardThumbnailDirective = __decorate([
    Directive({
        selector: '[igxCardThumbnail]'
    })
], IgxCardThumbnailDirective);
export { IgxCardThumbnailDirective };
/**
 * igxCardHeaderTitle is used to denote the header title in a card.
 * Use it to tag text nodes.
 */
let IgxCardHeaderTitleDirective = class IgxCardHeaderTitleDirective {
    constructor() {
        /**
         * @hidden
         */
        this.cssClass = 'igx-card__header__title';
    }
};
__decorate([
    HostBinding('class.igx-card-header__title')
], IgxCardHeaderTitleDirective.prototype, "cssClass", void 0);
IgxCardHeaderTitleDirective = __decorate([
    Directive({
        selector: '[igxCardHeaderTitle]'
    })
], IgxCardHeaderTitleDirective);
export { IgxCardHeaderTitleDirective };
/**
 * igxCardHeaderSubtitle is used to denote the header subtitle in a card.
 * Use it to tag text nodes.
 */
let IgxCardHeaderSubtitleDirective = class IgxCardHeaderSubtitleDirective {
    constructor() {
        /**
         * @hidden
         */
        this.cssClass = 'igx-card-header__subtitle';
    }
};
__decorate([
    HostBinding('class.igx-card-header__subtitle')
], IgxCardHeaderSubtitleDirective.prototype, "cssClass", void 0);
IgxCardHeaderSubtitleDirective = __decorate([
    Directive({
        selector: '[igxCardHeaderSubtitle]'
    })
], IgxCardHeaderSubtitleDirective);
export { IgxCardHeaderSubtitleDirective };
/**
 * IgxCardContent is container for the card content.
 */
let IgxCardContentDirective = class IgxCardContentDirective {
    constructor() {
        /**
         * @hidden
         */
        this.cssClass = 'igx-card-content';
    }
};
__decorate([
    HostBinding('class.igx-card-content')
], IgxCardContentDirective.prototype, "cssClass", void 0);
IgxCardContentDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: 'igx-card-content'
    })
], IgxCardContentDirective);
export { IgxCardContentDirective };
/**
 * IgxCardFooter is container for the card footer
 */
let IgxCardFooterDirective = class IgxCardFooterDirective {
    constructor() {
        /**
         * An @Input property that sets the value of the `role` attribute of the card footer.
         * By default the value is set to `footer`.
         * ```html
         * <igx-card-footer role="footer"></igx-card-footer>
         * ```
         */
        this.role = 'footer';
    }
};
__decorate([
    HostBinding('attr.role'),
    Input()
], IgxCardFooterDirective.prototype, "role", void 0);
IgxCardFooterDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: 'igx-card-footer'
    })
], IgxCardFooterDirective);
export { IgxCardFooterDirective };
/**
 * **Ignite UI for Angular Card** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/card.html)
 *
 * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are
 * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.
 *
 * Example:
 * ```html
 * <igx-card>
 *   <igx-card-header>
 *     <h3 igxCardHeaderTitle>{{title}}</h3>
 *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>
 *   </igx-card-header>
 *   <igx-card-actions>
 *       <button igxButton igxRipple>Share</button>
 *       <button igxButton igxRipple>Play Album</button>
 *   </igx-card-actions>
 * </igx-card>
 * ```
 */
export var IgxCardType;
(function (IgxCardType) {
    IgxCardType["ELEVATED"] = "elevated";
    IgxCardType["OUTLINED"] = "outlined";
})(IgxCardType || (IgxCardType = {}));
let IgxCardComponent = class IgxCardComponent {
    constructor() {
        /**
         * Sets/gets the `id` of the card.
         * If not set, `id` will have value `"igx-card-0"`;
         * ```html
         * <igx-card id = "my-first-card"></igx-card>
         * ```
         * ```typescript
         * let cardId =  this.card.id;
         * ```
         * @memberof IgxCardComponent
         */
        this.id = `igx-card-${NEXT_ID++}`;
        /**
         * An @Input property that sets the value of the `role` attribute of the card.
         * By default the value is set to `group`.
         * ```html
         * <igx-card role="group"></igx-card>
         * ```
         */
        this.role = 'group';
        /**
         * An @Input property that sets the value of the `type` attribute of the card.
         * By default the value is set to `default`. You can make the card use the
         * outlined style by setting the value to `outlined`.
         * ```html
         * <igx-card type="outlined"></igx-card>
         * ```
         */
        this.type = IgxCardType.ELEVATED;
        /**
         * An @Input property that sets the value of the `horizontal` attribute of the card.
         * Setting this to `true` will make the different card sections align horizontally,
         * essentially flipping the card to the side.
         * ```html
         * <igx-card [horizontal]="true"></igx-card>
         * ```
         */
        this.horizontal = false;
    }
    /**
     * A getter which will return true if the card type is `outlined`.
     */
    get isOutlinedCard() {
        return this.type === IgxCardType.OUTLINED;
    }
};
__decorate([
    HostBinding('attr.id'),
    Input()
], IgxCardComponent.prototype, "id", void 0);
__decorate([
    HostBinding('attr.role'),
    Input()
], IgxCardComponent.prototype, "role", void 0);
__decorate([
    HostBinding('class.igx-card'),
    Input()
], IgxCardComponent.prototype, "type", void 0);
__decorate([
    HostBinding('class.igx-card--outlined')
], IgxCardComponent.prototype, "isOutlinedCard", null);
__decorate([
    HostBinding('class.igx-card--horizontal'),
    Input()
], IgxCardComponent.prototype, "horizontal", void 0);
IgxCardComponent = __decorate([
    Component({
        selector: 'igx-card',
        template: "<ng-container select='igx-card-media'></ng-container>\n\n<ng-container select='igx-card-header'></ng-container>\n<ng-container select='igx-card-content'>\n    <ng-content></ng-content>\n</ng-container>\n\n<ng-container select='igx-card-actions'></ng-container>\n"
    })
], IgxCardComponent);
export { IgxCardComponent };
export var IgxCardActionsLayout;
(function (IgxCardActionsLayout) {
    IgxCardActionsLayout["START"] = "start";
    IgxCardActionsLayout["JUSTIFY"] = "justify";
})(IgxCardActionsLayout || (IgxCardActionsLayout = {}));
/**
 * IgxCardActions is container for the card actions.
 */
let IgxCardActionsComponent = class IgxCardActionsComponent {
    constructor(card) {
        this.card = card;
        this.isVerticalSet = false;
        /**
         * An @Input property that sets the layout style of the actions.
         * By default icons and icon buttons, as well as regular buttons
         * are split into two containers, which are then positioned on both ends
         * of the card-actions area.
         * You can justify the elements in those groups so they are positioned equally
         * from one another taking up all the space available along the card actions axis.
         * ```html
         * <igx-card-actions layout="justify"></igx-card-actions>
         * ```
         */
        this.layout = IgxCardActionsLayout.START;
        /**
         * An @Input property that sets order of the buttons the actions area.
         * By default all icons/icon buttons are placed at the end of the action
         * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons
         * placed in the actions area.
         * If you want to reverse their positions so that icons appear first, use the `reverse`
         * attribute.
         * ```html
         * <igx-card-actions [reverse]="true"></igx-card-actions>
         * ```
         */
        this.reverse = false;
    }
    /**
     * A getter that returns `true` when the layout has been
     * set to `justify`.
     */
    get isJustifyLayout() {
        return this.layout === IgxCardActionsLayout.JUSTIFY;
    }
    ngOnChanges(changes) {
        for (const prop in changes) {
            if (prop === 'vertical') {
                this.isVerticalSet = true;
            }
        }
    }
    ngOnInit() {
        this.vertical = !this.isVerticalSet && this.card.horizontal;
    }
};
IgxCardActionsComponent.ctorParameters = () => [
    { type: IgxCardComponent, decorators: [{ type: Optional }, { type: Inject, args: [IgxCardComponent,] }] }
];
__decorate([
    HostBinding('class.igx-card-actions'),
    Input()
], IgxCardActionsComponent.prototype, "layout", void 0);
__decorate([
    HostBinding('class.igx-card-actions--vertical'),
    Input()
], IgxCardActionsComponent.prototype, "vertical", void 0);
__decorate([
    HostBinding('class.igx-card-actions--justify')
], IgxCardActionsComponent.prototype, "isJustifyLayout", null);
__decorate([
    HostBinding('class.igx-card-actions--reverse'),
    Input()
], IgxCardActionsComponent.prototype, "reverse", void 0);
IgxCardActionsComponent = __decorate([
    Component({
        // tslint:disable-next-line:directive-selector
        selector: 'igx-card-actions',
        template: "<div class=\"igx-card-actions__icons\">\n    <ng-content select=\"igx-icon, [igxButton='icon']\"></ng-content>\n</div>\n\n<div #buttons class=\"igx-card-actions__buttons\">\n    <ng-content select=\"[igxButton]\"></ng-content>\n</div>\n\n\n<ng-content></ng-content>\n"
    }),
    __param(0, Optional()), __param(0, Inject(IgxCardComponent))
], IgxCardActionsComponent);
export { IgxCardActionsComponent };
/**
 * @hidden
 */
let IgxCardModule = class IgxCardModule {
};
IgxCardModule = __decorate([
    NgModule({
        declarations: [
            IgxCardComponent,
            IgxCardHeaderComponent,
            IgxCardMediaDirective,
            IgxCardContentDirective,
            IgxCardActionsComponent,
            IgxCardFooterDirective,
            IgxCardHeaderTitleDirective,
            IgxCardHeaderSubtitleDirective,
            IgxCardThumbnailDirective,
        ],
        exports: [
            IgxCardComponent,
            IgxCardHeaderComponent,
            IgxCardMediaDirective,
            IgxCardContentDirective,
            IgxCardActionsComponent,
            IgxCardFooterDirective,
            IgxCardHeaderTitleDirective,
            IgxCardHeaderSubtitleDirective,
            IgxCardThumbnailDirective,
        ],
        imports: [CommonModule, IgxButtonModule]
    })
], IgxCardModule);
export { IgxCardModule };
//# sourceMappingURL=data:application/json;base64,
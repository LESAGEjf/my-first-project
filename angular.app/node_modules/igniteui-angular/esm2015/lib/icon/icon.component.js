import { __decorate } from "tslib";
import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';
import { IgxIconService } from './icon.service';
/**
 * **Ignite UI for Angular Icon** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)
 *
 * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons
 * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearance
 * of the icon.
 *
 * Example:
 * ```html
 * <igx-icon color="#00ff00" isActive="true">home</igx-icon>
 * ```
 */
let NEXT_ID = 0;
let IgxIconComponent = class IgxIconComponent {
    constructor(_el, iconService) {
        this._el = _el;
        this.iconService = iconService;
        /**
         *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.
         *```typescript
         *@ViewChild("MyIcon") public icon: IgxIconComponent;
         *constructor(private cdRef:ChangeDetectorRef) {}
         *ngAfterViewInit() {
         *    this.icon.cssClass = "";
         *    this.cdRef.detectChanges();
         *}
         * ```
         */
        this.cssClass = 'igx-icon';
        /**
         *  This allows you to disable the `aria-hidden` attribute. By default it's applied.
         *```typescript
         *@ViewChild("MyIcon") public icon: IgxIconComponent;
         *constructor(private cdRef:ChangeDetectorRef) {}
         *ngAfterViewInit() {
         *    this.icon.ariaHidden = false;
         *    this.cdRef.detectChanges();
         *}
         * ```
         */
        this.ariaHidden = true;
        /**
        *  An @Input property that sets the value of the `id` attribute.
        *```html
        *<igx-icon id="igx-icon-1" fontSet="material" color="blue" [isActive]="false">settings</igx-icon>
        *```
        */
        this.id = `igx-icon-${NEXT_ID++}`;
        /**
        *  An @Input property that allows you to disable the `active` property. By default it's applied.
        *```html
        *<igx-icon [isActive]="false" fontSet="material" color="blue">settings</igx-icon>
        *```
        */
        this.active = true;
        this.el = _el;
        this.font = this.iconService.defaultFontSet;
        this.iconService.registerFontSetAlias('material', 'material-icons');
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.updateIconClass();
    }
    /**
     *  An accessor that returns the value of the font property.
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let iconFont = this.icon.getFontSet;
     * }
     * ```
     */
    get getFontSet() {
        return this.font;
    }
    /**
     *  An accessor that returns the value of the active property.
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let iconActive = this.icon.getActive;
     * }
     * ```
     */
    get getActive() {
        return this.active;
    }
    /**
     *  An accessor that returns inactive property.
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let iconActive = this.icon.getInactive;
     * }
     * ```
     */
    get getInactive() {
        return !this.active;
    }
    /**
     *  An accessor that returns the opposite value of the `iconColor` property.
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let iconColor = this.icon.getIconColor;
     * }
     * ```
     */
    get getIconColor() {
        return this.iconColor;
    }
    /**
     *  An accessor that returns the value of the iconName property.
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let iconName = this.icon.getIconName;
     * }
     * ```
     */
    get getIconName() {
        return this.iconName;
    }
    /**
     *  An accessor that returns the key of the SVG image.
     *  The key consists of the fontSet and the iconName separated by underscore.
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let svgKey = this.icon.getSvgKey;
     * }
     * ```
     */
    get getSvgKey() {
        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {
            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);
        }
        return null;
    }
    /**
     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let iconTemplate = this.icon.template;
     * }
     * ```
     */
    get template() {
        if (this.iconName) {
            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {
                return this.svgImage;
            }
            return this.noLigature;
        }
        return this.explicitLigature;
    }
    /**
     * @hidden
     */
    updateIconClass() {
        const className = this.iconService.fontSetClassName(this.font);
        this.el.nativeElement.classList.add(className);
        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {
            this.el.nativeElement.classList.add(this.iconName);
        }
    }
};
IgxIconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: IgxIconService }
];
__decorate([
    ViewChild('noLigature', { read: TemplateRef, static: true })
], IgxIconComponent.prototype, "noLigature", void 0);
__decorate([
    ViewChild('explicitLigature', { read: TemplateRef, static: true })
], IgxIconComponent.prototype, "explicitLigature", void 0);
__decorate([
    ViewChild('svgImage', { read: TemplateRef, static: true })
], IgxIconComponent.prototype, "svgImage", void 0);
__decorate([
    HostBinding('class.igx-icon')
], IgxIconComponent.prototype, "cssClass", void 0);
__decorate([
    HostBinding('attr.aria-hidden')
], IgxIconComponent.prototype, "ariaHidden", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], IgxIconComponent.prototype, "id", void 0);
__decorate([
    Input('fontSet')
], IgxIconComponent.prototype, "font", void 0);
__decorate([
    Input('isActive')
], IgxIconComponent.prototype, "active", void 0);
__decorate([
    Input('color')
], IgxIconComponent.prototype, "iconColor", void 0);
__decorate([
    Input('name')
], IgxIconComponent.prototype, "iconName", void 0);
__decorate([
    HostBinding('class.igx-icon--inactive')
], IgxIconComponent.prototype, "getInactive", null);
__decorate([
    HostBinding('style.color')
], IgxIconComponent.prototype, "getIconColor", null);
IgxIconComponent = __decorate([
    Component({
        selector: 'igx-icon',
        template: "<ng-template #noLigature></ng-template>\n\n<ng-template #explicitLigature>\n    <ng-content></ng-content>\n</ng-template>\n\n<ng-template #svgImage>\n    <svg>\n        <use [attr.href]=\"getSvgKey\"></use>\n    </svg>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n"
    })
], IgxIconComponent);
export { IgxIconComponent };
//# sourceMappingURL=data:application/json;base64,
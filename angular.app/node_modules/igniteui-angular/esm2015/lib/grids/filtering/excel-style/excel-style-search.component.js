import { __decorate } from "tslib";
import { AfterViewInit, Component, ChangeDetectionStrategy, Input, ViewChild, ChangeDetectorRef, TemplateRef, Directive } from '@angular/core';
import { IgxInputDirective } from '../../../directives/input/input.directive';
import { DisplayDensity } from '../../../core/density';
import { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';
import { IgxListComponent } from '../../../list';
const SEARCH_LIST_HEIGHT = 250;
let IgxExcelStyleLoadingValuesTemplateDirective = class IgxExcelStyleLoadingValuesTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxExcelStyleLoadingValuesTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxExcelStyleLoadingValuesTemplateDirective = __decorate([
    Directive({
        selector: '[igxExcelStyleLoading]'
    })
], IgxExcelStyleLoadingValuesTemplateDirective);
export { IgxExcelStyleLoadingValuesTemplateDirective };
/**
 * @hidden
 */
let IgxExcelStyleSearchComponent = class IgxExcelStyleSearchComponent {
    constructor(cdr) {
        this.cdr = cdr;
    }
    get isLoading() {
        return this._isLoading;
    }
    set isLoading(value) {
        this._isLoading = value;
        if (!this.cdr.destroyed) {
            this.cdr.detectChanges();
        }
    }
    get valuesLoadingTemplate() {
        if (this.grid.excelStyleLoadingValuesTemplateDirective) {
            return this.grid.excelStyleLoadingValuesTemplateDirective.template;
        }
        else {
            return this.defaultExcelStyleLoadingValuesTemplate;
        }
    }
    ngAfterViewInit() {
        this.refreshSize();
    }
    refreshSize() {
        requestAnimationFrame(() => {
            this.virtDir.recalcUpdateSizes();
        });
    }
    clearInput() {
        this.searchValue = null;
    }
    onCheckboxChange(eventArgs) {
        const selectedIndex = this.data.indexOf(eventArgs.checkbox.value);
        if (selectedIndex === 0) {
            this.data.forEach(element => {
                element.isSelected = eventArgs.checked;
                this.data[0].indeterminate = false;
            });
        }
        else {
            eventArgs.checkbox.value.isSelected = eventArgs.checked;
            if (!this.data.slice(1, this.data.length).find(el => el.isSelected === false)) {
                this.data[0].indeterminate = false;
                this.data[0].isSelected = true;
            }
            else if (!this.data.slice(1, this.data.length).find(el => el.isSelected === true)) {
                this.data[0].indeterminate = false;
                this.data[0].isSelected = false;
            }
            else {
                this.data[0].indeterminate = true;
            }
        }
        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();
    }
    get itemSize() {
        let itemSize = '40px';
        switch (this.displayDensity) {
            case DisplayDensity.cosy:
                itemSize = '32px';
                break;
            case DisplayDensity.compact:
                itemSize = '24px';
                break;
            default: break;
        }
        return itemSize;
    }
    get listSize() {
        return this.inline ? null : SEARCH_LIST_HEIGHT;
    }
    get containerSize() {
        return this.inline ? this.list.element.nativeElement.offsetHeight : SEARCH_LIST_HEIGHT;
    }
};
IgxExcelStyleSearchComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
__decorate([
    Input()
], IgxExcelStyleSearchComponent.prototype, "grid", void 0);
__decorate([
    Input()
], IgxExcelStyleSearchComponent.prototype, "data", void 0);
__decorate([
    Input()
], IgxExcelStyleSearchComponent.prototype, "inline", void 0);
__decorate([
    Input()
], IgxExcelStyleSearchComponent.prototype, "column", void 0);
__decorate([
    ViewChild('input', { read: IgxInputDirective, static: true })
], IgxExcelStyleSearchComponent.prototype, "searchInput", void 0);
__decorate([
    ViewChild('list', { read: IgxListComponent, static: true })
], IgxExcelStyleSearchComponent.prototype, "list", void 0);
__decorate([
    Input()
], IgxExcelStyleSearchComponent.prototype, "displayDensity", void 0);
__decorate([
    ViewChild(IgxForOfDirective, { static: true })
], IgxExcelStyleSearchComponent.prototype, "virtDir", void 0);
__decorate([
    ViewChild('defaultExcelStyleLoadingValuesTemplate', { read: TemplateRef, static: true })
], IgxExcelStyleSearchComponent.prototype, "defaultExcelStyleLoadingValuesTemplate", void 0);
IgxExcelStyleSearchComponent = __decorate([
    Component({
        changeDetection: ChangeDetectionStrategy.OnPush,
        preserveWhitespaces: false,
        selector: 'igx-excel-style-search',
        template: "<igx-input-group\n            type=\"box\"\n            [displayDensity]=\"displayDensity\"\n            [supressInputAutofocus]=\"true\">\n    <igx-icon igxPrefix>search</igx-icon>\n    <input\n        #input\n        igxInput\n        tabindex=\"0\"\n        [(ngModel)]=\"searchValue\"\n        [placeholder]=\"column.grid.resourceStrings.igx_grid_excel_search_placeholder\"\n        autocomplete=\"off\"/>\n    <igx-icon\n        igxSuffix\n        *ngIf=\"searchValue || searchValue === 0\"\n        (click)=\"clearInput()\"\n        tabindex=\"0\">\n        clear\n    </igx-icon>\n</igx-input-group>\n\n<igx-list #list [displayDensity]=\"displayDensity\" [style.height.px]=\"listSize\" [isLoading]=\"isLoading\">\n    <div [style.overflow]=\"'hidden'\" [style.position]=\"'relative'\">\n        <igx-list-item\n            *igxFor=\"let item of data | excelStyleSearchFilter: searchValue; scrollOrientation : 'vertical'; containerSize: containerSize; itemSize: itemSize\">\n            <igx-checkbox\n            [value]=\"item\"\n            tabindex=\"-1\"\n            [checked]=\"item.isSelected\"\n            [disableRipple]=\"true\"\n            [indeterminate]=\"item.indeterminate\"\n            [disableTransitions]=\"true\"\n            (change)=\"onCheckboxChange($event)\">\n                {{ column.formatter && !item.isSpecial ? column.formatter(item.label) : column.dataType === 'number' ? (item.label | igxdecimal:\n                    column.grid.locale) : column.dataType === 'date' ? (item.label | igxdate: column.grid.locale) : item.label }}\n            </igx-checkbox>\n        </igx-list-item>\n    </div>\n\n    <ng-template igxDataLoading>        \n        <div class=\"igx-excel-filter__loading\">\n            <ng-container *ngTemplateOutlet=\"valuesLoadingTemplate\">\n            </ng-container>\n        </div>\n    </ng-template>\n</igx-list>\n\n<ng-template #defaultExcelStyleLoadingValuesTemplate>\n    <igx-circular-bar [indeterminate]=\"true\">\n    </igx-circular-bar>\n</ng-template>\n"
    })
], IgxExcelStyleSearchComponent);
export { IgxExcelStyleSearchComponent };
//# sourceMappingURL=data:application/json;base64,
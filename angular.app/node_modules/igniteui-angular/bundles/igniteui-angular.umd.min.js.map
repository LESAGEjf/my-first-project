{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://igniteui-angular/lib/animations/easings.ts","ng://igniteui-angular/lib/animations/fade/index.ts","ng://igniteui-angular/lib/animations/flip/index.ts","ng://igniteui-angular/lib/animations/rotate/index.ts","ng://igniteui-angular/lib/animations/misc/shake.ts","ng://igniteui-angular/lib/animations/misc/pulsate.ts","ng://igniteui-angular/lib/animations/scale/index.ts","ng://igniteui-angular/lib/animations/slide/index.ts","ng://igniteui-angular/lib/animations/swing/index.ts","ng://igniteui-angular/lib/animations/grow/index.ts","ng://igniteui-angular/lib/core/navigation/nav.service.ts","ng://igniteui-angular/lib/core/navigation/directives.ts","ng://igniteui-angular/lib/core/utils.ts","ng://igniteui-angular/lib/data-operations/sorting-expression.interface.ts","ng://igniteui-angular/lib/data-operations/operations.ts","ng://igniteui-angular/lib/data-operations/paging-state.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expression.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expressions-tree.ts","ng://igniteui-angular/lib/data-operations/sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/grouping-strategy.ts","ng://igniteui-angular/lib/services/transaction/transaction.ts","ng://igniteui-angular/lib/data-operations/data-util.ts","ng://igniteui-angular/lib/data-operations/filtering-strategy.ts","ng://igniteui-angular/lib/services/csv/csv-exporter-options.ts","ng://igniteui-angular/lib/services/exporter-common/export-utilities.ts","ng://igniteui-angular/lib/grids/api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","ng://igniteui-angular/lib/services/exporter-common/base-export-service.ts","ng://igniteui-angular/lib/services/csv/char-separated-value-data.ts","ng://igniteui-angular/lib/services/exporter-common/exporter-options-base.ts","ng://igniteui-angular/lib/services/csv/csv-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-enums.ts","ng://igniteui-angular/lib/services/excel/excel-strings.ts","ng://igniteui-angular/lib/services/overlay/utilities.ts","ng://igniteui-angular/lib/services/excel/excel-files.ts","ng://igniteui-angular/lib/services/excel/excel-folders.ts","ng://igniteui-angular/lib/services/excel/excel-elements-factory.ts","ng://igniteui-angular/lib/services/excel/worksheet-data-dictionary.ts","ng://igniteui-angular/lib/services/excel/worksheet-data.ts","ng://igniteui-angular/lib/services/excel/excel-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-exporter-options.ts","ng://igniteui-angular/lib/services/overlay/position/global-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/NoOpScrollStrategy.ts","ng://igniteui-angular/lib/core/deprecateDecorators.ts","ng://igniteui-angular/lib/services/overlay/overlay.ts","ng://igniteui-angular/lib/drop-down/drop-down.common.ts","ng://igniteui-angular/lib/services/overlay/position/container-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/connected-positioning-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/base-fit-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/auto-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/elastic-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/absolute-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/block-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/close-scroll-strategy.ts","ng://igniteui-angular/lib/services/transaction/base-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-hierarchical-transaction.ts","ng://igniteui-angular/lib/directives/toggle/toggle.directive.ts","ng://igniteui-angular/lib/core/displayDensity.ts","ng://igniteui-angular/lib/core/selection.ts","ng://igniteui-angular/lib/drop-down/drop-down-group.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.base.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.component.ts","ng://igniteui-angular/lib/drop-down/drop-down.base.ts","ng://igniteui-angular/lib/directives/for-of/display.container.ts","ng://igniteui-angular/lib/directives/for-of/base.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/horizontal.virtual.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/virtual.helper.component.ts","ng://igniteui-angular/lib/directives/scroll-inertia/scroll_inertia.directive.ts","ng://igniteui-angular/lib/directives/for-of/for_of.sync.service.ts","ng://igniteui-angular/lib/directives/for-of/for_of.directive.ts","ng://igniteui-angular/lib/directives/hint/hint.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-navigation.directive.ts","ng://igniteui-angular/lib/drop-down/index.ts","ng://igniteui-angular/lib/directives/input/input.directive.ts","ng://igniteui-angular/lib/input-group/input-group.common.ts","ng://igniteui-angular/lib/input-group/input-group.component.ts","ng://igniteui-angular/lib/directives/label/label.directive.ts","ng://igniteui-angular/lib/directives/prefix/prefix.directive.ts","ng://igniteui-angular/lib/directives/suffix/suffix.directive.ts","ng://igniteui-angular/lib/directives/divider/divider.directive.ts","ng://igniteui-angular/lib/directives/autocomplete/autocomplete.directive.ts","ng://igniteui-angular/lib/directives/button/button.directive.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-drop.directive.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-drop.strategy.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-handle.directive.ts","ng://igniteui-angular/lib/radio/radio.component.ts","ng://igniteui-angular/lib/directives/filter/filter.directive.ts","ng://igniteui-angular/lib/directives/focus/focus.directive.ts","ng://igniteui-angular/lib/directives/layout/layout.directive.ts","ng://igniteui-angular/lib/directives/mask/mask-helper.ts","ng://igniteui-angular/lib/directives/mask/mask.directive.ts","ng://igniteui-angular/lib/avatar/avatar.component.ts","ng://igniteui-angular/lib/directives/ripple/ripple.directive.ts","ng://igniteui-angular/lib/directives/radio/radio-group.directive.ts","ng://igniteui-angular/lib/directives/text-highlight/text-highlight.directive.ts","ng://igniteui-angular/lib/directives/text-selection/text-selection.directive.ts","ng://igniteui-angular/lib/directives/tooltip/tooltip.directive.ts","ng://igniteui-angular/lib/data-operations/filtering-condition.ts","ng://igniteui-angular/lib/data-operations/filtering-state.interface.ts","ng://igniteui-angular/lib/data-operations/groupby-record.interface.ts","ng://igniteui-angular/lib/icon/icon.service.ts","ng://igniteui-angular/lib/icon/icon.component.ts","ng://igniteui-angular/lib/icon/index.ts","ng://igniteui-angular/lib/badge/badge.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-header.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.common.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-body.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.directives.ts","ng://igniteui-angular/lib/buttonGroup/buttonGroup.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.module.ts","ng://igniteui-angular/lib/banner/banner.directives.ts","ng://igniteui-angular/lib/banner/banner.component.ts","ng://igniteui-angular/lib/core/dates/dateRange.ts","ng://igniteui-angular/lib/calendar/calendar.ts","ng://igniteui-angular/lib/calendar/calendar-base.ts","ng://igniteui-angular/lib/calendar/calendar.directives.ts","ng://igniteui-angular/lib/calendar/month-picker-base.ts","ng://igniteui-angular/lib/calendar/days-view/daysview-navigation.service.ts","ng://igniteui-angular/lib/calendar/months-view/months-view.component.ts","ng://igniteui-angular/lib/calendar/years-view/years-view.component.ts","ng://igniteui-angular/lib/calendar/days-view/day-item.component.ts","ng://igniteui-angular/lib/card/card.component.ts","ng://igniteui-angular/lib/calendar/days-view/days-view.component.ts","ng://igniteui-angular/lib/calendar/calendar.component.ts","ng://igniteui-angular/lib/calendar/month-picker/month-picker.component.ts","ng://igniteui-angular/lib/calendar/calendar.module.ts","ng://igniteui-angular/lib/carousel/slide.component.ts","ng://igniteui-angular/lib/carousel/carousel.directives.ts","ng://igniteui-angular/lib/core/i18n/resources.ts","ng://igniteui-angular/lib/core/i18n/grid-resources.ts","ng://igniteui-angular/lib/core/i18n/time-picker-resources.ts","ng://igniteui-angular/lib/core/i18n/paginator-resources.ts","ng://igniteui-angular/lib/core/i18n/carousel-resources.ts","ng://igniteui-angular/lib/carousel/carousel.component.ts","ng://igniteui-angular/lib/checkbox/checkbox.component.ts","ng://igniteui-angular/lib/combo/combo.component.ts","ng://igniteui-angular/lib/chips/chip.component.ts","ng://igniteui-angular/lib/chips/chips-area.component.ts","ng://igniteui-angular/lib/chips/chips.module.ts","ng://igniteui-angular/lib/combo/combo.directives.ts","ng://igniteui-angular/lib/combo/combo.api.ts","ng://igniteui-angular/lib/combo/combo-item.component.ts","ng://igniteui-angular/lib/combo/combo.common.ts","ng://igniteui-angular/lib/combo/combo-add-item.component.ts","ng://igniteui-angular/lib/combo/combo-dropdown.component.ts","ng://igniteui-angular/lib/combo/combo.pipes.ts","ng://igniteui-angular/lib/core/enums.ts","ng://igniteui-angular/lib/date-picker/date-picker.utils.ts","ng://igniteui-angular/lib/date-picker/date-picker.pipes.ts","ng://igniteui-angular/lib/date-picker/date-picker.common.ts","ng://igniteui-angular/lib/date-picker/date-picker.directives.ts","ng://igniteui-angular/lib/date-picker/calendar-container.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.component.ts","ng://igniteui-angular/lib/directives/template-outlet/template_outlet.directive.ts","ng://igniteui-angular/lib/dialog/dialog.directives.ts","ng://igniteui-angular/lib/dialog/dialog.component.ts","ng://igniteui-angular/lib/progressbar/progressbar.common.ts","ng://igniteui-angular/lib/services/direction/directionality.ts","ng://igniteui-angular/lib/progressbar/progressbar.component.ts","ng://igniteui-angular/lib/select/select-item.component.ts","ng://igniteui-angular/lib/select/select-positioning-strategy.ts","ng://igniteui-angular/lib/select/select.component.ts","ng://igniteui-angular/lib/select/select-navigation.directive.ts","ng://igniteui-angular/lib/select/select-group.component.ts","ng://igniteui-angular/lib/select/select.module.ts","ng://igniteui-angular/lib/grids/watch-changes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island-api.service.ts","ng://igniteui-angular/lib/grids/selection/selection.service.ts","ng://igniteui-angular/lib/core/touch.ts","ng://igniteui-angular/lib/grids/common/enums.ts","ng://igniteui-angular/lib/grids/cell.component.ts","ng://igniteui-angular/lib/grids/grid-navigation.service.ts","ng://igniteui-angular/lib/grids/row.directive.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.ts","ng://igniteui-angular/lib/grids/columns/templates.directive.ts","ng://igniteui-angular/lib/grids/columns/column.component.ts","ng://igniteui-angular/lib/grids/grid.common.ts","ng://igniteui-angular/lib/grids/column-chooser-item-base.ts","ng://igniteui-angular/lib/grids/hiding/column-hiding-item.directive.ts","ng://igniteui-angular/lib/grids/column-chooser-base.ts","ng://igniteui-angular/lib/grids/hiding/column-hiding.component.ts","ng://igniteui-angular/lib/grids/pinning/pinning.directive.ts","ng://igniteui-angular/lib/grids/pinning/column-pinning.component.ts","ng://igniteui-angular/lib/grids/toolbar/grid-toolbar.component.ts","ng://igniteui-angular/lib/grids/grid.rowEdit.directive.ts","ng://igniteui-angular/lib/grids/grid/groupby-row.component.ts","ng://igniteui-angular/lib/list/list.common.ts","ng://igniteui-angular/lib/grids/filtering/svgIcons.ts","ng://igniteui-angular/lib/grids/common/pipes.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering.service.ts","ng://igniteui-angular/lib/grids/resizing/resizing.service.ts","ng://igniteui-angular/lib/grids/selection/drag-select.directive.ts","ng://igniteui-angular/lib/list/list-item.component.ts","ng://igniteui-angular/lib/list/list.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-default-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-date-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-custom-dialog.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-sorting.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.component.ts","ng://igniteui-angular/lib/grids/headers/grid-header.component.ts","ng://igniteui-angular/lib/grids/filtering/base/grid-filtering-cell.component.ts","ng://igniteui-angular/lib/grids/headers/grid-header-group.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.service.ts","ng://igniteui-angular/lib/grids/summaries/summary-cell.component.ts","ng://igniteui-angular/lib/grids/summaries/summary-row.component.ts","ng://igniteui-angular/lib/grids/moving/moving.service.ts","ng://igniteui-angular/lib/grids/resizing/resizer.directive.ts","ng://igniteui-angular/lib/grids/resizing/resizer.component.ts","ng://igniteui-angular/lib/grids/filtering/base/grid-filtering-row.component.ts","ng://igniteui-angular/lib/grids/grid-mrl-navigation.service.ts","ng://igniteui-angular/lib/grids/moving/moving.drag.directive.ts","ng://igniteui-angular/lib/grids/grid/grid.directives.ts","ng://igniteui-angular/lib/grids/filtering/advanced-filtering/advanced-filtering-dialog.component.ts","ng://igniteui-angular/lib/grids/selection/row-selectors.ts","ng://igniteui-angular/lib/grids/toolbar/toolbar.directive.ts","ng://igniteui-angular/lib/grids/columns/column-group.component.ts","ng://igniteui-angular/lib/grids/row-drag.directive.ts","ng://igniteui-angular/lib/grids/grid-base.directive.ts","ng://igniteui-angular/lib/grids/grid/grid-api.service.ts","ng://igniteui-angular/lib/grids/grid/grid.component.ts","ng://igniteui-angular/lib/grids/state.directive.ts","ng://igniteui-angular/lib/grids/common/shared.module.ts","ng://igniteui-angular/lib/grids/hiding/hiding.module.ts","ng://igniteui-angular/lib/grids/grid-footer/grid-footer.component.ts","ng://igniteui-angular/lib/paginator/paginator.component.ts","ng://igniteui-angular/lib/grids/common/grid-pipes.module.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-column-moving.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.pipe.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.module.ts","ng://igniteui-angular/lib/grids/selection/selection.module.ts","ng://igniteui-angular/lib/grids/resizing/resize-handle.directive.ts","ng://igniteui-angular/lib/grids/resizing/resize.module.ts","ng://igniteui-angular/lib/grids/moving/moving.drop.directive.ts","ng://igniteui-angular/lib/grids/moving/moving.module.ts","ng://igniteui-angular/lib/grids/summaries/grid-root-summary.pipe.ts","ng://igniteui-angular/lib/grids/summaries/summary.module.ts","ng://igniteui-angular/lib/grids/pinning/pinning.module.ts","ng://igniteui-angular/lib/grids/toolbar/toolbar.module.ts","ng://igniteui-angular/lib/grids/columns/column-layout.component.ts","ng://igniteui-angular/lib/grids/columns/column.module.ts","ng://igniteui-angular/lib/grids/filtering/base/filtering.module.ts","ng://igniteui-angular/lib/grids/headers/headers.module.ts","ng://igniteui-angular/lib/grids/grid-common.module.ts","ng://igniteui-angular/lib/grids/grid/grid.pipes.ts","ng://igniteui-angular/lib/grids/grid/grid-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/grid/grid.details.pipe.ts","ng://igniteui-angular/lib/grids/grid/expandable-cell.component.ts","ng://igniteui-angular/lib/grids/grid/grid.module.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.directives.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-row.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.pipes.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-cell.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.module.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-base.directive.ts","ng://igniteui-angular/lib/slider/slider.common.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/child-grid-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-cell.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.pipes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.module.ts","ng://igniteui-angular/lib/navbar/navbar.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.directives.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.module.ts","ng://igniteui-angular/lib/slider/thumb/thumb-slider.component.ts","ng://igniteui-angular/lib/switch/switch.component.ts","ng://igniteui-angular/lib/slider/label/thumb-label.component.ts","ng://igniteui-angular/lib/slider/ticks/ticks.component.ts","ng://igniteui-angular/lib/slider/ticks/tick.pipe.ts","ng://igniteui-angular/lib/slider/slider.component.ts","ng://igniteui-angular/lib/snackbar/snackbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.directives.ts","ng://igniteui-angular/lib/tabbar/tabbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.common.ts","ng://igniteui-angular/lib/tabs/tabs.component.ts","ng://igniteui-angular/lib/tabs/tab-item.component.ts","ng://igniteui-angular/lib/tabs/tabs-group.component.ts","ng://igniteui-angular/lib/toast/toast.component.ts","ng://igniteui-angular/lib/time-picker/time-picker.common.ts","ng://igniteui-angular/lib/time-picker/time-picker.directives.ts","ng://igniteui-angular/lib/time-picker/time-picker.pipes.ts","ng://igniteui-angular/lib/time-picker/time-picker.component.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","EaseIn","EaseOut","EaseInOut","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","base","style","opacity","animate","baseParams","delay","duration","easing","sine","endOpacity","startOpacity","fadeIn","animation","params","fadeOut","baseRecipe","backfaceVisibility","transformStyle","keyframes","offset","transform","quad","endAngle","endDistance","rotateX","rotateY","rotateZ","startAngle","startDistance","flipTop","flipBottom","flipLeft","flipRight","flipHorFwd","flipHorBck","flipVerFwd","flipVerBck","transformOrigin","baseInParams","xPos","yPos","baseOutParams","rotateInCenter","rotateOutCenter","rotateInTop","rotateOutTop","rotateInRight","rotateOutRight","rotateInBottom","rotateOutBottom","rotateInLeft","rotateOutLeft","rotateInTr","rotateOutTr","rotateInBr","rotateOutBr","rotateInBl","rotateOutBl","rotateInTl","rotateOutTl","rotateInDiagonal1","rotateOutDiagonal1","rotateInDiagonal2","rotateOutDiagonal2","rotateInHor","rotateOutHor","rotateInVer","rotateOutVer","direction","shakeHor","shakeVer","shakeTop","shakeBottom","shakeRight","shakeLeft","shakeCenter","shakeTr","shakeBr","shakeBl","shakeTl","heartbeatBase","animationTimingFunction","pulsateBase","pulsateParams","fromScale","toScale","blinkBase","pulsateFwd","pulsateBck","heartbeat","blink","midScale","scaleInCenter","scaleInBl","scaleInVerCenter","scaleInTop","scaleInLeft","scaleInVerTop","scaleInTr","scaleInTl","scaleInVerBottom","scaleInRight","scaleInHorCenter","scaleInBr","scaleInHorLeft","scaleInBottom","scaleInHorRight","scaleOutCenter","scaleOutBl","scaleOutBr","scaleOutVerCenter","scaleOutVerTop","scaleOutVerBottom","scaleOutTop","scaleOutLeft","scaleOutTr","scaleOutTl","scaleOutRight","scaleOutBottom","scaleOutHorCenter","scaleOutHorLeft","scaleOutHorRight","fromPosition","toPosition","slideInTop","slideInLeft","slideInRight","slideInBottom","slideInTr","slideInTl","slideInBr","slideInBl","slideOutTop","slideOutRight","slideOutBottom","slideOutLeft","slideOutTr","slideOutBr","slideOutBl","slideOutTl","swingBase","swingParams","back","swingOutParams","swingInTopFwd","swingInRightFwd","swingInBottomFwd","swingInLeftFwd","swingInTopBck","swingInRightBck","swingInBottomBck","swingInLeftBck","swingOutTopFwd","swingOutRightFwd","swingOutBottomFwd","swingOutLefttFwd","swingOutTopBck","swingOutRightBck","swingOutBottomBck","swingOutLeftBck","height","startHeight","endHeight","growVerIn","growVerOut","IgxNavigationService","navs","add","id","navItem","remove","get","toggle","args","_i","_a","open","close","Injectable","IgxNavigationToggleDirective","nav","state","toggleNavigationDrawer","Input","HostListener","Directive","selector","IgxNavigationCloseDirective","closeNavigationDrawer","IgxNavigationModule","NgModule","declarations","exports","providers","cloneArray","array","deep","arr","cloneValue","mergeObjects","obj1","obj2","isObject","Error","_b","keys","_c","isDate","Date","getTime","isArray","Map","Set","result","toString","isEqual","getNodeSizeViaRange","range","node","overflow","isFirefox","selectNodeContents","width","getBoundingClientRect","isIE","navigator","appVersion","indexOf","isEdge","test","userAgent","PlatformUtil","platformId","isBrowser","isPlatformBrowser","isIOS","window","type","Inject","PLATFORM_ID","providedIn","isLeftClick","event","button","flatten","forEach","el","children","toArray","SortingDirection","NAVIGATION_KEYS","ROW_EXPAND_KEYS","split","ROW_COLLAPSE_KEYS","SUPPORTED_KEYS","from","isHierarchyMatch","h1","h2","every","level","index","fieldName","getHierarchy","gRow","hierarchy","undefined","expression","groupParent","unshift","PagingError","FilteringLogic","FilteringExpressionsTreeType","DefaultSortingStrategy","instance","_instance","sort","data","dir","ignoreCase","valueResolver","_this","reverse","Desc","arraySort","compareObjects","compareValues","a","bn","toLowerCase","compareFn","NoopSortingStrategy","expressions","IgxSorting","sortDataRecursive","groupedRecordsByExpression","groupval","res","len","getFieldValue","comparer","groupingComparer","expressionIndex","j","expr","gbData","gbDataLen","exprsLen","dataLen","strategy","groupDataRecursive","parent","metadata","grid","groupsRecords","fullResult","expansion","group","this_1","groupRow","records","groups","renderedRowHeight","expandState","find","expanded","defaultExpanded","recursiveResult","group_1","e_1","group_1_1","groupItem","slice","obj","IgxDataRecordSorting","_super","IgxGrouping","groupBy","TransactionType","DataType","FilteringExpressionsTree","operator","filteringOperands","empty","expressionTree","findIndex","isFilteringExpressionsTreeForColumn","expressionsTree","NoopFilteringStrategy","filter","advancedExpressionsTree","BaseFilteringStrategy","findMatchByExpression","rec","cond","condition","val","logic","searchVal","matchRecord","matchOperand","operand","And","Or","FilteringStrategy","_instace","CsvFileTypes","DataUtil","sorting","treeGridSort","hierarchicalData","hr","cloneTreeGridRecord","hierarchicalRecord","rowID","isFilteredOutParent","grouping","splice","page","recordsPerPage","countPages","countRecords","None","isNaN","IncorrectPageIndex","IncorrectRecordsPerPage","Math","ceil","correctPagingState","maxPage","mergeTransactions","transactions","primaryKey","deleteRows","item","rowId","transaction","UPDATE","newValue","DELETE","ADD","map","mergeHierarchicalTransactions","childDataKey","path","parent_1","findParentFromPath","collection","updateIndex","x","deleteIndex","transactions_1","transactions_1_1","parseValue","dataType","Number","parseFloat","path_1","path_1_1","ExportUtilities","getKeysFromData","dataEntry","dataEntryMiddle","floor","dataEntryLast","keys1","keys2","keys3","isSpecialData","saveBlobToFile","blob","fileName","document","createElement","msSaveOrOpenBlob","url","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","stringToArrayBuffer","buf","ArrayBuffer","view","Uint8Array","charCodeAt","hasValue","isNullOrWhitespaces","trim","GridBaseAPIService","destroyMap","get_column_by_name","name","columnList","col","field","get_summary_data","filteredData","enabled","getAggregatedChanges","getTransactionLog","getRowData","get_all_data","get_row_index_in_data","escape_editMode","crudService","end","get_cell_inEditMode","cell","record","get_row_by_key","rowSelector","dataRowList","row","rowData","get_row_by_index","rowIndex","rowList","get_cell_by_key","cells","column","get_cell_by_index","columnIndex","get_cell_by_visible_index","visibleColumnIndex","submit_value","update_cell","editValue","cancel","createEditEventArgs","onCellEdit","emit","castToNumber","oldValue","summaryService","clearSummaryCache","updateData","selectionService","isRowSelected","deselectRow","selectRowById","hasSummarizedColumns","removeSummaries","rowEditable","_pipeTrigger","rowValueInDataSource","rowCurrentValue","rowNewValue","_update_row","rowInEditMode","newData","getAggregatedValue","transactionState","getState","update_row","selected","hasSummarized","onRowEdit","hasChanges","endPending","newId","update_row_in_array","remove_grouping_expression","sortingState","sortingExpressions","prepare_sorting_expression","sort_multiple","expressions_1","expressions_1_1","each","term","conditionOrExpressionsTree","filteringTree","filteringExpressionsTree","endEdit","paging","fieldFilterIndex","prepare_filtering_expression","filter_global","columns","filteringIgnoreCase","clear_filter","filteringState","clear_sort","insertAtIndex","newExpressionsTree","oldExpressionsTreeIndex","newExpression","stateCollections","maxCollection","maxExpr","myExpr","clear_groupby","should_apply_number_style","get_data","includeTransactions","dataWithAddedInTransactionRows","get_filtered_data","getSortStrategyPerColumn","sortStrategy","addRowToData","deleteRowFromData","recordRef","deleteRowById","hasRowInNonDeletedState","onRowDeleted","clearHeaderCBState","notifyChanges","dataAfterDelete","refreshSearch","perPage","get_row_id","row_deleted_transaction","atInexistingPage","totalPages","get_row_expansion_state","states","expansionStates","getDefaultExpandState","set_row_expansion_state","expandedStates","allow_expansion_state_change","onRowToggle","set","eventKey","isToggleKey","zone","onStable","pipe","debounceTime","first","subscribe","focusActiveCell","get_rec_by_id","has","isVirtualized","verticalScrollContainer","dc","notVirtual","activeElement","visibleColumns","nativeElement","focus","TreeGridFilteringStrategy","filterImpl","filteredChildren","IgxTreeGridFilteringPipe","gridAPI","hierarchyData","filterStrategy","advancedFilteringExpressionsTree","pipeTrigger","filteringPipeTrigger","resetFilteredOutProperty","expandAllRecursive","updateNonProcessedRecord","Pipe","pure","IgxBaseExporter","flatRecords","_isTreeGrid","_indexOfLastPinnedColumn","_sort","onRowExport","EventEmitter","onColumnExport","export","options","_columnList","hiddenColumns","lastVisbleColumnIndex","columnHeader","header","exportColumn","hidden","ignoreColumnsVisibility","ignoreColumnsOrder","visibleIndex","columnInfo","skip","formatter","skipFormatter","max","pinned","hiddenColumn","prepareData","exportData","k","skippedPinnedColumnsCount","columnsWithoutHeaderCount","columnExportArgs","dataToExport","exportRow","exportDataImplementation","resetDefaults","rowArgs","reduce","rawValue","originalRowData","rootRecords","prepareHierarchicalData","ignoreFiltering","filteringLogic","ignoreSorting","CharSeparatedValueData","_data","valueDelimiter","_headerRecord","_dataRecords","_eor","_escapeCharacters","_delimiterLength","_isSpecialData","setDelimiter","_delimiter","processHeaderRecord","processDataRecords","processField","escapeChars","safeValue","String","some","v","includes","recordData","keys_1","keys_1_1","keyName","processRecord","keys_2","keys_2_1","currentData","dataRecords","currentData_1","currentData_1_1","IgxExporterOptionsBase","_fileExtension","setFileName","_fileName","endsWith","IgxCsvExporterOptions","fileType","getExtensionFromFileType","setFileType","fType","extension","CSV","TSV","TAB","_valueDelimiter","_fileType","oldExt","pop","newName","replace","ExcelFolderTypes","ExcelFileTypes","IgxCsvExporterService","onExportEnded","csvData","_stringData","saveFile","exportFile","Blob","Output","HorizontalAlignment","VerticalAlignment","ExcelStrings","getRels","XML_STRING","getApp","getCore","getTheme","getStyles","hasNonStringValues","cellXFCount","getWorkbook","getWorksheetRels","getWorkbookRels","hasSharedStrings","retVal","SHARED_STRING_RELATIONSHIP","getSheetXML","dimension","freezePane","cols","sheetData","hasTable","hasGroupedRows","outlineLevel","tableParts","sheetOutlineProp","sOutlineLevel","getSharedStringXML","count","uniqueCount","table","getContentTypesXML","contentTypes","getTablesXML","tableColumns","getExcelColumn","returnString","char","fromCharCode","RootRelsFile","writeElement","folder","worksheetData","file","AppFile","CoreFile","WorkbookRelsFile","isEmpty","ThemeFile","WorksheetFile","dictionary","dataDictionary","maxOutlineLevel","rowHeight","columnCount","saveValue","rowCount","isTreeGridData","sCollapsed","sHidden","hasCollapsedParent","rowOutlineLevel","cellData","getCellData","columnWidths","widthInTwips","columnWidth","MIN_WIDTH","indexOfLastPinnedColumn","ignorePinning","frozenColumnCount","exportAsTable","join","columnName","cellValue","savedValue","isSavedAsString","StyleFile","WorkbookFile","ContentTypesFile","SharedStringsFile","dict","sortedValues","getKeys","sharedStrings","sortedValues_1","sortedValues_1_1","getSanitizedValue","stringsCount","TablesFile","lastColumn","values","sortString","sortingExpression","sc","WorksheetRelsFile","RootExcelFolder","childFiles","childFolders","RootRelsExcelFolder","DocPropsExcelFolder","XLExcelFolder","XLRelsExcelFolder","ThemeExcelFolder","WorksheetsExcelFolder","TablesExcelFolder","WorksheetsRelsExcelFolder","ExcelElementsFactory","getExcelFolder","getExcelFile","WorksheetDataDictionary","_dictionary","_widthsDictionary","_counter","dirtyKeyCollections","_calculateColumnWidth","_columnWidths","_columnTypeInfo","fill","isHeader","sanitizedValue","sanitizeValue","getTextWidth","maxWidth","getValue","_keysAreValid","_keys","metrics","getContext","measureText","TEXT_PADDING","_context","canvas","font","DEFAULT_FONT","WorksheetData","initializeData","_columnCount","_rowCount","_dataDictionary","actualData","IgxExcelExporterService","populateFolder","zip","_d","childFolder","folderIntance","zipFolder","folderName","IgxExcelExporterService_1","_e","_f","childFile","maxLevel_1","_xlsx","JSZip","rootFolder","generateAsync","ZIP_OPTIONS","then","xlsx","atob","compression","IgxExcelExporterOptions","_columnWidth","_rowHeight","Point","y","Util","getTargetRect","settings","targetRect","bottom","left","right","top","HTMLElement","targetPoint","getViewportRect","documentElement","clientWidth","clientHeight","scrollPosition","getViewportScrollPosition","documentRect","horizontalScrollPosition","scrollLeft","scrollX","verticalScrollPosition","scrollTop","scrollY","cloneInstance","object","clonedObj","getPrototypeOf","GlobalPositionStrategy","_defaultSettings","horizontalDirection","Center","verticalDirection","Middle","horizontalStartPoint","verticalStartPoint","openAnimation","closeAnimation","minSize","position","contentElement","size","initialCall","classList","parentElement","setPosition","Left","justifyContent","Right","Top","alignItems","Bottom","clone","scrollContainer","NoOpScrollStrategy","initialize","overlayService","attach","detach","ScrollStrategy","DeprecateMethod","message","isMessageShown","descriptor","originalMethod_1","targetName","showMessage","DeprecateProperty","getter_1","setter_1","messageToDisplay","originalDescriptor","newKey","generateUniqueKey","configurable","enumerable","isDevMode","console","warn","Navigate","DropDownActionKey","warningShown","IgxOverlayService","_factoryResolver","_appRef","_injector","builder","_zone","_componentId","_overlayInfos","destroy$","Subject","positionStrategy","scrollStrategy","modal","closeOnOutsideClick","onOpening","onAppended","onOpened","onClosing","onClosed","onAnimation","documentClicked","ev","info","elementRef","contains","positionTarget","clickOnPositionTarget","excludePositionTarget","closeAnimationPlayer","hasStarted","_hide","repositionAll","reposition","_document","component","moduleRef","getOverlayInfo","show","compOrId","getOverlayById","_show","hide","hideAll","overlayInfo","contentElementRect","setOffset","deltaX","deltaY","transformX","transformY","translate","eventArgs","componentRef","detachView","hostView","destroy","elementRect","initialSize","hook","placeElementHook","moveElementToOverlay","changeDetectorRef","detectChanges","updateSize","addOutsideClickListener","addResizeHandler","setupModalWrapper","playOpenAnimation","visibility","removeOutsideClickListener","removeResizeHandler","child","parentNode","applyAnimationParams","playCloseAnimation","onCloseDone","ngZone","ElementRef","dynamicFactory","factoryResolver","componentFactoryResolver","resolveComponentFactory","injector","dynamicComponent","attachView","element","location","insertBefore","wrapperElement","getWrapperElement","getContentElement","getOverlayElement","wrapper","content","addEventListener","stopPropagation","outlet","_overlayElement","fromEvent","takeUntil","cleanUp","openAnimationPlayer","animationBuilder","build","innerRenderer","_renderer","openAnimationInnerPlayer","engine","players","onDone","reset","closeAnimationInnerPlayer","getPosition","init","animationPlayer","animationType","play","animationOptions","transitionDuration","transitionTimingFunction","shouldRemoveClickEventListener_1","removeEventListener","closingOverlaysCount","defaultView","ngOnDestroy","complete","ComponentFactoryResolver","ApplicationRef","Injector","AnimationBuilder","DOCUMENT","NgZone","ContainerPositionStrategy","ConnectedPositioningStrategy","calculateElementRectangles","rects","setStyle","connectedFit","horizontalOffset","verticalOffset","startPoint","wrapperRect","round","BaseFitPositionStrategy","_initialSettings","viewPortRect","updateViewPortFit","fitHorizontal","forward","fitVertical","fitInViewport","calculateLeft","calculateTop","AutoPositionStrategy","transformString","canFlipHorizontal","flipHorizontal","horizontalPush","canFlipVertical","flipVertical","verticalPush","flippedStartPoint","flippedDirection","leftBorder","rightBorder","topBorder","bottomBorder","leftExtend","rightExtend","abs","min","topExtend","bottomExtend","ElasticPositionStrategy","maxReduction","reduction","translation","AbsoluteScrollStrategy","_initialized","onScroll","_overlayService","_id","_scrollContainer","runOutsideAngular","addScrollEventListener","BlockScrollStrategy","preventDefault","_sourceElement","_initialScrollTop","_initialScrollLeft","CloseScrollStrategy","cumulativeScrollTop","cumulativeScrollLeft","initialScrollTop","_threshold","initialScrollLeft","scrollHeight","IgxBaseTransactionService","_isPending","_pendingTransactions","_pendingStates","onStateUpdate","updateState","undo","redo","mergeChanges","updateValue","commit","clear","startPending","mergeValues","second","IgxTransactionService","_transactions","_redoStack","_undoStack","_states","verifyAddedTransaction","addTransaction","pending","pendingState","pendingChange","change","aggregatedValue","originalValue","actions","updateRecord","delete","lastActions","currentActions","currentActions_1","e_3","currentActions_1_1","actions_1","actions_1_1","action","cleanState","JSON","stringify","IgxHierarchicalTransactionService","clearArraysFromObject","currentState","prop","IgxToggleDirective","cdr","navigationService","_overlaySubFilter","_overlayId","_collapsed","overlayClosed","unsubscribe","collapsed","overlaySettings","hasOpenAnimation","hasCloseAnimation","openEventArgs","_overlayAppendedSub","_overlayOpenedSub","_overlayClosingSub","clearSubscription","_overlayClosedSub","isClosing","ngOnInit","subscription","closed","ChangeDetectorRef","Optional","HostBinding","exportAs","IgxToggleActionDirective","_target","_overlayDefaults","onClick","clonedSettings","updateOverlaySettings","positionStrategyClone","IgxOverlayOutletDirective","IgxToggleModule","DisplayDensity","IGX_DROPDOWN_BASE","InjectionToken","IgxSelectionAPIService","selection","componentID","newSelection","get_empty","sel","add_item","itemID","add_items","itemIDs","clearSelection","select_item","select_items","delete_item","delete_items","deselectedItem","deselect_item","deselect_items","is_item_selected","first_item","are_all_selected","dataCount","are_none_selected","get_all_ids","NEXT_ID","IgxDropDownGroupComponent","role","groupClass","disabled","labelId","Component","template","IgxDropDownItemBaseDirective","dropDown","_focused","_selected","_index","_disabled","selectedChange","itemIndex","displayDensity","isSelectable","focused","items","ngDoCheck","dropDownSelectedItem","selectedItem","hasIndex","selectItem","ensureItemFocus","allowItemsFocus","focusedItem","preventScroll","clicked","IgxDropDownItemComponent","focusedState","focusedIndex","DisplayDensityToken","DisplayDensityBase","displayDensityOptions","onDensityChanged","oldDisplayDensityOptions","comfortable","_displayDensity","currentDisplayDensity","densityChangedArgs","oldDensity","newDensity","initialDensity","getComponentDensityClass","baseStyleClass","cosy","compact","IgxDisplayDensityModule","IgxDropDownBaseDirective","_displayDensityOptions","_focusedItem","onSelection","maxHeight","cssClass","headers","onItemActionKey","ENTER","SPACE","ESCAPE","oldSelection","navigate","currentIndex","newIndex","getNearestSiblingFocusableItemIndex","navigateItem","startIndex","oldItem","newItem","scrollToHiddenItem","navigateFirst","Down","navigateLast","Up","navigateNext","navigatePrev","parentRect","DisplayContainerComponent","_viewContainer","ViewContainerRef","ViewChild","read","static","VirtualHelperBaseDirective","scrollAmount","_size","_afterViewInit","ngAfterViewInit","destroyed","HVirtualHelperComponent","cssClasses","VirtualHelperComponent","IgxScrollInertiaDirective","wheelStep","inertiaStep","swipeToleranceX","inertiaDeltaY","inertiaDeltaX","inertiaDuration","_savedSpeedsX","setPointerCaptureFName","Element","releasePointerCaptureFName","targetElem","evt","onWheel","onTouchStart","onTouchMove","onTouchEnd","onPointerDown","onPointerUp","onMSGestureStart","onMSGestureChange","IgxScrollInertiaScrollContainer","scrollDeltaX","scrollDeltaY","scrollStep","minWheelStep","_startX","_startY","wheelDeltaX","sign","calcAxisCoords","wheelDeltaY","IgxScrollInertiaDirection","_scrollToX","curScrollLeft","maxScrollLeft","parseInt","_scrollToY","preventParentScroll","curScrollTop","maxScrollTop","offsetHeight","MSGesture","cancelAnimationFrame","_touchInertiaAnimID","touch","touches","_touchStartX","pageX","_touchStartY","pageY","_lastTouchEnd","_lastTouchX","_lastTouchY","_savedSpeedsY","_totalMovedX","_offsetRecorded","_offsetDirection","_touchPrevented","scrolledXY","destX","destY","timeFromLastTouch","speedX","speedY","shift","_lastMovedX","_lastMovedY","_scrollTo","_inertiaInit","pointerType","_pointer","pointerId","_gestureObject","addPointer","screenX","screenY","touchPos","dest","stepModifer","_nextX","_nextY","requestAnimationFrame","IgxScrollInertiaModule","imports","CommonModule","IgxForOfSyncService","_master","isMaster","directive","igxForScrollOrientation","setMaster","forced","orientation","resetMaster","sizesCache","chunkSize","IgxForOfScrollSyncService","_masterScroll","setScrollMaster","scroll","getScrollMaster","IgxForOfContext","$implicit","even","IgxForOfDirective","_template","_differs","resolver","syncScrollService","totalItemCount","onChunkLoad","onScrollbarVisibilityChanged","onContentSizeChange","onDataChanged","onBeforeViewDestroyed","onChunkPreload","_sizesCache","_differ","heightCache","MAX_PERF_SCROLL_DIFF","_virtHeight","_virtHeightRatio","_virtScrollTop","_bScrollInternal","_embeddedViews","contentResizeNotify","scrollComponent","getScroll","igxForContainerSize","igxForOf","removeScrollEventListeners","func","verticalScrollHandler","isScrollable","totalSize","vc","igxForScrollContainer","igxForSizePropName","dcFactory","createComponent","scrollDirection","touchAction","initSizesCache","_calculateChunkSize","getIndexAt","input","embeddedView","_vcr","createEmbeddedView","getContextIndex","factory","_maxHeight","_calcMaxBrowserHeight","_calcHeight","bind","destructor","throttleTime","leading","trailing","runTask","updateSizes","onHScroll","hvFactory","_updateHScrollOffset","contentObserver","ResizeObserver","observe","disconnect","ngOnChanges","changes","currentValue","igxForTrackBy","getTypeNameForDebugging","firstChange","_applyChanges","_recalcOnContainerChange","diff","_updateSizeCache","run","markForCheck","_updateScrollOffset","addScrollTop","addTop","originalVirtScrollTop","containerSize","maxVirtScrollTop","scrollOffset","fixedUpdateAllElements","maxRealScrollTop","scrollTo","isRemote","isPrevItem","nextScroll","_adjustToIndex","scrollNext","scr","endIndex","scrollPrev","scrollNextPage","scrollPrevPage","getColumnScrollLeft","colIndex","getItemCountInView","getSizeAt","getScrollForIndex","realPercentScrolled","prevStartIndex","recalcUpdateSizes","diffs","totalDiff","l","rNodes","rootNodes","nodeType","Node","ELEMENT_NODE","nextElementSibling","rNode","h","igxForItemSize","oldVal","newVal","currDiff","totalWidth","reducer","acc","scrToBottom","_isScrolledToBottom","hSum","_isAtBottomIndex","updatesToIndex","sumDiffs","currOffset","inScrollTop","newStart","prevStart","moveApplyScrollNext","moveApplyScrollPrev","fixedApplyScroll","prevIndex","start","embView","cntx","context","insert","_trackByFn","fn","prevChunkSize","applyChunkSizeChange","_recalcScrollBarSize","embeddedViewCopy","div","_calcMaxChunkSize","getElement","viewref","nodeName","elem","getElementsByTagName","_getItemSize","maxLength","sum","availableSize","accumulator","currentItem","curItem","prevItem","prevSize","midIdx","cmp","scrollable","removeLastElem","oldElem","addLastElem","elemIndex","_updateVScrollOffset","dim","TemplateRef","IterableDiffers","IgxHintPosition","IgxGridForOfDirective","syncService","onDataChanging","getItemSize","summaries","masterSizesCache","itemsDimension","oldHeight","handleCacheChanges","identityChanges","newHeightCache","newSizesCache","newHeight","numRemovedItems","forEachRemovedItem","forEachIdentityChange","previousIndex","forEachItem","assumeMaster","_updateViews","IgxForOfModule","entryComponents","IgxDropDownComponent","virtDir","toggleDirective","scrollContainerRef","updateScrollPosition","setSelectedItem","collectionLength","direction_1","subRequired","isIndexOutOfBounds","take","skipHeader","virtState","currentPosition","itemPosition","indexOutOfChunk","scrollNeeded","targetScroll","onToggleOpening","_scrollPosition","onToggleContentAppended","scrollToItem","onToggleOpened","onToggleClosing","onToggleClosed","calculateScrollPosition","setTimeout","scrollDelta","elementHeight","isSelectionValid","ContentChild","ContentChildren","forwardRef","descendants","IgxDropDownComponent_1","provide","useExisting","IgxDropDownItemNavigationDirective","dropdown","handleKeyDown","onArrowUpKeyDown","onArrowDownKeyDown","onHomeKeyDown","onEndKeyDown","Self","IgxDropDownModule","IgxInputState","IgxHintDirective","_element","_position","START","isPositionStart","isPositionEnd","toUpperCase","_applyPosition","END","IgxInputGroupBase","nativeValidationAttributes","IgxInputGroupType","IgxInputDirective","inputGroup","ngModel","formControl","_valid","INITIAL","isInput","isTextArea","checkValidity","hasAttribute","required","isRequired","INVALID","onFocus","isFocused","onBlur","ngControl","valid","_hasValidators","onInput","hasPlaceholder","control","validator","validation","tagName","_statusChanges$","statusChanges","onStatusChanged","asyncValidator","touched","dirty","VALID","placeholder","nativeValidationAttributes_1","nativeValidationAttributes_1_1","nativeValidationAttribute","NgModel","FormControlName","IgxLabelDirective","defaultClass","IgxPrefixDirective","IgxPrefixModule","IgxSuffixDirective","IgxSuffixModule","IgxDividerType","IgxInputGroupComponent","_type","LINE","_filled","_supressInputAutofocus","isBox","isBorder","isSearch","isFluentSearch","isFluent","isBootstrap","hasWarning","BOX","BORDER","FLUENT","FLUENT_SEARCH","SEARCH","BOOTSTRAP","hints","IgxInputGroupComponent_1","IgxInputGroupModule","IgxAutocompleteDirective","defaultSettings","dropDownOpened$","onItemSelected","autofill","select","model","setValue","highlightFirstItem","autocompleteSettings","listId","onArrowDown","onTab","IgxAutocompleteModule","IgxButtonDirective","_defaultType","_cssClassPrefix","buttonClick","removeClass","addClass","_color","color","_backgroundColor","_label","setAttribute","Renderer2","IgxButtonModule","RestrictDrag","IgxDividerDirective","_inset","SOLID","middle","vertical","DASHED","baseMargin","IgxDividerModule","IgxDefaultDropStrategy","dropAction","drag","drop","atIndex","IgxAppendDropStrategy","dragElement","dropAreaElement","IgxPrependDropStrategy","IgxInsertDropStrategy","IgxDragHandleDirective","baseClass","RadioLabelPosition","IgxDragLocation","_pageX","_pageY","IgxDragDirective","viewContainer","renderer","ghostContext","dragTolerance","ghost","ghostClass","hideBaseOnDrag","animateOnRelease","dragStart","dragMove","dragEnd","dragClick","ghostCreate","ghostDestroy","transitioned","_visibility","selectDisabled","defaultReturnDuration","animInProgress","_lastX","_lastY","_dragStarted","_ghostHostX","_ghostHostY","_pointerDownId","_clicked","_lastDropArea","_destroy","_removeOnDestroy","_offsetX","_defaultOffsetX","_offsetY","_defaultOffsetY","bVisible","baseOriginLeft","baseOriginTop","PointerEvent","ghostElement","ghostLeft","baseLeft","ghostTop","baseTop","getTransformX","getTransformY","ghostMarginLeft","getComputedStyle","ghostMarginTop","ngAfterContentInit","dragHandles","pointerEventsEnabled","throttle","interval","animationFrameScheduler","onPointerMove","onPointerLost","touchEventsEnabled","onTransitionEnd","setLocation","newLocation","offsetHostX","ghostHost","ghostHostOffsetLeft","offsetHostY","ghostHostOffsetTop","getWindowScrollLeft","getWindowScrollTop","setTransformXY","transitionToOrigin","customAnimArgs","startLocation","_ghostStartX","_ghostStartY","createGhost","transitionProperty","timingFunction","transitionDelay","transitionTo","movedElem","targetRects","handleFound","handle","currentTarget","targetElement","setPointerCapture","ghostOffsetX","ghostOffsetY","totalMovedX","totalMovedY","dragStartArgs_1","originalEvent","owner","startX","startY","moveArgs","nextPageX","nextPageY","setPageX","setPageY","updatedMovedX","updatedMovedY","lastMovedX","lastMovedY","translateX","translateY","dispatchDragEvents","dispatchDropEvent","dynamicGhostRef","ghostTemplate","cloneNode","createEventArgs","visible","topDropArea","customEventArgs","elementsFromPoint","getElementsAtPoint","getAttribute","dispatchEvent","ghostDestroyArgs","viewPortX","pageXOffset","viewPortY","pageYOffset","elements","eventName","dragLeaveEvent","createEvent","initCustomEvent","posX","matrix","match","posY","ghostPosition","getPropertyValue","offsetParent","IgxDropDirective","enter","over","leave","dropped","droppable","dragover","_dropStrategy","classRef","onDragEnter","onDragLeave","onDragOver","elementPosX","elementPosY","offsetX","detail","offsetY","dragData","isDragLinked","onDragDrop","elementsAtPoint","insertIndex","getInsertIndexAt","dragLinkArray","dragChannel","dropLinkArray","dropChannel","dropLinks","dragLinks","draggedDir","dropChildren","childUnder","draggedElemIndex","IgxDragDropModule","IgxFilterOptions","inputValue","get_value","textContent","valueToTest","matchFn","metConditionFn","overdueConditionFn","IgxFilterDirective","filtering","filtered","filterOptions","previousValue","IgxFilterPipe","filteredItems","IgxFilterModule","IgxFocusDirective","comp","focusState","trigger","getEditElement","NG_VALUE_ACCESSOR","IgxFocusModule","IgxLayoutDirective","wrap","justify","itemAlign","display","IgxFlexDirective","grow","shrink","flex","order","basis","IgxLayoutModule","MASK_FLAGS","KEYS","MaskHelper","_cursor","parseValueByMask","maskOptions","cursor","mask","format","literals","getMaskLiterals","literalKeys","nonLiteralIndeces","getNonLiteralIndeces","parseValueByMaskOnInit","insertCharAt","promptChar","isCharValid","validateCharOnPostion","replaceCharAt","parseMask","outputVal","mask_1","mask_1_1","inputVal","literalValues","mask_2","mask_2_1","nonLiteralValues","getNonLiteralValues","pos","nonLiteralValues_1","nonLiteralValues_1_1","restoreValueFromMask","value_1","value_1_1","parseValueByMaskUponSelection","isMarked","parseValueByMaskUponCopyPaste","clipboardData","selectionEnd","clipboardData_1","clipboardData_1_1","inputChar","isValid","charAt","RegExp","strValue","substring","nonLiteralsIndeces","value_2","value_2_1","noop","IgxMaskDirective","onValueChange","_maskOptions","_onTouchedCallback","_onChangeCallback","maskHelper","_placeholder","selectionStart","onKeydown","keyCode","charCode","_stopPropagation","_ctrlDown","_key","_selection","onKeyup","onPaste","_paste","_valOnPaste","_cursorOnPaste","getCursorPosition","onInputChanged","setCursorPosition","currentCursorPos","rawVal","dataValue","includeLiterals","formattedValue","focusedValuePipe","displayValuePipe","setSelectionRange","writeValue","registerOnChange","registerOnTouched","IgxMaskDirective_1","multi","IgxMaskModule","IgxAvatarSize","IgxAvatarType","nextId","IgxRadioComponent","labelPosition","tabindex","disableRipple","ariaLabelledBy","ariaLabel","checked","inputId","_value","_onRadioChange","_onRadioClick","nativeRadio","blur","_onLabelClick","radio","BEFORE","AFTER","IgxRadioComponent_1","IgxRippleDirective","rippleTarget","rippleDuration","rippleDisabled","rippleElementClass","rippleHostClass","_centered","animationQueue","centered","onMouseDown","_ripple","setStyles","rippleElement","styleParams","radius","rippleColor","querySelector","rectBounds","clientX","clientY","dimensions","IgxRippleModule","IgxRadioGroupDirective","_name","_isInitialized","_labelPosition","_required","_selectRadioButton","_setRadioButtonNames","_setRadioButtonsRequired","_disableRadioButtons","_setRadioButtonLabelPosition","_initRadioButtons","radioButtons","props_1","_selectedRadioButtonChanged","IgxRadioGroupDirective_1","IgxRadioModule","IgxTextHighlightDirective","_div","_observer","_nodeWasRemoved","_forceEvaluation","_activeElementIndex","_defaultCssClass","_defaultActiveCssClass","groupName","IgxTextHighlightDirective_1","onActiveElementChanged","deactivate","activateIfNecessary","_lastSearchInfo","setActiveHighlight","highlight","highlightGroupsMap","clearActiveHighlight","clearHighlight","_valueChanged","searchedText","matchCount","caseSensitive","exactMatch","_container","firstElementChild","ngAfterViewChecked","text","caseSensitiveResolved","exactMatchResolved","searchNeedsEvaluation","clearChildElements","getHighlightedText","activate","MutationObserver","mutationList","mutation","removedNodes","addedNodes","childList","spans","querySelectorAll","elementToActivate","activeCssClass","elementToDeactivate","originalContentHidden","setProperty","searchText","appendDiv","stringValue","contentStringResolved","searchTextResolved","appendSpan","appendText","foundIndex","previousMatchEnd","textElement","createText","outerHTML","span","containerClass","IgxTextHighlightModule","IgxTextSelectionDirective","selectionState","IgxTextSelectionModule","IgxTooltipTargetDirective","_navigationService","showDelay","hideDelay","tooltipDisabled","onTooltipShow","onTooltipHide","positionSettings","useAnimation","checkOutletAndOutsideClick","preMouseEnterCheck","toBeShown","clearTimeout","timeoutId","toBeHidden","hidingArgs","tooltip","forceClose","mergedOverlaySettings","preMouseLeaveCheck","onKeydownEscape","onMouseEnter","showingArgs","onMouseLeave","showTooltip","onDocumentTouchStart","hideTooltip","IgxTooltipDirective","forceOpen","finish","IgxTooltipModule","IgxFilteringOperand","operations","isUnary","iconName","findValueInSet","conditionList","f","append","operation","IgxBooleanFilteringOperand","IgxDateFilteringOperand","validateInputData","targetp","getDateParts","searchp","year","month","day","now","td","setDate","getDate","yesterday","date","dateFormat","hours","milliseconds","minutes","seconds","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","toISOString","IgxNumberFilteringOperand","IgxStringFilteringOperand","search","applyIgnoreCase","startsWith","filteringStateDefaults","GroupedRecords","IgxIconService","_sanitizer","_fontSet","_fontSetAliases","_cachedSvgIcons","className","registerFontSetAlias","alias","fontSetClassName","addSvgIcon","fontSet","safeUrl","bypassSecurityTrustResourceUrl","sanitize","SecurityContext","RESOURCE_URL","fetchSvg","addSvgIconFromText","iconText","cacheSvgIcon","isSvgIconCached","iconKey","getSvgIconKey","httpRequest","XMLHttpRequest","responseType","onload","request","status","statusText","responseText","onerror","send","ensureSvgContainerCreated","innerHTML","svg","oldChild","_svgContainer","DomSanitizer","IgxIconComponent","_el","iconService","ariaHidden","active","defaultFontSet","updateIconClass","iconColor","svgImage","noLigature","explicitLigature","IgxIconModule","IgxBadgeType","IgxAvatarComponent","SMALL","roundShape","src","IMAGE","icon","ICON","initials","INITIALS","CUSTOM","imageTemplate","initialsTemplate","iconTemplate","defaultTemplate","roleDescription","getRole","getSrcUrl","IgxAvatarModule","ICON_POSITION","IgxBadgeComponent","PRIMARY","label","setClasses","classes","INFO","SUCCESS","WARNING","ERROR","IgxBadgeModule","IGX_EXPANSION_PANEL_COMPONENT","IgxExpansionPanelBodyComponent","panel","_labelledBy","IgxExpansionPanelTitleDirective","IgxExpansionPanelDescriptionDirective","IgxExpansionPanelIconDirective","ButtonGroupAlignment","IgxExpansionPanelHeaderComponent","_iconTemplate","lv","iconPosition","LEFT","onInteraction","onAction","openPanel","altKey","expand","closePanel","collapse","Host","IgxExpansionPanelComponent","animationSettings","collapsedChange","onCollapsed","onExpanded","Promise","resolve","labelledBy","headerId","cb","IgxExpansionPanelComponent_1","IgxExpansionPanelModule","IgxBannerActionsDirective","IgxBannerComponent","_bannerActionTemplate","_animationSettings","_expansionPanel","_bannerEvent","banner","openingArgs","closingArgs","onExpansionPanelOpen","onExpansionPanelClose","IgxBannerModule","DateRangeType","IgxButtonGroupComponent","_cdr","buttonClickNotifier$","queryListNotifier$","zIndex","multiSelection","selectedIndexes","onSelect","onUnselect","viewButtons","templateButtons","_itemContentCssClass","buttons","_isVertical","horizontal","selectButton","buttonElement","indexInViewButtons","deselectButton","initButtons","_clickHandler","ViewChildren","IgxButtonGroupModule","WEEKDAYS","MDAYS","stop","step","isLeap","weekDay","getDay","monthRange","nDays","isDateInRanges","ranges","dateInMs","ranges_1","ranges_1_1","dRanges","dateRange","dRange","datesInMs","datesInMs_1","e_2","datesInMs_1_1","CalendarSelection","ScrollMonth","Calendar","firstWeekDay","SUNDAY","_firstWeekDay","weekdays","monthdates","extraWeek","days","timedelta","generateICalendarDate","e_4","monthdatescalendar","dates","units","ret","checkRollover","setFullYear","setMonth","setTime","formatToParts","locale","parts","Intl","DateTimeFormat","full","formattedParts_1","toType","partType","literal","combined","parts_1","parts_1_1","parts_2","parts_2_1","isCurrentMonth","isNextMonth","isPrevMonth","isPreviousMonth","IgxCalendarYearDirective","onYearSelection","isCurrentYear","IgxCalendarMonthDirective","onMonthSelection","IgxCalendarHeaderTemplateDirective","IgxCalendarSubheaderTemplateDirective","IgxCalendarScrollMonthDirective","debounce","stopScroll","tap","startScroll","onMouseUp","CalendarView","IgxCalendarBaseDirective","hideOutsideDays","SINGLE","rangeStarted","_locale","_disabledDates","_specialDates","_formatOptions","weekday","_formatViews","monthScrollDirection","NONE","scrollMonth$","stopMonthScroll$","startMonthScroll$","calendarModel","viewDate","weekStart","initFormatters","formatOptions","formatViews","selectedDates","MULTI","RANGE","selectDate","_viewDate","getDateOnly","getDateOnlyInMs","generateDateRange","selectSingle","selectMultiple","newDates","selDates","valueDateOnly_1","isDateDisabled","valueOf","selectRange","excludeDisabledDates","deselectSingle","deselectMultiple","selectedDatesCount","datesInMsToDeselect","deselectMultipleInMonth","valueDateOnly","deselectRange","valueStart","valueEnd","selectedDatesStart","selectedDatesEnd","formatterDay","formatterWeekday","formatterMonth","formatterYear","formatterMonthday","disabledDates","deselectDate","selectDateFromClient","Direction","IgxMonthPickerBaseDirective","_activeView","DEFAULT","DECADE","changeYear","yearsBtn","activeViewDecade","activeViewDecadeKB","formattedYear","IgxMonthsViewComponent","formatView","styleClass","_monthFormat","initMonthFormatter","_calendarModel","formattedMonth","_formatterMonth","selectMonth","monthTracker","monthFormat","onKeydownArrowUp","months","nodeRect","nextNodeRect","onKeydownArrowDown","onKeydownArrowRight","onKeydownArrowLeft","onKeydownHome","onKeydownEnd","onKeydownEnter","IgxMonthsViewComponent_1","CalendarHammerConfig","overrides","pan","Hammer","DIRECTION_VERTICAL","threshold","HammerGestureConfig","IgxYearsViewComponent","_yearFormat","initYearFormatter","_formatterYear","selectYear","delta","generateYearRange","yearTracker","yearFormat","currentYear","IgxYearsViewComponent_1","HAMMER_GESTURE_CONFIG","useClass","IgxDayItemComponent","isLastInRange","isFirstInRange","isWithinRange","onDateSelection","isDisabled","isInactive","today","outOfRangeDates","isHidden","isOutOfRange","isSingleSelection","specialDates","isWeekend","IgxCardType","IgxDaysViewNavigationService","focusNextDate","nextView","childElementCount","nextDate","monthView","isFocusable","dayIsNextMonth","nextMonthView","prevMonthView","navService","changeDaysView","monthAction","NEXT","PREV","onViewChanging","focusHomeDate","focusFirstDay","focusEndDate","focusLastDay","IgxDaysViewComponent","disableOutOfRangeDates","formattedDate","generateWeekHeader","dayNames","rv","rv_1","rv_1_1","rowTracker","dateTracker","isSelected","checkForRange","Between","focusActiveDate","isToday","selectDay","Specific","getFirstMonthView","getLastMonthView","onKeydownArrow","IgxDaysViewComponent_1","IgxCalendarComponent","hasHeader","animationAction","isKeydownTrigger","_monthsViewNumber","defaultDayView","dayViews","startPrevMonthScroll","previousMonth","startNextMonthScroll","nextMonth","stopMonthScroll","daysView","prevMonthBtn","nextMonthBtn","nextMonthDate","activeView","YEAR","headerTemplateDirective","subheaderTemplateDirective","headerDate","generateContext","setSiblingMonths","monthViews","_monthViewsChanges$","switchMap","skipLast","dacadeView","getFormattedDate","monthday","childClicked","deselectDateInMonthViews","viewChanging","callback","changeMonth","monthsBtn","activeViewYear","monthsView","focusMonth","attributes","activeViewYearKB","getViewDate","animationDone","toState","onKeydownPageDown","activeDate","isPageDown","dayItem","onKeydownShiftPageUp","yearView","getMonthView","IgxCalendarComponent_1","animations","transition","IgxMonthPickerComponent","yearAction","nextYear","previousYear","nextYearKB","previousYearKB","onKeydownPageUp","IgxMonthPickerComponent_1","IgxCalendarModule","FormsModule","IgxCardMediaDirective","IgxCardHeaderComponent","IgxCardThumbnailDirective","IgxCardHeaderTitleDirective","IgxCardHeaderSubtitleDirective","IgxCardContentDirective","IgxCardFooterDirective","IgxCardActionsLayout","IgxCardComponent","ELEVATED","OUTLINED","IgxCardActionsComponent","card","isVerticalSet","layout","JUSTIFY","IgxCardModule","IgxCarouselIndicatorDirective","IgxCarouselNextButtonDirective","IgxCarouselPrevButtonDirective","IgxSlideComponent","_active","_destroy$","previous","activeChange","CurrentResourceStrings","GridResStrings","igx_grid_groupByArea_message","igx_grid_emptyFilteredGrid_message","igx_grid_emptyGrid_message","igx_grid_filter","igx_grid_filter_row_close","igx_grid_filter_row_reset","igx_grid_filter_row_placeholder","igx_grid_filter_row_boolean_placeholder","igx_grid_filter_row_date_placeholder","igx_grid_filter_operator_and","igx_grid_filter_operator_or","igx_grid_complex_filter","igx_grid_filter_contains","igx_grid_filter_doesNotContain","igx_grid_filter_startsWith","igx_grid_filter_endsWith","igx_grid_filter_equals","igx_grid_filter_doesNotEqual","igx_grid_filter_empty","igx_grid_filter_notEmpty","igx_grid_filter_null","igx_grid_filter_notNull","igx_grid_filter_before","igx_grid_filter_after","igx_grid_filter_today","igx_grid_filter_yesterday","igx_grid_filter_thisMonth","igx_grid_filter_lastMonth","igx_grid_filter_nextMonth","igx_grid_filter_thisYear","igx_grid_filter_lastYear","igx_grid_filter_nextYear","igx_grid_filter_greaterThan","igx_grid_filter_lessThan","igx_grid_filter_greaterThanOrEqualTo","igx_grid_filter_lessThanOrEqualTo","igx_grid_filter_true","igx_grid_filter_false","igx_grid_filter_all","igx_grid_filter_condition_placeholder","igx_grid_summary_count","igx_grid_summary_min","igx_grid_summary_max","igx_grid_summary_sum","igx_grid_summary_average","igx_grid_summary_earliest","igx_grid_summary_latest","igx_grid_excel_filter_moving_left","igx_grid_excel_filter_moving_left_short","igx_grid_excel_filter_moving_right","igx_grid_excel_filter_moving_right_short","igx_grid_excel_filter_moving_header","igx_grid_excel_filter_sorting_asc","igx_grid_excel_filter_sorting_asc_short","igx_grid_excel_filter_sorting_desc","igx_grid_excel_filter_sorting_desc_short","igx_grid_excel_filter_sorting_header","igx_grid_excel_filter_clear","igx_grid_excel_custom_dialog_add","igx_grid_excel_custom_dialog_clear","igx_grid_excel_custom_dialog_header","igx_grid_excel_cancel","igx_grid_excel_apply","igx_grid_excel_search_placeholder","igx_grid_excel_select_all","igx_grid_excel_blanks","igx_grid_excel_hide","igx_grid_excel_show","igx_grid_excel_pin","igx_grid_excel_unpin","igx_grid_excel_text_filter","igx_grid_excel_number_filter","igx_grid_excel_date_filter","igx_grid_excel_boolean_filter","igx_grid_excel_custom_filter","igx_grid_advanced_filter_title","igx_grid_advanced_filter_and_group","igx_grid_advanced_filter_or_group","igx_grid_advanced_filter_end_group","igx_grid_advanced_filter_create_and_group","igx_grid_advanced_filter_create_or_group","igx_grid_advanced_filter_and_label","igx_grid_advanced_filter_or_label","igx_grid_advanced_filter_add_condition","igx_grid_advanced_filter_ungroup","igx_grid_advanced_filter_delete","igx_grid_advanced_filter_delete_filters","igx_grid_advanced_filter_initial_text","igx_grid_advanced_filter_column_placeholder","igx_grid_advanced_filter_value_placeholder","TimePickerResStrings","igx_time_picker_ok","igx_time_picker_cancel","PaginatorResStrings","igx_paginator_label","CarouselResStrings","igx_carousel_of","updateResourceStrings","currentStrings","newStrings","CarouselIndicatorsOrientation","CarouselAnimationType","LabelPosition","CarouselHammerConfig","DIRECTION_HORIZONTAL","IgxCarouselComponent","iterableDiffers","platformUtil","loop","pause","navigation","keyboardSupport","gesturesSupport","maximumIndicatorsCount","indicatorsOrientation","slide","indicatorTemplate","nextButtonTemplate","prevButtonTemplate","onSlideChanged","onSlideAdded","onSlideRemoved","onCarouselPaused","onCarouselPlaying","_resourceStrings","differ","animationDuration","animationPosition","newDuration","_interval","restartInterval","slides","initSlides","lastInterval","clearInterval","unsubscriber","merge","isDestroyed","onSlideActivated","currentSlide","current","animationWasStarted","finishAnimations","previousSlide","none","playAnimations","carousel","playLeaveAnimation","playEnterAnimation","leaveAnimationPlayer","enterAnimationPlayer","getAnimation","trans","enterAnimation","leaveAnimation","fade","any","ind","forEachAddedItem","total","updateSlidesSelection","defaultIndicator","defaultNextButton","defaultPrevButton","setAriaLabel","resourceStrings","getNextIndex","getPrevIndex","playing","newSlides","notifyOnChanges","prev","stoppedByInteraction","resetInterval","setInterval","tick","onTap","isPlaying","last","onPanLeft","onPanRight","resetSlideStyles","slideWidth","offsetWidth","panOffset","isFinal","incomingSlide","onPanEnd","velocity","IgxCarouselModule","DataTypes","IgxCheckboxComponent","indeterminate","readonly","disableTransitions","checkbox","_onCheckboxChange","_onCheckboxClick","nativeCheckbox","IgxCheckboxComponent_1","preserveWhitespaces","IGX_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","IgxCheckboxRequiredDirective","CheckboxRequiredValidator","IgxCheckboxModule","CHIP_ID","IgxChipComponent","draggable","removable","selectable","class","onMoveStart","onMoveEnd","onRemove","onSelectionDone","onKeyDown","_selectedItemClass","_movedWhileRemoving","changeSelection","chipArea","backgroundColor","newColor","removeIcon","defaultRemoveIcon","selectIcon","defaultSelectIcon","selectClass","SELECT_CLASS","srcEvent","onSelectArgs","selectContainer","propertyName","onSelectTransitionDone","onChipKeyDown","keyDownArgs","onRemoveBtnKeyDown","onRemoveMouseDown","onRemoveClick","onRemoveTouchMove","onRemoveTouchEnd","onChipDragStart","onChipDragEnd","dragDirective","onChipMoveEnd","onChipDragClicked","clickEventArgs","onChipDragEnterHandler","chip","dragChip","onChipDrop","IgxChipsAreaComponent","_iterableDiffers","onReorder","chipsList","selectedChips","addedChip","onChipMoveStart","onChipDragEnter","onChipSelectionChange","modifiedChipsArray","chipsArray","dragChipIndex","shiftKey","positionChipAtIndex","dropChipIndex","chipIndex","targetIndex","shiftRestLeft","eventData","IgxChipsModule","IgxComboHeaderDirective","IgxComboFooterDirective","IgxComboItemDirective","IgxComboEmptyDirective","IgxComboHeaderItemDirective","IgxComboAddItemDirective","IgxComboToggleIconDirective","IgxComboClearIconDirective","IgxComboAPIService","register","combo","valueKey","add_custom_item","addItemToCollection","set_selected_item","isItemSelected","deselectItems","selectItems","IgxComboItemComponent","comboAPI","itemHeight","comboID","isVisible","rect","parentDiv","disableCheck","IGX_COMBO_COMPONENT","IgxComboAddItemComponent","IgxComboAddItemComponent_1","IgxComboDropDownComponent","scrollHandler","itemsMaxHeight","focusSearchInput","lastIndex","focusAddItemButton","isAddButtonVisible","sortedChildren","sortedChildren_1","sortedChildren_1_1","handleEnter","handleSpace","isAddItemFocused","IgxComboDropDownComponent_1","IgxComboFilteringPipe","searchValue","displayKey","shouldFilter","searchTerm_1","IgxComboGroupingPipe","groupKey","sorted","Asc","inserts","currentHeader","insertFlag","IgxComboState","ItemHeights","diffInSets","set1","set2","results","entry","InteractionMode","IgxComboComponent","customValueFlag","defaultFallbackGroup","stringFilters","booleanFilters","_groupKey","_prevInputValue","_dataType","_filteredData","_itemHeight","_itemsMaxHeight","_remoteSelection","_overlaySettings","searchInput","itemTemplate","headerTemplate","footerTemplate","headerItemTemplate","addItemTemplate","emptyTemplate","toggleIconTemplate","clearIconTemplate","dropdownContainer","onSelectionChange","onAddition","onSearchInput","onDataPreLoad","allowCustomValues","searchPlaceholder","filterable","manageRequiredAsterisk","_displayKey","comboInput","onInputClick","checkMatch","handleKeyUp","itemMatch","handleInputChange","COMPLEX","PRIMITIVE","registerRemoteEntries","ids","getValueDisplayPairs","selection_1","selection_1_1","ids_1","ids_1_1","triggerCheck","handleSelectAll","selectAllItems","deselectAllItems","addedItem","oldCollection","newCollection","opening","displaySearchInput","NgControl","setDisabledState","complexTemplate","primitiveTemplate","handleClearItems","selectedItems","newItems","clearCurrentSelection","setSelection","ignoreFilter","allVisible","removed","added","newSelectionAsArray","oldSelectionAsArray","displayText","createDisplayText","concatDisplayText","convertKeysToItems","removedItems","addedItems","handleOpening","handleOpened","handleClosing","handleClosed","IgxComboComponent_1","IgxComboModule","ReactiveFormsModule","DatePickerUtil","parseDateFormat","maskValue","DEFAULT_LOCALE","dateStruct","SHORT_DATE_MASK","maskArray","monthInitPosition","dayInitPosition","yearInitPosition","initialPosition","formatType","getYearFormatType","getMonthFormatType","getDayFormatType","isDateChar","SEPARATOR","fillDatePartsPositions","getDefaultLocaleMask","getInputMask","inputMask","getMask","parseDateArray","dateFormatParts","prevDateValue","yearPrefix","dayStr","getDayValueFromInput","monthStr","getMonthValueFromInput","yearStr","getYearValueFromInput","getDateFormatPart","originalYear","fullYear","NaN","daysInMonth","maskToPromptChars","PROMPT_CHAR","trimUnderlines","getModifiedDateInput","isSpinLoop","maxValue","minValue","datePart","getDatePartOnPosition","datePartType","datePartFormatType","datePartValue","getDateValueFromInput","minMax","getMinMaxValue","tempValue","startIdx","endIdx","prefix","getNumericFormatPrefix","addPromptCharsEditMode","dateArray","checkForCompleteDateInput","dayValue","monthValue","yearValue","isFullInput","isFullYearInput","formatterOptions","resolvedOptions","NUMBER_OF_MONTHS","getFullYearFromString","partPosition","yearPart","currentPos","DatePickerDisplayValuePipe","_datePicker","rawDateString","DatePickerInputValuePipe","invalidDate","IgxDatePickerTemplateDirective","IgxDatePickerActionsDirective","PredefinedFormatOptions","IgxCalendarContainerComponent","mode","Dialog","onClose","onTodaySelection","DropDown","onEscape","closeCalendar","triggerTodaySelection","TemplateOutletAction","IgxDatePickerComponent","_moduleRef","labelVisibility","monthsViewNumber","valueChange","onDisabledDate","onValidationFailed","inputValuePipe","spinDelta","defaultLocale","_onOpen","_onClose","_format","ShortDate","_modalOverlay","_dropDownOverlaySettings","_defaultDropDownOverlaySettings","_customFormatChecker","_transformedDate","_getEditorDate","_getDisplayDate","datePickerTemplateDirective","readOnlyDatePickerTemplate","editableDatePickerTemplate","displayData","openDialog","onSpaceClick","getInputGroupElement","inputElement","editableInput","readonlyInput","_positionSettings","_modalOverlaySettings","overlay","_componentID","_onOpening","_onOpened","_onClosed","handleSelection","emitValueChangeEvent","calendar","modalOverlay","modalOverlaySettings","dropDownOverlaySettings","_setCursorPosition","setHours","setMinutes","setSeconds","setMilliseconds","_isInEditMode","calculateDate","spinValue","targetValue","cursorPosition","_getCursorPosition","checkInput","inputType","dateString","invokedByEvent","newDateArray","datePicker","prevValue","eventType","modifiedInputValue","_initializeCalendarContainer","_focusCalendarDate","componentInstance","isVertical","subheaderTemplate","cancelButtonLabel","todayButtonLabel","datePickerActions","datePickerActionsDirective","_setLocaleToDate","toLocaleDateString","formatDate","changedValue","NgModuleRef","IgxDatePickerComponent_1","IgxDatePickerModule","IgxDialogTitleDirective","defaultStyle","IgxDialogActionsDirective","DIALOG_ID","IgxDialogComponent","title","leftButtonLabel","leftButtonType","leftButtonColor","leftButtonBackgroundColor","leftButtonRipple","rightButtonLabel","rightButtonType","rightButtonColor","rightButtonBackgroundColor","rightButtonRipple","onOpen","onLeftButtonSelect","onRightButtonSelect","_closeOnOutsideSelect","_isModal","_titleId","IgxDialogComponent_1","_overlayDefaultSettings","isModal","closeOnOutsideSelect","isOpen","toggleRef","emitCloseFromDialog","dialog","onDialogSelected","DIALOG_CLASS","onInternalLeftButtonSelect","onInternalRightButtonSelect","IgxDialogModule","IgxTemplateOutletDirective","_viewContainerRef","_embeddedViewsMap","onViewCreated","onViewMoved","onCachedViewLoaded","onBeforeViewDetach","_getActionType","CreateView","_recreateView","MoveView","_moveView","UseCachedView","_useCachedView","UpdateViewContext","_updateExistingContext","igxTemplateOutletContext","cleanCache","cleanView","tmplID","_viewRef","igxTemplateOutlet","cachedView","oldContext","_cloneContext","_shouldRecreateView","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","currCtxKeys_1","currCtxKeys_1_1","propName","ctx","movedView","shouldRecreate","IgxTemplateOutletModule","IgxProcessBarTextTemplateDirective","IgxProgressBarGradientDirective","DIR_DOCUMENT","DIR_DOCUMENT_FACTORY","inject","IgxTextAlign","IgxProgressType","IgxDirectionality","bodyDir","htmlDir","extractedDir","_dir","BaseProgress","requestAnimationId","_valueInPercent","_max","_animate","runAnimation","updateProgressSmoothly","passedValue","convertInPercentage","progressValue","valueInPercent","updateProgress","isInLimitRange","updateProgressDirectly","directionFlow","comparator","isExceedingUpperLimit","isExceedingLowerLimit","NEXT_LINEAR_ID","NEXT_CIRCULAR_ID","NEXT_GRADIENT_ID","IgxLinearProgressBarComponent","valueMin","striped","textAlign","textVisibility","textTop","onProgressChanged","maxNum","_step","valueInRange","getValueInProperRange","changedValues","IgxCircularProgressBarComponent","_directionality","STROKE_OPACITY_DVIDER","STROKE_OPACITY_ADDITION","gradientId","_circleRadius","_circumference","PI","valueInProperRange","_svgCircle","FRAMES","strokeDashoffset","getProgress","strokeOpacity","percentage","rtl","IgxProgressBarModule","IgxSelectItemComponent","_text","SelectPositioningStrategy","_selectDefaultSettings","global_yOffset","global_xOffset","global_styles","selectFit","styles","scrollContainerRect","itemElement","getInteractionItemElement","itemRect","calculateStyles","calculateScrollAmount","calculateYoffset","calculateXoffset","itemElementRect","footer","lastItemFitSize","itemTextToInputTextDiff","firstItemFitSize","contentElementNewWidth","inputElementStyles","itemElementStyles","numericInputFontSize","fontSize","numericItemFontSize","inputTextToInputTop","itemTextToItemTop","negateInputPaddings","paddingTop","paddingBottom","numericLeftPadding","paddingLeft","numericTextIndent","textIndent","itemTextPadding","itemTextIndent","getFirstItemElement","IgxSelectToggleIconDirective","IgxSelectHeaderDirective","IgxSelectFooterDirective","IgxSelectComponent","itemText","mousedownHandler","IgxSelectComponent_1","IgxSelectItemNavigationDirective","inputStream","clearStream$","Subscription","EMPTY","captureKey","timer","activateItemByText","activeItemIndex","nextItem","IgxSelectGroupComponent","IgxSelectModule","WatchChanges","propDesc","privateKey","originalSetter","_init","SimpleChange","WatchColumnChanges","rowIslandAPI","rowIsland","updateColumnList","repaint","_","IgxRowIslandAPIService","childRowIslands","childGrids","unset","oldId","registerChildRowIsland","unsetChildRowIsland","getChildRowIsland","rowIslandKey","registerChildGrid","parentRowID","getChildGrids","inDepth","allChildren","getChildGridByID","IgxRow","IgxCell","inlineEditorTemplate","isFinite","cellID","IgxGridCRUDService","createCell","createRow","sameRow","sameCell","columnID","beginRowEdit","onRowEditEnter","endRowEdit","openRowOverlay","begin","newCell","onCellEditEnter","rowEditing","isInEditMode","IgxGridSelectionService","dragMode","keyboardState","pointerState","temp","_ranges","rowSelection","initPointerState","initKeyboardState","addKeyboardRange","parse","isCellSelectable","generateRange","primaryButton","ctrl","addToRange","isActiveNode","isInMap","isActive","hasColumnLayouts","isActiveLayout","columnVisibleIndex","addRangeMeta","removeRangeMeta","rowStart","rowEnd","columnStart","columnEnd","keyboardStateOnKeydown","shiftTab","keyboardStateOnFocus","emitter","dom","kbState","isChromium","_moveSelectionChrome","dragSelect","pointerDown","pointerDownShiftKey","clearTextSelection","mergeMap","source","entries","pair","newValue_1","pointerEnter","pointerUp","restoreTextSelection","clearAcriveEl","getSelection","rangeCount","_selectionRange","getRangeAt","removeAllRanges","addRange","createRange","Range","selectNode","getSelectedRows","clearRowSelection","removedRec","isFilteringApplied","getRowIDs","allData","rID","emitRowSelectionEvent","selectAllRows","addedRows","clearPrevSelection","isRowSelectable","isRowDeleted","isMultiRowSelectionEnabled","selectRowsWithNoEvent","rowIDs","allRowsSelected","deselectRowsWithNoEvent","selectMultipleRows","gridData","lastRowID","currIndex","getRowDataById","rows","areAllRowSelected","dataItemsID","hasSomeRowSelected","currSelection","areEqualCollections","onRowSelectionChange","clearAllSelectedRows","filteredSortedData","rData","vendor","FilterMode","GridSummaryPosition","GridSummaryCalculationMode","GridKeydownTargetType","GridSelectionMode","ColumnDisplayOrder","HammerGesturesManager","doc","hammerOptions","_hammerManagers","platformBrowser","inputClass","TouchInput","recognizers","Pan","Swipe","Tap","taps","supports","eventHandler","mc","getManagerForElement","addManagerForElement","handler","eventObj","on","off","addGlobalEventListener","getGlobalEventTarget","getDOM","setManagerOption","manager","removeManagerForElement","MoveDirection","IgxGridCellComponent","touchManager","_vIndex","highlightClass","activeHighlightClass","lastPinned","editMode","isInCompositionMode","_cellSelection","multiple","pointerdown","selectionNode","ctrlKey","pointerenter","pointerup","setStartNavigationCell","colStart","onRangeSelection","_updateCRUDStatus","onDoubleClick","editable","deleted","cellTemplate","defaultCellTemplate","gridID","columnLayoutChild","setEditMode","addPointerListeners","removePointerListeners","highlightText","gridRowSpan","gridColumnSpan","colEnd","rowTransaction","rowCurrentState","inEditMode","_highlight","lastSearchInfo","cellSelectionMode","compositionStartHandler","compositionEndHandler","cssProps","crud","editableCell","isCellSelected","update","onCellClick","onContextMenu","shouldEmitSelection","handleAlt","handleTab","performShiftTabKey","performTab","handleEnd","goToLastCell","handleHome","goToFirstCell","keydownArgs","targetType","onGridKeydown","navigateTop","navigateUp","navigateBottom","navigateDown","onKeydownEnterEditMode","onKeydownExitEditMode","onCellEditCancel","searchable","calculateSizeToFit","changeDetection","ChangeDetectionStrategy","OnPush","IgxRowDirective","dragging","defaultCssClass","_rowData","resolveClasses","groupingExpressions","pinnedColumns","unpinnedColumns","showRowSelectors","rowDraggable","editRowState","onRowSelectorClick","indexClass","evenRowCSS","oddRowCSS","selectedClass","editClass","dirtyClass","deletedClass","mrlClass","dragClass","defaultDragIndicatorCssClass","rowDragging","Boolean","IgxSummaryOperand","operate","summaryResult","IgxNumberSummaryOperand","average","IgxDateSummaryOperand","latest","earliest","IgxFilterCellTemplateDirective","IgxCellTemplateDirective","IgxCellHeaderTemplateDirective","IgxCellFooterTemplateDirective","IgxCellEditorTemplateDirective","IgxCollapsibleIndicatorTemplateDirective","IgxColumnComponent","sortable","groupable","resizable","hiddenChange","expandedChange","collapsibleChange","visibleWhenCollapsedChange","disableHiding","disablePinning","movable","widthChange","_calcWidth","headerClasses","headerGroupClasses","cellStyles","sortingIgnoreCase","pinnedChange","collapsible","_pinned","_summaries","_filters","_sortStrategy","_hidden","_disablePinning","_defaultMinWidth","_hasSummary","_collapsible","_expanded","hasTransactions","isPrimaryColumn","_editable","resetSummaryHeight","filteringService","refreshExpressions","widthSetByUser","_width","defaultWidth","calcPixelWidth","cacheCalcWidth","getCalcWidth","defaultMinWidth","minVal","pin","unpin","_unpinnedIndex","removeSummariesCachePerColumn","_summaryPipeTrigger","_groupingComparer","funcRef","_bodyTemplate","_headerTemplate","_inlineEditorTemplate","_filterCellTemplate","columnGroup","vIndex","childrenVisibleIndexes","indexInCollection","columnLayout","ptr","lvl","_visibleWhenCollapsed","setExpandCollapseState","resetCaches","headTemplate","editorTemplate","filterCellTemplateDirective","filters","getGridTemplate","isRow","rowsCount","multiRowLayoutRowSize","getColumnSizesString","getInitialChildColumnSizes","columnSizes","newWidthSet","newSpanSmaller","colSpan","bothWidthsSet","bothWidthsNotSet","ref","columnWidthSetByUser","calcWidth","getFilledChildColumnSizes","getPossibleColumnWidth","getResizableColUnderEnd","spanUsed","columnSized","targets","targetsSquashed","topLevelParent","pinnable","_unpinnedColumns","_pinnedColumns","targetColumn","isPinned","onColumnPinning","_moveColumns","reinitPinStates","populateVisibleIndexes","headerCellList","filterCellList","filterCell","headerGroupsList","headerGroup","autosize","getLargestCellWidth","reflow","largest","cellsContentWidths_1","cellStyle","cellPadding","paddingRight","borderRightWidth","headerCell","headerStyle","headerPadding","largestCell","getCellWidth","colWidth","isPercentageWidth","cellWidth","featureColumnsWidth","visibleWhenCollapsed","checkCollapsibleState","IgxGridBodyDirective","RowEditPositionStrategy","isTop","isTopInitialPosition","container","ItemPropertyValueChangedDirective","valueChanged","_propName","_object","onValueChanged","ColumnChooserItemBaseDirective","indentation","IgxColumnHidingItemDirective","CustomFilteringStrategy","ColumnChooserBaseDirective","disableFilter","columnsAreaMaxHeight","_currentColumns","_gridColumns","_rawColumns","_columnDisplayOrder","DisplayOrder","_filterCriteria","_filterColumnsPrompt","_title","createColumnItems","filterCriteria","clearFiltering","orderColumns","createColumnItem","Alphabetical","localeCompare","createFilteringExpression","IgxColumnHidingComponent","showAllText","hideAllText","onColumnVisibilityChanged","columnItems","hiddenColumnsCount","hidableColumns","onVisibilityChanged","showAllColumns","collection_1","collection_1_1","hideAllColumns","collection_2","collection_2_1","IgxColumnPinningItemDirective","IgxColumnPinningComponent","checkboxValueChange","columnItem","IgxGridToolbarComponent","excelExporter","csvExporter","gridHeight","calcHeight","exportExcel","exportCsv","getTitle","toolbarTitle","getExportText","exportText","getExportExcelText","exportExcelText","getExportCsvText","exportCsvText","exportClicked","exportButton","outletDirective","exportDropdown","exportToExcelClicked","performExport","exportToCsvClicked","exp","exportType","exporter","onToolbarExporting","toggleColumnHidingUI","columnHidingButton","columnHidingDropdown","toggleColumnPinningUI","columnPinningButton","columnPinningDropdown","showAdvancedFilteringUI","openAdvancedFilteringDialog","toolbar","toolbarCustomContentTemplate","IgxRowEditTemplateDirective","IgxRowEditTextDirective","IgxRowEditActionsDirective","IgxRowEditTabStopDirective","api","activateCell","currentCellIndex","rowEditTabs","move","handleEscape","activeNode","getCellElementByVisibleIndex","lastEditableColumnIndex","firstEditableColumnIndex","isColumnFullyVisible","performHorizontalScrollToCell","IgxGridGroupByRowComponent","gridSelection","paddingIndentationCssClass","isExpandedGroup","grRowExpr","groupRowIndex","toggleGroup","rowExpandedIndicatorTemplate","defaultGroupByExpandedTemplate","rowCollapsedIndicatorTemplate","defaultGroupByCollapsedTemplate","isKeySupportedInGroupRow","handleTabKey","getColumnByName","dataView","rootSummariesEnabled","orderedColumns","gridOrderedColumns","lastCol","alt","IgxListPanState","IgxGridNavigationService","parentVirtDir","headerContainer","horizontalScroll","rowComp","summariesRowList","virtDirRow","getColumnUnpinnedIndex","isColumnRightEdgeVisible","isColumnLeftEdgeVisible","forOfDir","isColumnPinned","displayContainerWidth","displayContainerScrollLeft","isRowInEditMode","findNextEditable","gridColumns","RIGHT","isSummary","cellSelector","getCellSelector","selectedNode","isSummaryRow","getFocusableGrid","previousElementSibling","movePreviousEditable","currentColumnVisibleIndex","prevEditableColumnIndex","focusEditableTarget","moveNextEditable","nextEditableColumnIndex","rowElement","firstCell","allCells","findFirstDataRowIndex","verticalScroll","isGroupByRecord","isDetailRecord","findLastDataRowIndex","targetScr","currentRowIndex","containerTopOffset","verticalDisplayContainerElement","offsetTop","tag","getRowByIndex","focusPreviousElement","currentRowEl","focusElem","containerHeight","targetEndTopOffset","nextIndex_1","getNextRowByIndex","focusNextElement","getAllRows","goToLastBodyElement","isRowTarget","nextIsDetailRow","isLastColumn","rowEl","moveFocusToFilterCell","toStart","isFilterRowVisible","focusFilterRowCloseButton","unpinnedFilterableColumns","focusFilterCellChip","scrollToFilterCell","navigatePrevFilterCell","prevFilterableIndex","firstFiltarableCol","getFirstPinnedFilterableColumn","prevColumn","prevVisibleIndex","navigateFirstCellIfPossible","navigateNextFilterCell","nextFilterableIndex","nextColumn","nextVisibleIndex","getLastPinnedFilterableColumn","pinnedFilterableColums","prevIsDetailRow","target_1","applyFocusFunc_1","performVerticalScrollToCell","allowFiltering","filterMode","quickFilter","shouldPerformVerticalScroll","targetRowIndex","targetRow","visibleColIndex","unpinnedIndex","cellElement","getRowSelector","gridTag","toLocaleLowerCase","tbody","getClosestElemByTag","nextIndex","hasDetails","sourceElem","targetTag","icons","IgxGridCellStyleClassesPipe","callbackOrValue","IgxGridCellStylesPipe","css","IgxGridNotGroupedPipe","IgxGridTopLevelColumns","IgxGridFilterConditionPipe","IgxGridTransactionPipe","IgxGridPaginatorOptionsPipe","IgxHasVisibleColumnsPipe","hasVisibleColumns","IgxDatePipeComponent","DEFAULT_DATE_FORMAT","LOCALE_ID","DatePipe","IgxDecimalPipeComponent","DecimalPipe","ExpressionUI","IgxFilteringService","columnsWithComplexFilter","areEventsSubscribed","isFiltering","columnToExpressionsMap","columnStartIndex","_filterIconsRegistered","filteredColumn","selectedExpression","columnToFocus","shouldFocusNext","columnToMoreIconHidden","_datePipe","subscribeToEvents","onColumnResized","updateFilteringCell","updateFilterCellArea","onColumnMovingEnd","filteringRow","filterInternal","createSimpleFilteringTree","clearFilter","conditionOrExpressionTree","expressionsTreeForColumn","expressionForColumn","onFilteringDone","getExpressions","filterGlobal","registerSVGIcons","icons_1","icons_1_1","columnId","expressionUIs","generateExpressionsList","isFilteringTreeComplex","removeExpression","indexToRemove","expressionsList","beforeOperator","afterOperator","expressionUIList","currAndBranch","currExpressionUI","isFilterComplex","isComplex","getOperatorAsString","getChipLabel","datePipe","focusFirst","focusChip","closeButton","currentColumnRight","currentColumnLeft","getChildAndOperatorsCount","expressionsUIs","generateExpressionsListRecursive","exprUI","prevExprUI","isFilteringExpressionsTreeEmpty","exprTree","IgxColumnResizingService","resizeCursor","showResizer","getVisibleContentHeight","columnHeightMultiplier","actualMinWidth","minWidth","actualWidth","MAX_SAFE_INTEGER","autosizeColumnOnDblClick","currentColWidth","prevWidth","newWidth","resizeColumn","startResizePos","colMinWidth","getColMinWidth","colMaxWidth","getColMaxWidth","resizeColumnLayoutFor","isColumnResizing","pinnedMaxWidth","relativeColumns","combinedSpan","columnsToResize","updatedDiff","updatedCombinedSpan","setMinMaxCols","newCombinedSpan","newColsToResize","currentResizeWidth","resizeScaled","IgxListBaseDirective","DragScrollDirection","IgxEmptyListTemplateDirective","IgxDataLoadingTemplateDirective","IgxListItemLeftPanningTemplateDirective","IgxListItemRightPanningTemplateDirective","IgxListItemComponent","list","_panState","lastPanDir","onItemClicked","panStart","isTrue","allowLeftPanning","allowRightPanning","panMove","isPanningToLeft","showLeftPanTemplate","setContentElementLeft","maxLeft","showRightPanTemplate","maxRight","panEnd","relativeOffset","widthTriggeringGrip","panEndTriggeringThreshold","oldPanState","hideLeftAndRightPanTemplates","keepItem","onLeftPan","onRightPan","args2","oldState","newState","onPanStateChange","setLeftAndRightTemplatesVisibility","leftVisibility","rightVisibility","leftPanningTemplateElement","rightPanningTemplateElement","candidates","getElementsByClassName","IgxListThumbnailDirective","IgxListActionDirective","IgxListLineDirective","IgxListLineTitleDirective","IgxListLineSubTitleDirective","IgxListComponent","isLoading","isListEmpty","dataLoadingTemplate","defaultDataLoadingTemplate","emptyListTemplate","defaultEmptyListTemplate","IgxListComponent_1","IgxListModule","IgxExcelStyleLoadingValuesTemplateDirective","IgxExcelStyleSearchComponent","_isLoading","excelStyleLoadingValuesTemplateDirective","defaultExcelStyleLoadingValuesTemplate","refreshSize","clearInput","onCheckboxChange","itemSize","inline","IgxExcelStyleDefaultExpressionComponent","onExpressionRemoved","onLogicOperatorChanged","inputValuesDirective","expressionUI","inputGroupConditions","inputValuesElement","isConditionSelected","conditionName","getConditionName","translateCondition","getInputWidth","getCondition","getIconName","conditions","toggleCustomDialogDropDown","dropdownConditions","onConditionsChanged","onValuesInput","onLogicOperatorButtonClicked","buttonIndex","logicOperatorButtonGroup","selectedButtons","onLogicOperatorKeyDown","onRemoveButtonClick","onInputConditionsKeyDown","IgxExcelStyleDateExpressionComponent","IgxExcelStyleCustomDialogComponent","_customDialogPositionSettings","_customDialogOverlaySettings","dateExpressionTemplate","defaultExpressionTemplate","onCustomDialogOpening","selectedOperator","createInitialExpressionUIElement","onCustomDialogOpened","expressionComponents","esf","overlayComponentId","rootGrid","onClearButtonClick","closeDialog","onApplyButtonClick","onAddButtonClick","markChildrenForCheck","scrollToBottom","onApplyButtonKeyDown","createCondition","expressionDateComponents","firstExprUI","secondExprUI","expressionsContainer","IgxExcelStyleSortingComponent","sortingExpressionsChange","updateSelectedButtons","sortIndex","sortButtonGroup","sortDirection","onSortButtonClicked","isColumnGrouped","clearSort","FilterListItem","isSpecial","IgxExcelStyleSortingTemplateDirective","IgxExcelStyleMovingTemplateDirective","IgxExcelStyleHidingTemplateDirective","IgxExcelStylePinningTemplateDirective","IgxGridExcelStyleFilteringComponent","shouldOpenSubMenu","containsNullOrEmpty","selectAllSelected","selectAllIndeterminate","filterValues","listData","uniqueValues","_subMenuPositionSettings","_subMenuOverlaySettings","_column","_columnPinning","_columnVisibilityChanged","_filteringChanged","_densityChanged","isColumnPinnable","filteringExpressionsTreeChange","excelStyleSearch","populateColumnData","clearFilterClass","pinClass","onColumnMoving","closeDropdown","onPin","onHideToggle","onTextFilterClick","gridRect","dropdownRect","mainDropdown","x1","subMenu","onTextFilterKeyDown","onSubMenuClosed","onSubMenuSelection","customDialog","areExpressionsSelectable","areExpressionsValuesInTheList","firstValue","uniqueColumnValuesStrategy","renderColumnValuesRemotely","renderColumnValuesFromData","getColumnFilterExpressionsTree","colVals","columnValues","toDateString","renderValues","columnField","generateUniqueValues","generateFilterValues","generateListData","isDateColumn","shouldUpdateSelection","addBooleanItems","addItems","sortData","addBlanksItem","addSelectAllItem","gridExpressionsTree","filterListItem","selectAll","blanks","valueA","valueB","selectAllFilterItems","excelStyleSortingTemplateDirective","defaultExcelStyleSortingTemplate","excelStyleMovingTemplateDirective","defaultExcelStyleMovingTemplate","excelStylePinningTemplateDirective","defaultExcelStylePinningTemplate","excelStyleHidingTemplateDirective","defaultExcelStyleHidingTemplate","applyFilter","filterTree","IgxGridExcelStyleFilteringComponent_1","filterOptimizationThreshold","blanksItemIndex","blanksItem","onClearFilterKeyDown","showCustomFilterItem","IgxGridHeaderComponent","colResizingService","_filteringService","hostRole","defaultClasses","igx-grid__th","asc","ascending","descending","igx-grid__th--number","igx-grid__th--sortable","igx-grid__th--filtrable","igx-grid__th--sorted","klass","hasColumnGroups","maxLevelHeaderDepth","defaultRowHeight","_baseFontSize","initFilteringSettings","getSortDirection","_componentOverlayId","triggerSort","onFilteringIconClick","toggleFilterDropdown","onSortingIconClick","sortDir","filterIconTarget","filterIconClassName","_filterMenuOverlaySettings","_filterMenuPositionSettings","onOverlayOpening","onOverlayClosed","IgxGridFilteringCellComponent","currentTemplate","moreFiltersCount","onTabKeyDown","isLastElementFocused","onShiftTabKeyDown","isFirstElementFocused","isChipVisible","updateVisibleFilters","filterCellTemplate","complexFilter","defaultFilter","emptyFilter","onChipClicked","isColumnRightVisible","isColumnLeftVisible","onChipRemoved","filteringIndicatorClass","isMoreIconHidden","focusFirstElement","focusElement","ghostChip","complexChip","ex","moreIcon","chipsArea","areaWidth","viewWidth","chipsAreaElements","visibleChipsCount","moreIconWidth","areAllColumnsInView","IgxGridHeaderGroupComponent","getHeaderGroupWidth","igx-grid__th--pinned","igx-grid__th--pinned-last","isLastPinned","igx-grid__drag-col-header","isHeaderDragged","igx-grid__th--filtering","isFiltered","draggedColumn","IgxGridHeaderGroupComponent_1","IgxGridSummaryService","summaryCacheMap","rootSummaryID","summaryHeight","maxSummariesLenght","retriggerRootPipe","deleteOperation","recalculateSummaries","isGroupedColumn","deleteSummaryCache","isTreeGrid","removeAllTreeGridSummaries","isHierarchicalGrid","getSummaryID","cache","calcMaxSummaryHeight","maxSummaryLength","hasSummary","getCurrentSummaryColumn","defaultSummaryHeight","calculateSummaries","rowSummaries","updateSummaryCache","groupingArgs","compareGroupingExpressions","filteringApplied","summaryIDs","removeChildRowSummaries","newExpressions","removedCols","ungroupedColumns","newExpr","colName","IgxSummaryCellComponent","firstCellIndentation","isKeySupportedInCell","getRowElementByIndex","sr","dataRowIndex","translateSummary","summary","IgxSummaryRowComponent","getColumnSummaries","DropPosition","IgxGridDragSelectDirective","onDragStop","onDragScroll","end$","lastDirection","startDragSelection","activeDrag","_measureDimensions","_sub","_interval$","stopDragSelection","_activeDrag","clientRect","trunc","TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","TOP","BOTTOM","IgxColumnResizerDirective","restrictHResizeMin","MIN_SAFE_INTEGER","restrictHResizeMax","resizeEnd","resizeStart","resize","_left","onMousemove","onMouseup","onMousedown","IgxGridColumnResizerComponent","IgxGridFilteringRowComponent","_conditionsOverlaySettings","_operatorsOverlaySettings","chipAreaScrollOffset","isKeyPressed","isComposing","_cancelChipClick","resetExpression","addExpression","showHideArrowButtons","onTabKeydown","onEscKeydown","defaultDateUI","defaultFilterUI","onPrefixKeyDown","dropDownConditions","toggleConditionsDropDown","inputGroupPrefix","stopImmediatePropagation","onInputKeyDown","commitInput","onInputKeyUp","onCompositionStart","onCompositionEnd","datePickerClose","indexToDeselect","scrollChipsWhenAddingExpression","onClearKeyDown","onClearClick","onCommitKeyDown","onCommitClick","onInputGroupFocusout","focusedElement","onDateSelected","toggleOperatorsDropDown","dropDownOperators","unaryConditionChangedCallback","conditionChangedCallback","onChipPointerdown","onChipClick","toggleChip","onLeftArrowKeyDown","scrollChipsOnRemove","scrollChipsOnArrowPress","arrowPosition","chipAraeChildren","containerRect","containerWidth","chipsAreaWidth","showArrows","isColumnFiltered","containerRectRight","lastChipRectRight","resetChipsArea","dif","NavigationDirection","IgxColumnMovingService","_icon","IgxColumnMovingDragDirective","cms","_ghostClass","ghostImgIconClass","ghostImgIconGroupClass","_unsubscribe","cancelDrop","isColumnMoving","onColumnMovingStart","subscription$","flexBasis","createTextNode","childNodes","IgxGroupByRowTemplateDirective","IgxGridDetailTemplateDirective","IgxRowExpandedIndicatorDirective","IgxRowCollapsedIndicatorDirective","IgxHeaderExpandIndicatorDirective","IgxHeaderCollapseIndicatorDirective","IgxGroupAreaDropDirective","hovered","columnBelongsToGrid","isGrouped","innerText","column_1","closestParentByAttr","attr","closestGridID","ExpressionItem","ExpressionGroupItem","ExpressionOperandItem","IgxAdvancedFilteringDialogComponent","selectedExpressions","selectedGroups","columnSelectOverlaySettings","conditionSelectOverlaySettings","_dblClickDelay","_preventChipClick","_editingInputsContainer","scrollElementIntoView","_addModeContainer","_currentGroupButtonsContainer","overlayOutlet","_selectedColumn","selectedCondition","_grid","_filteringChange","advancedFilteringExpressionsTreeChange","dragArgs","_overlayComponentId","contextMenuToggle","calculateContextMenuTarget","onDragMove","addCondition","afterExpression","cancelOperandAdd","operandItem","enterExpressionEdit","addAndGroup","addGroup","addOrGroup","endGroup","currentGroup","commitOperandEdit","editedExpression","selectedColumn","addModeExpression","inAddMode","cancelOperandEdit","deleteItem","operandCanBeCommitted","exitOperandEdit","isExpressionGroup","rootGroup","createExpressionGroupItem","filteringExpr","exprCopy","createExpressionsTreeFromGroupItem","subTree","onChipRemove","expressionItem","_clickTimer","onToggleExpression","onChipDblClick","columnSelect","conditionSelect","searchValueInput","toggleContextMenu","enterExpressionAdd","toggleExpression","deselectParentRecursive","contextMenuClosed","contextualGroup","findSingleSelectedGroup","filteringLogics","op","isInsideGroup","createAndGroup","createGroup","createOrGroup","chips","minIndex","MAX_VALUE","firstExpression","deleteFilters","onGroupClick","toggleGroupRecursive","operandExpression","minTop","targetOffset","ungroup","selectedGroup","deleteGroup","selectFilteringLogic","getConditionFriendlyName","onExpressionsScrolled","invokeClick","onOutletPointerDown","getConditionList","setAddButtonFocus","addRootAndGroupButton","addConditionButton","applyChanges","cancelChanges","onChipSelectionEnd","IgxRowSelectorDirective","templateRef","IgxHeadSelectorDirective","IgxGridToolbarCustomContentDirective","IgxColumnGroupComponent","QueryList","_collapseIndicatorTemplate","collapseIndicatorTemplate","isChildrenWidthInPercent","IgxColumnGroupComponent_1","IgxRowDragDirective","_rowDragStarted","transitionEndEvent","endDragging","onRowDragStart","onRowDragEnd","dropArea","expander","expanderWidth","rowRect","ghostCells","IgxDragIndicatorIconDirective","IgxRowDragGhostDirective","IgxRowDragModule","IgxGridTransaction","IgxGridBaseDirective","differs","viewRef","_cdrRequests","_cdrRequestRepaint","_emptyGridMessage","_emptyFilteredGridMessage","_destroyed","overlayIDs","_advancedFilteringPositionSettings","_advancedFilteringOverlaySettings","autoGenerate","pageChange","perPageChange","columnHidingTitle","columnPinningTitle","onRowEditCancel","onColumnInit","onSortingDone","onPagingDone","onRowAdded","onGridCopy","expansionStatesChange","tmpOutlets","headerExpandIndicatorTemplate","headerCollapseIndicatorTemplate","columnsWithNoSetWidths","_showToolbar","_exportExcel","_exportCsv","_toolbarTitle","_exportText","_exportExcelText","_exportCsvText","_rowEditable","_filteredSortedData","toolbarHtml","clipboardOptions","copyHeaders","copyFormatters","separator","chipsGoupingExpressions","activeMatchIndex","matchInfoCache","_perPage","_page","_paging","_hideRowSelectors","_rowDrag","_filteringPipeTrigger","_columns","_filteringExpressionsTree","_sortingExpressions","_maxLevelHeaderDepth","_columnHiding","_allowFiltering","_allowAdvancedFiltering","_filterMode","observer","resizeNotify","_hiddenColumnsText","_pinnedColumnsText","_height","_horizontalForOfs","_multiRowLayoutRowSize","_expansionStates","_defaultExpandState","_totalWidth","_pinnedVisible","_unpinnedVisible","_pinnedWidth","_unpinnedWidth","_visibleColumns","_columnGroups","_headerFeaturesWidth","_defaultTargetRecordNumber","_summaryPosition","_summaryCalculationMode","rootAndChildLevels","_cellSelectionMode","_rowSelectionMode","rowEditPositioningStrategy","rowEditSettings","rowOutletDirective","wheelHandler","changeRowEditingOverlayStateOnScroll","hideOverlays","horizontalScrollHandler","vfor","keydownHandler","isNavigationKey","isScroll","compareDocumentPosition","DOCUMENT_POSITION_CONTAINS","tfoot","rowEditingWheelHandler","_scrollWidth","Regular","_advancedFilteringExpressionsTree","Advanced","navigateTo","refreshGridState","_hostWidth","evaluateLoadingState","calcGridHeadRow","_filteringStrategy","_sortingStrategy","headerGroups","_summaryRowList","sumList","_rowList","rList","_dataRowList","toolbarCustomContentTemplates","headSelectorsTemplates","rowSelectorsTemplates","_outletDirective","rowEditingOutletDirective","rowEditCustom","defaultRowEditTemplate","_customDragIndicatorIconTemplate","dragIndicatorIconTemplates","rowEditTabsCUSTOM","rowEditTabsDEFAULT","_currentRowState","getExportExcel","getExportCsv","selectionMode","overlayID","_setupServices","_setupListeners","_advancedFilteringOverlayId","$event","isPercentHeight","getDataBasedBodyHeight","calculateGridHeight","calculateGridSizes","columnListDiffer","shouldGenerate","getScrollWidth","setupColumns","autogenerateColumns","initColumns","onColumnsChanged","resetColumnsCaches","resetForOfCache","firstVirtRow","resetColumnCollections","resetCachedWidths","recalcFeatureWidth","_setupRowObservers","elementFilter","isDefined","extractForOfs","rowListObserver","summaryRowObserver","combineLatest","_zoneBegoneListeners","initPinning","reattach","vertScrDC","displayContainer","resetNotifyChanges","getDragGhostCustomTemplate","dragGhostCustomTemplates","tmplOutlet","dataLoading","toggleColumnVisibility","expandAll","collapseAll","expandRow","collapseRow","toggleRow","paginatorClassName","getPinnedWidth","getUnpinnedWidth","unpinnedWidth","rowSelectArea","headerSelectorContainer","rowDragArea","headerDragContainer","groupableArea","headerGroupContainer","defaultHeaderGroupMinWidth","getRowByKey","keyValue","getCellByColumn","getCellByKey","pagingState","nextPage","isLastPage","previousPage","isFirstPage","hideRowSelectors","to","fromIndex","toIndex","BeforeDropTarget","AfterDropTarget","newList","_resetColumnList","_reorderColumns","columnCollection","dropIndex","_moveChildColumns","buffer","moveColumn","dropTarget","fi","ti","paginate","addRow","deleteRow","updateCell","updateRow","enableSummaries","rest","_multipleSummaries","disableSummaries","_disableMultipleSummaries","pinColumn","unpinColumn","findNext","findPrev","updateActiveInfo","rebuildMatchCache","activeInfo_1","clearSearch","summaryCalculationMode","childLevelsOnly","_hasVisibleColumns","dataLength","_derivePossibleWidth","MINIMUM_COLUMN_WIDTH","columnWidthCombined","allItems","theadRow","minHeight","summariesHeight","_calculateGridBodyHeight","getGroupAreaHeight","getToolbarHeight","toolbarHeight","showToolbar","getPagingHeight","pagingHeight","getFilterCellHeight","headerGroupNativeEl","filterCellNativeEl","actualTheadRow","footerHeight","renderedHeight","computed","_shouldAutoSize","bodyHeight","defaultTargetBodyHeight","checkContainerSizeChange","origHeight","hasVerticalSroll","scrollWidth","baseWidth","computedWidth","visibleChildColumns","visibleCols","colsPerBlock","block","combinedBlocksSize","blockCols","columnsWithSetWidths","columnsToSize","sumExistingWidths","curr","widthValue","calculateGridWidth","isPercentWidth","getColumnWidthSum","colSum","added_1","removed_1","hasScroll","repositionRowEditingOverlay","isStable","_applyWidthHostBinding","currentWidth","takeHidden","fc","fc_1","fc_1_1","hostWidth","summaryOperand","customSummary","resolveDataTypes","fields","generateDataFields","onlyTopLevel","layoutSize","columnLayoutColumns","onHeaderSelectorClick","selectedRows","selectRows","deselectRows","onlyFilterData","deselectAllRows","clearCellSelection","dragScroll","arg","columnToVisibleIndex","startNode","endNode","getSelectedRanges","extractDataFromSelection","formatters","selectedData","activeEl","selectionMap","tuple","cellSelection","single","detailsData","temp_1","temp_1_1","getSelectableColumnsAt","selectionMap_1","selectionMap_1_1","colLayout","getSelectedData","copyHandlerIE","copyHandler","ie11","setData","childGridsData","shouldScrollVertically","shouldScrollHorizontally","executeCallback","getNextCell","currRowIndex","curVisibleColIndex","isValidPosition","colIndexes","editCol","nextCellIndex","getNextDataRowIndex","getPreviousCell","prevCellIndex","getPrevDataRowIndex","summaryCell","summaryCells","hierarchicalRow","dataCell","prevRow","nextRow","trackColumnChanges","increment","rebuildCache","matchInfo","inCollection","delayScrolling","scrollDirective","scrollToHorizontally","scrollRow","goal","c1","c2","numberPipe","dataRow","occurenceIndex","searchIndex","_group","rowEditingOverlay","toggleRowEditingOverlay","shouldOverlayLoading","loadingOutlet","_loadingId","loadingOverlay","configureRowEditingOverlay","closeRowEditingOverlay","rowStyle","useOuter","parentRowOutletDirective","rowChanges","writeToData","endRowTransaction","gridOutletKeyboardHandler","activeCell","hasHorizontalScroll","_restoreVirtState","rowForOf","gridScrLeft","viewDetachHandler","focusedCell","cachedViewLoaded","tmplId_1","templateID","index_1","summaryRow","closeAdvancedFilteringDialog","advancedFilteringDialog","IgxGridAPIService","groupingState","arrange_sorting_expressions","groupBy_multiple","names_1","groupedCols","newSortingExpr","grExprIndex","grpExpandState","groupingExpansionState","grExpr","sortExprIndex","groupingState_1","groupingState_1_1","groupBy_get_expanded_for_group","grState","groupBy_is_row_in_group","rowInGroup","groupBy_toggle_group","expansionState","groupsExpanded","groupBy_fully_expand_group","groupExprA","groupExprB","get_groupBy_record_id","recordId","hierrarchy","groupByKey","IgxGridMRLNavigationService","startNavigationCell","applyNavigationCell","navDirection","oppositeDir","focusCellUpFromLayout","focusCellDownFromLayout","isParentColumnFullyVisible","scrollPos","getChildColumnScrollPositions","rightScroll","leftScroll","focusNextCellFromLayout","focusPrevCellFromLayout","nextElementColumn","_moveFocusToCell","nextCell_1","currCell","_focusCell","lastVisibleIndex_1","prevElementColumn","movePrev","isNonDataRow","_isDetailRecordAt","currentRowStart","currentColStart","parentIndex","upperElementColumn","layoutRowEnd_1","moveNext","currentRowEnd","currentColEnd","nextElement","layoutSize_1","prevElement","cellRowStart","layouts","lastLayout","lastLayoutChildren","indexInLayout","allBlocks","getColumnLayoutSelector","firstLayout","targetCol","getColunmByVisibleIndex","parentVIndex","childSizes","_isGroupRecordAt","getVerticalScrollPositions","topOffset","verticalDCTopOffset","rowBottom","isPrevious","rowTop","hScroll","cellElem","gridBoundingClientRect","diffTop","diffBottom","IgxGridComponent","_groupingExpressions","_groupingExpandState","_hideGroupedColumns","_dropAreaMessage","childDetailTemplates","groupingExpressionsChange","groupingExpansionStateChange","onGroupingDone","detailTemplate","_focusIn","oldExpressions","_gridAPI","_applyGrouping","groupedCols_1","ungroupedCols_1","groupingDoneArgs","groupedColumns","groupingDiffer","_setGroupColsVisibility","_groupsRowList","item1","item2","onFocusIn","getDetailsContext","preventContainerScroll","activeElem_1","currRow","nextCellTarget","nextRowTarget","trackChanges","detailsViewFocused","detailsKeyboardHandler","lastColIndex_1","gridDetailsTemplate","getRowTemplate","defaultGroupTemplate","summaryTemplate","detailTemplateContainer","recordTemplate","_groupRowTemplate","_groupAreaTemplate","checkIfNoColumnField","clearGrouping","_getStateForGroupRow","_toggleGroup","fullyExpandGroup","_fullyExpandGroup","toggleAllGroupRows","cachedData","tmlpOutlet","moveView","viewCreatedHandler","viewMovedHandler","emptyGridTemplate","emptyFilteredGridTemplate","emptyGridDefaultTemplate","loadingGridTemplate","loadingGridDefaultTemplate","chipsOrderChanged","newGrouping","KeyboardEvent","chipsMovingEnded","columnExpr","groupArea","groupingResult","groupByRecord","groupingMetadata","groupingFlatResult","dropAreaTemplate","defaultDropAreaTemplate","getGroupByChipTitle","defaultExpandedTemplate","defaultCollapsedTemplate","getColumnGroupable","excelStyleFilter","groupTemplate","hideGroupedColumns","_setupNavigationService","source_1","expression_1","expression_1_1","IgxGridComponent_1","IgxGridStateDirective","_options","advancedFiltering","serialize","feature","getGridFeature","getAllGridFeatures","stringifyCallback","setState","restoreGridState","restoreFeature","restoreColumns","restoreFiltering","restoreAdvancedFiltering","restoreSorting","restoreGroupBy","restorePaging","restoreRowSelection","restoreCellSelection","gridState","getColumns","getFiltering","getAdvancedFiltering","getSorting","getGroupBy","getPaging","getRowSelection","getCellSelection","sortByVisibleIndex","columnsState","newColumns","colState","colA","colB","createExpressionsTreeFromObject","advFilterTree","exprTreeObject","expr_1","generateFilteringCondition","IgxGridStateModule","IgxGridSharedModules","IgxColumnHidingModule","IgxGridFooterComponent","IgxPaginatorComponent","defaultSelectValues","pagerEnabled","pagerHidden","dropdownEnabled","dropdownHidden","selectLabel","_selectOptions","sortUniqueOptions","totalRecords","_totalRecords","newOption","paginatorSelectDisplayDensity","IgxPaginatorModule","IgxGridPipesModule","IgxExcelStyleColumnMovingComponent","findColumn","onMoveButtonClicked","moveDirection","IgxExcelStyleSearchFilterPipe","it","IgxGridExcelStyleFilteringModule","IgxGridSelectionModule","IgxResizeHandleDirective","_dblClick","DEBOUNCE_TIME","_onResizeAreaMouseDown","resizeLine","resizer","onMouseOver","IgxGridResizingModule","IgxColumnMovingDropDirective","_dropIndicator","_lastDropIndicator","_dragLeave","_dropIndicatorClass","_hVirtDir","hasMovableColumns","isDropTarget","_dropPos","lastElementChild","IgxColumnMovingModule","IgxSummaryDataPipe","IgxGridSummaryModule","IgxColumnPinningModule","IgxGridToolbarModule","IgxColumnLayoutComponent","borderWidth","hasLastPinnedChildColumn","headerStyles","orderedCols","rs","IgxColumnLayoutComponent_1","IgxGridColumnModule","IgxGridFilteringModule","IgxGridHeadersModule","IgxGridCommonModule","IgxGridSortingPipe","IgxGridGroupingPipe","IgxGridPagingPipe","IgxGridFilteringPipe","IgxGridRowComponent","_cells","cList","IgxGridRowComponent_1","IgxGridSummaryPipe","summaryPosition","summaryPipeTrigger","rootLevelOnly","addSummaryRows","gridId","recordsWithSummary","lastChildMap","maxSummaryHeight","g","skipAdd","groupRecords","groupRecord","groupRecordId","removeDeletedRecord","summaryRecord","lastChild","lastChildId","IgxGridDetailsPipe","addDetailRows","detailsObj","IgxGridExpandableCellComponent","onIndicatorFocus","indicatorWidth","indicator","indicatorStyle","indicatorMargin","marginRight","leftPadding","indentationDiv","indentationStyle","IgxGridModule","IgxTreeGridAPIService","flatData","processedRootRecords","loadChildrenOnDemand","hasChildrenKey","expand_path_to_record","expansionDepth","foreignKey","childData","treeGrid","flatDataWithCascadeOnDeleteAndTransactions","cascadeOnDelete","selectedChildren","get_selected_children","generateRowPath","selectedRowIDs","row_deleted_parent","IgxTreeGridNavigationService","IgxRowLoadingIndicatorTemplateDirective","IgxTreeGridComponent","processedRecords","_expansionDepth","Infinity","loadingRows","_rowLoadingIndicatorTemplate","loadChildrenOnRowExpansion","rowLoadingTemplate","parentID_1","addChildRows","parentID","children_1","children_1_1","parentData","pid","cloneMap","mapIn","mapCloned","mapObj","parentRecord","childKey","processedExpandedFlatData","nonColumnLayoutColumns","IgxTreeGridComponent_1","IgxTreeGridRowComponent","_treeRow","treeRow","IgxTreeGridRowComponent_1","IgxTreeGridHierarchizingPipe","hierarchicalRecords","treeGridRecordsMap","hierarchizeFlatData","hierarchizeRecursive","getRowID","missingParentRecords","setIndentationLevels","indentationLevel","IgxTreeGridFlatteningPipe","expandedLevels","getFlatDataRecursive","parentExpanded","updateNonProcessedRecordExpansion","IgxTreeGridSortingPipe","flattenTreeGridRecords","records_1","records_1_1","IgxTreeGridPagingPipe","IgxTreeGridTransactionPipe","aggregatedChanges","flatDataClone","hierarchicalDataClone","cloneHierarchicalArray","array_1","array_1_1","clonedItem","IgxTreeGridCellComponent","showIndicator","treeGridAPI","onLoadingDblClick","IgxTreeGridSummaryPipe","isExpanded","cellIndentation","childRecord","deletedRows","lenght","IgxTreeGridModule","IgxHierarchicalGridNavigationService","getChildContainer","getChildGridRowContainer","getChildGrid","childGridID","hgridAPI","getIsChildAtIndex","isChildGridRecord","prevElem","focusPrevChild","_navigateUpInChild","scrollGrid","focusPrev","nextElem","focusNextChild","_navigateDownInChild","focusNext","topIsVisible","getNextScrollable","targetIndex_1","scrTopPosition","verticalScrollTop","cellSelector_1","endIsVisible","getNextScrollableDown","targetIndex_2","rowIsVisible","gridTop","_getMaxTop","scrGrid","topGrid","summaryRows","hasSummaries","isLastDataRow","nextIsDataRow","isLastSummaryRow","virt","isNextChild","_navigateToNextParentRow","focusNextRow","childContainer","focusNextChildDOMElem","parentHasSummary","parentRowIndex","isLastRowInParent","nextIsSiblingChild","parentSummary","childGrid","targetGrid","prevSiblingChild","gridElem","dataRows","hasRows","performShiftTabIntoChild","selNode","getLastGridElem","lastRowIndex_1","closestChild","trContainer","focusPrevRow","prevChild","getSibling","prevChildRow","childRow","lastCellIndex","grids","gridElems","childLevel","childLayoutList","hg","parentRow","isScrolledToBottom","lastRowInChild","currGrid","parentContainer","childRowContainer","prevIsSiblingChild","getNextParentInfo","nonScrollable","parentInfo","nextParentGrid","nextParentElem","parentState","atLastChunk","_getMinBottom","cell_1","closestScrollableGrid","gridBottom","inView","canScroll","horizontalScrollGridToIndex","inChild","cellSelector_2","cell_2","rIndex_1","scrTop","callBackFunc","containerTop","IgxHierarchicalTransactionServiceFactory","useFactory","hierarchicalTransactionServiceFactory","IgxHierarchicalGridBaseDirective","transactionFactory","showExpandAll","createColumnsList","_createColumn","_createColGroupComponent","_createColComponent","factoryGroup","inputs","newChildren_1","newCol","factoryColumn","getGridsForIsland","rowIslandID","getChildGridsForRowIsland","IgxSliderType","SliderHandle","TickLabelsOrientation","TicksOrientation","IgxHierarchicalGridAPIService","currPath","pathElem","childrenForLayout","layoutMap","getParentRowId","inState","ri","IgxRowIslandComponent","childColumns","onLayoutChange","onGridCreated","initialChanges","layout_id","isInit","expandChildren","updateOnRender","pId","parentId","parentIsland","updateChildren","onRowIslandChange","nestedColumns","colsArray","topCols","cleanGridState","childGridTemplates","tmpl","IgxRowIslandComponent_1","IgxChildGridRowComponent","parentGrid","ch","_handleLayoutChanges","hGrid","setupEventEmitters","inputNames","outputs","matchingInputPropName","output","IgxHierarchicalGridComponent","hierarchicalStateChange","childLayoutKeys","highlightedRowID","h_id","hg_verticalScrollHandler","hg_horizontalScrollHandler","dragIndicatorIconTemplate","headerHierarchyExpander","recalcColSizes","allLayoutList","colLength","_clearSeletionHighlights","isRowHighlighted","isHierarchicalRecord","hasExpandedRecords","hasExpandableChildren","rootHeight","topDiff","toggleAll","hasExpandedEntry","relatedGrid","vScr","hScr","inDeph","onContainerScroll","IgxHierarchicalGridComponent_1","IgxHierarchicalGridCellComponent","helement","_rootGrid","_getRootGrid","_clearAllHighlights","currentElement","IgxHierarchicalRowComponent","deselect","expanderClick","expandable","defaultEmptyTemplate","IgxHierarchicalRowComponent_1","IgxGridHierarchicalPipe","childKeys","addHierarchy","IgxGridHierarchicalPagingPipe","IgxHierarchicalGridModule","IgxActionIconDirective","IgxNavbarComponent","titleId","IgxNavbarComponent_1","actionIconTemplate","actionButtonIcon","_triggerAction","IgxNavbarModule","IgxNavDrawerItemDirective","activeClass","IgxNavDrawerTemplateDirective","IgxNavDrawerMiniTemplateDirective","IgxNavigationDrawerComponent","_state","_touchManager","_isOpen","enableGestures","isOpenChange","pinThreshold","miniWidth","pinChange","opened","closing","_gesturesAttached","_widthCache","windowWidth","drawer","mini","styleDummy","_panning","_maxEdgeZone","checkPinThreshold","getWindowWidth","swipe","startPosition","center","distance","maxEdgeZone","panstart","_panStartWidth","getExpectedWidth","_panLimit","visibleWidth","newX","percent","hasAnimateWidth","setXSize","toPrecision","resetPan","toggleOpenedEvent","toggleClosedEvent","miniTemplate","contentTemplate","_miniTemplate","setDrawerWidth","_drawer","_overlay","_styleDummy","updateEdgeZone","ensureEvents","_resizeObserver","set_maxEdgeZone","innerWidth","screen","getDrawerWidth","IgxNavigationDrawerModule","IgxThumbFromTemplateDirective","IgxThumbToTemplateDirective","IgxTickLabelTemplateDirective","SwitchLabelPosition","IgxSliderThumbComponent","_elementRef","_isActive","_isPressed","onThumbValueChange","onChange","onHoverChange","thumbBounderies","thumbCenter","FROM","TO","onPan","mouseX","updateThumbValue","onPinterEnter","onPointerLeave","onFocusListener","showThumbIndicators","toggleThumbIndicators","hideThumbIndicators","calculateTrackUpdate","scaleX","thumbPositionX","stepDistanceCenter","stepDistance","stepToProceed","stepDist","continuous","deactiveState","IgxThumbLabelComponent","IgxTicksComponent","ticksClass","ticksOrientation","primaryTicks","tickLabelsOrientation","TopToBottom","BottomToTop","idx","tickLabel","isPrimary","labels","secondaryTicks","hiddenTickLabels","primaryTickLabels","secondaryTickLabels","labelsViewEnabled","labelVal","ticksLength","toFixed","IgxTickLabelsPipe","IgxSliderComponent","_ngZone","_pMin","_pMax","_hasViewInit","_minValue","_maxValue","_continuous","_primaryTicks","_secondaryTicks","_labels","SLIDER","_destroyer$","_indicatorsDestroyer$","thumbs","labelRefs","slierClass","thumbLabelVisibilityDuration","showTicks","Horizontal","thumb","lowerValue","upperValue","updateTrack","valueToFraction","upperBound","lowerBound","calculateStepDistance","positionHandlersAndUpdateTrack","setTickInterval","normalizeByStep","disable","changeThumbFocusableState","updateUpperBoundAndMaxTravelZone","updateLowerBoundAndMinTravelZone","_lowerBound","_upperBound","isRange","lower","upper","validateInitialValue","Mirror","findClosestThumb","thumbTo","thumbFrom","showSliderIndicators","releasePointerCapture","hideSliderIndicators","toggleSliderIndicators","onPanListener","_lowerValue","_upperValue","sliderSetup","subscribeTo","thumbChanged","positionHandler","labelFrom","Observable","thumbType","swapThumb","hasValueChanged","emitValueChanged","onThumbChange","toggleThumb","closestHandle","generateTickMarks","thumbHandle","labelHandle","positionLeft","labelTo","fromOffset","offsetLeft","toOffset","xPointer","closestTo","trackRange","renderCallbackExecution","ticks","_indicatorsTimer","positions","pMin","pMax","positionGap","trackLeftIndention","trackRef","isSliderWithDifferentValue","isRangeWithOneDifferentValue","IgxSliderComponent_1","IgxSliderModule","IgxSnackbarComponent","autoHide","displayTime","animationStarted","triggerAction","snackbarAnimationStarted","fromState","snackbarAnimationDone","toOpacity","IgxSnackbarModule","ButtonStyle","IgxSwitchComponent","switch","_onSwitchChange","_onSwitchClick","IgxSwitchComponent_1","IGX_SWITCH_REQUIRED_VALIDATOR","IgxSwitchRequiredDirective","IgxSwitchModule","IgxTabTemplateDirective","IgxBottomNavComponent","onTabSelected","onTabDeselected","selectedIndex","_itemStyle","hasContentTabs","contentTabs","viewTabs","tabs","panels","_selectedPanelHandler","tab","_deselectTab","_deselectPanel","selectedTab","aTab","IgxTabComponent","IgxTabPanelComponent","_tabBar","_isSelected","relatedTab","changesCount","_tabTemplate","tabTemplate","ariaDisabled","ariaSelected","ariaControls","_changesCount","relatedPanel","customTabTemplate","customTabTemplateDir","defaultTabTemplate","IgxBottomNavModule","IgxTabsBase","scrollElement","scrollRight","performSelectionChange","newTab","transformContentAnimation","transformIndicatorAnimation","IgxTabItemBase","setSelectedInternal","IgxTabsGroupBase","IgxTabsType","IgxRightButtonStyleDirective","getRightButtonStyle","VISIBLE","HIDDEN","NOT_DISPLAYED","viewPortWidth","viewPort","itemsContainerChildrenCount","itemsContainer","itemsContainerWidth","lastTab","headerContainerWidth","IgxLeftButtonStyleDirective","getLeftButtonStyle","IgxTabItemTemplateDirective","IgxTabItemComponent","_tabs","_nativeTabItem","relatedGroup","isLeftArrow","tabsArray","IgxTabsGroupComponent","IgxToastPosition","IgxTabsComponent","selectedIndexChange","onTabItemDeselected","onTabItemSelected","_selectedIndex","iconLabelFoundInGroups","iconLabelFoundInTabs","FIXED","performSelection","hideIndicator","tabsContainer","_groupChanges$","resetSelectionOnCollectionChanged","currentTab","tabsArray_1","tabsArray_1_1","nativeTabItem","oldTab","selectedTabItem","performDeselection","oldTabRelatedGroup","newTabRelatedGroup","bringNewTabIntoView","tabNativeElement","viewPortOffsetWidth","contentOffset","contentsContainer","selectedIndicator","IgxTabsComponent_1","IgxTabsModule","IGX_TIME_PICKER_COMPONENT","IgxItemListDirective","timePicker","nextHour","nextMinute","nextSeconds","nextAmPm","prevHour","prevMinute","prevSeconds","prevAmPm","listName","minuteList","secondsList","ampmList","hourList","okButtonClick","cancelButtonClick","onHover","onPanMove","IgxHourItemDirective","itemList","isSelectedHour","selectedHour","scrollHourIntoView","IgxMinuteItemDirective","isSelectedMinute","selectedMinute","scrollMinuteIntoView","IgxSecondsItemDirective","isSelectedSeconds","selectedSeconds","scrollSecondsIntoView","IgxAmPmItemDirective","isSelectedAmPm","selectedAmPm","scrollAmPmIntoView","IgxTimePickerTemplateDirective","IgxTimePickerActionsDirective","TimeDisplayFormatPipe","hour","amPM","maskAmPM","sections","showHoursList","showMinutesList","showSecondsList","showAmPmList","prompt","regExp","hourVal","minutesVal","secondsVal","lastIndexOf","TimeInputFormatPipe","cleared","leadZeroHour","leadZeroMinutes","leadZeroSeconds","TimePickerHammerConfig","IgxTimePickerComponent","_hourItems","_minuteItems","_secondsItems","_ampmItems","isNotEmpty","displayFormat","inputFormat","_okButtonLabel","_cancelButtonLabel","_itemsDelta","_isHourListLoop","_isMinuteListLoop","_isSecondsListLoop","_hourView","_minuteView","_secondsView","_ampmView","_hoursPos","_minutesPos","_secondsPos","_amPmPos","_isValueValid","dispVal","_formatTime","_displayValue","displayValue","setThroughUI","formatValue","trimMask","determineCursorPos","_dialogOverlaySettings","_mask","secondsEntries","minuteEntries","hourEntries","timePickerTemplateDirective","defaultTimePickerTemplate","dropdownInputTemplate","_generateHours","_generateMinutes","_generateSeconds","_generateAmPm","spinOnEdit","_onDropDownClosed","onKeydownSpace","onAltArrowDown","clearCursorPos","_scrollItemIntoView","isListLoop","viewType","itemIntoView","_itemToString","_nextItem","_prevItem","_viewToString","minute","itemsCount","formattedSeconds","formattedMinute","formattedHour","_updateHourView","_updateMinuteView","_updateSecondsView","_updateAmPmView","_addEmptyItems","hourItemsCount","itemsDelta","minuteItemsCount","secondsItemsCount","_getSelectedTime","_convertMinMaxValue","_dateFromModel","_isEntryValid","validH","validM","validS","re","validHourEntries","validMinuteEntries","validSecondsEntries","_updateEditableInput","_spinHours","currentVal","maxVal","hDelta","_spinMinutes","mDelta","_spinSeconds","sDelta","_initializeContainer","_prevSelectedHour","_prevSelectedMinute","_prevSelectedSeconds","_prevSelectedAmPm","_input","hourIntoView","minuteIntoView","secondsIntoView","ampmIntoView","time","hoursInView","minutesInView","secondsInView","ampmInView","ampm","preserveAmPm","maskWithAmPm","pureMask","displayVal","cursorOnHours","cursorOnMinutes","cursorOnSeconds","cursorOnAmPm","showHours","showMinutes","showSeconds","showAmPm","IgxTimePickerComponent_1","IgxTimePickerModule","IgxToastComponent","_isVisible","CSS_CLASSES","IGX_TOAST_BOTTOM","IGX_TOAST_MIDDLE","IGX_TOAST_TOP","onShowing","onShown","onHiding","onHidden","isVisibleChange","mapPositionToClassName","IgxToastModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","enum EaseIn {\n    quad = `cubic-bezier(0.550, 0.085, 0.680, 0.530)` as any,\n    cubic = `cubic-bezier(0.550, 0.055, 0.675, 0.190)` as any,\n    quart = `cubic-bezier(0.895, 0.030, 0.685, 0.220)` as any,\n    quint = `cubic-bezier(0.755, 0.050, 0.855, 0.060)` as any,\n    sine = `cubic-bezier(0.470, 0.000, 0.745, 0.715)` as any,\n    expo = `cubic-bezier(0.950, 0.050, 0.795, 0.035)` as any,\n    circ = `cubic-bezier(0.600, 0.040, 0.980, 0.335)` as any,\n    back = `cubic-bezier(0.600, -0.280, 0.735, 0.045)` as any\n}\n\nenum EaseOut {\n    quad = `cubic-bezier(0.250, 0.460, 0.450, 0.940)` as any,\n    cubic = `cubic-bezier(0.215, 0.610, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.165, 0.840, 0.440, 1.000)` as any,\n    quint = `cubic-bezier(0.230, 1.000, 0.320, 1.000)` as any,\n    sine = `cubic-bezier(0.390, 0.575, 0.565, 1.000)` as any,\n    expo = `cubic-bezier(0.190, 1.000, 0.220, 1.000)` as any,\n    circ = `cubic-bezier(0.075, 0.820, 0.165, 1.000)` as any,\n    back = `cubic-bezier(0.175, 0.885, 0.320, 1.275)` as any\n}\n\nenum EaseInOut {\n    quad = `cubic-bezier(0.455, 0.030, 0.515, 0.955)` as any,\n    cubic = `cubic-bezier(0.645, 0.045, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.770, 0.000, 0.175, 1.000)` as any,\n    quint = `cubic-bezier(0.860, 0.000, 0.070, 1.000)` as any,\n    sine = `cubic-bezier(0.445, 0.050, 0.550, 0.950)` as any,\n    expo = `cubic-bezier(1.000, 0.000, 0.000, 1.000)` as any,\n    circ = `cubic-bezier(0.785, 0.135, 0.150, 0.860)` as any,\n    back = `cubic-bezier(0.680, -0.550, 0.265, 1.550)` as any\n}\n\nexport { EaseIn, EaseOut, EaseInOut };\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../interface';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","import { IToggleView } from './IToggleView';\nimport { Injectable } from '@angular/core';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\n@Injectable()\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport ResizeObserver from 'resize-observer-polyfill';\n\n/**\n *@hidden\n */\nexport function cloneArray(array: any[], deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        const clonedItem = cloneValue(item);\n        if (Array.isArray(item[childDataKey])) {\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n        }\n        result.push(clonedItem);\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    if (!isObject(obj1)) {\n        throw new Error(`Cannot merge into ${obj1}. First param must be an object.`);\n    }\n\n    if (!isObject(obj2)) {\n        return obj1;\n    }\n\n    for (const key of Object.keys(obj2)) {\n        obj1[key] = cloneValue(obj2[key]);\n    }\n\n    return obj1;\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport function isDate(value: any) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n *@hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n\n/**\n *@hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    LEFT_ARROW_IE = 'Left',\n    UP_ARROW = 'ArrowUp',\n    UP_ARROW_IE = 'Up',\n    RIGHT_ARROW = 'ArrowRight',\n    RIGHT_ARROW_IE = 'Right',\n    DOWN_ARROW = 'ArrowDown',\n    DOWN_ARROW_IE = 'Down',\n    F2 = 'F2',\n    TAB = 'Tab'\n}\n\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = getNodeSizeViaRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaRange(range: Range, node: any): number {\n    let overflow = null;\n    if (!isFirefox()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (!isFirefox()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n *@hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n *@hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n *@hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/**\n * @hidden\n */\n@Injectable({ providedIn: 'root' })\nexport class PlatformUtil {\n    public isBrowser: boolean = isPlatformBrowser(this.platformId);\n\n    public isIOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n    }\n}\n\n/**\n * @hidden\n */\nexport function isLeftClick(event: PointerEvent) {\n    return event.button === 0;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return [\n        'down',\n        'up',\n        'left',\n        'right',\n        'arrowdown',\n        'arrowup',\n        'arrowleft',\n        'arrowright',\n        'home',\n        'end',\n        'space',\n        'spacebar',\n        ' '\n    ].indexOf(key) !== -1;\n}\n\n/**\n *@hidden\n */\nexport function flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            const children = Array.isArray(el.children) ? el.children : el.children.toArray();\n            result = result.concat(flatten(children));\n        }\n    });\n    return result;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n\nexport interface IBaseEventArgs {\n    /**\n     * Provides reference to the owner component.\n     */\n    owner?: any;\n}\n\nexport interface CancelableBrowserEventArgs extends CancelableEventArgs {\n    /** Browser event */\n    event?: Event;\n}\n\nexport const NAVIGATION_KEYS = new Set([\n    'down',\n    'up',\n    'left',\n    'right',\n    'arrowdown',\n    'arrowup',\n    'arrowleft',\n    'arrowright',\n    'home',\n    'end',\n    'space',\n    'spacebar',\n    ' '\n]);\nexport const ROW_EXPAND_KEYS = new Set('right down arrowright arrowdown'.split(' '));\nexport const ROW_COLLAPSE_KEYS = new Set('left up arrowleft arrowup'.split(' '));\nexport const SUPPORTED_KEYS = new Set([...Array.from(NAVIGATION_KEYS), 'tab', 'enter', 'f2', 'escape', 'esc']);\n\n/**\n * @hidden\n * @internal\n *\n * Creates a new ResizeObserver on `target` and returns it as an Observable.\n * Run the resizeObservable outside angular zone, because it patches the MutationObserver which causes an infinite loop.\n * Related issue: https://github.com/angular/angular/issues/31712\n */\nexport function resizeObservable(target: HTMLElement): Observable<ResizeObserverEntry[]> {\n    return new Observable((observer) => {\n        const instance = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n            observer.next(entries);\n        });\n        instance.observe(target);\n        const unsubscribe = () => instance.disconnect();\n        return unsubscribe;\n    });\n}\n","import { ISortingStrategy } from './sorting-strategy';\nimport { IBaseEventArgs } from '../core/utils';\n\n/**\n * Represents sorting expressions.\n */\nexport enum SortingDirection {\n    None = 0,\n    Asc = 1,\n    Desc = 2\n}\n\nexport interface ISortingExpression extends IBaseEventArgs {\n   fieldName: string;\n   dir: SortingDirection;\n   ignoreCase?: boolean;\n   strategy?: ISortingStrategy;\n}\n","import { IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\n\nexport function isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n    if (h1.length !== h2.length) {\n        return false;\n    }\n    return h1.every((level, index): boolean => {\n        return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n    });\n}\n\nexport function getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n    const hierarchy: Array<IGroupByKey> = [];\n    if (gRow !== undefined && gRow.expression) {\n        hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n        while (gRow.groupParent) {\n            gRow = gRow.groupParent;\n            hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n        }\n    }\n    return hierarchy;\n}\n","export enum PagingError {\n    None,\n    IncorrectPageIndex,\n    IncorrectRecordsPerPage\n}\n\nexport declare interface IPagingState {\n    index: number;\n    recordsPerPage: number;\n    metadata?: {\n        countPages: number;\n        error: PagingError;\n        countRecords: number;\n    };\n}\n","import { IFilteringOperation } from './filtering-condition';\n\nexport enum FilteringLogic {\n    And,\n    Or\n}\n\n/**\n * Represents filtering expressions.\n */\nexport declare interface IFilteringExpression {\n    fieldName: string;\n    condition: IFilteringOperation;\n    searchVal?: any;\n    ignoreCase?: boolean;\n}\n","import { IFilteringExpression, FilteringLogic } from './filtering-expression.interface';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport enum FilteringExpressionsTreeType {\n    Regular,\n    Advanced\n}\n\nexport declare interface IFilteringExpressionsTree extends IBaseEventArgs {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n    type?: FilteringExpressionsTreeType;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    /**\n     * Sets/gets the type of the filtering expressions tree.\n     * ```typescript\n     *  gridExpressionTree.type = FilteringExpressionsTree.Advanced;\n     * ```\n     * ```typescript\n     * let type = expressionTree.type;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    type?: FilteringExpressionsTreeType;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n\n    /**\n     * Checks if filtering expressions tree is empty.\n     * @param expressionTree filtering expressions tree.\n     */\n    public static empty(expressionTree: IFilteringExpressionsTree): boolean {\n        return !expressionTree || !expressionTree.filteringOperands || !expressionTree.filteringOperands.length;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { cloneArray } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { IGroupingExpression } from './grouping-expression.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByExpandState } from './groupby-expand-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\nimport { getHierarchy, isHierarchyMatch } from './operations';\n\nexport interface ISortingStrategy {\n    sort: (data: any[],\n           fieldName: string,\n           dir: SortingDirection,\n           ignoreCase: boolean,\n           valueResolver: (obj: any, key: string) => any) => any[];\n}\n\nexport class DefaultSortingStrategy implements ISortingStrategy {\n    private static _instance: DefaultSortingStrategy = null;\n\n    protected constructor() {}\n\n    public static instance(): DefaultSortingStrategy {\n        return this._instance || (this._instance = new this());\n    }\n\n    public sort(data: any[],\n                fieldName: string,\n                dir: SortingDirection,\n                ignoreCase: boolean,\n                valueResolver: (obj: any, key: string) => any) {\n        const key = fieldName;\n        const reverse = (dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    protected compareObjects(obj1: object,\n                             obj2: object,\n                             key: string,\n                             reverse: number,\n                             ignoreCase: boolean,\n                             valueResolver: (obj: any, key: string) => any) {\n        let a = valueResolver(obj1, key);\n        let b = valueResolver(obj2, key);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        return reverse * this.compareValues(a, b);\n    }\n\n    protected arraySort(data: any[], compareFn?): any[] {\n        return data.sort(compareFn);\n    }\n}\n\nexport interface IGridSortingStrategy {\n    sort(data: any[], expressions: ISortingExpression[]): any[];\n}\n\nexport class NoopSortingStrategy implements IGridSortingStrategy {\n    private static _instance: NoopSortingStrategy = null;\n\n    private constructor() {  }\n\n    public static instance() {\n        return this._instance || (this._instance = new NoopSortingStrategy());\n    }\n\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return data;\n    }\n}\n\nexport class IgxSorting implements IGridSortingStrategy {\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return this.sortDataRecursive(data, expressions);\n    }\n\n    private groupedRecordsByExpression(data: any[],\n            index: number,\n            expression: IGroupingExpression): any[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key);\n        index++;\n        const comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;\n        for (i = index; i < len; i++) {\n            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0): T[] {\n        let i;\n        let j;\n        let expr: ISortingExpression;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        if (!expr.strategy) {\n            expr.strategy = DefaultSortingStrategy.instance();\n        }\n        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    protected groupDataRecursive<T>(data: T[], state: IGroupingState, level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[], grid: any = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): T[] {\n        const expressions = state.expressions;\n        const expansion = state.expansion;\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const group = this.groupedRecordsByExpression(data, i, expressions[level]);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: group[0][expressions[level].fieldName],\n                groupParent: parent,\n                groups: [],\n                height: grid ? grid.renderedRowHeight : null\n            };\n            if (parent) {\n                parent.groups.push(groupRow);\n            } else {\n                groupsRecords.push(groupRow);\n            }\n            const hierarchy = getHierarchy(groupRow);\n            const expandState: IGroupByExpandState = expansion.find((s) =>\n                isHierarchyMatch(s.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n            const expanded = expandState ? expandState.expanded : state.defaultExpanded;\n            let recursiveResult;\n            result.push(groupRow);\n            metadata.push(null);\n            fullResult.data.push(groupRow);\n            fullResult.metadata.push(null);\n            if (level < expressions.length - 1) {\n                recursiveResult = this.groupDataRecursive(group, state, level + 1, groupRow,\n                    expanded ? metadata : [], grid, groupsRecords, fullResult);\n                if (expanded) {\n                    result = result.concat(recursiveResult);\n                }\n            } else {\n                for (const groupItem of group) {\n                    fullResult.metadata.push(groupRow);\n                    fullResult.data.push(groupItem);\n                }\n                if (expanded) {\n                    metadata.push(...fullResult.metadata.slice(fullResult.metadata.length - group.length));\n                    result.push(...fullResult.data.slice(fullResult.data.length - group.length));\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n    protected getFieldValue(obj: any, key: string): any {\n        return obj[key];\n    }\n}\n\nexport class IgxDataRecordSorting extends IgxSorting {\n    protected getFieldValue(obj: any, key: string): any {\n        return obj.data[key];\n    }\n}\n","import { IGroupByRecord } from './groupby-record.interface';\nimport { IgxSorting } from './sorting-strategy';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\n\nexport class IgxGrouping extends IgxSorting {\n    public groupBy(data: any[], state: IGroupingState, grid?: any,\n        groupsRecords?: any[], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, state, 0, null, metadata, grid, groupsRecords, fullResult);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n}\n\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalTransaction extends Transaction {\n    path: any[];\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalState extends State {\n    path: any[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo\n     */\n    onStateUpdate?: EventEmitter<void>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): T[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @param pending Should get pending state\n     * @returns State of the record if any\n     */\n    getState(id: any, pending?: boolean): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param id Optional record id to commit transactions for\n     */\n    commit(data: any[], id?: any): void;\n\n    /**\n     * Clears all transactions\n     * @param id Optional record id to clear transactions for\n     */\n    clear(id?: any): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { IFilteringState } from './filtering-state.interface';\n\nimport { IgxSorting, IgxDataRecordSorting, IGridSortingStrategy } from './sorting-strategy';\nimport { IgxGrouping } from './grouping-strategy';\nimport { IGroupByResult } from './grouping-result.interface';\n\nimport { IPagingState, PagingError } from './paging-state.interface';\n\nimport { IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { FilteringStrategy } from './filtering-strategy';\nimport { ITreeGridRecord } from '../grids/tree-grid';\nimport { cloneValue, mergeObjects } from '../core/utils';\nimport { Transaction, TransactionType, HierarchicalTransaction } from '../services/transaction/transaction';\nimport { getHierarchy, isHierarchyMatch } from './operations';\n\n/**\n * @hidden\n */\nexport enum DataType {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Date = 'date'\n}\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static sort<T>(data: T[], expressions: ISortingExpression[], sorting: IGridSortingStrategy = new IgxSorting()): T[] {\n        return sorting.sort(data, expressions);\n    }\n\n    public static treeGridSort(hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        sorting: IGridSortingStrategy = new IgxDataRecordSorting(),\n        parent?: ITreeGridRecord): ITreeGridRecord[] {\n        let res: ITreeGridRecord[] = [];\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.treeGridSort(rec.children, expressions, sorting, rec);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, expressions, sorting);\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState, grid: any = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const grouping = new IgxGrouping();\n        groupsRecords.splice(0, groupsRecords.length);\n        return grouping.groupBy(data, state, grid, groupsRecords, fullResult);\n    }\n\n    public static page<T>(data: T[], state: IPagingState): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: data.length,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n\n    public static filter<T>(data: T[], state: IFilteringState): T[] {\n        if (!state.strategy) {\n            state.strategy = new FilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree);\n    }\n\n    public static correctPagingState(state: IPagingState, length: number) {\n        const maxPage = Math.ceil(length / state.recordsPerPage) - 1;\n        if (!isNaN(maxPage) && state.index > maxPage) {\n            state.index = maxPage;\n        }\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        return getHierarchy(gRow);\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        return isHierarchyMatch(h1, h2);\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any, deleteRows: boolean = false): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        if (deleteRows) {\n            transactions\n                .filter(t => t.type === TransactionType.DELETE)\n                .forEach(t => {\n                    const index = primaryKey ? data.findIndex(d => d[primaryKey] === t.id) : data.findIndex(d => d === t.id);\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                });\n        }\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n\n        return data;\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided hierarchical data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param childDataKey Data key of child collections\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        deleteRows: boolean = false): any[] {\n        for (const transaction of transactions) {\n            if (transaction.path) {\n                const parent = this.findParentFromPath(data, primaryKey, childDataKey, transaction.path);\n                let collection: any[] = parent ? parent[childDataKey] : data;\n                switch (transaction.type) {\n                    case TransactionType.ADD:\n                        //  if there is no parent this is ADD row at root level\n                        if (parent && !parent[childDataKey]) {\n                            parent[childDataKey] = collection = [];\n                        }\n                        collection.push(transaction.newValue);\n                        break;\n                    case TransactionType.UPDATE:\n                        const updateIndex = collection.findIndex(x => x[primaryKey] === transaction.id);\n                        if (updateIndex !== -1) {\n                            collection[updateIndex] = mergeObjects(cloneValue(collection[updateIndex]), transaction.newValue);\n                        }\n                        break;\n                    case TransactionType.DELETE:\n                        if (deleteRows) {\n                            const deleteIndex = collection.findIndex(r => r[primaryKey] === transaction.id);\n                            if (deleteIndex !== -1) {\n                                collection.splice(deleteIndex, 1);\n                            }\n                        }\n                        break;\n                }\n            } else {\n                //  if there is no path this is ADD row in root. Push the newValue to data\n                data.push(transaction.newValue);\n            }\n        }\n        return data;\n    }\n\n    public static parseValue(dataType: DataType, value: any): any {\n        if (dataType === DataType.Number) {\n            value = parseFloat(value);\n        }\n\n        return value;\n    }\n\n    private static findParentFromPath(data: any[], primaryKey: any, childDataKey: any, path: any[]): any {\n        let collection: any[] = data;\n        let result: any;\n\n        for (const id of path) {\n            result = collection && collection.find(x => x[primaryKey] === id);\n            if (!result) {\n                break;\n            }\n\n            collection = result[childDataKey];\n        }\n\n        return result;\n    }\n}\n","import { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): any[];\n}\n\nexport class NoopFilteringStrategy implements IFilteringStrategy {\n    private static _instance: NoopFilteringStrategy = null;\n\n    private constructor() {  }\n\n    public static instance() {\n        return this._instance || (this._instance = new NoopFilteringStrategy());\n    }\n\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): any[] {\n        return data;\n    }\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree?: IFilteringExpressionsTree): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let matchOperand, operand;\n\n                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand);\n\n                        // Return false if at least one operand does not match and the filtering logic is And\n                        if (!matchOperand && operator === FilteringLogic.And) {\n                            return false;\n                        }\n\n                        // Return true if at least one operand matches and the filtering logic is Or\n                        if (matchOperand && operator === FilteringLogic.Or) {\n                            return true;\n                        }\n                    }\n\n                    return matchOperand;\n                }\n\n                return true;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                return this.findMatchByExpression(rec, expression);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    private static _instace: FilteringStrategy = null;\n\n    public constructor() { super(); }\n\n    public static instance() {\n        return this._instace || (this._instace = new this());\n    }\n\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        return rec[fieldName];\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n    public static isNullOrWhitespaces(value: string): boolean {\n        return value === undefined || value === null || !value.trim();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxRowDirective } from './row.directive';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType, State } from '../services/transaction/transaction';\nimport { IgxCell, IgxRow } from './selection/selection.service';\nimport { GridType } from './common/grid.interface';\nimport { ColumnType } from './common/column.interface';\nimport { IRowToggleEventArgs } from './common/events';\nimport {\n    ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS\n} from '../core/utils';\nimport { first, debounceTime } from 'rxjs/operators';\n/**\n *@hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseDirective & GridType> {\n\n    grid: T;\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public get_column_by_name(name: string): ColumnType {\n        return this.grid.columnList.find((col: ColumnType) => col.field === name);\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        let data = grid.filteredData;\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n                const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n                deletedRows.forEach(rowID => {\n                    const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                    const index = tempData.indexOf(rowID);\n                    if (index !== -1) {\n                       data.splice(index, 1);\n                    }\n                });\n            } else {\n                data = grid.data;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getRowData(rowID: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(rowID);\n        return data[index];\n    }\n\n    // TODO: Refactor\n    public escape_editMode() {\n        this.grid.crudService.end();\n    }\n\n    // TODO: Refactor\n    public get_cell_inEditMode(): IgxCell {\n        return this.grid.crudService.cell;\n    }\n\n    public get_row_index_in_data(rowID: any): number {\n        const grid = this.grid as IgxGridBaseDirective;\n        if (!grid) {\n            return -1;\n        }\n        const data = this.get_all_data(grid.transactions.enabled);\n        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(rowSelector: any): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        const primaryKey = this.grid.primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.grid.dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.grid.dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(rowIndex: number): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        return this.grid.rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value() {\n        const cell = this.grid.crudService.cell;\n        if (cell ) {\n            const args = this.update_cell(cell, cell.editValue);\n            if (args.cancel) {\n                return;\n            }\n            this.escape_editMode();\n        }\n    }\n\n    update_cell(cell: IgxCell, value: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(cell.id.rowID);\n\n        cell.editValue = value;\n\n        const args = cell.createEditEventArgs();\n\n        this.grid.onCellEdit.emit(args);\n        if (args.cancel) {\n            return args;\n        }\n\n        // Cast to number after emit\n        // TODO: Clean up this\n        args.newValue = cell.castToNumber(args.newValue);\n\n        if (isEqual(args.oldValue, args.newValue)) {\n            return args;\n        }\n\n        this.grid.summaryService.clearSummaryCache(args);\n        this.updateData(this.grid, cell.id.rowID, data[index], cell.rowData, { [cell.column.field ]: args.newValue });\n        if (this.grid.primaryKey === cell.column.field) {\n             if (this.grid.selectionService.isRowSelected(cell.id.rowID)) {\n                this.grid.selectionService.deselectRow(cell.id.rowID);\n                this.grid.selectionService.selectRowById(args.newValue);\n            }\n            if (this.grid.hasSummarizedColumns) {\n                this.grid.summaryService.removeSummaries(cell.id.rowID);\n            }\n        }\n        if (!this.grid.rowEditable || !this.grid.crudService.row ||\n                this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {\n            this.grid.summaryService.clearSummaryCache(args);\n            (this.grid as any)._pipeTrigger++;\n        }\n\n        return args;\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid, rowID, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {[x: string]: any}) {\n        if (grid.transactions.enabled) {\n            const transaction: Transaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    _update_row(row: IgxRow, value?: any) {\n        const grid = this.grid;\n\n        const rowInEditMode = grid.crudService.row;\n        row.newData = value ? value : grid.transactions.getAggregatedValue(row.id, true);\n\n\n        if (rowInEditMode && row.id === rowInEditMode.id) {\n            row.data = { ...row.data, ...rowInEditMode.transactionState };\n        // TODO: Workaround for updating a row in edit mode through the API\n        } else if (this.grid.transactions.enabled) {\n            const state = grid.transactions.getState(row.id);\n            row.data = state ? Object.assign({}, row.data, state.value) : row.data;\n        }\n    }\n\n    update_row(row: IgxRow, value: any) {\n        const grid = this.grid;\n        const selected = grid.selectionService.isRowSelected(row.id);\n        const rowInEditMode = grid.crudService.row;\n        const data = this.get_all_data(grid.transactions.enabled);\n        const index = this.get_row_index_in_data(row.id);\n        const hasSummarized = grid.hasSummarizedColumns;\n\n        this._update_row(row, value);\n\n        const args = row.createEditEventArgs();\n\n        // If no valid row is found\n        if (index === -1) {\n            return args;\n        }\n\n        grid.onRowEdit.emit(args);\n\n        if (args.cancel) {\n            return args;\n        }\n\n        if (rowInEditMode) {\n            const hasChanges = grid.transactions.getState(args.rowID, true);\n            grid.transactions.endPending(false);\n            if (!hasChanges) {\n                return args;\n            }\n        }\n\n        if (!args.newValue) {\n            return args;\n        }\n\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(args.rowID);\n        }\n\n        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);\n        const newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;\n        if (selected) {\n            grid.selectionService.deselectRow(row.id);\n            grid.selectionService.selectRowById(newId);\n        }\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(newId);\n        }\n        (grid as any)._pipeTrigger++;\n\n        return args;\n    }\n\n\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        grid.data[index] = value;\n    }\n\n    public sort(expression: ISortingExpression): void {\n        if (expression.dir === SortingDirection.None) {\n            this.remove_grouping_expression(expression.fieldName);\n        }\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState], expression);\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(each.fieldName);\n            }\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public filter(fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(term, condition, ignoreCase) {\n        if (!condition) {\n            return;\n        }\n\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        for (const column of grid.columns) {\n            this.prepare_filtering_expression(filteringTree, column.field, term,\n                condition, ignoreCase || column.filteringIgnoreCase);\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(fieldName: string) {\n        const grid = this.grid;\n        grid.endEdit(false);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n        } else if (!fieldName) {\n            filteringState.filteringOperands = [];\n        }\n\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    public clear_sort(fieldName: string) {\n        const sortingState = this.grid.sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex = -1) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                if (insertAtIndex > -1) {\n                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);\n                } else {\n                    filteringState.filteringOperands.push(expressionsTree);\n                }\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(fieldName) {\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n    }\n\n    public should_apply_number_style(column: ColumnType): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_data(): any[] {\n        const grid = this.grid;\n        const data = grid.data ? grid.data : [];\n        return data;\n    }\n\n    public get_all_data(includeTransactions = false): any[] {\n        const grid = this.grid;\n        let data = grid.data ? grid.data : [];\n        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;\n        return data;\n    }\n\n    public get_filtered_data(): any[] {\n        return this.grid.filteredData;\n    }\n\n    protected getSortStrategyPerColumn(fieldName: string) {\n        return this.get_column_by_name(fieldName) ?\n            this.get_column_by_name(fieldName).sortStrategy : undefined;\n    }\n\n    public addRowToData(rowData: any) {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        const grid = this.grid;\n        if (grid.transactions.enabled) {\n            const transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };\n            grid.transactions.add(transaction);\n        } else {\n            grid.data.push(rowData);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        const grid = this.grid;\n        if (index !== -1) {\n            if (grid.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                grid.transactions.add(transaction, grid.data[index]);\n            } else {\n                grid.data.splice(index, 1);\n            }\n        } else {\n            const state: State = grid.transactions.getState(rowID);\n            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const grid = this.grid;\n        const data = this.get_all_data();\n        if (grid.primaryKey) {\n            index = data.map((record) => record[grid.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = grid.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            // Always exit edit when row is deleted\n            grid.endEdit(true);\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        grid.onRowDeleted.emit({ data: data[index] });\n\n        this.deleteRowFromData(rowId, index);\n\n        grid.selectionService.isRowSelected(rowId) ? grid.selectionService.deselectRow(rowId) : grid.selectionService.clearHeaderCBState();\n        (grid as any)._pipeTrigger++;\n        grid.notifyChanges();\n        // Data needs to be recalculated if transactions are in place\n        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale\n        const dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;\n        grid.refreshSearch();\n        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {\n            grid.page--;\n        }\n    }\n\n    public get_row_id(rowData) {\n        return this.grid.primaryKey ? rowData[this.grid.primaryKey] : rowData;\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if (!grid.transactions.enabled) {\n            return false;\n        }\n        const state = grid.transactions.getState(rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n\n    public atInexistingPage(): boolean {\n        return this.grid.totalPages - 1 > this.grid.page;\n    }\n\n    public get_row_expansion_state(record: any): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const rowID = grid.primaryKey ? record[grid.primaryKey] : record;\n        const expanded = states.get(rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return grid.getDefaultExpandState(record);\n        }\n    }\n\n    public set_row_expansion_state(rowID: any, expanded: boolean, event?: Event) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        if (!this.allow_expansion_state_change(rowID, expanded)) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        expandedStates.set(rowID, expanded);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n        const eventKey = event && (event as any).key ? (event as any).key.toLowerCase() : null;\n        if (eventKey && this.isToggleKey(eventKey)) {\n            (this.grid as any).zone.onStable.pipe(debounceTime(30)).pipe(first()).subscribe(() => {\n                this.focusActiveCell(rowID);\n            });\n        }\n    }\n\n    public get_rec_by_id(rowID) {\n        return  this.grid.primaryKey ? this.getRowData(rowID) : rowID;\n    }\n\n    public allow_expansion_state_change(rowID, expanded) {\n        return this.grid.expansionStates.get(rowID) !== expanded;\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n\n    private focusActiveCell(rowID) {\n        // persist focused cell\n        const isVirtualized = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const el = this.grid.selectionService.activeElement;\n        if (isVirtualized && el) {\n            const cell = this.get_cell_by_key(rowID, this.grid.visibleColumns[el.column].field);\n            if (cell) {\n                cell.nativeElement.focus();\n            }\n        }\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { BaseFilteringStrategy, IFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseDirective } from '../grid';\nimport { GridType } from '../common/grid.interface';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree?: IFilteringExpressionsTree): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, advancedExpressionsTree, undefined);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord): ITreeGridRecord[] {\n        let i: number;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, advancedExpressionsTree, rec);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        return hierarchicalRecord.data[fieldName];\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        filterStrategy: IFilteringStrategy,\n        advancedFilteringExpressionsTree: IFilteringExpressionsTree, id: string,\n        pipeTrigger: number, filteringPipeTrigger: number): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const state: IFilteringState = {\n            expressionsTree: expressionsTree,\n            advancedExpressionsTree: advancedFilteringExpressionsTree,\n            strategy: new TreeGridFilteringStrategy()\n        };\n\n        if (filterStrategy) {\n            state.strategy = filterStrategy;\n        }\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {\n            grid.filteredData = null;\n            return hierarchyData;\n        }\n\n        const result = this.filter(hierarchyData, state);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.filteredData = filteredData;\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree);\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\nimport { cloneValue, IBaseEventArgs } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\nimport { ITreeGridRecord } from '../../grids/tree-grid/tree-grid.interfaces';\nimport { TreeGridFilteringStrategy } from '../../grids/tree-grid/tree-grid.filtering.pipe';\n\n/**\n * onRowExport event arguments\n * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n * // set args properties here\n * })\n */\nexport interface IRowExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting row data\n     */\n    rowData: any;\n\n    /**\n     * Contains the exporting row index\n     */\n    rowIndex: number;\n\n    /**\n     * Skip the exporting row when set to true\n     */\n    cancel: boolean;\n}\n\n/**\n    * onColumnExport event arguments\n    * ```typescript\n    * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n    * // set args properties here\n    * });\n    * ```\n    */\nexport interface IColumnExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting column header\n     */\n    header: string;\n\n    /**\n     * Contains the exporting column field name\n     */\n    field: string;\n\n    /**\n     * Contains the exporting column index\n     */\n    columnIndex: number;\n\n    /**\n     * Skip the exporting column when set to true\n     */\n    cancel: boolean;\n\n    /**\n     * Export the column's data without applying its formatter, when set to true\n     */\n    skipFormatter: boolean;\n}\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    private flatRecords = [];\n\n    protected _isTreeGrid = false;\n    protected _indexOfLastPinnedColumn = -1;\n    protected _sort = null;\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter,\n                skipFormatter: false\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn++;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n            this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false }));\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        let columnsWithoutHeaderCount = 1;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: ExportUtilities.isNullOrWhitespaces(column.header) ?\n                        'Column' + columnsWithoutHeaderCount++ : column.header,\n                    field: column.field,\n                    columnIndex: index,\n                    cancel: false,\n                    skipFormatter: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n                column.skipFormatter = columnExportArgs.skipFormatter;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        data.forEach((row, index) => {\n            this.exportRow(dataToExport, row, index, isSpecialData);\n        });\n\n        this.exportDataImplementation(dataToExport, options);\n        this.resetDefaults();\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = this._isTreeGrid ? rowData.data[e.field] : rowData[e.field];\n                    a[e.header] = e.formatter && !e.skipFormatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = this._isTreeGrid ? rowData.data : rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push({ rowData: rowArgs.rowData, originalRowData: rowData });\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        this.flatRecords = [];\n        let rootRecords = grid.rootRecords;\n        this._isTreeGrid = rootRecords !== undefined;\n\n        if (this._isTreeGrid) {\n            this.prepareHierarchicalData(rootRecords);\n        }\n\n        let data = this._isTreeGrid ? this.flatRecords : grid.data;\n\n        if (((grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0) ||\n            (grid.advancedFilteringExpressionsTree &&\n            grid.advancedFilteringExpressionsTree.filteringOperands.length > 0)) &&\n            !options.ignoreFiltering) {\n            const filteringState: any = {\n                expressionsTree: grid.filteringExpressionsTree,\n                advancedExpressionsTree: grid.advancedFilteringExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                filteringState.strategy = (grid.filterStrategy) ? grid.filterStrategy : new TreeGridFilteringStrategy();\n                rootRecords = filteringState.strategy.filter(rootRecords,\n                    filteringState.expressionsTree, filteringState.advancedExpressionsTree);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                filteringState.strategy = grid.filterStrategy;\n                data = DataUtil.filter(data, filteringState);\n            }\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridSort(rootRecords, grid.sortingExpressions, grid.sortStrategy);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.sort(data, grid.sortingExpressions, grid.sortStrategy);\n            }\n        }\n\n        return data;\n    }\n\n    private prepareHierarchicalData(records: ITreeGridRecord[]) {\n        if (!records) {\n            return;\n        }\n        for (let i = 0; i < records.length; i++) {\n            const hierarchicalRecord = records[i];\n\n            this.flatRecords.push(hierarchicalRecord);\n            this.prepareHierarchicalData(hierarchicalRecord.children);\n        }\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n        this.flatRecords = [];\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string)  {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n\n            const value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';\n            recordData += this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        let dataRecords = '';\n        for (const row of currentData) {\n            dataRecords += this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords;\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface ICsvExportEndedEventArgs extends IBaseEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_csv.html)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        data = data.map((item) => item.rowData);\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        this._stringData = csvData.prepareData();\n\n        this.saveFile(options);\n        this.onExportEnded.emit({ csvData: this._stringData });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/**\n * @hidden\n */\nexport enum ExcelFolderTypes {\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    DocPropsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    TablesExcelFolder\n}\n/**\n * @hidden\n */\nexport enum ExcelFileTypes {\n    RootRelsFile,\n    AppFile,\n    CoreFile,\n    WorkbookRelsFile,\n    ThemeFile,\n    WorksheetFile,\n    StyleFile,\n    WorkbookFile,\n    ContentTypesFile,\n    SharedStringsFile,\n    WorksheetRelsFile,\n    TablesFile\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(): string {\n        return ExcelStrings.XML_STRING + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>';\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator></dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯ Light\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿ Light\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(): string {\n        return ExcelStrings.XML_STRING + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>';\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>';\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean, hasGroupedRows = false, outlineLevel = 0): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        const sheetOutlineProp = hasGroupedRows ? '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>' : '';\n        const sOutlineLevel = outlineLevel > 0 ? `outlineLevelRow=\"${outlineLevel}\"` : '';\n        // return ExcelStrings.XML_STRING +\n        //     '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n\n        return `${ExcelStrings.XML_STRING}\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">\n${sheetOutlineProp}\n<dimension ref=\"${dimension}\"/>\n<sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">${freezePane}</sheetView></sheetViews>\n<sheetFormatPr defaultRowHeight=\"15\" ${sOutlineLevel} x14ac:dyDescent=\"0.25\"/>\n${cols}\n${sheetData}\n<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>\n${tableParts}</worksheet>`;\n\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy } from './scroll';\nimport { AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef, NgZone } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, cloneValue, IBaseEventArgs } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\n/** @hidden */\nexport interface OutOfViewPort {\n    /** Out of view port at Top or Left */\n    back: number;\n    /** Out of view port at Bottom or Right */\n    forward: number;\n}\n\nexport interface PositionSettings {\n    /** Attaching target for the component to show */\n    target?: Point | HTMLElement;\n    /** Direction in which the component should show */\n    horizontalDirection?: HorizontalAlignment;\n    /** Direction in which the component should show */\n    verticalDirection?: VerticalAlignment;\n    /** Target's starting point */\n    horizontalStartPoint?: HorizontalAlignment;\n    /** Target's starting point */\n    verticalStartPoint?: VerticalAlignment;\n    /** Animation applied while overlay opens */\n    openAnimation?: AnimationReferenceMetadata;\n    /** Animation applied while overlay closes */\n    closeAnimation?: AnimationReferenceMetadata;\n    /** The size up to which element may shrink when shown in elastic position strategy */\n    minSize?: Size;\n}\n\nexport interface OverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set if the overlay should be in modal mode */\n    modal?: boolean;\n    /** Set if the overlay should closed on outside click */\n    closeOnOutsideClick?: boolean;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @hidden @internal\n     * Exclude the position strategy target for outside clicks\n     */\n    excludePositionTarget?: boolean;\n}\n\nexport interface OverlayEventArgs extends IBaseEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `attach()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayClosingEventArgs extends OverlayEventArgs, CancelableBrowserEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs extends IBaseEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\nexport interface Size {\n    /** Gets or sets the horizontal component of Size */\n    width: number;\n\n    /** Gets or sets the vertical component of Size */\n    height: number;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: Size;\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n    ngZone: NgZone;\n    transformX?: number;\n    transformY?: number;\n}\n\n/** @hidden */\nexport interface ConnectedFit {\n    contentElementRect?: ClientRect;\n    targetRect?: ClientRect;\n    viewPortRect?: ClientRect;\n    fitHorizontal?: OutOfViewPort;\n    fitVertical?: OutOfViewPort;\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n    horizontalOffset?: number;\n    verticalOffset?: number;\n}\n\n/** @hidden */\nexport class Util {\n    /**\n     * @hidden\n     * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0,0,0 rectangle\n     * if no target is provided\n     * @param settings Overlay settings for which to calculate target rectangle\n     */\n    static getTargetRect(settings: PositionSettings): ClientRect {\n        let targetRect: ClientRect = {\n            bottom: 0,\n            height: 0,\n            left: 0,\n            right: 0,\n            top: 0,\n            width: 0\n        };\n\n        if (settings.target instanceof HTMLElement) {\n            targetRect = (settings.target as HTMLElement).getBoundingClientRect();\n        } else if (settings.target instanceof Point) {\n            const targetPoint = settings.target as Point;\n            targetRect = {\n                bottom: targetPoint.y,\n                height: 0,\n                left: targetPoint.x,\n                right: targetPoint.x,\n                top: targetPoint.y,\n                width: 0\n            };\n        }\n\n        return targetRect;\n    }\n\n    /** @hidden @internal */\n    static getViewportRect(document: Document): ClientRect {\n        const width = document.documentElement.clientWidth;\n        const height = document.documentElement.clientHeight;\n        const scrollPosition = Util.getViewportScrollPosition(document);\n\n        return {\n            top: scrollPosition.y,\n            left: scrollPosition.x,\n            right: scrollPosition.x + width,\n            bottom: scrollPosition.y + height,\n            width: width,\n            height: height,\n        };\n    }\n\n    /** @hidden @internal */\n    static getViewportScrollPosition(document: Document): Point {\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n\n        const horizontalScrollPosition =\n            -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n        const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n\n        return new Point(horizontalScrollPosition, verticalScrollPosition);\n    }\n\n    /** @hidden @internal*/\n    static cloneInstance(object) {\n        const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n        clonedObj.settings = cloneValue(clonedObj.settings);\n        return clonedObj;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip/dist/jszip';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp());\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.34;\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n        let maxOutlineLevel = 0;\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                if (!worksheetData.isTreeGridData) {\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n                } else {\n                    const rowData = worksheetData.data[i - 1].originalRowData;\n                    const sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : ` collapsed=\"1\"`;\n                    const sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? ` hidden=\"1\"` : '';\n                    const rowOutlineLevel = rowData.level ? rowData.level : 0;\n                    const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel=\"${rowOutlineLevel}\"` : '';\n                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;\n\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`);\n                }\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                const widthInTwips = worksheetData.options.columnWidth ?\n                                    worksheetData.options.columnWidth :\n                                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n\n        folder.file('sheet1.xml',\n                    ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable,\n                    worksheetData.isTreeGridData, maxOutlineLevel));\n    }\n\n    private hasCollapsedParent(rowData) {\n        let result = !rowData.parent.expanded;\n        while (rowData.parent) {\n            result = result || !rowData.parent.expanded;\n            rowData = rowData.parent;\n        }\n\n        return result;\n    }\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const rowData = worksheetData.data[row - 1].rowData;\n\n        const cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook());\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _calculateColumnWidth: boolean;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._calculateColumnWidth = !columnWidth;\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (!this._calculateColumnWidth) {\n            this._columnWidths.fill(columnWidth);\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value === 'string' ||\n                                            typeof value === 'boolean' ||\n                                            value instanceof Date;\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        if (this._calculateColumnWidth) {\n            const width = this.getTextWidth(value);\n            const maxWidth = Math.max(this._columnWidths[column] || 0, width);\n            this._columnWidths[column] = maxWidth;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], public options: IgxExcelExporterOptions, public indexOfLastPinnedColumn,\n                public sort: any, public isTreeGridData = false) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        const actualData = this._data.map((item) => item.rowData);\n\n        this._keys = ExportUtilities.getKeysFromData(actualData);\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(actualData);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth);\n    }\n}\n","import * as JSZip from 'jszip/dist/jszip';\n\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { IExcelFolder } from './excel-interfaces';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface IExcelExportEndedEventArgs extends IBaseEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in MicrosoftÂ® ExcelÂ® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static populateFolder(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData): any {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderIntance.folderName);\n            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            fileInstance.writeElement(zip, worksheetData);\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        if (this._isTreeGrid) {\n            let maxLevel = 0;\n            data.forEach((r) => {\n                maxLevel = Math.max(maxLevel, r.originalRowData.level);\n            });\n            if (maxLevel > 7) {\n                throw Error('Can create an outline of up to eight levels!');\n            }\n        }\n\n        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);\n\n        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n            this.saveFile(result, options.fileName);\n\n            this.onExportEnded.emit({ xlsx: this._xlsx });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified or 0,\n     * the width of the largest string in the column will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, HorizontalAlignment, VerticalAlignment, Size, Util, OverlaySettings } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    protected _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut,\n        minSize: { width: 0, height: 0 }\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex');\n        this.setPosition(contentElement, this.settings);\n    }\n\n    protected setPosition(contentElement: HTMLElement, settings: PositionSettings) {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @inheritdoc */\n    clone(): IPositionStrategy {\n        return Util.cloneInstance(this);\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport abstract class ScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    /** @inheritdoc */\n    abstract initialize(document: Document, overlayService: IgxOverlayService, id: string);\n\n    /** @inheritdoc */\n    abstract attach(): void;\n\n    /** @inheritdoc */\n    abstract detach(): void;\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Empty scroll strategy. Does nothing.\n */\nexport class NoOpScrollStrategy extends ScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /** @inheritdoc */\n    attach(): void { }\n\n    /** @inheritdoc */\n    detach(): void { }\n}\n","import { isDevMode } from '@angular/core';\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    let isMessageShown = false;\n\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n        if (descriptor && descriptor.value) {\n            const originalMethod = descriptor.value;\n\n            descriptor.value = function () {\n                const targetName = typeof target === 'function' ? target.name : target.constructor.name;\n                isMessageShown = showMessage(`${targetName}.${key}: ${message}`, isMessageShown);\n\n                return originalMethod.call(this, arguments);\n            };\n\n            return descriptor;\n        }\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return function(target: any, key: string) {\n        let isMessageShown = false;\n        const messageToDisplay = `${target.constructor.name}.${key}: ${message}`;\n\n        // if the target already has the property defined\n        const originalDescriptor = Object.getOwnPropertyDescriptor(target, key);\n        if (originalDescriptor) {\n            let getter, setter;\n            getter = originalDescriptor.get;\n            setter = originalDescriptor.set;\n\n            if (getter) {\n                originalDescriptor.get = function() {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    return getter.call(this);\n                };\n            }\n\n            if (setter) {\n                originalDescriptor.set = function (value) {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    setter.call(this, value);\n                };\n            }\n\n            return originalDescriptor;\n        }\n\n        // the target doesn't contain a descriptor for that property, so create one\n        // use backing field to set/get the value of the property to ensure there won't be infinite recursive calls\n        const newKey = generateUniqueKey(target, key);\n        Object.defineProperty(target, key, {\n            configurable: true,\n            enumerable: true,\n            set: function(value) {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                this[newKey] = value;\n            },\n            get: function() {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                return this[newKey];\n            }\n        });\n    };\n}\n\n/**\n * @hidden\n */\nfunction generateUniqueKey(target: any, key: string): string {\n    let newKey = '_' + key;\n    while (target.hasOwnProperty(newKey)) {\n        newKey = '_' + newKey;\n    }\n\n    return newKey;\n}\n\n/**\n * @hidden\n */\nexport function showMessage(message: string, isMessageShown: boolean): boolean {\n    if (!isMessageShown && isDevMode()) {\n        console.warn(message);\n    }\n\n    return true;\n}\n","import { DOCUMENT } from '@angular/common';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport {\n    OverlaySettings,\n    OverlayEventArgs,\n    OverlayInfo,\n    OverlayAnimationEventArgs,\n    OverlayCancelableEventArgs,\n    OverlayClosingEventArgs\n} from './utilities';\n\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    Type,\n    OnDestroy,\n    NgModuleRef,\n    NgZone\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, AnimationMetadataType, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { IAnimationParams } from '../../animations/main';\nimport { showMessage } from '../../core/deprecateDecorators';\n\nlet warningShown = false;\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private destroy$ = new Subject<boolean>();\n\n    private _defaultSettings: OverlaySettings = {\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is appended to the overlay, and before animations are started.\n     * ```typescript\n     * onAppended(event: OverlayEventArgs){\n     *     const onAppended = event;\n     * }\n     * ```\n     */\n    public onAppended = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayClosingEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any,\n        private _zone: NgZone) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component ElementRef to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(element: ElementRef, settings?: OverlaySettings): string;\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @param moduleRef Optional reference to an object containing Injector and ComponentFactoryResolver\n     * that can resolve the component's factory\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(component: Type<any>, settings?: OverlaySettings,\n        moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string;\n    attach(component: ElementRef | Type<any>, settings?: OverlaySettings,\n        moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string {\n        let info: OverlayInfo;\n        info = this.getOverlayInfo(component, moduleRef);\n\n        //  if there is no info most probably wrong type component was provided and we just go out\n        if (!info) {\n            return null;\n        }\n\n        info.id = (this._componentId++).toString();\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n        this._overlayInfos.push(info);\n        return info.id;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     * @deprecated Use `attach(component)` to obtain an Id. Then `show(id, settings?)` with provided Id.\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<any>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<any>, settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return null;\n            }\n        } else {\n            warningShown = showMessage(\n                '`show(component, settings?)` overload is deprecated. Use `attach(component)` to obtain an Id.' +\n                'Then `show(id, settings?)` with provided Id.',\n                warningShown);\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, info.settings, settings);\n        info.settings = settings;\n\n        this._show(info);\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        this._hide(id);\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlayInfo = this.getOverlayById(id);\n        if (!overlayInfo || !overlayInfo.settings) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        const contentElement = overlayInfo.elementRef.nativeElement.parentElement;\n        const contentElementRect = contentElement.getBoundingClientRect();\n        overlayInfo.settings.positionStrategy.position(\n            contentElement,\n            {\n                width: contentElementRect.width,\n                height: contentElementRect.height\n            },\n            this._document,\n            false);\n    }\n\n    /**\n     * Offsets the content along the corresponding axis by the provided amount\n     * ```typescript\n     * this.overlay.setOffset(id, deltaX, deltaY);\n     * ```\n     */\n    setOffset(id: string, deltaX: number, deltaY: number) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n           return;\n        }\n\n        info.transformX += deltaX;\n        info.transformY += deltaY;\n\n        const transformX = info.transformX;\n        const transformY = info.transformY;\n\n        const translate = `translate(${transformX}px, ${transformY}px)`;\n        info.elementRef.nativeElement.parentElement.style.transform = translate;\n    }\n\n    private _show(info: OverlayInfo) {\n        const eventArgs: OverlayCancelableEventArgs = { id: info.id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n\n            return;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            const elementRect = info.elementRef.nativeElement.getBoundingClientRect();\n            info.initialSize = { width: elementRect.width, height: elementRect.height };\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            if (info.componentRef) {\n                info.componentRef.changeDetectorRef.detectChanges();\n            }\n\n            this.onAppended.emit({ id: info.id, componentRef: info.componentRef });\n\n            this.updateSize(info);\n            if (this._overlayInfos.indexOf(info) === -1) {\n                this._overlayInfos.push(info);\n            }\n\n            info.settings.positionStrategy.position(\n                info.elementRef.nativeElement.parentElement,\n                { width: info.initialSize.width, height: info.initialSize.height },\n                document,\n                true);\n            info.settings.scrollStrategy.initialize(this._document, this, info.id);\n            info.settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler(info.id);\n\n        if (info.settings.modal) {\n            this.setupModalWrapper(info);\n        }\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            //  to eliminate flickering show the element just before onOpened fire\n            info.elementRef.nativeElement.parentElement.style.visibility = '';\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n    }\n\n    private _hide(id: string, event?: Event) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false, event };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        //  TODO: synchronize where these are added/attached and where removed/detached\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler(info.id);\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    private getOverlayInfo(component: any, moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): OverlayInfo {\n        const info: OverlayInfo = { ngZone: this._zone, transformX: 0, transformY: 0 };\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            const factoryResolver = moduleRef ? moduleRef.componentFactoryResolver : this._factoryResolver;\n            try {\n                dynamicFactory = factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const injector = moduleRef ? moduleRef.injector : this._injector;\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings.modal);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        contentElement.appendChild(info.elementRef.nativeElement);\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, modal: boolean): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        //  hide element to eliminate flickering. Show the element exactly before animation starts\n        content.style.visibility = 'hidden';\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div width only if element to show has width\n        if (info.initialSize.width !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n        }\n    }\n\n    private setupModalWrapper(info: OverlayInfo) {\n        const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n        fromEvent(wrapperElement, 'keydown').pipe(\n            filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc'),\n            takeUntil(this.destroy$)\n        ).subscribe(() => this.hide(info.id));\n        wrapperElement.classList.remove('igx-overlay__wrapper');\n        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n        wrapperElement.classList.add('igx-overlay__wrapper--modal');\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        this.cleanUp(info);\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private cleanUp(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n        }\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                if (info.openAnimationPlayer) {\n                    info.openAnimationPlayer.reset();\n                    info.openAnimationPlayer = null;\n                }\n\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        //  if there is opening animation already started do nothing\n        if (info.openAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is closing animation already started start open animation from where close one has reached\n        //  and remove close animation\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n            info.openAnimationPlayer.init();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n\n        //  to eliminate flickering show the element just before animation start\n        info.elementRef.nativeElement.parentElement.style.visibility = '';\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                if (info.closeAnimationPlayer) {\n                    info.closeAnimationPlayer.reset();\n                    info.closeAnimationPlayer = null;\n                }\n\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        //  if there is closing animation already started do nothing\n        if (info.closeAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is opening animation already started start close animation from where open one has reached\n        //  and remove open animation\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n            info.closeAnimationPlayer.init();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    /** @hidden @internal */\n    public getOverlayById(id: string): OverlayInfo {\n        if (!id) {\n            return null;\n        }\n\n        const info = this._overlayInfos.find(e => e.id === id);\n        return info;\n    }\n\n    private documentClicked = (ev: MouseEvent) => {\n        //  if we get to modal overlay just return - we should not close anything under it\n        //  if we get to non-modal overlay do the next:\n        //   1. Check it has close on outside click. If not go on to next overlay;\n        //   2. If true check if click is on the element. If it is on the element we have closed\n        //  already all previous non-modal with close on outside click elements, so we return. If\n        //  not close the overlay and check next\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                const target = ev.target as any;\n                //  if the click is on the element do not close this overlay\n                if (!info.elementRef.nativeElement.contains(target)) {\n                    // if we should exclude position target check if the click is over it. If so do not close overlay\n                    const positionTarget = info.settings.positionStrategy.settings.target as HTMLElement;\n                    let clickOnPositionTarget = false;\n                    if (positionTarget) {\n                        clickOnPositionTarget = positionTarget.contains(target);\n                    }\n\n                    if (!(info.settings.excludePositionTarget && clickOnPositionTarget)) {\n                        //  if the click is outside click, but close animation has started do nothing\n                        if (!(info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted())) {\n                            this._hide(info.id, ev);\n                        }\n                    }\n                } else {\n                    //  TODO: should we return here, or continue with next overlays\n                    return;\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((e: Event) => this._hide(info.id, e));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    /** @hidden */\n    public repositionAll = () => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\nimport { IToggleView } from '../core/navigation/IToggleView';\nimport { EventEmitter, InjectionToken } from '@angular/core';\nimport { DisplayDensityBase } from '../core/density';\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n/** Key actions that have designated handlers in IgxDropDownComponent */\nexport enum DropDownActionKey {\n    ESCAPE = 'escape',\n    ENTER = 'enter',\n    SPACE = 'space'\n}\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    oldSelection: IgxDropDownItemBaseDirective;\n    newSelection: IgxDropDownItemBaseDirective;\n}\n\n/**\n * Interface for an instance of IgxDropDownNavigationDirective\n * @export\n */\nexport interface IDropDownNavigationDirective {\n    target: any;\n    handleKeyDown(event: KeyboardEvent): void;\n    onArrowDownKeyDown(event?: KeyboardEvent): void;\n    onArrowUpKeyDown(event?: KeyboardEvent): void;\n    onEndKeyDown(event?: KeyboardEvent): void;\n    onHomeKeyDown(event?: KeyboardEvent): void;\n}\n\nexport const IGX_DROPDOWN_BASE = new InjectionToken<IDropDownBase>('IgxDropDownBaseToken');\n\n/**\n * @hidden\n */\nexport interface IDropDownList extends DisplayDensityBase {\n    onSelection: EventEmitter<ISelectionEventArgs>;\n    width: string;\n    height: string;\n    id: string;\n    maxHeight: string;\n    collapsed: boolean;\n    items: IgxDropDownItemBaseDirective[];\n    headers: IgxDropDownItemBaseDirective[];\n    focusedItem: IgxDropDownItemBaseDirective;\n    navigateFirst(): void;\n    navigateLast(): void;\n    navigateNext(): void;\n    navigatePrev(): void;\n    navigateItem(newIndex: number, direction?: Navigate): void;\n    onItemActionKey(key: DropDownActionKey, event?: Event): void;\n}\n\n/**\n * @hidden\n */\nexport interface IDropDownBase extends IDropDownList, IToggleView {\n    selectedItem: any;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onOpened: EventEmitter<void>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    allowItemsFocus?: boolean;\n    setSelectedItem(index: number): void;\n    selectItem(item: IgxDropDownItemBaseDirective, event?: Event): void;\n}\n\n","import { PositionSettings, Size } from '../utilities';\nimport { GlobalPositionStrategy } from './global-position-strategy';\n\n/**\n * Positions the element inside the containing outlet based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class ContainerPositionStrategy extends GlobalPositionStrategy {\n    constructor(settings?: PositionSettings) {\n        super(settings);\n    }\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex-container');\n        this.setPosition(contentElement, this.settings);\n    }\n}\n\n","import { IPositionStrategy } from './IPositionStrategy';\nimport {\n  HorizontalAlignment,\n  Point,\n  PositionSettings,\n  Size,\n  Util,\n  VerticalAlignment\n} from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\nimport { ConnectedFit } from '../utilities';\n\n/**\n * Positions the element based on the directions and start point passed in trough PositionSettings.\n * It is possible to either pass a start point or an HTMLElement as a positioning base.\n */\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    // default Point(0, 0) in getPointFromPositionsSettings\n    target: null,\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop,\n    minSize: { width: 0, height: 0 }\n  };\n\n  /** @inheritdoc */\n  public settings: PositionSettings;\n\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  /**\n   * Obtains the ClientRect objects for the required elements - target and element to position\n   * @returns target and element ClientRect objects\n   */\n  protected calculateElementRectangles(contentElement): { targetRect: ClientRect, elementRect: ClientRect } {\n      return {\n          targetRect: Util.getTargetRect(this.settings),\n          elementRect: contentElement.getBoundingClientRect() as ClientRect\n      };\n  }\n\n  /** @inheritdoc */\n  position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n    const rects =  this.calculateElementRectangles(contentElement);\n    this.setStyle(contentElement, rects.targetRect, rects.elementRect, {});\n  }\n\n  /**\n   * @inheritdoc\n   * Creates clone of this position strategy\n   * @returns clone of this position strategy\n   */\n  clone(): IPositionStrategy {\n    return Util.cloneInstance(this);\n  }\n\n  /**\n   * Sets element's style which effectively positions provided element according\n   * to provided position settings\n   * @param element Element to position\n   * @param targetRect Bounding rectangle of strategy target\n   * @param elementRect Bounding rectangle of the element\n   */\n  protected setStyle(element: HTMLElement, targetRect: ClientRect, elementRect: ClientRect, connectedFit: ConnectedFit) {\n      const horizontalOffset = connectedFit.horizontalOffset ? connectedFit.horizontalOffset : 0;\n      const verticalOffset = connectedFit.verticalOffset ? connectedFit.verticalOffset : 0;\n    const startPoint: Point = {\n      x: targetRect.right + targetRect.width * this.settings.horizontalStartPoint + horizontalOffset,\n      y: targetRect.bottom + targetRect.height * this.settings.verticalStartPoint + verticalOffset\n    };\n    const wrapperRect: ClientRect = element.parentElement.getBoundingClientRect();\n\n    //  clean up styles - if auto position strategy is chosen we may pass here several times\n    element.style.right = '';\n    element.style.left = '';\n    element.style.bottom = '';\n    element.style.top = '';\n\n    switch (this.settings.horizontalDirection) {\n      case HorizontalAlignment.Left:\n        element.style.right = `${Math.round(wrapperRect.right - startPoint.x)}px`;\n        break;\n      case HorizontalAlignment.Center:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left - elementRect.width / 2)}px`;\n        break;\n      case HorizontalAlignment.Right:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left)}px`;\n        break;\n    }\n\n    switch (this.settings.verticalDirection) {\n      case VerticalAlignment.Top:\n        element.style.bottom = `${Math.round(wrapperRect.bottom - startPoint.y)}px`;\n        break;\n      case VerticalAlignment.Middle:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top - elementRect.height / 2)}px`;\n        break;\n      case VerticalAlignment.Bottom:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top)}px`;\n        break;\n    }\n  }\n}\n","import { ConnectedPositioningStrategy } from './connected-positioning-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings, Size, Util, ConnectedFit, OutOfViewPort } from '../utilities';\n\nexport abstract class BaseFitPositionStrategy extends ConnectedPositioningStrategy {\n    protected _initialSize: Size;\n    protected _initialSettings: PositionSettings;\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const rects = super.calculateElementRectangles(contentElement);\n        const connectedFit: ConnectedFit = {};\n        if (initialCall) {\n            connectedFit.targetRect = rects.targetRect;\n            connectedFit.contentElementRect = rects.elementRect;\n            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);\n            this.settings = Object.assign({}, this._initialSettings);\n            connectedFit.viewPortRect = Util.getViewportRect(document);\n            this.updateViewPortFit(connectedFit);\n            if (connectedFit.fitHorizontal.back < 0 || connectedFit.fitHorizontal.forward < 0 ||\n                connectedFit.fitVertical.back < 0 || connectedFit.fitVertical.forward < 0) {\n                this.fitInViewport(contentElement, connectedFit);\n            }\n        }\n        this.setStyle(contentElement, rects.targetRect, rects.elementRect, connectedFit);\n    }\n\n    /**\n     * Checks if element can fit in viewport and updates provided connectedFit\n     * with the result\n     * @param connectedFit connectedFit to update\n     */\n    protected updateViewPortFit(connectedFit: ConnectedFit) {\n        connectedFit.left = this.calculateLeft(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.horizontalStartPoint,\n            this.settings.horizontalDirection,\n            connectedFit.horizontalOffset ? connectedFit.horizontalOffset : 0);\n        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;\n        connectedFit.fitHorizontal = {\n                back: Math.round(connectedFit.left),\n                forward: Math.round(connectedFit.viewPortRect.width - connectedFit.right)\n            };\n\n        connectedFit.top = this.calculateTop(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.verticalStartPoint,\n            this.settings.verticalDirection,\n            connectedFit.verticalOffset ? connectedFit.verticalOffset : 0);\n        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;\n        connectedFit.fitVertical = {\n            back: Math.round(connectedFit.top),\n            forward: Math.round(connectedFit.viewPortRect.height - connectedFit.bottom)\n        };\n    }\n\n    /**\n     * Calculates the position of the left border of the element if it gets positioned\n     * with provided start point and direction\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateLeft(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: HorizontalAlignment, direction: HorizontalAlignment, offset?: number):\n        number {\n        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction + offset;\n    }\n\n    /**\n     * Calculates the position of the top border of the element if it gets positioned\n     * with provided position settings related to the target\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateTop(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: VerticalAlignment, direction: VerticalAlignment, offset?: number):\n        number {\n        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction + offset;\n    }\n\n    /**\n     * Fits the element into viewport according to the position settings\n     * @param element element to fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected abstract fitInViewport(\n        element: HTMLElement,\n        connectedFit: ConnectedFit);\n}\n\n\n","import { VerticalAlignment, HorizontalAlignment, ConnectedFit } from './../utilities';\nimport { BaseFitPositionStrategy } from './base-fit-position-strategy';\n\n/**\n * Positions the element as in **Connected** positioning strategy and re-positions the element in\n * the view port (calculating a different start point) in case the element is partially getting out of view\n */\nexport class AutoPositionStrategy extends BaseFitPositionStrategy {\n\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const transformString: string[] = [];\n        if (connectedFit.fitHorizontal.back < 0 || connectedFit.fitHorizontal.forward < 0) {\n            if (this.canFlipHorizontal(connectedFit)) {\n                this.flipHorizontal();\n            } else {\n                const horizontalPush = this.horizontalPush(connectedFit);\n                transformString.push(`translateX(${horizontalPush}px)`);\n            }\n        }\n\n        if (connectedFit.fitVertical.back < 0 || connectedFit.fitVertical.forward < 0) {\n            if (this.canFlipVertical(connectedFit)) {\n                this.flipVertical();\n            } else {\n                const verticalPush = this.verticalPush(connectedFit);\n                transformString.push(`translateY(${verticalPush}px)`);\n            }\n        }\n\n        element.style.transform = transformString.join(' ').trim();\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipHorizontal(connectedFit: ConnectedFit): boolean {\n        //  HorizontalAlignment can be Left = -1; Center = -0.5 or Right = 0.\n        //  To virtually flip direction and start point (both are HorizontalAlignment) we can do this:\n        //  flippedAlignment = (-1) * (HorizontalAlignment + 1)\n        //  this way:\n        //  (-1) * (Left + 1) = 0 = Right\n        //  (-1) * (Center + 1) = -0.5 = Center\n        //  (-1) * (Right + 1) = -1 = Left\n        const flippedStartPoint = (-1) * (this.settings.horizontalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.horizontalDirection + 1);\n\n        const leftBorder = this.calculateLeft(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection, 0);\n        const rightBorder = leftBorder + connectedFit.contentElementRect.width;\n        return 0 < leftBorder && rightBorder < connectedFit.viewPortRect.width;\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipVertical(connectedFit: ConnectedFit): boolean {\n        const flippedStartPoint = (-1) * (this.settings.verticalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.verticalDirection + 1);\n\n        const topBorder = this.calculateTop(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection, 0);\n        const bottomBorder = topBorder + connectedFit.contentElementRect.height;\n        return 0 < topBorder && bottomBorder < connectedFit.viewPortRect.height;\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipHorizontal() {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalDirection = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalDirection = HorizontalAlignment.Left;\n                break;\n        }\n        switch (this.settings.horizontalStartPoint) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                break;\n        }\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipVertical() {\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                this.settings.verticalDirection = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalDirection = VerticalAlignment.Top;\n                break;\n        }\n        switch (this.settings.verticalStartPoint) {\n            case VerticalAlignment.Top:\n                this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalStartPoint = VerticalAlignment.Top;\n                break;\n        }\n    }\n\n    /**\n     * Calculates necessary horizontal push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private horizontalPush(connectedFit: ConnectedFit): number {\n        const leftExtend = connectedFit.left;\n        const rightExtend = connectedFit.right - connectedFit.viewPortRect.right;\n        //  if leftExtend < 0 overlay goes beyond left end of the screen. We should push it back with exactly\n        //  as much as it is beyond the screen.\n        //  if rightExtend > 0 overlay goes beyond right end of the screen. We should push it back with the\n        //  extend but with amount not bigger than what left between left border of screen and left border of\n        //  overlay, e.g. leftExtend\n        if (leftExtend < 0) {\n            return Math.abs(leftExtend);\n        } else if (rightExtend > 0) {\n            return - Math.min(rightExtend, leftExtend);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Calculates necessary vertical push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private verticalPush(connectedFit: ConnectedFit): number {\n        const topExtend = connectedFit.top;\n        const bottomExtend = connectedFit.bottom - connectedFit.viewPortRect.bottom;\n        if (topExtend < 0) {\n            return Math.abs(topExtend);\n        } else if (bottomExtend > 0) {\n            return - Math.min(bottomExtend, topExtend);\n        } else {\n            return 0;\n        }\n    }\n}\n","import { BaseFitPositionStrategy } from './base-fit-position-strategy';\nimport { HorizontalAlignment, VerticalAlignment, ConnectedFit } from '../utilities';\n\n/**\n * Positions the element as in **Connected** positioning strategy and resize the element\n * to fit in the view port in case the element is partially getting out of view\n */\nexport class ElasticPositionStrategy extends BaseFitPositionStrategy {\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        element.classList.add('igx-overlay__content--elastic');\n        const transformString: string[] = [];\n        if (connectedFit.fitHorizontal.back < 0 || connectedFit.fitHorizontal.forward < 0) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);\n            const leftExtend = Math.max(0, -connectedFit.fitHorizontal.back);\n            const rightExtend = Math.max(0, -connectedFit.fitHorizontal.forward);\n            const reduction = Math.min(maxReduction, leftExtend + rightExtend);\n            element.style.width = `${connectedFit.contentElementRect.width - reduction}px`;\n\n            //  if direction is center and element goes off the screen in left direction we should push the\n            //  element to the right. Prevents left still going out of view when normally positioned\n            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {\n                //  the amount of translation depends on whether element goes off the screen to the left,\n                //  to the right or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between left and right extend\n                //  taken from the reduction\n                const translation = leftExtend * reduction / (leftExtend + rightExtend);\n                if (translation > 0) {\n                    transformString.push(`translateX(${translation}px)`);\n                }\n            }\n        }\n\n        if (connectedFit.fitVertical.back < 0 || connectedFit.fitVertical.forward < 0) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);\n            const topExtend = Math.max(0, -connectedFit.fitVertical.back);\n            const bottomExtend = Math.max(0, -connectedFit.fitVertical.forward);\n            const reduction = Math.min(maxReduction, topExtend + bottomExtend);\n            element.style.height = `${connectedFit.contentElementRect.height - reduction}px`;\n\n            //  if direction is middle and element goes off the screen in top direction we should push the\n            //  element to the bottom. Prevents top still going out of view when normally positioned\n            if (this.settings.verticalDirection === VerticalAlignment.Middle) {\n                //  the amount of translation depends on whether element goes off the screen to the top,\n                //  to the bottom or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between top and bottom extend\n                //  taken from the reduction\n                const translation = topExtend * reduction / (topExtend + bottomExtend);\n                if (translation > 0) {\n                    transformString.push(`translateY(${translation}px)`);\n                }\n            }\n        }\n        element.style.transform = transformString.join(' ').trim();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\nimport { NgZone } from '@angular/core';\n\n/**\n * On scroll reposition the overlay content.\n */\nexport class AbsoluteScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n    private _zone: NgZone;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._zone = overlayService.getOverlayById(id).ngZone;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._zone) {\n            this._zone.runOutsideAngular(() => {\n                this.addScrollEventListener();\n            });\n        } else {\n            this.addScrollEventListener();\n        }\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private addScrollEventListener() {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    private onScroll = (e: Event) => {\n        const overlayInfo = this._overlayService.getOverlayById(this._id);\n        if (!overlayInfo) {\n            return;\n        }\n        if (!overlayInfo.elementRef.nativeElement.contains(e.target)) {\n            this._overlayService.reposition(this._id);\n        }\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Prevents scrolling while the overlay content is shown.\n */\nexport class BlockScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.target) {\n            this._sourceElement = ev.target as Element;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Uses a tolerance and closes the shown component upon scrolling if the tolerance is exceeded\n */\nexport class CloseScrollStrategy extends ScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { TransactionService, Transaction, State } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    public get canRedo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canUndo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getTransactionLog(id?: any): T[] { return []; }\n\n    /**\n     * @inheritdoc\n     */\n    undo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    redo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    commit(data: any[], id?: any): void { }\n\n    /**\n     * @inheritdoc\n     */\n    clear(id?: any): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        let result: U;\n        if (isObject(first) || isObject(second)) {\n            result = mergeObjects(mergeObjects({}, first), second);\n        } else {\n            result = second ? second : first;\n        }\n        return result;\n    }\n}\n","import { Transaction, State, TransactionType } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _undoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _states: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    protected addTransaction(transaction: T, states: Map<any, S>, recordRef?: any) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            this._undoStack.push([{ transaction, recordRef }]);\n            this._redoStack = [];\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getTransactionLog(id?: any): T[] {\n        if (id !== undefined) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any, pending: boolean = false): S {\n        return pending ? this._pendingStates.get(id) : this._states.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            const actions: { transaction: T, recordRef: any }[] = [];\n            // don't use addTransaction due to custom undo handling\n            for (const transaction of this._pendingTransactions) {\n                const pendingState = this._pendingStates.get(transaction.id);\n                this._transactions.push(transaction);\n                this.updateState(this._states, transaction, pendingState.recordRef);\n                actions.push({ transaction, recordRef: pendingState.recordRef });\n            }\n\n            this._undoStack.push(actions);\n            this._redoStack = [];\n\n            this.onStateUpdate.emit();\n        }\n        super.endPending(commit);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public commit(data: any[], id?: any): void {\n        if (id !== undefined) {\n            const state = this.getState(id);\n            if (state) {\n                this.updateRecord(data, state);\n            }\n        } else {\n            this._states.forEach((s: S) => {\n                this.updateRecord(data, s);\n            });\n        }\n        this.clear(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clear(id?: any): void {\n        if (id !== undefined) {\n            this._transactions = this._transactions.filter(t => t.id !== id);\n            this._states.delete(id);\n            //  Undo stack is an array of actions. Each action is array of transaction like objects\n            //  We are going trough all the actions. For each action we are filtering out transactions\n            //  with provided id. Finally if any action ends up as empty array we are removing it from\n            //  undo stack\n            this._undoStack = this._undoStack.map(a => a.filter(t => t.transaction.id !== id)).filter(a => a.length > 0);\n        } else {\n            this._transactions = [];\n            this._states.clear();\n            this._undoStack = [];\n        }\n        this._redoStack = [];\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        const lastActions: { transaction: T, recordRef: any }[] = this._undoStack.pop();\n        this._transactions.splice(this._transactions.length - lastActions.length);\n        this._redoStack.push(lastActions);\n\n        this._states.clear();\n        for (const currentActions of this._undoStack) {\n            for (const transaction of currentActions) {\n                this.updateState(this._states, transaction.transaction, transaction.recordRef);\n            }\n        }\n\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            let actions: { transaction: T, recordRef: any, useInUndo?: boolean }[];\n            actions = this._redoStack.pop();\n            for (const action of actions) {\n                this.updateState(this._states, action.transaction, action.recordRef);\n                this._transactions.push(action.transaction);\n            }\n\n            this._undoStack.push(actions);\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates state related record in the provided data\n     * @param data Data source to update\n     * @param state State to update data from\n     */\n    protected updateRecord(data: any[], state: S) {\n        const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(state.recordRef || {}));\n        switch (state.type) {\n            case TransactionType.ADD:\n                data.push(state.value);\n                break;\n            case TransactionType.DELETE:\n                if (0 <= index && index < data.length) {\n                    data.splice(index, 1);\n                }\n                break;\n            case TransactionType.UPDATE:\n                if (0 <= index && index < data.length) {\n                    data[index] = this.updateValue(state);\n                }\n                break;\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from './igx-transaction';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneValue } from '../../core/utils';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : cloneValue(state.value);\n            this.clearArraysFromObject(value);\n            result.push({ id: key, path: state.path, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n\n        //  if transaction has no path, e.g. flat data source, get out\n        if (!transaction.path) {\n            return;\n        }\n\n        const currentState = states.get(transaction.id);\n        if (currentState) {\n            currentState.path = transaction.path;\n        }\n\n        //  if transaction has path, Hierarchical data source, and it is DELETE\n        //  type transaction for all child rows remove ADD states and update\n        //  transaction type and value of UPDATE states\n        if (transaction.type === TransactionType.DELETE) {\n            states.forEach((v: S, k: any) => {\n                if (v.path && v.path.indexOf(transaction.id) !== -1) {\n                    switch (v.type) {\n                        case TransactionType.ADD:\n                            states.delete(k);\n                            break;\n                        case TransactionType.UPDATE:\n                            states.get(k).type = TransactionType.DELETE;\n                            states.get(k).value = null;\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param primaryKey Primary key of the hierarchical data\n     * @param childDataKey Kye of child data collection\n     * @param id Optional record id to commit transactions for\n     */\n    public commit(data: any[], primaryKey?: any, childDataKey?: any, id?: any): void {\n        if (childDataKey !== undefined) {\n            let transactions = this.getAggregatedChanges(true);\n            if (id !== undefined) {\n                transactions = transactions.filter(t => t.id === id);\n            }\n            DataUtil.mergeHierarchicalTransactions(data, transactions, childDataKey, primaryKey, true);\n        } else {\n            super.commit(data, id);\n        }\n        this.clear(id);\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        if (obj) {\n            for (const prop of Object.keys(obj)) {\n                if (Array.isArray(obj[prop])) {\n                    delete obj[prop];\n                }\n            }\n        }\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings, OverlayEventArgs, ConnectedPositioningStrategy, AbsoluteScrollStrategy, IPositionStrategy } from '../../services';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, Subject, MonoTypeOperatorFunction } from 'rxjs';\nimport { OverlayClosingEventArgs } from '../../services/overlay/utilities';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../../core/utils';\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    protected _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: [MonoTypeOperatorFunction<OverlayEventArgs>, MonoTypeOperatorFunction<OverlayEventArgs>] = [\n        filter(x => x.id === this._overlayId),\n        takeUntil(this.destroy$)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n    private _overlayAppendedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Emits an event after the toggle element is appended to the overlay container.\n     *\n     * ```typescript\n     * onAppended() {\n     *  alert(\"Content appended!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onAppended)='onToggleAppended()'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onAppended = new EventEmitter();\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        //  if there is open animation do nothing\n        //  if toggle is not collapsed and there is no close animation do nothing\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {\n            return;\n        }\n\n        if (!info) {\n            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);\n        }\n\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: CancelableEventArgs = { cancel: false };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        this.unsubscribe();\n\n        this._overlayAppendedSub = this.overlayService.onAppended.pipe(...this._overlaySubFilter).subscribe(() => {\n            this.onAppended.emit();\n        });\n\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter).subscribe(() => {\n            this.onOpened.emit();\n        });\n\n        this._overlayClosingSub = this.overlayService\n        .onClosing\n        .pipe(...this._overlaySubFilter)\n        .subscribe((e: OverlayClosingEventArgs) => {\n            const eventArgs: CancelableBrowserEventArgs = { cancel: false, event: e.event };\n            this.onClosing.emit(eventArgs);\n            e.cancel = eventArgs.cancel;\n\n            //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n            //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n            //  onClosed was fired we will end with calling onClosing more than once\n            if (!e.cancel) {\n                this.clearSubscription(this._overlayClosingSub);\n            }\n        });\n\n        this._overlayClosedSub = this.overlayService.onClosed\n        .pipe(...this._overlaySubFilter)\n        .subscribe(this.overlayClosed);\n\n        this.overlayService.show(this._overlayId, overlaySettings);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        //  if toggle is collapsed do nothing\n        //  if there is close animation do nothing, toggle will close anyway\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (this._collapsed || hasCloseAnimation) {\n            return;\n        }\n\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        //  if toggle is collapsed call open\n        //  if there is close animation call open\n        if (this.collapsed || this.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public get isClosing() {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        return info ? info.closeAnimationPlayer : false;\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * Offsets the content along the corresponding axis by the provided amount\n     */\n    setOffset(deltaX: number, deltaY: number) {\n        this.overlayService.setOffset(this._overlayId, deltaX, deltaY);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.unsubscribe();\n        this.onClosed.emit();\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n        this.clearSubscription(this._overlayAppendedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._overlayDefaults = {\n            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false,\n            excludePositionTarget: true\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n\n        const clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);\n        this.updateOverlaySettings(clonedSettings);\n        this.target.toggle(clonedSettings);\n    }\n\n    /**\n     * Updates provided overlay settings\n     * @param settings settings to update\n     * @returns returns updated copy of provided overlay settings\n     */\n    protected updateOverlaySettings(settings: OverlaySettings): OverlaySettings {\n        if (settings && settings.positionStrategy) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.element.nativeElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n\n        return settings;\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import { InjectionToken, Input, Output, EventEmitter, DoCheck, OnInit, Directive, NgModule, Optional, Inject } from '@angular/core';\nimport { IBaseEventArgs } from './utils';\n\n\n/**\n * Defines the posible values of the components' display density.\n */\nexport enum DisplayDensity {\n    comfortable = 'comfortable',\n    cosy = 'cosy',\n    compact = 'compact'\n}\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensityOptions {\n    displayDensity: DisplayDensity;\n}\n\nexport interface IDensityChangedEventArgs extends IBaseEventArgs {\n    oldDensity: DisplayDensity;\n    newDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensityOptions>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\n@Directive({\n    selector: '[igxDisplayDensityBase]'\n})\n// tslint:disable-next-line: directive-class-suffix\nexport class DisplayDensityBase implements DoCheck, OnInit {\n    protected _displayDensity: DisplayDensity;\n\n     /**\n     * @hidden\n     */\n    public initialDensity: DisplayDensity;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity ||\n            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        const currentDisplayDensity = this._displayDensity;\n        this._displayDensity = val as DisplayDensity;\n\n        if (currentDisplayDensity !== this._displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: currentDisplayDensity,\n                newDensity: this._displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n        }\n    }\n\n    @Output()\n    public onDensityChanged = new EventEmitter<IDensityChangedEventArgs>();\n\n    protected oldDisplayDensityOptions: IDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };\n\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected displayDensityOptions: IDisplayDensityOptions) {\n        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this.initialDensity = this._displayDensity;\n    }\n\n    public ngDoCheck() {\n        if (!this._displayDensity && this.displayDensityOptions &&\n                this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: this.oldDisplayDensityOptions.displayDensity,\n                newDensity: this.displayDensityOptions.displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);\n        }\n    }\n\n    /**\n     * Given a style class of a component/element returns the modified version of it based\n     * on the current display density.\n     */\n    protected getComponentDensityClass(baseStyleClass: string): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return `${baseStyleClass}--${DisplayDensity.cosy}`;\n            case DisplayDensity.compact:\n                return `${baseStyleClass}--${DisplayDensity.compact}`;\n            default:\n                return baseStyleClass;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [\n        DisplayDensityBase\n    ],\n    exports: [\n        DisplayDensityBase\n    ]\n})\nexport class IgxDisplayDensityModule {}\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        } else if (itemIDs && itemIDs.length === 0) {\n            selection = new Set(this.get(componentID));\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return dataCount > 0 && dataCount === this.size(componentID);\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        // If primaryKey is 0, this should still map to the property\n        return primaryKey !== undefined && primaryKey !== null ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n    */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import { Component, Input, HostBinding } from '@angular/core';\n\nlet NEXT_ID = 0;\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-drop-down-item\"></ng-content>\n    `\n})\nexport class IgxDropDownGroupComponent {\n    private _id = NEXT_ID++;\n\n    /**\n     * @hidden @internal\n     */\n    public get labelId(): string {\n        return `igx-item-group-label-${this._id}`;\n    }\n\n    @HostBinding(`attr.aria-labelledby`)\n    public get labelledBy(): string {\n        return this.labelId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'group';\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-drop-down__group')\n    public groupClass = true;\n    /**\n     * Sets/gets if the item group is disabled\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const groupState: boolean = myDropDownGroup.disabled;\n     * ...\n     * //set\n     * ...\n     * myDropDownGroup,disabled = false;\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My Items'\" [disabled]=\"true\">\n     *     <igx-drop-down-item *ngFor=\"let item of items[index]\" [value]=\"item.value\">\n     *         {{ item.text }}\n     *     </igx-drop-down-item>\n     * </igx-drop-down-item-group>\n     * ```\n     *\n     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled\n     */\n    @Input()\n    @HostBinding(`attr.aria-disabled`)\n    @HostBinding('class.igx-drop-down__group--disabled')\n    public disabled = false;\n\n    /**\n     * Sets/gets the label of the item group\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const myLabel: string = myDropDownGroup.label;\n     * ...\n     * // set\n     * ...\n     * myDropDownGroup.label = 'My New Label';\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My new Label'\">\n     *      ...\n     * </igx-drop-down-item-group>\n     * ```\n    */\n    @Input()\n    public label: string;\n}\n","import { IDropDownBase, IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { Directive, Input, HostBinding, HostListener, ElementRef, Optional, Inject, DoCheck, Output, EventEmitter } from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DeprecateProperty, showMessage } from '../core/deprecateDecorators';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nlet NEXT_ID = 0;\nlet warningShown = false;\n\n/**\n * An abstract class defining a drop-down item:\n * With properties / styles for selection, highlight, height\n * Bindable property for passing data (`value: any`)\n * Parent component (has to be used under a parent with type `IDropDownBase`)\n * Method for handling click on Host()\n */\n@Directive({\n    selector: '[igxDropDownItemBase]'\n})\nexport class IgxDropDownItemBaseDirective implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _focused = false;\n    protected _selected = false;\n    protected _index = null;\n    protected _disabled = false;\n    protected get hasIndex(): boolean {\n        return this._index !== null && this._index !== undefined;\n    }\n\n    /**\n     * Sets/gets the `id` of the item.\n     * ```html\n     * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>\n     * ```\n     * ```typescript\n     * let itemId =  this.item.id;\n     * ```\n     * @memberof IgxSelectItemComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-drop-down-item-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     */\n    public get itemID() {\n        return this;\n    }\n\n    /**\n     * The data index of the dropdown item.\n     *\n     * ```typescript\n     * // get the data index of the selected dropdown item\n     * let selectedItemIndex = this.dropdown.selectedItem.index\n     * ```\n     */\n    @Input()\n    public get index(): number {\n        if (this._index === null) {\n            warningShown = showMessage(\n                'IgxDropDownItemBaseDirective: Automatic index is deprecated.' +\n                'Bind in the template instead using `<igx-drop-down-item [index]=\"i\"` instead.`',\n                warningShown);\n            return this.itemIndex;\n        }\n        return this._index;\n    }\n\n    public set index(value) {\n        this._index = value;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--cosy')\n    public get itemStyleCosy() {\n        return this.dropDown.displayDensity === 'cosy' && !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--compact')\n    public get itemStyleCompact() {\n        return this.dropDown.displayDensity === 'compact' && !this.isHeader;\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     *\n     * Two-way data binding\n     * ```html\n     * <igx-drop-down-item [(selected)]='model.isSelected'></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n        this.selectedChange.emit(this._selected);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedChange = new EventEmitter<boolean>();\n\n    /**\n     * @hidden @internal\n     */\n    @Input()\n    @DeprecateProperty(`IgxDropDownItemBaseDirective \\`isSelected\\` property is deprecated.\\n` +\n        `Use \\`selected\\` instead.`)\n    get isSelected(): boolean {\n        return this.selected;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    set isSelected(value: boolean) {\n        this.selected = value;\n    }\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.focused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get focused(): boolean {\n        return this.isSelectable && this._focused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" focused={{!item.focused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`IgxDropDownItemBaseDirective \\`isFocused\\` property is depracated.\\n` +\n        `Use \\`focused\\` instead.`)\n    get isFocused(): boolean {\n        return this.focused;\n    }\n    /**\n     * @hidden @internal\n     */\n    set isFocused(value: boolean) {\n        this.focused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-dropdown-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n*           </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader: boolean;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--cosy')\n    public get headerClassCosy() {\n        return this.isHeader && this.dropDown.displayDensity === 'cosy';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--compact')\n    public get headerClassCompact() {\n        return this.isHeader && this.dropDown.displayDensity === 'compact';\n    }\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public get disabled(): boolean {\n        return this.group ? this.group.disabled || this._disabled : this._disabled;\n    }\n\n    public set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the item. Default is 'option'.\n     *\n     * ```html\n     *  <igx-drop-down-item [role]=\"customRole\"></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'option';\n\n    /**\n     * Gets item index\n     * @hidden @internal\n     */\n    public get itemIndex(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden @internal\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden @internal\n     */\n    public get element(): ElementRef {\n        return this.elementRef;\n    }\n\n    constructor(\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Optional() protected group: IgxDropDownGroupComponent,\n        @Optional() @Inject(IgxSelectionAPIService) protected selection?: IgxSelectionAPIService\n    ) { }\n\n    ngDoCheck(): void {\n        if (this._selected) {\n            const dropDownSelectedItem = this.dropDown.selectedItem;\n            if (!dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            } else if (this.hasIndex\n                ? this._index !== dropDownSelectedItem.index || this.value !== dropDownSelectedItem.value :\n                this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n\n    /** Returns true if the items is not a header or disabled  */\n    protected get isSelectable(): boolean {\n        return  !(this.disabled || this.isHeader);\n    }\n\n    /** If `allowItemsFocus` is enabled, keep the browser focus on the active item */\n    protected ensureItemFocus() {\n        if (this.dropDown.allowItemsFocus) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (!focusedItem) { return; }\n            focusedItem.element.nativeElement.focus({ preventScroll: true });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event): void {\n    }\n}\n","import {\n    Component,\n    HostBinding\n} from '@angular/core';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item',\n    templateUrl: 'drop-down-item.component.html'\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBaseDirective {\n    /**\n     * @inheritdoc\n     */\n    get focused(): boolean {\n        let focusedState = this._focused;\n        if (this.hasIndex) {\n            const focusedItem = this.selection.first_item(`${this.dropDown.id}-active`);\n            const focusedIndex = focusedItem ? focusedItem.index : -1;\n            focusedState = this._index === focusedIndex;\n        }\n        return this.isSelectable && focusedState;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n    /**\n     * @inheritdoc\n     */\n    get selected(): boolean {\n        if (this.hasIndex) {\n            const item = this.selection.first_item(`${this.dropDown.id}`);\n            return item ? item.index === this._index && item.value === this.value : false;\n        }\n        return this._selected;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n        this.selectedChange.emit(this._selected);\n    }\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && this.isSelectable;\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clicked(event): void {\n        if (!this.isSelectable) {\n            this.ensureItemFocus();\n            return;\n        }\n        if (this.selection) {\n            this.dropDown.selectItem(this, event);\n        }\n    }\n}\n","import {\n    Input, HostBinding, ElementRef, QueryList, Output, EventEmitter, ChangeDetectorRef, Optional, Inject, Directive\n} from '@angular/core';\n\nimport { Navigate, ISelectionEventArgs } from './drop-down.common';\nimport { IDropDownList } from './drop-down.common';\nimport { DropDownActionKey } from './drop-down.common';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\nlet NEXT_ID = 0;\n\n/**\n * An abstract class, defining a drop-down component, with:\n * Properties for display styles and classes\n * A collection items of type `IgxDropDownItemBaseDirective`\n * Properties and methods for navigating (highlighting/focusing) items from the collection\n * Properties and methods for selecting items from the collection\n */\n@Directive({\n    selector: '[igxDropDownBase]'\n})\nexport class IgxDropDownBaseDirective extends DisplayDensityBase implements IDropDownList {\n    protected _width;\n    protected _height;\n    protected _focusedItem: any = null;\n    protected _id = `igx-drop-down-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     * Get dropdown's html element of its scroll container\n     */\n    public get scrollContainer(): HTMLElement {\n        return this.element;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public children: QueryList<IgxDropDownItemBaseDirective>;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     *  Gets/Sets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Gets/Sets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public height: string;\n\n    /**\n     * Gets/Sets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * Gets/Sets the drop down's container max height.\n     *\n     * ```typescript\n     * // get\n     * let maxHeight = this.dropdown.maxHeight;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [maxHeight]='200px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    @HostBinding('style.maxHeight')\n    public maxHeight = null;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down')\n    public cssClass = true;\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBaseDirective[] {\n        const items: IgxDropDownItemBaseDirective[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBaseDirective[] {\n        const headers: IgxDropDownItemBaseDirective[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     */\n    public collapsed: boolean;\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n            case DropDownActionKey.SPACE:\n                this.selectItem(this.focusedItem, event);\n                break;\n            case DropDownActionKey.ESCAPE:\n        }\n    }\n\n    /**\n     * Emits onSelection with the target item & event\n     * @hidden @internal\n     * @param newSelection the item selected\n     * @param event the event that triggered the call\n     */\n    public selectItem(newSelection?: IgxDropDownItemBaseDirective, event?: Event) {\n        this.onSelection.emit({\n            newSelection,\n            oldSelection: null,\n            cancel: false\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBaseDirective {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set focusedItem(item: IgxDropDownItemBaseDirective) {\n        this._focusedItem = item;\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this.focusedItem.itemIndex;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex);\n    }\n\n    protected getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        const items = this.items;\n        while (items[index + direction] && items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * @param newIndex number - the index of the item in the `items` collection\n     */\n    public navigateItem(newIndex: number) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.focused = false;\n            }\n            this.focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this.focusedItem.focused = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    protected scrollToHiddenItem(newItem: IgxDropDownItemBaseDirective) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef, static: true })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import {\n    EventEmitter,\n    Output,\n    HostListener,\n    ElementRef,\n    ChangeDetectorRef,\n    OnDestroy,\n    Directive,\n    AfterViewInit\n} from '@angular/core';\n\n@Directive({\n    selector: '[igxVirtualHelperBase]'\n})\nexport class VirtualHelperBaseDirective implements OnDestroy, AfterViewInit {\n    public scrollAmount = 0;\n\n    public _size = 0;\n\n    public destroyed;\n\n    private _afterViewInit = false;\n\n    ngAfterViewInit() {\n        this._afterViewInit = true;\n    }\n\n    @HostListener('scroll', ['$event'])\n    onScroll(event) {\n        this.scrollAmount = event.target.scrollTop || event.target.scrollLeft;\n    }\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n    public set size(value) {\n        if (this.destroyed) {\n            return;\n        }\n        this._size = value;\n        if (this._afterViewInit) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    public get size() {\n        return this._size;\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"size\"></div>'\n})\nexport class HVirtualHelperComponent extends VirtualHelperBaseDirective {\n    @ViewChild('horizontal_container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) {\n        super(elementRef, cdr);\n     }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"size\"></div>'\n})\nexport class VirtualHelperComponent extends VirtualHelperBaseDirective implements OnDestroy  {\n    @HostBinding('scrollTop')\n    public scrollTop;\n\n    @ViewChild('container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public itemsLength: number;\n\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) {\n        super(elementRef, cdr);\n    }\n\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n    private parentElement;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            this.parentElement = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            const targetElem = this.parentElement;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n     /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX / 120;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);\n        }\n\n        /** Get delta for the Y axis*/\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY / 120;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            this.preventParentScroll(evt, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * When there is still room to scroll up/down prevent the parent elements from scrolling too.\n     */\n    protected preventParentScroll(evt, preventDefault) {\n        const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n        const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n            this.IgxScrollInertiaScrollContainer.offsetHeight;\n        if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n            if (preventDefault) {\n                 evt.preventDefault();\n            }\n            if (evt.stopPropagation) {\n                evt.stopPropagation();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, true);\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.parentElement;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.parentElement;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { Injectable, Component } from '@angular/core';\nimport { IgxGridForOfDirective } from './for_of.directive';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfSyncService {\n\n    private _master: Map<string, IgxGridForOfDirective<any>> = new Map<string, IgxGridForOfDirective<any>>();\n\n    /**\n     * @hidden\n     */\n    public isMaster(directive: IgxGridForOfDirective<any>): boolean {\n        return this._master.get(directive.igxForScrollOrientation) === directive;\n    }\n\n    /**\n     * @hidden\n     */\n    public setMaster(directive: IgxGridForOfDirective<any>, forced = false) {\n        const orientation = directive.igxForScrollOrientation;\n        if (orientation && (forced || !this._master.has(orientation))) {\n            this._master.set(orientation, directive);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public resetMaster() {\n        this._master.clear();\n    }\n\n    /**\n     * @hidden\n     */\n    public sizesCache(dir: string): number[] {\n        return this._master.get(dir).sizesCache;\n    }\n\n    /**\n     * @hidden\n     */\n    public chunkSize(dir: string): number {\n        return this._master.get(dir).state.chunkSize;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfScrollSyncService {\n    private _masterScroll: Map<string, VirtualHelperBaseDirective> = new Map<string, any>();\n    public setScrollMaster(dir: string, scroll: VirtualHelperBaseDirective) {\n        this._masterScroll.set(dir, scroll);\n    }\n\n    public getScrollMaster(dir: string) {\n        return this._masterScroll.get(dir);\n    }\n}\n","ï»¿import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef,\n    ViewRef,\n    AfterViewInit\n} from '@angular/core';\n\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from './for_of.sync.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter, throttleTime, first } from 'rxjs/operators';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n/**\n *  @publicApi\n */\nexport class IgxForOfContext<T> {\n    constructor(\n       public $implicit: T,\n       public index: number,\n       public count: number\n    ) {}\n\n    /**\n     * A function that returns whether the element is the first or not\n     */\n    get first(): boolean { return this.index === 0; }\n\n    /**\n     * A function that returns whether the element is the last or not\n     */\n    get last(): boolean { return this.index === this.count - 1; }\n\n    /**\n     * A function that returns whether the element is even or not\n     */\n    get even(): boolean { return this.index % 2 === 0; }\n\n    /**\n     * A function that returns whether the element is odd or not\n     */\n    get odd(): boolean { return !this.even; }\n\n}\n\n@Directive({ selector: '[igxFor][igxForOf]' })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy, AfterViewInit {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that sets the property name from which to read the size in the data object.\n     */\n    @Input()\n    public igxForSizePropName;\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation = 'vertical';\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * Similar to the property totalItemCount, but this will allow setting the data count into the template.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data | async\" [igxForTotalItemCount]=\"count | async\"\n     *  [igxForContainerSize]=\"'500px'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    get igxForTotalItemCount(): number {\n        return this.totalItemCount;\n    }\n    set igxForTotalItemCount(value: number) {\n        this.totalItemCount = value;\n    }\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * @hidden @internal\n     * An event that is emitted when scrollbar visibility has changed.\n     */\n    @Output()\n    public onScrollbarVisibilityChanged = new EventEmitter<any>();\n\n    /**\n     * An event that is emitted after the rendered content size of the igxForOf has been changed.\n    */\n    @Output()\n    public onContentSizeChange = new EventEmitter<any>();\n\n    /**\n     * An event that is emitted after data has been changed.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onDataChanged)=\"dataChanged($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * dataChanged(e){\n     * alert(\"data changed!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDataChanged = new EventEmitter<any>();\n\n    @Output()\n    public onBeforeViewDestroyed = new EventEmitter<EmbeddedViewRef<any>>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n    protected func;\n    protected _sizesCache: number[] = [];\n    protected scrollComponent: VirtualHelperBaseDirective;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    protected heightCache = [];\n    private _adjustToIndex;\n    private MAX_PERF_SCROLL_DIFF = 4;\n\n\n    public get displayContainer(): HTMLElement | undefined {\n        return this.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public get virtualHelper() {\n        return this.scrollComponent.nativeElement;\n    }\n\n    protected get sizesCache(): number[] {\n        return this._sizesCache;\n    }\n    protected set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    private get _isScrolledToBottom() {\n        if (!this.getScroll()) {\n            return true;\n        }\n        const scrollHeight = this.getScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(this.getScroll().scrollTop + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal = false;\n    // End properties related to virtual height handling\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    protected contentResizeNotify = new Subject();\n    protected contentObserver: ResizeObserver;\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone,\n        protected syncScrollService: IgxForOfScrollSyncService) { }\n\n    /**\n     * @hidden\n     */\n    protected get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     *\n     * Gets/Sets the scroll position.\n     * ```typescript\n     * const position = directive.scrollPosition;\n     * directive.scrollPosition = value;\n     * ```\n     */\n    public get scrollPosition(): number {\n        return this.scrollComponent.scrollAmount;\n    }\n    public set scrollPosition(val: number) {\n        if (val === this.scrollComponent.scrollAmount) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal' && this.scrollComponent) {\n            this.scrollComponent.nativeElement.scrollLeft = val;\n        } else if (this.scrollComponent) {\n            this.scrollComponent.nativeElement.scrollTop = val;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.scrollComponent.nativeElement.removeEventListener('scroll', this.func)\n            );\n        } else {\n            this._zone.runOutsideAngular(() =>\n                this.scrollComponent.nativeElement.removeEventListener('scroll', this.verticalScrollHandler)\n            );\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    public isScrollable() {\n        return this.scrollComponent.size > parseInt(this.igxForContainerSize, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n        this.igxForSizePropName = this.igxForSizePropName || 'width';\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.scrollComponent = this.syncScrollService.getScrollMaster(this.igxForScrollOrientation);\n            this.state.chunkSize = this._calculateChunkSize();\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            if (this.scrollComponent) {\n                this.state.startIndex = Math.min(this.getIndexAt(this.scrollPosition, this.sizesCache, 0),\n                    this.igxForOf.length - this.state.chunkSize);\n            }\n            for (let i = this.state.startIndex; i < this.state.startIndex + this.state.chunkSize &&\n                    this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.scrollComponent = vc.createComponent(factory).instance;\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.scrollComponent.size = this.igxForOf ? this._calcHeight() : 0;\n            this.syncScrollService.setScrollMaster(this.igxForScrollOrientation, this.scrollComponent);\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.scrollComponent.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n            });\n            const destructor = takeUntil<any>(this.destroy$);\n            this.contentResizeNotify.pipe(destructor,\n            filter(() => this.igxForContainerSize && this.igxForOf && this.igxForOf.length > 0),\n            throttleTime(40, undefined, {leading: true, trailing: true}))\n            .subscribe(() => {\n                this._zone.runTask(() => {\n                    this.updateSizes();\n                });\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.scrollComponent = this.syncScrollService.getScrollMaster(this.igxForScrollOrientation);\n            if (!this.scrollComponent) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.scrollComponent = vc.createComponent(hvFactory).instance;\n                this.scrollComponent.size = totalSize;\n                this.syncScrollService.setScrollMaster(this.igxForScrollOrientation, this.scrollComponent);\n                this._zone.runOutsideAngular(() => {\n                    this.scrollComponent.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.scrollComponent.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n                });\n            }\n            this._updateHScrollOffset();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        if (this.igxForScrollOrientation === 'vertical') {\n            this._zone.runOutsideAngular(() => {\n                this.contentObserver = new ResizeObserver(() => this.contentResizeNotify.next());\n                this.contentObserver.observe(this.dc.instance._viewContainer.element.nativeElement);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        if (this.contentObserver) {\n            this.contentObserver.disconnect();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange &&\n            this.igxForScrollOrientation === 'vertical' && this.igxForOf) {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n            this._applyChanges();\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    this.igxForOf = [];\n                }\n                this._updateSizeCache();\n                this._zone.run(() => {\n                    this._applyChanges();\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                    this.onDataChanged.emit();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.scrollPosition += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const maxRealScrollTop = this.scrollComponent.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && this.scrollPosition === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && this.scrollPosition === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && this.scrollPosition > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.scrollPosition = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && this.scrollPosition < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.scrollPosition = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length) - 1) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const isPrevItem = index < this.state.startIndex || this.scrollPosition > this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = Math.ceil(this.scrollPosition);\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n        let startIndex = this.getIndexAt(\n            this.scrollPosition,\n            this.sizesCache,\n            0\n        );\n        if (this.scrollPosition - this.sizesCache[startIndex] > 0) {\n            // fisrt item is not fully in view\n            startIndex++;\n        }\n        const endIndex = this.getIndexAt(\n            this.scrollPosition + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the scrollbar DOM element.\n     * This is either a vertical or horizontal scrollbar depending on the specified igxForScrollOrientation.\n     * ```typescript\n     * dir.getScroll();\n     * ```\n     */\n    public getScroll() {\n        return this.scrollComponent.nativeElement;\n    }\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * Returns the scroll offset of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getScrollForIndex(1);\n     * ```\n     */\n    public getScrollForIndex(index: number, bottom?: boolean) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scroll = bottom ? Math.max(0, this.sizesCache[index + 1] - containerSize) : this.sizesCache[index];\n        return scroll;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.scrollComponent.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = maxRealScrollTop !== 0 ?  event.target.scrollTop / maxRealScrollTop : 0;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    protected updateSizes() {\n        this.recalcUpdateSizes();\n        this._applyChanges();\n        this._updateScrollOffset();\n        this.onContentSizeChange.emit();\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        const l = this._embeddedViews.length;\n        const rNodes = this._embeddedViews.map(view =>\n            view.rootNodes.find(node => node.nodeType === Node.ELEMENT_NODE) || view.rootNodes[0].nextElementSibling);\n        for (let i = 0; i < l; i++) {\n            const rNode = rNodes[i];\n            if (rNode) {\n                const h = rNode.offsetHeight || parseInt(this.igxForItemSize, 10);\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ? h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10) + totalDiff;\n                this.scrollComponent.nativeElement.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio = hSum / this._maxHeight;\n                }\n                this.scrollComponent.size = Math.min(this.scrollComponent.size + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.scrollComponent.destroyed) {\n                    this.scrollComponent.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const maxVirtScrollTop = this._virtHeight - containerSize;\n                    this._bScrollInternal = true;\n                    this._virtScrollTop = maxVirtScrollTop;\n                    this.scrollPosition = maxVirtScrollTop;\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    const currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllElements(inScrollTop: number): number {\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        let newStart = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n        if (newStart + this.state.chunkSize > count) {\n            newStart = count - this.state.chunkSize;\n        }\n        const prevStart = this.state.startIndex;\n        const diff = newStart - this.state.startIndex;\n        this.state.startIndex = newStart;\n        if (diff) {\n            this.onChunkPreload.emit(this.state);\n            if (!this.isRemote) {\n                /*recalculate and apply page size.*/\n                if (diff > 0 && diff <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollNext(prevStart);\n                } else if (diff < 0 && Math.abs(diff) <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollPrev(prevStart);\n                } else {\n                    this.fixedApplyScroll();\n                }\n            }\n        }\n        return inScrollTop - this.sizesCache[this.state.startIndex];\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling down/right employing context change with view rearrangement\n     */\n    protected moveApplyScrollNext(prevIndex: number): void {\n        const start = prevIndex + this.state.chunkSize;\n        for (let i = start; i < start + this.state.startIndex - prevIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.shift();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            cntx.count = this.igxForOf.length;\n            const view: ViewRef = this.dc.instance._vcr.detach(0);\n            this.dc.instance._vcr.insert(view);\n            this._embeddedViews.push(embView);\n        }\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling up/left employing context change with view rearrangement\n     */\n    protected moveApplyScrollPrev(prevIndex: number): void {\n        for (let i = prevIndex - 1; i >= this.state.startIndex && this.igxForOf[i] !== undefined; i--) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.pop();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n            this.dc.instance._vcr.insert(view, 0);\n            this._embeddedViews.unshift(embView);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    protected getContextIndex(input) {\n        return this.isRemote ? this.state.startIndex + this.igxForOf.indexOf(input) : this.igxForOf.indexOf(input);\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change through context change for each view\n     */\n    protected fixedApplyScroll(): void {\n        let j = 0;\n        const endIndex = this.state.startIndex + this.state.chunkSize;\n        for (let i = this.state.startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews[j++];\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            cntx.count = this.igxForOf.length;\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10)) {\n            return;\n        }\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(event.target.scrollLeft);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n                cntx.count = this.igxForOf.length;\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n                this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n                chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = this._getItemSize(items[i], dimension);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        const newHeight = this.initSizesCache(this.igxForOf);\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0 && this.scrollPosition > 0) {\n            this.recalcUpdateSizes();\n            const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        if (!availableSize) {\n            return 0;\n        }\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + this._getItemSize(currentItem, dimension);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n                this.heightCache[i] :\n                this._getItemSize(item, dimension);\n            sum = arr.reduce(reducer, size);\n            if (sum < availableSize) {\n                arr.push(item);\n                length = arr.length;\n                if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let curItem = dimension === 'height' ? arr[0].value : arr[0];\n                    let prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        curItem = dimension === 'height' ? arr[0].value : arr[0];\n                        prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize = dimension === 'height' ?\n                            this.heightCache[prevIndex] :\n                            parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer, prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                }\n            } else {\n                arr.push(item);\n                length = arr.length + 1;\n                arr.shift();\n            }\n            if (length > maxLength) {\n                maxLength = length;\n            }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getIndexAt(left, set, index) {\n        let start = 0;\n        let end = set.length - 1;\n        if (left === 0) {\n            return 0;\n        }\n        while (start <= end) {\n            const midIdx = Math.floor((start + end) / 2);\n            const midLeft = set[midIdx];\n            const cmp = left - midLeft;\n            if (cmp > 0) {\n                start = midIdx + 1;\n            } else if (cmp < 0) {\n                end = midIdx - 1;\n            } else {\n                return midIdx;\n            }\n        }\n        return end;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        const scrollable = this.isScrollable();\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.scrollComponent.nativeElement.style.width = this.igxForContainerSize + 'px';\n            this.scrollComponent.size = totalWidth;\n            if (totalWidth <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n            }\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.scrollComponent.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.scrollComponent.size = this._calcHeight();\n            if ( this.scrollComponent.size <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n                // Need to reset the scrollAmount value here, because\n                // Firefox will not fire the scrollComponent scroll event handler\n                this.scrollComponent.scrollAmount = 0;\n            }\n        }\n        if (scrollable !== this.isScrollable()) {\n            // scrollbar visibility has changed\n            this.onScrollbarVisibilityChanged.emit();\n        }\n    }\n\n    protected _calcHeight(): number {\n        let height;\n        if (this.heightCache) {\n            height = this.heightCache.reduce((acc, val) => acc + val, 0);\n        } else {\n            height = this.initSizesCache(this.igxForOf);\n        }\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.igxForScrollOrientation === 'horizontal') {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllElements(this.scrollPosition);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        this.onBeforeViewDestroyed.emit(oldElem);\n        // also detach from ViewContainerRef to make absolutely sure this is removed from the view container.\n        this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        const vScroll =  this.scrollComponent.nativeElement;\n        scrollOffset = vScroll && this.scrollComponent.size ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset =  this.scrollComponent.nativeElement &&\n            this.scrollComponent.size ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    private _getItemSize(item, dimension: string): number {\n        const dim = item[dimension];\n        return typeof dim === 'number' ? dim : parseInt(this.igxForItemSize, 10) || 0;\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState extends IBaseEventArgs {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\nexport interface IForOfDataChangingEventArgs extends IBaseEventArgs {\n    containerSize: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    constructor(\n        _viewContainer: ViewContainerRef,\n        _template: TemplateRef<NgForOfContext<T>>,\n        _differs: IterableDiffers,\n        resolver: ComponentFactoryResolver,\n        cdr: ChangeDetectorRef,\n        _zone: NgZone,\n        protected syncScrollService: IgxForOfScrollSyncService,\n        protected syncService: IgxForOfSyncService) {\n        super(_viewContainer, _template, _differs, resolver, cdr, _zone, syncScrollService);\n    }\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    /**\n     * @hidden @internal\n     * An event that is emitted after data has been changed but before the view is refreshed\n     */\n    @Output()\n    public onDataChanging = new EventEmitter<IForOfDataChangingEventArgs>();\n\n    ngOnInit() {\n        this.syncService.setMaster(this);\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        this.syncService.setMaster(this);\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange &&\n             this.igxForScrollOrientation === 'vertical' && this.igxForOf) {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get sizesCache(): number[] {\n        if (this.syncService.isMaster(this)) {\n            return this._sizesCache;\n        }\n        return this.syncService.sizesCache(this.igxForScrollOrientation);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    protected get itemsDimension() {\n        return this.igxForScrollOrientation === 'horizontal' ? this.igxForSizePropName : 'height';\n    }\n\n    protected getItemSize(item) {\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        if (dimension === 'height') {\n            size = parseInt(this.igxForItemSize, 10) || 0;\n            if (item && item.summaries) {\n                size = item.max;\n            } else if (item && item.groups && item.height) {\n                size = item.height;\n            }\n        } else {\n            size = parseInt(item[dimension], 10) || 0;\n        }\n        return size;\n    }\n\n    protected initSizesCache(items: any[]): number {\n        if (!this.syncService.isMaster(this)) {\n            const masterSizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n            return masterSizesCache[masterSizesCache.length - 1];\n        }\n        let totalSize = 0;\n        let size = 0;\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            size = this.getItemSize(items[i]);\n            if (this.itemsDimension === 'height') {\n                this.heightCache.push(size);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache(changes: IterableChanges<T> = null) {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        let newHeight = oldHeight;\n        if (changes && !this.isRemote) {\n            newHeight = this.handleCacheChanges(changes);\n        } else {\n            newHeight = this.initSizesCache(this.igxForOf);\n        }\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0) {\n            // TODO: This code can be removed. However tests need to be rewritten in a way that they wait for ResizeObserved to complete.\n            // So leaving as is for the moment.\n            requestAnimationFrame(() => {\n                this.recalcUpdateSizes();\n                const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                if (this.scrollPosition !== 0) {\n                    this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n                } else {\n                    this._updateScrollOffset();\n                }\n            });\n        }\n    }\n\n    protected handleCacheChanges(changes: IterableChanges<T>) {\n        const identityChanges = [];\n        const newHeightCache = [];\n        const newSizesCache = [];\n        newSizesCache.push(0);\n        let newHeight = 0;\n\n        // When there are more than one removed items the changes are not reliable so those with identity change should be default size.\n        let numRemovedItems = 0;\n        changes.forEachRemovedItem(() => numRemovedItems++);\n\n        // Get the identity changes to determine later if those that have changed their indexes should be assigned default item size.\n        changes.forEachIdentityChange((item) => {\n            if (item.currentIndex !== item.previousIndex) {\n                // Filter out ones that have not changed their index.\n                identityChanges[item.currentIndex] = item;\n            }\n        });\n\n        // Processing each item that is passed to the igxForOf so far seem to be most reliable. We parse the updated list of items.\n        changes.forEachItem((item) => {\n            if (item.previousIndex !== null &&\n                (numRemovedItems < 2 || !identityChanges.length || identityChanges[item.currentIndex])) {\n                // Reuse cache on those who have previousIndex.\n                // When there are more than one removed items currently the changes are not readable so ones with identity change\n                // should be racalculated.\n                newHeightCache[item.currentIndex] = this.heightCache[item.previousIndex];\n            } else {\n                // Assign default item size.\n                newHeightCache[item.currentIndex] = this.getItemSize(item.item);\n            }\n            newSizesCache[item.currentIndex + 1] = newSizesCache[item.currentIndex] + newHeightCache[item.currentIndex];\n            newHeight += newHeightCache[item.currentIndex];\n        });\n        this.heightCache = newHeightCache;\n        this.sizesCache = newSizesCache;\n        return newHeight;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public assumeMaster(): void {\n        this._sizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n        this.syncService.setMaster(this, true);\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                const args: IForOfDataChangingEventArgs = {\n                    containerSize: this.igxForContainerSize\n                };\n                this.onDataChanging.emit(args);\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    this.igxForOf = [];\n                }\n                /* we need to reset the master dir if all rows are removed\n                (e.g. because of filtering); if all columns are hidden, rows are\n                still rendered empty, so we should not reset master */\n                if (!this.igxForOf.length &&\n                    this.igxForScrollOrientation === 'vertical') {\n                    this.syncService.resetMaster();\n                }\n                this.syncService.setMaster(this);\n                this.igxForContainerSize = args.containerSize;\n                this._updateSizeCache(changes);\n                this._applyChanges();\n                this._updateScrollOffset();\n                this.onDataChanged.emit();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.scrollComponent.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = maxRealScrollTop !== 0 ?  event.target.scrollTop / maxRealScrollTop : 0;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        this._zone.onStable.pipe(first()).subscribe( () => {\n            this.recalcUpdateSizes();\n        });\n        this.cdr.markForCheck();\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.scrollComponent || !parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10)) {\n            return;\n        }\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _updateViews(prevChunkSize) {\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex;\n            let endIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            } else {\n                startIndex = this.getIndexAt(\n                    this.scrollPosition,\n                    this.sizesCache,\n                    0\n                );\n                if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n                    startIndex = this.igxForOf.length - this.state.chunkSize;\n                }\n                this.state.startIndex = startIndex;\n                endIndex = this.state.chunkSize + this.state.startIndex;\n            }\n\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n                cntx.count = this.igxForOf.length;\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n        }\n    }\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        this._updateViews(prevChunkSize);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        if (this.syncService.isMaster(this)) {\n            return super._calcMaxChunkSize();\n        }\n        return this.syncService.chunkSize(this.igxForScrollOrientation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent,\n         HVirtualHelperComponent, VirtualHelperBaseDirective],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     *@hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    forwardRef,\n    QueryList,\n    OnChanges,\n    Input,\n    OnDestroy,\n    ViewChild,\n    ContentChild,\n    AfterViewInit,\n    Output,\n    EventEmitter,\n    Optional,\n    Inject,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownBaseDirective } from './drop-down.base';\nimport { DropDownActionKey, Navigate } from './drop-down.common';\nimport { IGX_DROPDOWN_BASE, IDropDownBase } from './drop-down.common';\nimport { ISelectionEventArgs } from './drop-down.common';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, isIE, IBaseEventArgs } from '../core/utils';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { Subject } from 'rxjs';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\nimport { OverlaySettings } from '../services';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { take } from 'rxjs/operators';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    templateUrl: './drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]\n})\nexport class IgxDropDownComponent extends IgxDropDownBaseDirective implements IDropDownBase, OnChanges, AfterViewInit, OnDestroy {\n    protected destroy$ = new Subject<boolean>();\n    protected _scrollPosition: number;\n\n    @ContentChild(IgxForOfDirective, { read: IgxForOfDirective })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    protected toggleDirective: IgxToggleDirective;\n\n    @ViewChild('scrollContainer', { static: true })\n    protected scrollContainerRef: ElementRef;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent), { descendants: true })\n    public children: QueryList<IgxDropDownItemBaseDirective>;\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBaseDirective {\n        if (this.virtDir) {\n            return this._focusedItem && this._focusedItem.index !== -1 ?\n                (this.children.find(e => e.index === this._focusedItem.index) || null) :\n                null;\n        }\n        return this._focusedItem;\n    }\n\n    public set focusedItem(value: IgxDropDownItemBaseDirective) {\n        if (!value) {\n            this.selection.clear(`${this.id}-active`);\n            this._focusedItem = null;\n            return;\n        }\n        this._focusedItem = value;\n        if (this.virtDir) {\n            this._focusedItem = {\n                value: value.value,\n                index: value.index\n            } as IgxDropDownItemBaseDirective;\n        }\n        this.selection.set(`${this.id}-active`, new Set([this._focusedItem]));\n    }\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n    set id(value: string) {\n        this.selection.set(value, this.selection.get(this.id));\n        this.selection.clear(this.id);\n        this.selection.set(value, this.selection.get(`${this.id}-active`));\n        this.selection.clear(`${this.id}-active`);\n        this._id = value;\n    }\n\n    /** Id of the internal listbox of the drop down */\n    public get listId() {\n        return this.id + '-list';\n    }\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): IgxDropDownItemBaseDirective {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            return selectedItem;\n        }\n        return null;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    /** @hidden @internal */\n    public get scrollContainer(): HTMLElement {\n        return this.scrollContainerRef.nativeElement;\n    }\n\n    protected get collectionLength() {\n        if (this.virtDir) {\n            return this.virtDir.totalItemCount || this.virtDir.igxForOf.length;\n        }\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, _displayDensityOptions);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n        this.updateScrollPosition();\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    public close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        if (this.collapsed || this.toggleDirective.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select; If the drop down uses *igxFor, pass the index in data\n     */\n    public setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n        let newSelection: IgxDropDownItemBaseDirective;\n        if (this.virtDir) {\n            newSelection = {\n                value: this.virtDir.igxForOf[index],\n                index\n            } as IgxDropDownItemBaseDirective;\n        } else {\n            newSelection = this.items[index];\n        }\n        this.selectItem(newSelection);\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.\n     * @param newIndex number\n     */\n    public navigateItem(index: number) {\n        if (this.virtDir) {\n            if (index === -1 || index >= this.collectionLength) {\n                return;\n            }\n            const direction = index > (this.focusedItem ? this.focusedItem.index : -1) ? Navigate.Down : Navigate.Up;\n            const subRequired = this.isIndexOutOfBounds(index, direction);\n            this.focusedItem = {\n                value: this.virtDir.igxForOf[index],\n                index: index\n            } as IgxDropDownItemBaseDirective;\n            if (subRequired) {\n                this.virtDir.scrollTo(index);\n            }\n            if (subRequired) {\n                this.virtDir.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    this.skipHeader(direction);\n                });\n            } else {\n                this.skipHeader(direction);\n            }\n        } else {\n            super.navigateItem(index);\n        }\n        if (this.allowItemsFocus && this.focusedItem) {\n            this.focusedItem.element.nativeElement.focus();\n            this.cdr.markForCheck();\n        }\n    }\n\n    private isIndexOutOfBounds(index: number, direction: Navigate) {\n        const virtState = this.virtDir.state;\n        const currentPosition = this.virtDir.getScroll().scrollTop;\n        const itemPosition = this.virtDir.getScrollForIndex(index, direction === Navigate.Down);\n        const indexOutOfChunk = index < virtState.startIndex || index > virtState.chunkSize + virtState.startIndex;\n        const scrollNeeded = direction === Navigate.Down ? currentPosition < itemPosition : currentPosition > itemPosition;\n        const subRequired = indexOutOfChunk || scrollNeeded;\n        return subRequired;\n    }\n\n    protected skipHeader(direction: Navigate) {\n        if (!this.focusedItem) {\n            return;\n        }\n        if (this.focusedItem.isHeader || this.focusedItem.disabled) {\n            if (direction === Navigate.Up) {\n                this.navigatePrev();\n            } else {\n                this.navigateNext();\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    updateScrollPosition() {\n        if (!this.virtDir) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.virtDir.scrollTo(0);\n            return;\n        }\n        let targetScroll = this.virtDir.getScrollForIndex(this.selectedItem.index);\n        const itemsInView = this.virtDir.igxForContainerSize / this.virtDir.igxForItemSize;\n        targetScroll -= (itemsInView / 2 - 1) * this.virtDir.igxForItemSize;\n        this.virtDir.getScroll().scrollTop = targetScroll;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpening(e: CancelableEventArgs) {\n        this.onOpening.emit(e);\n        if (e.cancel) {\n            return;\n        }\n\n        if (this.virtDir) {\n            this.virtDir.scrollPosition = this._scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleContentAppended() {\n        if (!this.virtDir && this.selectedItem) {\n           this.scrollToItem(this.selectedItem);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        if (this.selectedItem) {\n            this.focusedItem = this.selectedItem;\n            this._focusedItem.focused = true;\n        } else if (this.allowItemsFocus) {\n            this.navigateFirst();\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosing(e: CancelableBrowserEventArgs) {\n        this.onClosing.emit(e);\n        if (this.virtDir) {\n            this._scrollPosition = this.virtDir.scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosed() {\n        if (this._focusedItem) {\n            this._focusedItem.focused = false;\n        }\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.selection.clear(this.id);\n        this.selection.clear(`${this.id}-active`);\n    }\n\n    protected scrollToItem(item: IgxDropDownItemBaseDirective) {\n        const itemPosition = this.calculateScrollPosition(item);\n\n        //  in IE11 setting sctrollTop is somehow slow and forces dropdown\n        //  to appear on screen before animation start. As a result dropdown\n        //  flickers badly. This is why we set scrollTop just a little later\n        //  allowing animation to start and prevent dropdown flickering\n        if (isIE()) {\n            setTimeout(() => {\n                this.scrollContainer.scrollTop = (itemPosition);\n            }, 1);\n        } else {\n            this.scrollContainer.scrollTop = (itemPosition);\n        }\n    }\n\n    /** @hidden @internal */\n    public calculateScrollPosition(item: IgxDropDownItemBaseDirective): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    // temp workaround until fix --> https://github.com/angular/angular/issues/34992\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.id) {\n            this.toggleDirective.id = changes.id.currentValue;\n        }\n    }\n\n    ngAfterViewInit() {\n        if (this.virtDir) {\n            this.virtDir.igxForItemSize = 28;\n        }\n    }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        super.onItemActionKey(key, event);\n        this.close();\n    }\n\n    /**\n     * Virtual scroll implementation\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        if (this.virtDir) {\n            this.navigateItem(0);\n        } else {\n            super.navigateFirst();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        if (this.virtDir) {\n            this.navigateItem(this.virtDir.totalItemCount ? this.virtDir.totalItemCount - 1 : this.virtDir.igxForOf.length - 1);\n        } else {\n            super.navigateLast();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index + 1 : 0);\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index - 1 : 0);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * Handles the `onSelection` emit and the drop down toggle when selection changes\n     * @hidden\n     * @internal\n     * @param newSelection\n     * @param event\n     */\n    public selectItem(newSelection?: IgxDropDownItemBaseDirective, event?: Event) {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this.focusedItem;\n        }\n        if (newSelection === null) {\n            return;\n        }\n        if (newSelection instanceof IgxDropDownItemBaseDirective && newSelection.isHeader) {\n            return;\n        }\n        if (this.virtDir) {\n            newSelection = {\n                value: newSelection.value,\n                index: newSelection.index\n            } as IgxDropDownItemBaseDirective;\n        }\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (!args.cancel) {\n            if (this.isSelectionValid(args.newSelection)) {\n                this.selection.set(this.id, new Set([args.newSelection]));\n                if (!this.virtDir) {\n                    if (oldSelection) {\n                        oldSelection.selected = false;\n                    }\n                    if (args.newSelection) {\n                        args.newSelection.selected = true;\n                    }\n                }\n                if (event) {\n                    this.toggleDirective.close();\n                }\n            } else {\n                throw new Error('Please provide a valid drop-down item for the selection!');\n            }\n        }\n    }\n\n    /**\n     * Clears the selection of the dropdown\n     * ```typescript\n     * this.dropdown.clearSelection();\n     * ```\n     */\n    public clearSelection() {\n        const oldSelection = this.selectedItem;\n        const newSelection: IgxDropDownItemBaseDirective = null;\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n        if (this.selectedItem && !args.cancel) {\n            this.selectedItem.selected = false;\n            this.selection.clear(this.id);\n        }\n    }\n\n    /**\n     * Checks whether the selection is valid\n     * `null` - the selection should be emptied\n     * Virtual? - the selection should at least have and `index` and `value` property\n     * Non-virtual? - the selection should be a valid drop-down item and **not** be a header\n     */\n    protected isSelectionValid(selection: any): boolean {\n        return selection === null\n        || (this.virtDir && selection.hasOwnProperty('value') && selection.hasOwnProperty('index'))\n        || (selection instanceof IgxDropDownItemComponent && !selection.isHeader);\n    }\n}\n\n","import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';\nimport { IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { IDropDownNavigationDirective } from './drop-down.common';\nimport { IgxDropDownBaseDirective } from './drop-down.base';\nimport { DropDownActionKey } from './drop-down.common';\n\n/**\n * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBaseDirective component\n */\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective implements IDropDownNavigationDirective {\n\n    protected _target: IgxDropDownBaseDirective = null;\n\n    constructor(@Self() @Optional() @Inject(IGX_DROPDOWN_BASE) public dropdown: IgxDropDownBaseDirective) { }\n\n    /**\n     * Gets the target of the navigation directive;\n     *\n     * ```typescript\n     * // Get\n     * export class MyComponent {\n     *  ...\n     *  @ContentChild(IgxDropDownNavigationDirective)\n     *  navDirective: IgxDropDownNavigationDirective = null\n     *  ...\n     *  const navTarget: IgxDropDownBaseDirective = navDirective.navTarget\n     * }\n     * ```\n     */\n    get target(): IgxDropDownBaseDirective {\n        return this._target;\n    }\n\n    /**\n     * Sets the target of the navigation directive;\n     * If no valid target is passed, it falls back to the drop down context\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxDropDownItemNavigation]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBaseDirective) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * Captures keydown events and calls the appropriate handlers on the target component\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);\n                    break;\n                case 'enter':\n                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown();\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown();\n                    break;\n                case 'home':\n                    this.onHomeKeyDown();\n                    break;\n                case 'end':\n                    this.onEndKeyDown();\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowDownKeyDown() {\n        this.target.navigateNext();\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowUpKeyDown() {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * Navigates to target's last item\n     */\n    onEndKeyDown() {\n        this.target.navigateLast();\n    }\n\n    /**\n     * Navigates to target's first item\n     */\n    onHomeKeyDown() {\n        this.target.navigateFirst();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxDropDownComponent } from './drop-down.component';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownItemNavigationDirective } from './drop-down-navigation.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\nimport { IgxDropDownBaseDirective } from './drop-down.base';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\n\nexport * from './drop-down.component';\nexport * from './drop-down-item.component';\nexport { ISelectionEventArgs, IDropDownNavigationDirective,  } from './drop-down.common';\nexport * from './drop-down-navigation.directive';\nexport * from './drop-down.base';\nexport * from './drop-down-item.base';\nexport * from './drop-down-group.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDropDownBaseDirective,\n        IgxDropDownComponent,\n        IgxDropDownItemBaseDirective,\n        IgxDropDownItemComponent,\n        IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective\n    ],\n    exports: [\n        IgxDropDownComponent,\n        IgxDropDownItemComponent,\n        IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxToggleModule\n    ]\n})\nexport class IgxDropDownModule { }\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupBase } from '../../input-group/input-group.common';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n@Directive({\n    selector: '[igxInput]',\n    exportAs: 'igxInput'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        public inputGroup: IgxInputGroupBase,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input('value')\n    set value(value: any) {\n        this.nativeElement.value = value;\n        this.checkValidity();\n    }\n    /**\n     * Gets the `value` propery.\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n\n    /**\n     * Sets the `required` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [required]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set required(value: boolean) {\n        if (typeof value === 'boolean') {\n            this.nativeElement.required = this.inputGroup.isRequired = value;\n\n            if (value && !this.nativeElement.checkValidity()) {\n                this._valid = IgxInputState.INVALID;\n            } else {\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * Gets whether the igxInput is required.\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input')\n    public onInput() {\n        this.checkValidity();\n    }\n    /**\n     *@hidden\n     */\n    ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Make sure we do not invalidate the input on init\n        if (!this.ngControl) {\n            this._valid = IgxInputState.INITIAL;\n        }\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    protected onStatusChanged() {\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                //  TODO: check the logic when control is touched or dirty\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previously but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else {\n                //  if control is untouched and pristine its state is initial. This is when user did not interact\n                //  with the input or when form/control is reset\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n    /**\n     * Gets whether the igxInput is focused.\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n\n    /**\n     * Gets whether the igxInput is valid.\n     * ```typescript\n     * let valid = this.igxInput.isValid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get isValid(): boolean {\n        return this.valid !== IgxInputState.INVALID;\n    }\n\n    /**\n     * Sets the state of the igxInput.\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n\n    private checkValidity() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n}\n","/** @hidden */\nexport abstract class IgxInputGroupBase {\n    disabled: boolean;\n    isFocused: boolean;\n    isRequired: boolean;\n    hasPlaceholder: boolean;\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixDirective, IgxPrefixModule} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxInputGroupBase } from './input-group.common';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupType {\n    LINE,\n    BOX,\n    BORDER,\n    FLUENT,\n    BOOTSTRAP,\n    SEARCH,\n    FLUENT_SEARCH,\n}\n\n@Component({\n    selector: 'igx-input-group',\n    templateUrl: 'input-group.component.html',\n    providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }]\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase {\n    private _type = IgxInputGroupType.LINE;\n    private _filled = false;\n    private _supressInputAutofocus = false;\n\n    /**\n     * An ElementRef property of the `IgxInputGroupComponent`.\n     */\n    public element: ElementRef;\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     *```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *this.inputGroup.defaultClass = false;\n     *```\n     *}\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--box')\n    public isBox = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--border')\n    public isBorder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--search')\n    public isSearch = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--fluent-search')\n    public isFluentSearch = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--fluent')\n    public isFluent = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--bootstrap')\n    public isBootstrap = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective, static: true })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this._supressInputAutofocus) {\n            this.input.focus();\n        }\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * The allowed values are `line`, `box`, `border`, `fluent`, `search` and `fluentSearch`. The default is `line`.\n     * ```html\n     *<igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    set type(value: string) {\n        const type: IgxInputGroupType = (IgxInputGroupType as any)[value.toUpperCase()];\n        if (type !== undefined) {\n            this.isBox = this.isBootstrap = this.isFluent = this.isFluentSearch = this.isBorder = this.isSearch = false;\n            switch (type) {\n                case IgxInputGroupType.BOX:\n                    this.isBox = true;\n                    break;\n                case IgxInputGroupType.BORDER:\n                    this.isBorder = true;\n                    break;\n                case IgxInputGroupType.FLUENT:\n                    this.isFluent = true;\n                    break;\n                case IgxInputGroupType.FLUENT_SEARCH:\n                    this.isFluentSearch = true;\n                    break;\n                case IgxInputGroupType.SEARCH:\n                    this.isSearch = true;\n                    break;\n                case IgxInputGroupType.BOOTSTRAP:\n                    this.isBootstrap = true;\n                    break;\n                default: break;\n            }\n\n            this._type = type;\n        }\n    }\n\n    /**\n     * Returns whether the input element of the input group will be automatically focused on click.\n     * ```typescript\n     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;\n     * ```\n     */\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this._supressInputAutofocus;\n    }\n\n    /**\n     * Sets whether the input element of the input group will be automatically focused on click.\n     * ```html\n     * <igx-input-group [supressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this._supressInputAutofocus = value;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--filled')\n    get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--cosy')\n    get isDisplayDensityCosy() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--comfortable')\n    get isDisplayDensityComfortable() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--compact')\n    get isDisplayDensityCompact() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * Values are `line` - 0, `box` - 1, `border` - 2,  `fluent` - 3 `fluentSearch` - 4 and `search` - 5. The default is `line`.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     *}\n     * ```\n     */\n    get type() {\n        return this._type.toString();\n    }\n\n    constructor(private _element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) private _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.element = _element;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     *}\n     * ```\n     */\n    get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputBroder = this.inputGroup.hasBorder;\n     *}\n     * ```\n     */\n    get hasBorder() {\n        return this._type === IgxInputGroupType.LINE ||\n            this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     *}\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return  this._type === IgxInputGroupType.LINE;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     *}\n     *```\n     */\n    get isTypeBox() {\n        return this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     *}\n     * ```\n     */\n    get isTypeBorder() {\n        return this._type === IgxInputGroupType.BORDER;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is Fluent.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeFluent = this.inputGroup.isTypeFluent;\n     *}\n     * ```\n     */\n    get isTypeFluent() {\n        return this._type === IgxInputGroupType.FLUENT;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is Bootstrap.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBootstrap = this.inputGroup.isTypeBootstrap;\n     *}\n     * ```\n     */\n    get isTypeBootstrap() {\n        return this._type === IgxInputGroupType.BOOTSTRAP;\n    }\n\n    get isNotMaterial() {\n        return this._type === IgxInputGroupType.FLUENT || this._type === IgxInputGroupType.BOOTSTRAP;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     *}\n     * ```\n     */\n    get isTypeSearch() {\n        return  this._type === IgxInputGroupType.SEARCH;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is fluentSearch.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeFluentSearch = this.inputGroup.isTypeFluentSearch;\n     *}\n     * ```\n     */\n    get isTypeFluentSearch() {\n        return  this._type === IgxInputGroupType.FLUENT_SEARCH;\n    }\n\n    get filled() {\n        return this._filled;\n    }\n\n    set filled(val) {\n        this._filled = val;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxInputGroupComponent,\n        IgxHintDirective,\n        IgxInputDirective,\n        IgxLabelDirective\n    ],\n    exports: [\n        IgxInputGroupComponent,\n        IgxHintDirective,\n        IgxInputDirective,\n        IgxLabelDirective,\n        IgxPrefixModule,\n        IgxSuffixModule\n    ],\n    imports: [\n        CommonModule,\n        IgxPrefixModule,\n        IgxSuffixModule\n    ]\n})\nexport class IgxInputGroupModule { }\n","import { Directive, HostBinding, Input } from '@angular/core';\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n\n/**\n * @hidden\n */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-label-${NEXT_ID++}`;\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { Directive, HostBinding, NgModule, Input } from '@angular/core';\n\nexport enum IgxDividerType {\n    SOLID = 'solid',\n    DASHED = 'dashed'\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-divider'\n})\nexport class IgxDividerDirective {\n    /**\n     * Sets/gets the `id` of the divider.\n     * If not set, `id` will have value `\"igx-divider-0\"`;\n     * ```html\n     * <igx-divider id=\"my-divider\"></igx-divider>\n     * ```\n     * ```typescript\n     * let dividerId =  this.divider.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-divider-${NEXT_ID++}`;\n\n\n    /**\n     * An @Input property that sets the value of the `inset` attribute.\n     * If not provided it will be set to `'0'`.\n     * ```html\n     * <igx-divider inset=\"16px\"></igx-divider>\n     * ```\n     */\n    @Input('inset')\n    private _inset = '0';\n\n    /**\n     * An @Input property that sets the value of `role` attribute.\n     * If not the default value of `separator` will be used.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'separator';\n\n    /**\n     * Sets the type of the divider. The default value\n     * is `default`. The divider can also be `dashed`;\n     * ```html\n     * <igx-divider type=\"dashed\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider')\n    @Input()\n    public type: IgxDividerType | string = IgxDividerType.SOLID;\n\n    @HostBinding('class.igx-divider--dashed')\n    get isDashed() {\n        return this.type === IgxDividerType.DASHED;\n    }\n\n    /**\n     * An @Input that sets the `middle` attribute of the divider.\n     * If set to `true` and an `inset` value has been provided,\n     * the divider will start shrinking from both ends.\n     * ```html\n     * <igx-divider [middle]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--inset')\n    @Input()\n    public middle = false;\n\n    /**\n     * A getter that returns `true` if the type of the divider is `default`;\n     * ```typescript\n     * const isDefault = this.divider.isDefault;\n     * ```\n     */\n    get isSolid() {\n        return this.type === IgxDividerType.SOLID;\n    }\n\n    /**\n     * An @Input that sets the vertical attribute of the divider.\n     * ```html\n     * <igx-divider [vertical]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets the inset of the divider from the side(s).\n     * If the divider attribute `middle` is set to `true`,\n     * it will inset the divider on both sides.\n     * ```typescript\n     * this.divider.inset = '32px';\n     * ```\n     */\n    @HostBinding('style.margin')\n    set inset(value: string) {\n        this._inset = value;\n    }\n\n    /**\n     * Gets the current divider inset in terms of\n     * margin representation as applied to the divider.\n     * ```typescript\n     * const inset = this.divider.inset;\n     * ```\n     */\n    get inset() {\n        const baseMargin = '0';\n\n        if (this.middle) {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin}`;\n            }\n            return `${baseMargin} ${this._inset}`;\n        } else {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;\n            }\n            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxDividerDirective],\n    exports: [IgxDividerDirective]\n})\nexport class IgxDividerModule { }\n","import {\n    Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter,\n    NgModule, ElementRef, HostListener, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { CancelableEventArgs, IBaseEventArgs } from '../../core/utils';\nimport { OverlaySettings, AbsoluteScrollStrategy, IScrollStrategy, IPositionStrategy, AutoPositionStrategy } from '../../services/index';\nimport { IgxDropDownModule, IgxDropDownComponent, ISelectionEventArgs, IgxDropDownItemNavigationDirective } from '../../drop-down/index';\nimport { IgxInputGroupComponent } from '../../input-group/index';\nimport { IgxOverlayOutletDirective } from '../toggle/toggle.directive';\n\n/**\n * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.\n * @export\n */\nexport interface AutocompleteItemSelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /**\n     * New value selected from the drop down\n     */\n    value: string;\n}\n\nexport interface AutocompleteOverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\n/**\n * **Ignite UI for Angular Autocomplete** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)\n *\n * The igxAutocomplete directive provides a way to enhance a text input\n * by showing a drop down of suggested options, provided by the developer.\n *\n * Example:\n * ```html\n * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" />\n * <igx-drop-down #townsPanel>\n *     <igx-drop-down-item *ngFor=\"let town of towns | startsWith:townSelected\" [value]=\"town\">\n *         {{town}}\n *     </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Directive({\n    selector: '[igxAutocomplete]'\n})\nexport class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    constructor(@Self() @Optional() @Inject(NgModel) protected ngModel: NgModel,\n                @Self() @Optional() @Inject(FormControlName) protected formControl: FormControlName,\n                @Optional() protected group: IgxInputGroupComponent,\n                protected elementRef: ElementRef,\n                protected cdr: ChangeDetectorRef) {\n        super(null);\n    }\n\n    private defaultSettings: OverlaySettings = {\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new AutoPositionStrategy({ target: this.parentElement }),\n        excludePositionTarget: true\n    };\n\n    protected id: string;\n    protected dropDownOpened$ = new Subject<boolean>();\n    protected get model() {\n        return this.ngModel || this.formControl;\n    }\n\n    /** @hidden @internal */\n    get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /** @hidden @internal */\n    get parentElement(): HTMLElement {\n        return this.group ? this.group.element.nativeElement : this.nativeElement;\n    }\n\n    private get settings(): OverlaySettings {\n        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);\n        if (!settings.positionStrategy.settings.target) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.parentElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n        return settings;\n    }\n\n    /**\n     * Sets the target of the autocomplete directive\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxAutocomplete]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxAutocomplete')\n    public target: IgxDropDownComponent;\n\n    /**\n     * Enables/disables autocomplete component\n     *\n     * ```typescript\n     * // get\n     * let disabled = this.autocomplete.disabled;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteDisabled]=\"disabled\"/>\n     * ```\n     * ```typescript\n     * // set\n     * public disabled = true;\n     * ```\n     */\n    @Input('igxAutocompleteDisabled')\n    public disabled = false;\n\n    /**\n     * Provide overlay settings for the autocomplete drop down\n     *\n     * ```typescript\n     * // get\n     * let settings = this.autocomplete.autocompleteSettings;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteSettings]=\"settings\"/>\n     * ```\n     * ```typescript\n     * // set\n     * this.settings = {\n     *  positionStrategy: new ConnectedPositioningStrategy({\n     *      closeAnimation: null,\n     *      openAnimation: null\n     *  })\n     * };\n     * ```\n     */\n    @Input('igxAutocompleteSettings')\n    autocompleteSettings: AutocompleteOverlaySettings;\n\n    /**\n     * Emitted after item from the drop down is selected\n     *\n     * ```html\n     * <input igxInput [igxAutocomplete]=\"townsPanel\" (onItemSelected)='itemSelected($event)' />\n     * ```\n     */\n    @Output()\n    onItemSelected = new EventEmitter<AutocompleteItemSelectionEventArgs>();\n\n    /** @hidden @internal */\n    @HostBinding('attr.autocomplete')\n    public autofill = 'off';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.role')\n    public role = 'combobox';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded() {\n        return !this.collapsed;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.target.listId;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-activedescendant')\n    public get ariaActiveDescendant() {\n        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-autocomplete')\n    public get ariaAutocomplete() {\n        return 'list';\n    }\n\n    /** @hidden  @internal */\n    @HostListener('input')\n    onInput() {\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.Tab')\n    @HostListener('keydown.Shift.Tab')\n    onTab() {\n        this.close();\n    }\n\n    /** @hidden  @internal */\n    handleKeyDown(event) {\n        if (!this.collapsed) {\n            switch (event.key.toLowerCase()) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'home':\n                case 'end':\n                    return;\n                default:\n                    super.handleKeyDown(event);\n            }\n        }\n    }\n\n    /** @hidden  @internal */\n    onArrowDownKeyDown() {\n        super.onArrowDownKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onArrowUpKeyDown() {\n        super.onArrowUpKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onEndKeyDown() {\n        super.onEndKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onHomeKeyDown() {\n        super.onHomeKeyDown();\n    }\n\n    /**\n     * Closes autocomplete drop down\n     */\n    public close() {\n        if (this.collapsed) {\n            return;\n        }\n        this.target.close();\n        this.dropDownOpened$.next();\n    }\n\n    /**\n     * Opens autocomplete drop down\n     */\n    public open() {\n        if (this.disabled || !this.collapsed) {\n            return;\n        }\n        this.target.width = this.parentElement.clientWidth + 'px';\n        this.target.open(this.settings);\n        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);\n        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);\n        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);\n    }\n\n    private get collapsed(): boolean {\n        return this.target ? this.target.collapsed : true;\n    }\n\n    private select = (value: ISelectionEventArgs) => {\n        if (!value.newSelection) {\n            return;\n        }\n        value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.\n        const newValue = value.newSelection.value;\n        const args: AutocompleteItemSelectionEventArgs = { value: newValue, cancel: false };\n        this.onItemSelected.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        this.close();\n        this.nativeElement.focus();\n\n        // Update model after the input is re-focused, in order to have proper valid styling.\n        // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.\n        this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;\n    }\n\n    private highlightFirstItem = () => {\n        if (this.target.focusedItem) {\n            this.target.focusedItem.focused = false;\n            this.target.focusedItem = null;\n        }\n        this.target.navigateFirst();\n        this.cdr.detectChanges();\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.dropDownOpened$.complete();\n    }\n}\n\n/** @hidden */\n@NgModule({\n    imports: [IgxDropDownModule, CommonModule],\n    declarations: [IgxAutocompleteDirective],\n    exports: [IgxAutocompleteDirective]\n})\nexport class IgxAutocompleteModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    NgModule,\n    Renderer2,\n    HostListener,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../../core/density';\n\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective extends DisplayDensityBase {\n\n    /**\n     *@hidden\n     */\n    private _type: string;\n\n    /**\n     *@hidden\n     */\n    private _defaultType = 'flat';\n\n    /**\n     *@hidden\n     */\n    private _cssClassPrefix = 'igx-button';\n\n    /**\n     *@hidden\n     */\n    private _color: string;\n\n    /**\n     *@hidden\n     */\n    private _label: string;\n\n    /**\n     *@hidden\n     */\n    private _backgroundColor: string;\n\n    /**\n     *@hidden\n     */\n    private _disabled: boolean;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns the underlying DOM element\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * ```\n     * ```typescript\n     * let buttonRole =  this.button.role;\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @HostBinding('attr.role')\n    public role = 'button';\n\n    /**\n     * Sets the type of the button.\n     * ```html\n     * <button  igxButton= \"icon\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButton')\n    set type(value: string) {\n        const newValue = value ? value : this._defaultType;\n        if (this._type !== newValue) {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);\n            this._type = newValue;\n            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);\n        }\n    }\n\n    /**\n     * Sets the button text color.\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n\n    /**\n     * Sets the background color of the button.\n     * ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n\n    /**\n     * Sets the `aria-label` attribute.\n     * ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n\n    /**\n     * Enables/disables the button.\n     *  ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        this._disabled = val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--cosy')\n    public get cssClassCosy(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--compact')\n    public get cssClassCompact(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-cosy')\n    public get cssClassCosyFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-compact')\n    public get cssClassCompactFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.disabled')\n    public get disabledAttribute() {\n        return this._disabled ? this._disabled : null;\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() public selected = false;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","ï»¿import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef,\n    ViewContainerRef,\n    AfterContentInit,\n    TemplateRef,\n    ContentChildren,\n    QueryList\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxDragHandleDirective } from './drag-handle.directive';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IDropStrategy, IgxDefaultDropStrategy } from './drag-drop.strategy';\n\nexport enum RestrictDrag {\n    VERTICALLY,\n    HORIZONTALLY,\n    NONE\n}\n\nexport interface IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n    originalEvent: any;\n}\n\nexport interface IDropBaseEventArgs extends IBaseEventArgs {\n        /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IDropDroppedEventArgs extends IDropBaseEventArgs {\n    /** Specifies if the default drop logic related to the event should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs extends IBaseEventArgs {\n    /**\n     * Reference to the original event that caused the interaction with the element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n        /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n}\n\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    /** Set if the the dragging should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragMoveEventArgs extends IDragStartEventArgs {\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element X movement. */\n    nextPageX: number;\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element Y movement. */\n    nextPageY: number;\n}\n\n\nexport interface IDragGhostBaseEventArgs extends IBaseEventArgs {\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** Instance to the ghost element that is created when dragging starts. */\n    ghostElement: any;\n    /** Set if the ghost creation/destruction should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragCustomTransitionArgs {\n    duration?: number;\n    timingFunction?: string;\n    delay?: number;\n}\n\nexport class IgxDragLocation {\n    public pageX: number;\n    public pageY: number;\n\n    constructor(private _pageX, private _pageY) {\n        this.pageX = parseFloat(_pageX);\n        this.pageY = parseFloat(_pageY);\n    }\n}\n\n@Directive({\n    exportAs: 'drag',\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements AfterContentInit, OnDestroy {\n\n    protected ghostContext: any = null;\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start.\n     * By default the drag starts after the draggable element is moved by 5px.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragChannel: number | string | number[] | string[];\n\n    /**\n     * An @Input property that specifies if the base element should not be moved and a ghost element should be rendered that represents it.\n     * By default it is set to `true`.\n     * If it is set to `false` when dragging the base element is moved instead and no ghost elements are rendered.\n     * ```html\n     * <div igxDrag [ghost]=\"false\">\n     *      <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghost = true;\n\n    /**\n     * Sets a custom class that will be added to the `ghostElement` element.\n     * ```html\n     * <div igxDrag [ghostClass]=\"'ghostElement'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostClass = '';\n\n    /**\n     * @deprecated Please use custom base styling instead.\n     * An @Input property that hides the draggable element.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @DeprecateProperty(`'hideBaseOnDrag' @Input property is deprecated and will be removed in future major versions.\n        Alternatives to it are using the new no ghost dragging and custom base styling.`)\n    @Input()\n    public hideBaseOnDrag = false;\n\n    /**\n     * @deprecated Please use provided transition functions in future.\n     * An @Input property that enables/disables the draggable element animation\n     * when the element is released.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @DeprecateProperty(`'animateOnRelease' @Input property is deprecated and will be removed in future major versions.\n        Please use 'transitionToOrigin' or 'transitionTo' methods instead.`)\n    @Input()\n    public animateOnRelease = false;\n\n    /**\n     * An @Input property that specifies a template for the ghost element created when dragging starts and `ghost` is true.\n     * By default a clone of the base element the igxDrag is instanced is created.\n     * ```html\n     * <div igxDrag [ghostTemplate]=\"customGhost\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * <ng-template #customGhost>\n     *      <div class=\"customGhostStyle\">\n     *          <span>I am being dragged!</span>\n     *      </div>\n     * </ng-template>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets the element to which the dragged element will be appended.\n     * By default it's set to null and the dragged element is appended to the body.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostHost]=\"hostDiv\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostHost;\n\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetX]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public set ghostOffsetX(value) {\n        this._offsetX = parseInt(value, 10);\n    }\n\n    public get ghostOffsetX() {\n        return this._offsetX !== undefined ? this._offsetX : this._defaultOffsetX;\n    }\n\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetY]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public set ghostOffsetY(value) {\n        this._offsetY = parseInt(value, 10);\n    }\n\n    public get ghostOffsetY() {\n        return this._offsetY !== undefined ? this._offsetY : this._defaultOffsetY ;\n    }\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element has been moved.\n     * ```html\n     * <div igxDrag  (dragMove)=\"onDragMove()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragMove(){\n     *      alert(\"The element has moved!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragMove = new EventEmitter<IDragMoveEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag (dragClick)=\"onDragClick()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragClick(){\n     *      alert(\"The element has been clicked!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragClick = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostCreate)=\"ghostCreated()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostCreated(){\n     *      alert(\"The ghost has been created!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public ghostCreate = new EventEmitter<IDragGhostBaseEventArgs>();\n\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostDestroy)=\"ghostDestroyed()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostDestroyed(){\n     *      alert(\"The ghost has been destroyed!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public ghostDestroy = new EventEmitter<IDragGhostBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag (transitioned)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public transitioned = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxDragHandleDirective)\n    public dragHandles: QueryList<IgxDragHandleDirective>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.visibility')\n    public _visibility = 'visible';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drag')\n    public baseClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drag--select-disabled')\n    public selectDisabled = false;\n\n    /**\n     * @deprecated Please use native angular ways of hiding it using custom to the base element styling for future versions.\n     * Sets the visibility of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     this.myDrag.visible = false;\n     * }\n     * ```\n     */\n    @DeprecateProperty(`'visible' @Input property is deprecated and will be removed in future major versions.\n        Please use native angular ways of hiding the base element using styling.`)\n    public set visible(bVisible) {\n        this._visibility = bVisible ? 'visible' : 'hidden';\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the visibility state of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let dragVisibility = this.myDrag.visible;\n     * }\n     * ```\n     */\n    public get visible() {\n        return this._visibility === 'visible';\n    }\n\n    /**\n     * Gets the current location of the element relative to the page.\n     */\n    public get location(): IgxDragLocation {\n        return new IgxDragLocation(this.pageX, this.pageY);\n    }\n\n    /**\n     * Gets the original location of the element before dragging started.\n     */\n    public get originLocation(): IgxDragLocation {\n        return new IgxDragLocation(this.baseOriginLeft, this.baseOriginTop);\n    }\n\n    /**\n     * @hidden\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pageX() {\n        if (this.ghost && this.ghostElement) {\n            return this.ghostLeft;\n        }\n        return this.baseLeft;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pageY() {\n        if (this.ghost && this.ghostElement) {\n            return this.ghostTop;\n        }\n        return this.baseTop;\n    }\n\n    protected get baseLeft(): number {\n        return this.element.nativeElement.getBoundingClientRect().left;\n    }\n\n    protected get baseTop(): number {\n        return this.element.nativeElement.getBoundingClientRect().top;\n    }\n\n    protected get baseOriginLeft(): number {\n        return this.baseLeft - this.getTransformX(this.element.nativeElement);\n    }\n\n    protected get baseOriginTop(): number {\n        return this.baseTop - this.getTransformY(this.element.nativeElement);\n    }\n\n    protected set ghostLeft(pageX: number) {\n        if (this.ghostElement) {\n            // We need to take into account marginLeft, since top style does not include margin, but pageX includes the margin.\n            const ghostMarginLeft = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-left'], 10);\n            // If ghost host is defined it needs to be taken into account.\n            this.ghostElement.style.left = (pageX - ghostMarginLeft - this._ghostHostX) + 'px';\n        }\n    }\n\n    protected get ghostLeft() {\n        return parseInt(this.ghostElement.style.left, 10) + this._ghostHostX;\n    }\n\n    protected set ghostTop(pageY: number) {\n        if (this.ghostElement) {\n            // We need to take into account marginTop, since top style does not include margin, but pageY includes the margin.\n            const ghostMarginTop = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-top'], 10);\n            // If ghost host is defined it needs to be taken into account.\n            this.ghostElement.style.top = (pageY - ghostMarginTop - this._ghostHostY) + 'px';\n        }\n    }\n\n    protected get ghostTop() {\n        return parseInt(this.ghostElement.style.top, 10) + this._ghostHostY;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    public ghostElement;\n\n    /**\n     * @hidden\n     */\n    public animInProgress = false;\n\n    protected _startX = 0;\n    protected _startY = 0;\n    protected _lastX = 0;\n    protected _lastY = 0;\n    protected _dragStarted = false;\n\n    /** Drag ghost related properties */\n    protected _defaultOffsetX;\n    protected _defaultOffsetY;\n    protected _offsetX;\n    protected _offsetY;\n    protected _ghostStartX;\n    protected _ghostStartY;\n    protected _ghostHostX = 0;\n    protected _ghostHostY = 0;\n\n    protected _pointerDownId = null;\n    protected _clicked = false;\n    protected _lastDropArea = null;\n\n    protected _destroy = new Subject<boolean>();\n    protected _removeOnDestroy = true;\n\n    constructor(\n        public cdr: ChangeDetectorRef,\n        public element: ElementRef,\n        public viewContainer: ViewContainerRef,\n        public zone: NgZone,\n        public renderer: Renderer2\n    ) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (!this.dragHandles || !this.dragHandles.length ) {\n            // Set user select none to the whole draggable element if no drag handles are defined.\n            this.selectDisabled = true;\n        }\n\n        // Bind events\n        this.zone.runOutsideAngular(() => {\n            const targetElements = this.dragHandles && this.dragHandles.length ?\n                this.dragHandles.map((item) => item.element.nativeElement) : [this.element.nativeElement];\n            targetElements.forEach((element) => {\n                if (this.pointerEventsEnabled) {\n                    fromEvent(element, 'pointerdown').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n\n                    fromEvent(element, 'pointermove').pipe(\n                        throttle(() => interval(0, animationFrameScheduler)),\n                        takeUntil(this._destroy)\n                    ).subscribe((res) => this.onPointerMove(res));\n\n                    fromEvent(element, 'pointerup').pipe(takeUntil(this._destroy))\n                        .subscribe((res) => this.onPointerUp(res));\n\n                    if (!this.ghost) {\n                        // Do not bind `lostpointercapture` to the target, because we will bind it on the ghost later.\n                        fromEvent(element, 'lostpointercapture').pipe(takeUntil(this._destroy))\n                        .subscribe((res) => this.onPointerLost(res));\n                    }\n                } else if (this.touchEventsEnabled) {\n                    fromEvent(element, 'touchstart').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n                } else {\n                    // We don't have pointer events and touch events. Use then mouse events.\n                    fromEvent(element, 'mousedown').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n                }\n            });\n\n            // We should bind to document events only once when there are no pointer events.\n            if (!this.pointerEventsEnabled && this.touchEventsEnabled) {\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (!this.pointerEventsEnabled) {\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n\n            this.element.nativeElement.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        });\n\n        // Set transition duration to 0s. This also helps with setting `visibility: hidden` to the base to not lag.\n        this.element.nativeElement.style.transitionDuration = '0.0s';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this.ghost && this.ghostElement && this._removeOnDestroy) {\n            this.ghostElement.parentNode.removeChild(this.ghostElement);\n            this.ghostElement = null;\n        }\n    }\n\n    /**\n     * Sets desired location of the base element or ghost element if rended relative to the document.\n     * @param newLocation New location that should be applied. It is advised to get new location using getBoundingClientRects() + scroll.\n     */\n    public setLocation(newLocation: IgxDragLocation) {\n        // We do not subtract marginLeft and marginTop here because here we calculate deltas.\n        if (this.ghost && this.ghostElement) {\n            const offsetHostX = this.ghostHost ? this.ghostHostOffsetLeft(this.ghostHost) : 0;\n            const offsetHostY = this.ghostHost ? this.ghostHostOffsetTop(this.ghostHost) : 0;\n            this.ghostLeft = newLocation.pageX - offsetHostX + this.getWindowScrollLeft();\n            this.ghostTop = newLocation.pageY - offsetHostY + this.getWindowScrollTop();\n        } else if (!this.ghost) {\n            const deltaX = newLocation.pageX - this.pageX;\n            const deltaY = newLocation.pageY - this.pageY;\n            const transformX = this.getTransformX(this.element.nativeElement);\n            const transformY = this.getTransformY(this.element.nativeElement);\n            this.setTransformXY(transformX + deltaX, transformY + deltaY);\n        }\n\n        this._startX = this.baseLeft;\n        this._startY = this.baseTop;\n    }\n\n    /**\n     * Animates the base or ghost element depending on the `ghost` input to its initial location.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * If the base element has changed its DOM position its initial location will be changed accordingly.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    public transitionToOrigin(customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation) {\n        if ((!!startLocation && startLocation.pageX === this.baseOriginLeft && startLocation.pageY === this.baseOriginLeft) ||\n            (!startLocation && this.ghost && !this.ghostElement)) {\n            return;\n        }\n\n        if (!!startLocation && startLocation.pageX !== this.pageX && startLocation.pageY !== this.pageY) {\n            if (this.ghost && !this.ghostElement) {\n                this._startX = startLocation.pageX;\n                this._startY = startLocation.pageY;\n                this._ghostStartX = this._startX;\n                this._ghostStartY = this._startY;\n                this.createGhost(this._startX, this._startY);\n            }\n\n            this.setLocation(startLocation);\n        }\n\n        this.animInProgress = true;\n        // Use setTimeout because we need to be sure that the element is positioned first correctly if there is start location.\n        setTimeout(() => {\n            if (this.ghost) {\n                this.ghostElement.style.transitionProperty = 'top, left';\n                this.ghostElement.style.transitionDuration =\n                    customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n                this.ghostElement.style.transitionTimingFunction =\n                    customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n                this.ghostElement.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n                this.setLocation(new IgxDragLocation(this.baseLeft, this.baseTop));\n            } else if (!this.ghost) {\n                this.element.nativeElement.style.transitionProperty = 'transform';\n                this.element.nativeElement.style.transitionDuration =\n                    customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n                this.element.nativeElement.style.transitionTimingFunction =\n                    customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n                this.element.nativeElement.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n                this._startX = this.baseLeft;\n                this._startY = this.baseTop;\n                this.setTransformXY(0, 0);\n            }\n        }, 0);\n    }\n\n    /**\n     * Animates the base or ghost element to a specific target location or other element using transition.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * It is recommended to use 'getBoundingClientRects() + pageScroll' when determining desired location.\n     * @param target Target that the base or ghost will transition to. It can be either location in the page or another HTML element.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    public transitionTo(target: IgxDragLocation | ElementRef, customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation) {\n        if (!!startLocation && this.ghost && !this.ghostElement) {\n            this._startX = startLocation.pageX;\n            this._startY = startLocation.pageY;\n            this._ghostStartX = this._startX;\n            this._ghostStartY = this._startY;\n        } else if (!!startLocation && (!this.ghost || this.ghostElement)) {\n            this.setLocation(startLocation);\n        } else if (this.ghost && !this.ghostElement) {\n            this._startX = this.baseLeft;\n            this._startY = this.baseTop;\n            this._ghostStartX = this._startX + this.getWindowScrollLeft();\n            this._ghostStartY = this._startY + this.getWindowScrollTop();\n        }\n\n        if (this.ghost && !this.ghostElement) {\n            this.createGhost(this._startX, this._startY);\n        }\n\n        this.animInProgress = true;\n        // Use setTimeout because we need to be sure that the element is positioned first correctly if there is start location.\n        setTimeout(() => {\n            const movedElem = this.ghost ? this.ghostElement : this.element.nativeElement;\n            movedElem.style.transitionProperty = this.ghost && this.ghostElement ? 'left, top' : 'transform';\n            movedElem.style.transitionDuration =\n                customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n            movedElem.style.transitionTimingFunction =\n                customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n            movedElem.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n\n            if (target instanceof IgxDragLocation) {\n                this.setLocation(new IgxDragLocation (target.pageX, target.pageY));\n            } else {\n                const targetRects = target.nativeElement.getBoundingClientRect();\n                this.setLocation(new IgxDragLocation(\n                    targetRects.left -  this.getWindowScrollLeft(),\n                    targetRects.top - this.getWindowScrollTop()\n                ));\n            }\n        }, 0);\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until ghostElement is created.\n        const handleFound = this.dragHandles.find(handle => handle.element.nativeElement === event.currentTarget);\n        const targetElement = handleFound ? handleFound.element.nativeElement : this.element.nativeElement;\n        if (this.pointerEventsEnabled) {\n            targetElement.setPointerCapture(this._pointerDownId);\n        } else {\n            targetElement.focus();\n            event.preventDefault();\n        }\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        this._defaultOffsetX = this.baseLeft - this._startX + this.getWindowScrollLeft();\n        this._defaultOffsetY = this.baseTop - this._startY + this.getWindowScrollTop();\n        this._ghostStartX = this._startX + this.ghostOffsetX;\n        this._ghostStartY = this._startY + this.ghostOffsetY;\n        this._lastX = this._startX;\n        this._lastY = this._startY;\n    }\n\n    /**\n     * @hidden\n     * Perform drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned it. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                const dragStartArgs: IDragStartEventArgs = {\n                    originalEvent: event,\n                    owner: this,\n                    startX: pageX - totalMovedX,\n                    startY: pageY - totalMovedY,\n                    pageX: pageX,\n                    pageY: pageY,\n                    cancel: false\n                };\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    if (this.ghost) {\n                        // We moved enough so ghostElement can be rendered and actual dragging to start.\n                        // When creating it will take into account any offset set by the user by default.\n                        this.createGhost(pageX, pageY);\n                    } else if (this._offsetX !== undefined || this._offsetY !== undefined) {\n                        // There is no need for ghost, but we will need to position initially the base element to reflect any offset.\n                        const transformX = (this._offsetX !== undefined ? this._offsetX - this._defaultOffsetX : 0) +\n                            this.getTransformX(this.element.nativeElement);\n                        const transformY = (this._offsetY !== undefined ? this._offsetY - this._defaultOffsetY : 0) +\n                            this.getTransformY(this.element.nativeElement);\n                        this.setTransformXY(transformX, transformY);\n                    }\n                } else {\n                    return;\n                }\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            const moveArgs: IDragMoveEventArgs = {\n                originalEvent: event,\n                owner: this,\n                startX: this._startX,\n                startY: this._startY,\n                pageX: this._lastX,\n                pageY: this._lastY,\n                nextPageX: pageX,\n                nextPageY: pageY,\n                cancel: false\n            };\n            this.dragMove.emit(moveArgs);\n\n            const setPageX = moveArgs.nextPageX;\n            const setPageY = moveArgs.nextPageY;\n            const updatedMovedX = setPageX - this._startX;\n            const updatedMovedY = setPageY - this._startY;\n\n            if (!moveArgs.cancel) {\n                if (this.ghost) {\n                    this.ghostLeft = this._ghostStartX + updatedMovedX;\n                    this.ghostTop = this._ghostStartY + updatedMovedY;\n                } else {\n                    const lastMovedX = setPageX - this._lastX;\n                    const lastMovedY = setPageY - this._lastY;\n                    const translateX = this.getTransformX(this.element.nativeElement) + lastMovedX;\n                    const translateY = this.getTransformY(this.element.nativeElement) + lastMovedY;\n                    this.setTransformXY(translateX, translateY);\n                }\n                this.dispatchDragEvents(pageX, pageY, event);\n            }\n\n            this._lastX = setPageX;\n            this._lastY = setPageY;\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the ghostElement and dispatching drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned to it. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n\n            // Prevent scrolling on touch while dragging\n            event.preventDefault();\n        }\n\n        const eventArgs: IDragBaseEventArgs = {\n            originalEvent: event,\n            owner: this,\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY\n        };\n        this._pointerDownId = null;\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement ) {\n                this.dispatchDropEvent(event.pageX, event.pageY, event);\n            } else if (this.animateOnRelease) {\n                this.transitionToOrigin();\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n\n            if (!this.animInProgress) {\n                this.onTransitionEnd(null);\n            }\n        } else {\n            // Trigger our own click event because when there is no ghost, native click cannot be prevented when dragging.\n            this.zone.run(() => {\n                this.dragClick.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Execute this method whe the pointer capture has been lost.\n     * This means that during dragging the user has performed other action like right clicking and then clicking somewhere else.\n     * This method will ensure that the drag state is being reset in this case as if the user released the dragged element.\n     * @param event Event captured\n     */\n    public onPointerLost(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this,\n            startX: this._startX,\n            startY: this._startY,\n            pageX: event.pageX,\n            pageY: event.pageY\n        };\n        this._pointerDownId = null;\n        this._clicked = false;\n        if (this._dragStarted) {\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n            if (this.animateOnRelease) {\n                this.transitionToOrigin();\n            } else if (!this.animInProgress) {\n                this.onTransitionEnd(null);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Create ghost element - if a Node object is provided it creates a clone of that node,\n     * otherwise it clones the host element.\n     * Bind all needed events.\n     * @param pageX Latest pointer position on the X axis relative to the page.\n     * @param pageY Latest pointer position on the Y axis relative to the page.\n     * @param node The Node object to be cloned.\n     */\n    protected createGhost(pageX, pageY, node: any = null) {\n        if (!this.ghost) {\n            return;\n        }\n\n        let dynamicGhostRef;\n        if (this.ghostTemplate) {\n            dynamicGhostRef = this.viewContainer.createEmbeddedView(this.ghostTemplate, this.ghostContext);\n            this.ghostElement = dynamicGhostRef.rootNodes[0];\n        } else {\n            this.ghostElement = node ? node.cloneNode(true) : this.element.nativeElement.cloneNode(true);\n        }\n\n        const totalMovedX = pageX - this._startX;\n        const totalMovedY = pageY - this._startY;\n        this._ghostHostX = this.ghostHost ? this.ghostHostOffsetLeft(this.ghostHost) : 0;\n        this._ghostHostY = this.ghostHost ? this.ghostHostOffsetTop(this.ghostHost) : 0;\n\n        this.ghostElement.style.transitionDuration = '0.0s';\n        this.ghostElement.style.position = 'absolute';\n\n\n        if (this.ghostClass) {\n            this.renderer.addClass(this.ghostElement, this.ghostClass);\n        }\n\n        const createEventArgs = {\n            owner: this,\n            ghostElement: this.ghostElement,\n            cancel: false\n        };\n        this.ghostCreate.emit(createEventArgs);\n        if (createEventArgs.cancel) {\n            this.ghostElement = null;\n            if (this.ghostTemplate && dynamicGhostRef) {\n                dynamicGhostRef.destroy();\n            }\n            return;\n        }\n\n        if (this.ghostHost) {\n            this.ghostHost.appendChild(this.ghostElement);\n        } else {\n            document.body.appendChild(this.ghostElement);\n        }\n\n        const ghostMarginLeft = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-left'], 10);\n        const ghostMarginTop = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-top'], 10);\n        this.ghostElement.style.left = (this._ghostStartX - ghostMarginLeft + totalMovedX - this._ghostHostX) + 'px';\n        this.ghostElement.style.top = (this._ghostStartY - ghostMarginTop + totalMovedY - this._ghostHostX) + 'px';\n\n        if (this.pointerEventsEnabled) {\n            // The ghostElement takes control for moving and dragging after it has been rendered.\n            if (this._pointerDownId !== null) {\n                this.ghostElement.setPointerCapture(this._pointerDownId);\n            }\n            this.ghostElement.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this.ghostElement.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n            this.ghostElement.addEventListener('lostpointercapture', (args) => {\n                this.onPointerLost(args);\n            });\n        }\n\n        // Transition animation when the ghostElement is released and it returns to it's original position.\n        this.ghostElement.addEventListener('transitionend', (args) => {\n            this.onTransitionEnd(args);\n        });\n\n        // Hide the base after the ghostElement is created, because otherwise the ghostElement will be not visible.\n        if (this.hideBaseOnDrag) {\n            this.visible = false;\n        }\n\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number, originalEvent) {\n        let topDropArea;\n        const customEventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' &&\n                elementsFromPoint[i] !== this.ghostElement && elementsFromPoint[i] !== this.element.nativeElement) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n                if (this._lastDropArea) {\n                    this.dispatchEvent(this._lastDropArea, 'igxDragLeave', customEventArgs);\n                }\n\n                this._lastDropArea = topDropArea;\n                this.dispatchEvent(this._lastDropArea, 'igxDragEnter', customEventArgs);\n            } else if (!topDropArea && this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', customEventArgs);\n                this._lastDropArea = null;\n                return;\n            }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', customEventArgs);\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number, originalEvent) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if ((!this._dragStarted && !this.animInProgress) || this._clicked) {\n            // Return if no dragging started and there is no animation in progress.\n            return ;\n        }\n\n        if (this.ghost && this.ghostElement) {\n            this._ghostStartX = this.baseLeft + this.getWindowScrollLeft();\n            this._ghostStartY = this.baseTop + this.getWindowScrollTop();\n\n            const ghostDestroyArgs: IDragGhostBaseEventArgs = {\n                owner: this,\n                ghostElement: this.ghostElement,\n                cancel: false\n            };\n            this.ghostDestroy.emit(ghostDestroyArgs);\n            if (ghostDestroyArgs.cancel) {\n                return;\n            }\n\n            if (this.hideBaseOnDrag) {\n                this.visible = true;\n            }\n            this.ghostElement.parentNode.removeChild(this.ghostElement);\n            this.ghostElement = null;\n        } else if (!this.ghost) {\n            this.element.nativeElement.style.transitionProperty = '';\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this.element.nativeElement.style.transitionTimingFunction = '';\n            this.element.nativeElement.style.transitionDelay = '';\n        }\n        this.animInProgress = false;\n        this._dragStarted = false;\n\n        // Execute transitioned after everything is reset so if the user sets new location on the base now it would work as expected.\n        this.zone.run(() => {\n            this.transitioned.emit({\n                originalEvent: event,\n                owner: this,\n                startX: this._startX,\n                startY: this._startY,\n                pageX: this._startX,\n                pageY: this._startY\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint consider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            const elements = document['msElementsFromPoint'](viewPortX, viewPortY);\n            return elements === null ? [] : elements;\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Otherwise can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n\n    protected getTransformX(elem) {\n        let posX = 0;\n        if (elem.style.transform) {\n            const matrix = elem.style.transform;\n            const values = matrix ? matrix.match(/-?[\\d\\.]+/g) : undefined;\n            posX = values ? Number(values[ 1 ]) : 0;\n        }\n\n        return posX;\n    }\n\n    protected getTransformY(elem) {\n        let posY = 0;\n        if (elem.style.transform) {\n            const matrix = elem.style.transform;\n            const values = matrix ? matrix.match(/-?[\\d\\.]+/g) : undefined;\n            posY = values ? Number(values[ 2 ]) : 0;\n        }\n\n        return posY;\n    }\n\n    /** Method setting transformation to the base draggable element. */\n    protected setTransformXY(x: number, y: number) {\n        this.element.nativeElement.style.transform = 'translate3d(' + x + 'px, ' + y + 'px, 0px)';\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n\n    protected ghostHostOffsetLeft(ghostHost: any) {\n        const ghostPosition = document.defaultView.getComputedStyle(ghostHost).getPropertyValue('position');\n        if (ghostPosition === 'static' && ghostHost.offsetParent && ghostHost.offsetParent === document.body) {\n            return 0;\n        } else if (ghostPosition === 'static' && ghostHost.offsetParent) {\n            return ghostHost.offsetParent.getBoundingClientRect().left - this.getWindowScrollLeft();\n        }\n        return ghostHost.getBoundingClientRect().left - this.getWindowScrollLeft();\n    }\n\n    protected ghostHostOffsetTop(ghostHost: any) {\n        const ghostPosition = document.defaultView.getComputedStyle(ghostHost).getPropertyValue('position');\n        if (ghostPosition === 'static' && ghostHost.offsetParent && ghostHost.offsetParent === document.body) {\n            return 0;\n        } else if (ghostPosition === 'static' && ghostHost.offsetParent) {\n            return ghostHost.offsetParent.getBoundingClientRect().top - this.getWindowScrollTop();\n        }\n        return ghostHost.getBoundingClientRect().top - this.getWindowScrollTop();\n    }\n}\n\n@Directive({\n    exportAs: 'drop',\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input('igxDrop')\n    public data: any;\n\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input()\n    public dropChannel: number | string | number[] | string[];\n\n    /**\n     * An @Input property that specifies a drop strategy type that will be executed when an `IgxDrag` element is released inside\n     *  the current drop area. The provided strategies are:\n     *  - IgxDefaultDropStrategy - This is the default base strategy and it doesn't perform any actions.\n     *  - IgxAppendDropStrategy - Appends the dropped element to last position as a direct child to the `igxDrop`.\n     *  - IgxPrependDropStrategy - Prepends the dropped element to first position as a direct child to the `igxDrop`.\n     *  - IgxInsertDropStrategy - If the dropped element is released above a child element of the `igxDrop`, it will be inserted\n     *      at that position. Otherwise the dropped element will be appended if released outside any child of the `igxDrop`.\n     * ```html\n     * <div igxDrag>\n     *      <span>DragMe</span>\n     * </div>\n     * <div igxDrop [dropStrategy]=\"myDropStrategy\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * import { IgxAppendDropStrategy } from 'igniteui-angular';\n     *\n     * export class App {\n     *      public myDropStrategy = IgxAppendDropStrategy;\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input()\n    public set dropStrategy(classRef: any) {\n        this._dropStrategy = new classRef(this._renderer);\n    }\n\n    public get dropStrategy() {\n        return this._dropStrategy;\n    }\n\n    /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public enter = new EventEmitter<IDropBaseEventArgs>();\n\n        /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public over = new EventEmitter<IDropBaseEventArgs>();\n\n    /** Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (leave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable element has left the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public leave = new EventEmitter<IDropBaseEventArgs>();\n\n    /** Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (dropped)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable element has been dropped in the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public dropped = new EventEmitter<IDropDroppedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n    protected _dropStrategy: IDropStrategy;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n        this._dropStrategy = new IgxDefaultDropStrategy();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) {\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n\n        this.over.emit(eventArgs);\n     }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        this.dragover = true;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.enter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        this.dragover = false;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.leave.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const args: IDropDroppedEventArgs = {\n            owner: this,\n            originalEvent: event.detail.originalEvent,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.dropped.emit(args);\n        });\n\n        if (this._dropStrategy && !args.cancel) {\n            const elementsAtPoint = event.detail.owner.getElementsAtPoint(event.detail.pageX, event.detail.pageY);\n            const insertIndex = this.getInsertIndexAt(event.detail.owner, elementsAtPoint);\n            this._dropStrategy.dropAction(event.detail.owner, this, insertIndex);\n        }\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n\n    protected isDragLinked(drag: IgxDragDirective): boolean {\n        const dragLinkArray = drag.dragChannel instanceof Array;\n        const dropLinkArray = this.dropChannel instanceof Array;\n\n        if (!dragLinkArray && !dropLinkArray) {\n            return this.dropChannel === drag.dragChannel;\n        } else if (!dragLinkArray && dropLinkArray) {\n            const dropLinks = <Array<any>>this.dropChannel;\n            for (let i = 0; i < dropLinks.length; i ++) {\n                if (dropLinks[i] === drag.dragChannel) {\n                    return true;\n                }\n            }\n        } else if (dragLinkArray && !dropLinkArray) {\n            const dragLinks = <Array<any>>drag.dragChannel;\n            for (let i = 0; i < dragLinks.length; i ++) {\n                if (dragLinks[i] === this.dropChannel) {\n                    return true;\n                }\n            }\n        } else {\n            const dragLinks = <Array<any>>drag.dragChannel;\n            const dropLinks = <Array<any>>this.dropChannel;\n            for (let i = 0; i < dragLinks.length; i ++) {\n                for (let j = 0; j < dropLinks.length; j ++) {\n                    if (dragLinks[i] === dropLinks[j]) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    protected getInsertIndexAt(draggedDir: IgxDragDirective, elementsAtPoint: any[]): number {\n        let insertIndex = -1;\n        const dropChildren = Array.prototype.slice.call(this.element.nativeElement.children);\n        if (!dropChildren.length) {\n            return insertIndex;\n        }\n\n        let i = 0;\n        let childUnder = null;\n        while (!childUnder && i < elementsAtPoint.length) {\n            if (elementsAtPoint[i].parentElement === this.element.nativeElement) {\n                childUnder = elementsAtPoint[i];\n            }\n            i++;\n        }\n\n        const draggedElemIndex = dropChildren.indexOf(draggedDir.element.nativeElement);\n        insertIndex = dropChildren.indexOf(childUnder);\n        if (draggedElemIndex !== -1 && draggedElemIndex < insertIndex) {\n            insertIndex++;\n        }\n\n        return insertIndex;\n    }\n}\n\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective, IgxDragHandleDirective],\n    exports: [IgxDragDirective, IgxDropDirective, IgxDragHandleDirective]\n})\nexport class IgxDragDropModule { }\n","import { Renderer2 } from '@angular/core';\nimport { IgxDragDirective, IgxDropDirective } from './drag-drop.directive';\n\n\nexport interface IDropStrategy {\n    dropAction: (drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) => void;\n}\n\n// @dynamic\nexport class IgxDefaultDropStrategy implements IDropStrategy {\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) { }\n}\n\n// @dynamic\nexport class IgxAppendDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        this._renderer.appendChild(dropAreaElement, dragElement);\n    }\n}\n\n// @dynamic\nexport class IgxPrependDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        if (dropAreaElement.children.length) {\n            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[0]);\n        } else {\n            this._renderer.appendChild(dropAreaElement, dragElement);\n        }\n    }\n}\n\n// @dynamic\nexport class IgxInsertDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        if (drag.element.nativeElement.parentElement === drop.element.nativeElement && atIndex === -1) {\n            return;\n        }\n\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        if (atIndex !== -1 && dropAreaElement.children.length > atIndex) {\n            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[atIndex]);\n        } else {\n            this._renderer.appendChild(dropAreaElement, dragElement);\n        }\n    }\n}\n","import { Directive, ElementRef, HostBinding } from '@angular/core';\n\n@Directive({\n    selector: '[igxDragHandle]'\n})\nexport class IgxDragHandleDirective {\n\n    @HostBinding('class.igx-drag__handle')\n    public baseClass = true;\n\n    constructor(public element: ElementRef<any>) {}\n}\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs extends IBaseEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\nexport enum RadioLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    templateUrl: 'radio.component.html'\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio', { static: true }) public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public onFocus() {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur() {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key && item[key]) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","/**\n * @hidden\n */\nexport const MASK_FLAGS = [ 'C', '&', 'a', 'A', '?', 'L', '9', '0', '#' ];\n\n/**\n * @hidden\n */\nexport const KEYS = {\n    Ctrl : 17,\n    Z : 90,\n    Y : 89,\n    X : 88,\n    BACKSPACE : 8,\n    DELETE : 46\n  };\n\n\n/**\n * @hidden\n */\nexport class MaskHelper {\n    private _cursor;\n    public get cursor() {\n        return this._cursor;\n    }\n    public data: boolean;\n\n    public parseValueByMask(value, maskOptions, cursor): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (inputValue.length < mask.length) { // BACKSPACE, DELETE\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);\n                this._cursor = cursor + 1;\n            } else {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);\n                this._cursor = cursor + 1;\n                for (let i = this._cursor; i < 0; i--) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor--;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        } else {\n            const char = inputValue[cursor];\n            let isCharValid = this.validateCharOnPostion(char, cursor, mask);\n            if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, cursor, char);\n                    this._cursor = cursor + 1;\n                } else {\n                    this._cursor = cursor;\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                this._cursor = ++cursor;\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor = ++cursor;\n                    } else {\n                        isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, cursor, char);\n                            this._cursor = ++cursor;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseMask(maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        return outputVal;\n    }\n\n    public parseValueByMaskOnInit(inputVal, maskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndeces.length) {\n            nonLiteralValues.splice(nonLiteralIndeces.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public restoreValueFromMask(value, maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public parseValueByMaskUponSelection(value, maskOptions, cursor, selection): string {\n        let isCharValid: boolean;\n        let inputValue: string = value;\n        const char: string = inputValue[cursor];\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (!this.data) {\n            this._cursor = cursor < 0 ? ++cursor : cursor;\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                selection--;\n                if (selection > 0) {\n                    for (let i = 0; i < selection; i++) {\n                        cursor++;\n                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?\n                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :\n                            this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    }\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);\n                this._cursor++;\n                selection--;\n                let isMarked = false;\n                if (selection > 0) {\n                    cursor = this._cursor;\n                    for (let i = 0; i < selection; i++) {\n                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                            isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                            if (isCharValid && !isMarked) {\n                                inputValue = this.insertCharAt(inputValue, cursor, char);\n                                cursor++;\n                                this._cursor++;\n                                isMarked = true;\n                            } else {\n                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                                cursor++;\n                            }\n                        } else {\n                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                            if (cursor === this._cursor) {\n                                this._cursor++;\n                            }\n                            cursor++;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (this._cursor < 0) {\n                this._cursor++;\n                cursor++;\n            }\n            cursor++;\n            this._cursor = cursor;\n            for (let i = 0; i < selection; i++) {\n                if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                    cursor++;\n                } else {\n                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    cursor++;\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        const selectionEnd = cursor + selection;\n\n        this._cursor = cursor;\n        for (const clipboardSym of clipboardData) {\n            const char = clipboardSym;\n\n            if (this._cursor > mask.length) {\n                return inputValue;\n            }\n\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                }\n            } else {\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor++;\n                    } else {\n                        const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            selection--;\n        }\n\n        if (selection > 0) {\n            for (let i = this._cursor; i < selectionEnd; i++) {\n                if (literalKeys.indexOf(this._cursor) !== -1) {\n                    this._cursor++;\n                } else {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    private validateCharOnPostion(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letteSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letteSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n    private insertCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index);\n        }\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndeces(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndeces: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndeces.push(i);\n            }\n        }\n\n        return nonLiteralsIndeces;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    PipeTransform\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { KEYS, MaskHelper } from './mask-helper';\nimport { isIE, IBaseEventArgs } from '../../core/utils';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]'\n})\nexport class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input('igxMask')\n    public mask: string;\n\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public promptChar: string;\n\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public includeLiterals: boolean;\n\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public set placeholder(val: string) {\n        this._placeholder = val;\n        this.nativeElement.setAttribute('placeholder', this._placeholder);\n    }\n\n    public get placeholder(): string {\n        return this._placeholder;\n    }\n\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public displayValuePipe: PipeTransform;\n\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public focusedValuePipe: PipeTransform;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    private dataValue: string;\n\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n\n    /**\n     *@hidden\n     */\n    private get value() {\n        return this.nativeElement.value;\n    }\n\n    /**\n     *@hidden\n     */\n    private set value(val) {\n        this.nativeElement.value = val;\n    }\n\n    /**\n     *@hidden\n     */\n    private get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionStart() {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionEnd() {\n        return this.nativeElement.selectionEnd;\n    }\n\n    /**\n     *@hidden\n     */\n    private _ctrlDown: boolean;\n\n    /**\n     *@hidden\n     */\n    private _paste: boolean;\n\n    /**\n     *@hidden\n     */\n    private _selection: number;\n\n    /**\n     *@hidden\n     */\n    private _placeholder: string;\n\n    /**\n     *@hidden\n     */\n    private _maskOptions = {\n        format: '',\n        promptChar: ''\n    };\n\n    /**\n     *@hidden\n     */\n    private _key;\n\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n\n    private _stopPropagation: boolean;\n\n    /**\n     *@hidden\n     */\n    private maskHelper: MaskHelper;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(private elementRef: ElementRef) {\n        this.maskHelper = new MaskHelper();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';\n        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';\n        this.nativeElement.setAttribute('placeholder', this.placeholder ? this.placeholder : this._maskOptions.format);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n        }\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = true;\n        }\n\n        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._selection = Math.abs(this.selectionEnd - this.selectionStart);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keyup', ['$event'])\n    public onKeyup(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = false;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('paste', ['$event'])\n    public onPaste(event): void {\n        this._paste = true;\n\n        this._valOnPaste = this.value;\n        this._cursorOnPaste = this.getCursorPosition();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('input', ['$event'])\n    public onInputChanged(event): void {\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n            return;\n        }\n\n        if (this._paste) {\n            this._paste = false;\n\n            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());\n            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(\n                this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        } else {\n            const currentCursorPos = this.getCursorPosition();\n\n            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);\n\n            this.value = this._selection && this._selection !== 0 ?\n                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :\n                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        }\n\n        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : rawVal;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event.target.value'])\n    public onFocus(value) {\n        if (this.focusedValuePipe) {\n            if (isIE()) {\n                this._stopPropagation = true;\n            }\n            this.value = this.focusedValuePipe.transform(value);\n        } else {\n            this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event.target.value'])\n    public onBlur(value) {\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(value);\n        } else if (value === this.maskHelper.parseMask(this._maskOptions)) {\n            this.value = '';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private getCursorPosition(): number {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private setCursorPosition(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.value = value ? this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions) : '';\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(this.value);\n        }\n\n        this.dataValue = this.includeLiterals ? this.value : value;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs extends IBaseEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum IgxAvatarSize {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large'\n}\n\nexport enum IgxAvatarType {\n    INITIALS = 'initials',\n    IMAGE = 'image',\n    ICON = 'icon',\n    CUSTOM = 'custom',\n}\n\n/**\n * **Ignite UI for Angular Avatar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the google material icon set.\n *\n * Example:\n * ```html\n * <igx-avatar initials=\"MS\" roundShape=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    templateUrl: 'avatar.component.html'\n})\nexport class IgxAvatarComponent implements OnInit, AfterViewInit {\n\n    /**\n     * This is a reference to the avatar `image` element in the DOM.\n     *\n     * ```typescript\n     *  let image =  this.avatar.image;\n     * ```\n     * @memberof IgxAvatarComponent\n     */\n    @ViewChild('image')\n    public image: ElementRef;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('defaultTemplate', { read: TemplateRef, static: true })\n    protected defaultTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('imageTemplate', { read: TemplateRef, static: true })\n    protected imageTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('initialsTemplate', { read: TemplateRef, static: true })\n    protected initialsTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('iconTemplate', { read: TemplateRef, static: true })\n    protected iconTemplate: TemplateRef<any>;\n\n    /**\n     * Returns the `aria-label` of the avatar.\n     *\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n\n    /**\n     * Returns the class of the avatar.\n     *\n     * ```typescript\n     * let avatarCLass =  this.avatar.cssClass;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be:\n     * - `\"initials type avatar\"`\n     * - `\"icon type avatar\"`\n     * - `\"image type avatar\"`.\n     * - `\"custom type avatar\"`.\n     *\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.aria-roledescription')\n    public roleDescription: string;\n\n    /**\n     * @hidden\n     */\n    private _size: string | IgxAvatarSize = IgxAvatarSize.SMALL;\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n\n    /**\n     * Sets a round shape to the avatar if `roundShape` is `\"true\"`.\n     * By default the shape of the avatar is a square.\n     *\n     * ```html\n     * <igx-avatar roundShape = \"true\" ></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the avatar's `initials`/`icon` color.\n     *\n     *```html\n     *<igx-avatar color=\"blue\"></igx-avatar>\n     *```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.color')\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.background')\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets `initials` to the avatar.\n     *\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an `icon` to the avatar. All icons from the material icon set are supported.\n     *\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the `image` source of the avatar.\n     *\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * Returns the `size` of the avatar.\n     *\n     * ```typescript\n     *let avatarSize =  this.avatar.size;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public get size(): string | IgxAvatarSize {\n        return this._size;\n    }\n\n    /**\n     * Sets the `size`  of the avatar.\n     * By default the `size` is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * ```\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public set size(value: string | IgxAvatarSize) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n\n    /**\n     * Returns the type of the avatar.\n     *\n     * ```typescript\n     * let avatarType = this.avatar.type;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get type(): IgxAvatarType {\n        if (this.src) {\n            return IgxAvatarType.IMAGE;\n        }\n\n        if (this.icon) {\n            return IgxAvatarType.ICON;\n        }\n\n        if (this.initials) {\n            return IgxAvatarType.INITIALS;\n        }\n\n        return IgxAvatarType.CUSTOM;\n    }\n\n    /**\n     * Returns the template of the avatar.\n     *\n     * ```typescript\n     * let template = this.avatar.template;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get template(): TemplateRef<any> {\n        switch (this.type) {\n            case IgxAvatarType.IMAGE:\n                return this.imageTemplate;\n            case IgxAvatarType.INITIALS:\n                return this.initialsTemplate;\n            case IgxAvatarType.ICON:\n                return this.iconTemplate;\n            default:\n                return this.defaultTemplate;\n        }\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        if (this.type !== IgxAvatarType.CUSTOM) {\n            this.elementRef.nativeElement.classList.add(`igx-avatar--${this.type}`);\n        }\n\n        this.elementRef.nativeElement.classList.add(`igx-avatar--${this._size}`);\n    }\n\n    /**\n     * @hidden\n     */\n    private getRole(): string {\n        switch (this.type) {\n            case IgxAvatarType.IMAGE:\n                return 'image avatar';\n            case IgxAvatarType.ICON:\n                return 'icon avatar';\n            case IgxAvatarType.INITIALS:\n                return 'initials avatar';\n            default:\n                return 'custom avatar';\n        }\n    }\n\n    /**\n     * Returns the url of the `image`.\n     *\n     * ```typescript\n     * let imageSourceUrl = this.avatar.getSrcUrl();\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\nimport { AnimationBuilder, style, animate } from '@angular/animations';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected builder: AnimationBuilder,\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     *@hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = event.clientX - rectBounds.left - radius / 2;\n        let top = event.clientY - rectBounds.top - radius / 2;\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = this.builder.build([\n            style({ opacity: 0.5, transform: 'scale(.3)' }),\n            animate(this.rippleDuration, style({ opacity: 0, transform: 'scale(2)' }))\n        ]).create(rippleElement);\n\n        this.animationQueue.push(animation);\n\n        animation.onDone(() => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        });\n\n        animation.play();\n\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import {\n    Directive,\n    NgModule,\n    Input,\n    QueryList,\n    Output,\n    EventEmitter,\n    AfterContentInit,\n    ContentChildren,\n    OnDestroy,\n    HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * **Ignite UI for Angular Radio Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    exportAs: 'igxRadioGroup',\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @ContentChildren(IgxRadioComponent, { descendants: true }) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let value =  this.radioGroup.value;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     * ```typescript\n     * let name =  this.radioGroup.name;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radioGroup.required;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     * ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radioGroup.labelPosition;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioGroupDirective\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-radio-group')\n    public cssClass = 'igx-radio-group';\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     *@hidden\n     */\n    private _value: any = null;\n    /**\n     *@hidden\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     *@hidden\n     */\n    private _isInitialized = false;\n    /**\n     *@hidden\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     *@hidden\n     */\n    private _disabled = false;\n    /**\n     *@hidden\n     */\n    private _required = false;\n    /**\n     *@hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            const props = { name: this._name, labelPosition: this._labelPosition, disabled: this._disabled, required: this._required };\n            this.radioButtons.forEach((button) => {\n                Object.assign(button, props);\n\n                if (button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Renderer2,\n    SimpleChanges,\n    AfterViewChecked,\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\n/**\n * An interface describing information for the active highlight.\n */\nexport interface IActiveHighlightInfo {\n    /**\n     * The row index of the highlight. This property is deprecated, use `row` instead.\n     */\n    rowIndex?: number;\n    /**\n     * The column index of the highlight. This property is deprecated, use `column` instead.\n     */\n    columnIndex?: number;\n    /**\n     * The page index of the highlight. This property is deprecated.\n     */\n    page?: number;\n    /**\n     * The row of the highlight.\n     */\n    row?: any;\n    /**\n     * The column of the highlight.\n     */\n    column?: any;\n    /**\n     * The index of the highlight.\n     */\n    index: number;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n    private _valueChanged: boolean;\n    private _defaultCssClass = 'igx-highlight';\n    private _defaultActiveCssClass = 'igx-highlight--active';\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The identifier of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: any;\n\n    /**\n     * The identifier of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: any;\n\n    @Input('page')\n    @DeprecateProperty(`IgxTextHighlightDirective 'page' input property is deprecated.`)\n    public page: number;\n\n    /**\n     * @hidden\n     */\n    public get lastSearchInfo(): ISearchInfo {\n        return this._lastSearchInfo;\n    }\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(private element: ElementRef, public renderer: Renderer2) {\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.clearHighlight();\n\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this._valueChanged = true;\n        } else if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.parentElement = this.renderer.parentNode(this.element.nativeElement);\n\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked() {\n        if (this._valueChanged) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n            this._valueChanged = false;\n        }\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row, column and page.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n        const column = group.columnIndex === undefined ? group.column : group.columnIndex;\n        const row = group.rowIndex === undefined ? group.row : group.rowIndex;\n\n        if (column === this.column && row === this.row && group.page === this.page) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = Array.from(mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = Array.from(mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this._defaultActiveCssClass);\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this._defaultActiveCssClass);\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        if ( this.containerClass) {\n            this.renderer.addClass(this._div, this.containerClass);\n        }\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     *```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n    *    id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, Inject\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings, OverlaySettings } from '../../services';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface ITooltipShowEventArgs extends IBaseEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs extends IBaseEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit {\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            target: this.nativeElement,\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return true;\n            }\n\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:keydown.escape', ['$event'])\n    public onKeydownEscape(event) {\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.close();\n        this.target.toBeHidden = false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n\n            this.target.forceClose(this.mergedOverlaySettings);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     * Returns whether close time out has started\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     * Returns whether open time out has started\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n\n    /** @hidden */\n    constructor(\n        elementRef: ElementRef,\n        cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) overlayService: IgxOverlayService,\n        @Optional() navigationService: IgxNavigationService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(elementRef, cdr, overlayService, navigationService);\n    }\n\n    /**\n     * If there is open animation in progress this method will finish is.\n     * If there is no open animation in progress this method will open the toggle with no animation.\n     * @param overlaySettings setting to use for opening the toggle\n     */\n    protected forceOpen(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        if (hasOpenAnimation) {\n            info.openAnimationPlayer.finish();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n        } else if (this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.openAnimation;\n            overlaySettings.positionStrategy.settings.openAnimation = null;\n            this.open(overlaySettings);\n            overlaySettings.positionStrategy.settings.openAnimation = animation;\n        }\n    }\n\n    /**\n     * If there is close animation in progress this method will finish is.\n     * If there is no close animation in progress this method will close the toggle with no animation.\n     * @param overlaySettings settings to use for closing the toggle\n     */\n    protected forceClose(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n\n        if (hasCloseAnimation) {\n            info.closeAnimationPlayer.finish();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n        } else if (!this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.closeAnimation;\n            overlaySettings.positionStrategy.settings.closeAnimation = null;\n            this.close();\n            overlaySettings.positionStrategy.settings.closeAnimation = animation;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    protected static _instance: IgxFilteringOperand = null;\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is_null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is_not_null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }, {\n            name: 'in',\n            isUnary: false,\n            iconName: 'is_in',\n            hidden: true,\n            logic: (target: any, searchVal: Set<any>) => {\n                return this.findValueInSet(target, searchVal);\n            }\n        }];\n    }\n\n    public static instance(): IgxFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * @hidden\n     */\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        return searchVal.has(target);\n    }\n\n    /**\n     * Returns an array of names of the conditions which are visible in the UI\n     */\n    public conditionList(): string[] {\n        return this.operations.filter(f => !f.hidden).map((element) => element.name);\n    }\n\n    /**\n     * Returns an instance of the condition with the specified name.\n     * @param name The name of the condition.\n     */\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    /**\n     * Adds a new condition to the filtering operations.\n     * @param operation The filtering operation.\n     */\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is_true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is_false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is_before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is_after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        if (!target) { return false; }\n        return searchVal.has(new Date(target.getFullYear(), target.getMonth(), target.getDate()).toISOString());\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater_than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less_than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does_not_contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    hidden?: boolean;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    advancedExpressionsTree?: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\n\n/**\n * @hidden\n */\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n    height: number;\n }\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n\n    constructor(private _sanitizer: DomSanitizer, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     *```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     *```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     *```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     *```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     *```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     *```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns whether a given SVG image is present in the cache.\n     *```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     *```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const instance = this;\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open('GET', url, true);\n        httpRequest.responseType = 'text';\n\n        // load â when the result is ready, that includes HTTP errors like 404.\n        httpRequest.onload = function (event: ProgressEvent) {\n            if (event) {\n                const request = event.target as XMLHttpRequest;\n                if (request.status === 200) {\n                    instance.cacheSvgIcon(iconName, request.responseText, fontSet);\n                } else {\n                    throw new Error(`Could not fetch SVG from url: ${url}; error: ${request.status} (${request.statusText})`);\n                }\n            } else {\n                throw new Error(`Could not fetch SVG from url: ${url};`);\n            }\n        };\n\n        // error â when the request couldnât be made, e.g.network down or invalid URL.\n        httpRequest.onerror = function (event: ProgressEvent) {\n            if (event) {\n                const request = event.target as XMLHttpRequest;\n                throw new Error(`Could not fetch SVG from url: ${url}; error status code: ${request.status} (${request.statusText})`);\n            }\n            throw new Error(`Could not fetch SVG from url: ${url};`);\n        };\n\n        httpRequest.send();\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { IgxIconService } from './icon.service';\n\n/**\n * **Ignite UI for Angular Icon** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearance\n * of the icon.\n *\n * Example:\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    templateUrl: 'icon.component.html'\n})\n\nexport class IgxIconComponent implements OnInit {\n    @ViewChild('noLigature', { read: TemplateRef, static: true })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef, static: true })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef, static: true })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.cssClass = \"\";\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.ariaHidden = false;\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n    *  An @Input property that sets the value of the `id` attribute.\n    *```html\n    *<igx-icon id=\"igx-icon-1\" fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n    *  An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n    *```html\n    *<igx-icon fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n    *  An @Input property that allows you to disable the `active` property. By default it's applied.\n    *```html\n    *<igx-icon [isActive]=\"false\" fontSet=\"material\" color=\"blue\">settings</igx-icon>\n    *```\n    */\n    @Input('isActive')\n    public active = true;\n\n    /**\n    *  An @Input property that allows you to change the `iconColor` of the icon.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n    *  An @Input property that allows you to set the `iconName` of the icon.\n    *  The `iconName` can be set using the `name` property.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">question_answer</igx-icon>\n    *```\n    */\n    @Input('name')\n    public iconName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(private _el: ElementRef, private iconService: IgxIconService) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     *  An accessor that returns the opposite value of the `iconColor` property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     *  An accessor that returns the value of the iconName property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { IgxIconComponent } from './icon.component';\nimport { DeprecateMethod } from '../core/deprecateDecorators';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule]\n})\nexport class IgxIconModule { }\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum IgxBadgeType {\n    PRIMARY = 'primary',\n    INFO = 'info',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error'\n}\n/**\n * **Ignite UI for Angular Badge** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)\n *\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * Example:\n * ```html\n * <igx-avatar icon=\"person\" roundShape=\"true\" size=\"small\">\n *   <igx-badge icon=\"check\" type=\"success\" class=\"badge-style\">\n *   </igx-badge>\n * </igx-avatar>\n * ```\n * The `badge-style` class is used to position the badge:\n * ```css\n * .badge-style {\n *   position: absolute;\n *   bottom: -6px;\n *   right:-50px;\n * }\n * ```\n */\n@Component({\n    selector: 'igx-badge',\n    templateUrl: 'badge.component.html'\n})\nexport class IgxBadgeComponent {\n\n    /**\n    * An @Input property that sets the value of the `id` attribute.\n    * ```html\n    *<igx-badge id=\"igx-badge-2\" icon=\"check\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n    /**\n    * An @Input property controlling the type of the badge.\n    * Allowed values are `primary`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    * ```html\n    *<igx-badge type=\"success\" icon=\"check\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | IgxBadgeType = IgxBadgeType.PRIMARY;\n\n    /**\n    * An @Input property that sets the value to be displayed inside the badge.\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.\n    * ```html\n    *<igx-badge value=\"11\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value = '';\n\n    /**\n     * Set an icon for the badge from the material icons set.\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     * ```html\n     *<igx-badge icon=\"check\" type=\"success\" class=\"badge-style\" value=\"11\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * This allows you to set value to role attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"badge-status\";\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * This allows you to disable igx-badge class. The default it's applied.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.cssClass = false;\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * This allows you to set value to aria-label attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"icon-badge\";\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * @hidden\n     * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.\n     */\n    get roleDescription() {\n        let message: string;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            message = this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value) {\n            message = this.type + ' badge type with value ' + this.value;\n        } else {\n            message = this.type + ' badge type without value';\n        }\n\n        return message;\n    }\n\n    /**\n     * @hidden\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (IgxBadgeType[this.type.toUpperCase()]) {\n            case IgxBadgeType.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case IgxBadgeType.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case IgxBadgeType.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case IgxBadgeType.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n            default:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule { }\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild,\n    Inject\n} from '@angular/core';\nimport { IgxExpansionPanelIconDirective } from './expansion-panel.directives';\nimport { IExpansionPanelEventArgs, IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase } from './expansion-panel.common';\n\n/**\n * @hidden\n */\nexport enum ICON_POSITION {\n    LEFT = 'left',\n    NONE = 'none',\n    RIGHT = 'right'\n}\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    templateUrl: 'expansion-panel-header.component.html'\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    /**\n     * Sets/gets the `id` of the expansion panel header.\n     * ```typescript\n     * let panelHeaderId =  this.panel.header.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    public id = '';\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelIconDirective)\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    /**\n     * Gets/sets the `aria-level` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentAriaLevel = this.panel.header.lv;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.lv = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [lv]=\"myCustomLevel\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    /**\n     * Gets/sets the `role` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.header.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.role = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [role]=\"'custom'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    /**\n     * @hidden\n     */\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    /**\n     * Gets/sets the position of the expansion-panel-header expand/collapse icon\n     * Accepts `left`, `right` or `none`\n     * ```typescript\n     *  const currentIconPosition = this.panel.header.iconPosition;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.iconPosition = 'left';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [iconPosition]=\"'right'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    /**\n     * Emitted whenever a user interacts with the header host\n     * ```typescript\n     *  handleInteraction(event: IExpansionPanelEventArgs) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header (onInteraction)=\"handleInteraction($event)\">\n     *      ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n     /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    /**\n     * Gets/sets the whether the header is disabled\n     * When disabled, the header will not handle user events and will stop their propagation\n     *\n     * ```typescript\n     *  const isDisabled = this.panel.header.disabled;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.disabled = true;\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [disabled]=\"true\">\n     *     ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     /**\n     * @hidden\n     */\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         this.onInteraction.emit({ event: evt, panel: this.panel });\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n    /** @hidden @internal */\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    public openPanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.expand(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /** @hidden @internal */\n     @HostListener('keydown.Alt.ArrowUp', ['$event'])\n     public closePanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.collapse(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /**\n     * @hidden\n     */\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import { EventEmitter, InjectionToken } from '@angular/core';\nimport { AnimationReferenceMetadata } from '@angular/animations';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IgxExpansionPanelBase {\n    id: string;\n    cssClass: string;\n    /** @hidden @internal */\n    headerId: string;\n    collapsed: boolean;\n    animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata };\n    onCollapsed: EventEmitter<any>;\n    onExpanded: EventEmitter<any>;\n    collapse(evt?: Event);\n    expand(evt?: Event);\n    toggle(evt?: Event);\n}\n\n/** @hidden */\nexport const IGX_EXPANSION_PANEL_COMPONENT = new InjectionToken<IgxExpansionPanelBase>('IgxExpansionPanelToken');\n\nexport interface IExpansionPanelEventArgs extends IBaseEventArgs {\n    event: Event;\n    panel: IgxExpansionPanelBase;\n}\n","import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, Inject } from '@angular/core';\nimport { IgxExpansionPanelBase, IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(\n        @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase,\n        public element: ElementRef, public cdr: ChangeDetectorRef) {\n    }\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n\n    /**\n     * Gets the `aria-label` attribute of the panel body\n     * Defaults to the panel id with '-region' in the end;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.label;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    /**\n     * Sets the `aria-label` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.label = 'my-custom-label';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [label]=\"'my-custom-label'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    /**\n     * Gets the `aria-labelledby` attribute of the panel body\n     * Defaults to the panel header id;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.labelledBy;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    /**\n     * Sets the `aria-labelledby` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.labelledBy = 'my-custom-id';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [labelledBy]=\"'my-custom-id'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the panel body\n     * Default is 'region';\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.body.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.body.role = 'content';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [role]=\"'custom'\"></igx-expansion-panel-body>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    NgModule,\n    Output,\n    Optional,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    templateUrl: 'buttongroup-content.component.html'\n})\n\nexport class IgxButtonGroupComponent extends DisplayDensityBase implements AfterContentInit, AfterViewInit, OnDestroy {\n\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.zIndex')\n    public zIndex = 0;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     *```typescript\n     *public style1 = \"styleClass\";\n     * //..\n     *```\n     * ```html\n     *<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     *```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *   let buttonSelect = this.buttonG.itemContentCssClass;\n     *}\n     *```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     *public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     *<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     *}\n     *```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onSelect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     *```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onUnselect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     *```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     *}\n     *```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     *}\n     *```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     *```\n     * @memberOf {@link IgxButtonGroupComponent}\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * ```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     * ```\n     * @memberOf {@link IgxButtonGroupComponent}\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.templateButtons.forEach((button) => {\n            if (!button.initialDensity) {\n                button.displayDensity = this.displayDensity;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs extends IBaseEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    AfterContentInit\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase, IExpansionPanelEventArgs } from './expansion-panel.common';\n\nlet NEXT_ID = 0;\n\nexport interface AnimationSettings {\n    openAnimation: AnimationReferenceMetadata;\n    closeAnimation: AnimationReferenceMetadata;\n}\n@Component({\n    selector: 'igx-expansion-panel',\n    templateUrl: 'expansion-panel.component.html',\n    providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]\n})\nexport class IgxExpansionPanelComponent implements IgxExpansionPanelBase, AfterContentInit {\n    private _collapsed = true;\n    /**\n     * Sets/gets the animation settings of the expansion panel component\n     * Open and Close animation should be passed\n     *\n     * Get\n     * ```typescript\n     *  const currentAnimations = this.panel.animationSettings;\n     * ```\n     * Set\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  this.panel.animationsSettings = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```\n     * or via template\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  myCustomAnimationObject = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```html\n     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>\n     *  ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public animationSettings: AnimationSettings = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    /**\n     * Gets/sets whether the component is collapsed (its content is hidden)\n     * Get\n     * ```typescript\n     *  const myPanelState: boolean = this.panel.collapsed;\n     * ```\n     * Set\n     * ```html\n     *  this.panel.collapsed = true;\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-expansion-panel [(collapsed)]=\"model.isCollapsed\"></igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n    public set collapsed(value) {\n        this._collapsed = value;\n        this.collapsedChange.emit(this._collapsed);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public collapsedChange = new EventEmitter<boolean>();\n\n    /**\n     * Emitted when the expansion panel finishes collapsing\n     * ```typescript\n     *  handleCollapsed(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onCollapsed)=\"handleCollapsed($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onCollapsed = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * Emitted when the expansion panel finishes expanding\n     * ```typescript\n     *  handleExpanded(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onExpanded)=\"handleExpanded($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onExpanded = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelBodyComponent, { read: IgxExpansionPanelBodyComponent })\n    public body: IgxExpansionPanelBodyComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelHeaderComponent, { read: IgxExpansionPanelHeaderComponent })\n    public header: IgxExpansionPanelHeaderComponent;\n\n    constructor(private cdr: ChangeDetectorRef, private builder: AnimationBuilder) { }\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n        if (this.body && this.header) {\n            // schedule at end of turn:\n            Promise.resolve().then(() => {\n                this.body.labelledBy = this.body.labelledBy || this.headerId;\n                this.body.label = this.body.label || this.id + '-region';\n            });\n        }\n    }\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    /**\n     * Collapses the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.collapse($event)\">Collpase Panel</button>\n     * ```\n     */\n    collapse(evt?: Event) {\n        if (this.collapsed) { // If expansion panel is already collapsed, do nothing\n            return;\n        }\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    /**\n     * Expands the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.expand($event)\">Expand Panel</button>\n     * ```\n     */\n    expand(evt?: Event) {\n        if (!this.collapsed) { // If the panel is already opened, do nothing\n            return;\n        }\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this });\n            }\n        );\n    }\n\n    /**\n     * Toggles the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.toggle($event)\">Expand Panel</button>\n     * ```\n     */\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.open(evt);\n        } else {\n            this.close(evt);\n        }\n    }\n\n    open(evt?: Event) {\n        this.expand(evt);\n    }\n    close(evt?: Event) {\n        this.collapse(evt);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective,\n  IgxExpansionPanelIconDirective } from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { Directive } from '@angular/core';\n\n// tslint:disable:directive-selector\n@Directive({\n    selector: 'igx-banner-actions'\n})\nexport class IgxBannerActionsDirective {\n}\n","import { Component, NgModule, EventEmitter, Output, Input, ViewChild, ElementRef,\n    ContentChild, HostBinding } from '@angular/core';\nimport { IgxExpansionPanelModule } from '../expansion-panel/expansion-panel.module';\nimport { AnimationSettings } from '../expansion-panel/expansion-panel.component';\nimport { IgxExpansionPanelComponent } from '../expansion-panel';\nimport { IgxIconModule, IgxIconComponent } from '../icon/index';\nimport { IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxBannerActionsDirective } from './banner.directives';\nimport { CommonModule } from '@angular/common';\nimport { CancelableEventArgs, IBaseEventArgs } from '../core/utils';\n\nexport interface BannerEventArgs extends IBaseEventArgs {\n    banner: IgxBannerComponent;\n    event?: Event;\n}\n\nexport interface BannerCancelEventArgs extends BannerEventArgs, CancelableEventArgs {\n}\n/**\n * **Ignite UI for Angular Banner** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)\n *\n * The Ignite UI Banner provides a highly templateable and easy to use banner that can be shown in your application.\n *\n * Usage:\n *\n * ```html\n * <igx-banner #banner>\n *   Our privacy settings have changed.\n *  <igx-banner-actions>\n *      <button igxButton=\"raised\">Read More</button>\n *      <button igxButton=\"raised\">Accept and Continue</button>\n *  </igx-banner-actions>\n * </igx-banner>\n * ```\n */\n@Component({\n    selector: 'igx-banner',\n    templateUrl: 'banner.component.html'\n})\nexport class IgxBannerComponent implements IToggleView {\n    private _bannerEvent: BannerEventArgs;\n    private _animationSettings: AnimationSettings;\n\n    @ViewChild('expansionPanel', { static: true })\n    private _expansionPanel: IgxExpansionPanelComponent;\n\n    @ContentChild(IgxBannerActionsDirective)\n    private _bannerActionTemplate: IgxBannerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxIconComponent)\n    public bannerIcon: IgxIconComponent;\n\n    /**\n     * Fires after the banner shows up\n     * ```typescript\n     * public handleOpened(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpened)=\"handleOpened($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner shows up\n     * ```typescript\n     * public handleOpening(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpening)=\"handleOpening($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<BannerCancelEventArgs>();\n\n    /**\n     * Fires after the banner hides\n     * ```typescript\n     * public handleClosed(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosed)=\"handleClosed($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner hides\n     * ```typescript\n     * public handleClosing(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosing)=\"handleClosing($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<BannerCancelEventArgs>();\n\n    /** @hidden */\n    public get useDefaultTemplate(): boolean {\n        return !this._bannerActionTemplate;\n    }\n\n    /**\n     * Get the animation settings used by the banner open/close methods\n     * ```typescript\n     * let currentAnimations: AnimationSettings = banner.animationSettings\n     * ```\n     */\n    @Input()\n    public get animationSettings(): AnimationSettings {\n        return this._animationSettings ? this._animationSettings : this._expansionPanel.animationSettings;\n    }\n\n    /**\n     * Set the animation settings used by the banner open/close methods\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * banner.animationSettings: AnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };\n     * ```\n     */\n    public set animationSettings(settings: AnimationSettings) {\n        this._animationSettings = settings;\n    }\n    /**\n     * Gets whether banner is collapsed\n     *\n     * ```typescript\n     * const isCollapsed: boolean = banner.collapsed;\n     * ```\n     */\n    public get collapsed() {\n        return this._expansionPanel.collapsed;\n    }\n\n    /**\n     * Returns the native element of the banner component\n     * ```typescript\n     *  const myBannerElement: HTMLElement = banner.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display')\n    public get displayStyle(): string {\n        return this.collapsed ? '' : 'block';\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * Opens the banner\n     *\n     * ```typescript\n     *  myBanner.open();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.open()\">Open Banner</button>\n     * ```\n     */\n    public open(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const openingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onOpening.emit(openingArgs);\n        if (openingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.open(event);\n    }\n\n    /**\n     * Closes the banner\n     *\n     * ```typescript\n     *  myBanner.close();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.close()\">Close Banner</button>\n     * ```\n     */\n    public close(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const closingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onClosing.emit(closingArgs);\n        if (closingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.close(event);\n    }\n\n    /**\n     * Toggles the banner\n     *\n     * ```typescript\n     *  myBanner.toggle();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.toggle()\">Toggle Banner</button>\n     * ```\n     */\n    toggle(event?: Event) {\n        if (this.collapsed) {\n            this.open(event);\n        } else {\n            this.close(event);\n        }\n    }\n\n    /** @hidden */\n    public onExpansionPanelOpen() {\n        this.onOpened.emit(this._bannerEvent);\n    }\n\n    /** @hidden */\n    public onExpansionPanelClose() {\n        this.onClosed.emit(this._bannerEvent);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBannerComponent, IgxBannerActionsDirective],\n    exports: [IgxBannerComponent, IgxBannerActionsDirective],\n    imports: [CommonModule, IgxExpansionPanelModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxBannerModule { }\n","export interface DateRangeDescriptor {\n    type: DateRangeType;\n    dateRange?: Date[];\n}\n\nexport enum DateRangeType {\n    After,\n    Before,\n    Between,\n    Specific,\n    Weekdays,\n    Weekends\n}\n","import { DateRangeDescriptor, DateRangeType } from '../core/dates';\n\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport function isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const dateInMs = date.getTime();\n\n    if (!ranges) {\n        return false;\n    }\n\n    for (const descriptor of ranges) {\n        const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n            r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n        switch (descriptor.type) {\n            case (DateRangeType.After):\n                if (dateInMs > dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Before):\n                if (dateInMs < dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Between):\n                const dRange = dRanges.map(d => d.getTime());\n                const min = Math.min(dRange[0], dRange[1]);\n                const max = Math.max(dRange[0], dRange[1]);\n                if (dateInMs >= min && dateInMs <= max) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Specific):\n                const datesInMs = dRanges.map(d => d.getTime());\n                for (const specificDateInMs of datesInMs) {\n                    if (dateInMs === specificDateInMs) {\n                        return true;\n                    }\n                }\n\n                break;\n            case (DateRangeType.Weekdays):\n                const day = date.getDay();\n                if (day % 6 !== 0) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Weekends):\n                const weekday = date.getDay();\n                if (weekday % 6 === 0) {\n                    return true;\n                }\n\n                break;\n            default:\n                return false;\n        }\n    }\n\n    return false;\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport interface IFormattingOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n\nexport interface IFormattingViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const _ of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: '' };\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: '' };\n            }\n        }\n        return result;\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","import { Input, Output, EventEmitter, Directive } from '@angular/core';\nimport { WEEKDAYS, Calendar, isDateInRanges, IFormattingOptions, IFormattingViews } from './calendar';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DateRangeDescriptor } from '../core/dates';\nimport { Subject } from 'rxjs';\nimport { isDate } from '../core/utils';\n\n/**\n * Sets the selction type - single, multi or range.\n */\nexport enum CalendarSelection {\n    SINGLE = 'single',\n    MULTI = 'multi',\n    RANGE = 'range'\n}\n\nexport enum ScrollMonth {\n    PREV = 'prev',\n    NEXT = 'next',\n    NONE = 'none'\n}\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxCalendarBase]'\n})\nexport class IgxCalendarBaseDirective implements ControlValueAccessor {\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     * Gets the date format options of the days view.\n     */\n    @Input()\n    public get formatOptions(): IFormattingOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets the date format options of the days view.\n     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }\n     */\n    public set formatOptions(formatOptions: IFormattingOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    @Input()\n    public get formatViews(): IFormattingViews {\n        return this._formatViews;\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    public set formatViews(formatViews: IFormattingViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     *\n     * Gets the selection type.\n     * Default value is `\"single\"`.\n     * Changing the type of selection resets the currently\n     * selected values if any.\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n\n    /**\n     * Sets the selection.\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case CalendarSelection.SINGLE:\n                this.selectedDates = null;\n                break;\n            case CalendarSelection.MULTI:\n            case CalendarSelection.RANGE:\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the selected date(s).\n     *\n     * When selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n\n    /**\n     * Sets the selected date(s).\n     *\n     * When selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    public set value(value: Date | Date[]) {\n        if (!value || !!value && (value as Date[]).length === 0) {\n            return;\n        }\n\n        this.selectDate(value);\n    }\n\n    /**\n     * Gets the date that is presented.\n     * By default it is the current date.\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n\n    /**\n     * Sets the date that will be presented in the default view when the component renders.\n     */\n    public set viewDate(value: Date) {\n        this._viewDate = this.getDateOnly(value);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Sets/gets whether the outside dates (dates that are out of the current month) will be hidden.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [hideOutsideDays] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let hideOutsideDays = this.calendar.hideOutsideDays;\n     * ```\n     */\n\n    @Input()\n    public hideOutsideDays = false;\n\n    /**\n     * Emits an event when a date is selected.\n     * Provides reference the `selectedDates` property.\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     *@hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n\n    /**\n     *@hidden\n     */\n    public rangeStarted = false;\n\n    /**\n    *@hidden\n    */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _viewDate: Date;\n\n    /**\n     *@hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _formatOptions: IFormattingOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    /**\n     *@hidden\n     */\n    private _formatViews: IFormattingViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    /**\n     *@hidden\n     */\n    protected formatterWeekday;\n\n    /**\n     *@hidden\n     */\n    protected formatterDay;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonth;\n\n    /**\n     *@hidden\n     */\n    protected formatterYear;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonthday;\n\n    /**\n     *@hidden\n     */\n    public calendarModel: Calendar;\n\n    /**\n     * @hidden\n     */\n    public monthScrollDirection = ScrollMonth.NONE;\n\n    /**\n     *@hidden\n     */\n    public scrollMonth$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public stopMonthScroll$ = new Subject<boolean>();\n\n    /**\n     *@hidden\n     */\n    public startMonthScroll$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public selectedDates;\n\n    /**\n     *@hidden\n     */\n    protected _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    protected _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n\n        this.viewDate = this.viewDate ? this.viewDate : new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this.initFormatters();\n    }\n\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n\n    /**\n     *@hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() !== end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            const newDates = value.map(v => this.getDateOnly(v).getTime());\n            const selDates = this.selectedDates.map(v => this.getDateOnly(v).getTime());\n\n            if (JSON.stringify(newDates) === JSON.stringify(selDates)) {\n                return;\n            }\n\n            this.selectedDates = Array.from(new Set([...newDates, ...selDates])).map(v => new Date(v));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            const newSelection = [];\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                newSelection.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n\n            if (newSelection.length > 0) {\n                this.selectedDates = this.selectedDates.concat(newSelection);\n            }\n        }\n        this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     *@hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            // this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs deselection of a single value, when selection is multi\n     * Usually performed by the selectMultiple method, but leads to bug when multiple months are in view\n     * @hidden\n     */\n    public deselectMultipleInMonth(value: Date) {\n        const valueDateOnly = this.getDateOnly(value);\n        this.selectedDates = this.selectedDates.filter(\n            (date: Date) => date.getTime() !== valueDateOnly.getTime()\n        );\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null);\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected initFormatters() {\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n    }\n\n    /**\n     *@hidden\n     */\n    protected getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectDate(value as Date);\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                if (isDate(value) && !this.isDateDisabled(value as Date)) {\n                    this.selectSingle(value as Date);\n                }\n                break;\n            case CalendarSelection.MULTI:\n                this.selectMultiple(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (this.selectedDates === null || this.selectedDates.length === 0) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.deselectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.deselectMultiple(value as Date[]);\n                break;\n            case CalendarSelection.RANGE:\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n            case CalendarSelection.MULTI:\n                this.selectDate(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef,\n    ElementRef,\n    AfterViewInit,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { fromEvent, Subject, interval } from 'rxjs';\nimport { takeUntil, debounce, tap } from 'rxjs/operators';\nimport { KEYS } from '../core/utils';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    public get isCurrentYear(): boolean {\n        return this.date.getFullYear() === this.value.getFullYear();\n    }\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__month')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.getMonth() === this.value.getMonth();\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(public elementRef: ElementRef) {}\n\n    @HostListener('click')\n    public onClick() {\n        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());\n        this.onMonthSelection.emit(date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarScrollMonth]'\n})\nexport class IgxCalendarScrollMonthDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * A callback function to be invoked when month increment/decrement starts.\n     * @hidden\n     */\n    @Input()\n    public startScroll: (keydown?: boolean) => {};\n\n    /**\n     * A callback function to be invoked when month increment/decrement stops.\n     * @hidden\n     */\n    @Input()\n    public stopScroll: (event: any) => {};\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private element: ElementRef, private zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n\n        fromEvent(this.element.nativeElement, 'keyup').pipe(\n            debounce(() => interval(100)),\n            takeUntil(this.destroy$)\n        ).subscribe((event: KeyboardEvent) => {\n            this.stopScroll(event);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'keydown').pipe(\n                tap((event: KeyboardEvent) => {\n                    if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                }),\n                debounce(() => interval(100)),\n                takeUntil(this.destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                    this.zone.run(() => this.startScroll(true));\n                }\n            });\n        });\n\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown')\n    public onMouseDown() {\n        this.startScroll();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseup', ['$event'])\n    public onMouseUp(event: MouseEvent) {\n        this.stopScroll(event);\n    }\n}\n","import { IgxCalendarBaseDirective } from './calendar-base';\nimport { ViewChild, ElementRef, HostBinding, Directive } from '@angular/core';\nimport { KEYS } from '../core/utils';\n\n/**\n * Sets the calender view - days, months or years.\n */\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\n@Directive({\n    selector: '[igxMonthPickerBase]'\n})\nexport class IgxMonthPickerBaseDirective extends IgxCalendarBaseDirective {\n\n    /**\n     * @hidden\n     */\n    @ViewChild('yearsBtn')\n    public yearsBtn: ElementRef;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Gets the current active view.\n     */\n    public get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * Sets the current active view.\n     */\n    public set activeView(val: CalendarView) {\n        this._activeView = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     *@hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), this.viewDate.getMonth());\n        this._activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            if (this.yearsBtn) { this.yearsBtn.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(args?: Date): void {\n        this._activeView = CalendarView.DECADE;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event, args?: Date) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewDecade(args);\n        }\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { IgxDaysViewComponent } from './days-view.component';\nimport { ScrollMonth } from '../calendar-base';\n\nenum Direction {\n    Up = 'ArrowUp',\n    Down = 'ArrowDown',\n    Left = 'ArrowLeft',\n    Right = 'ArrowRight',\n}\n\nconst ARROW = 'Arrow';\n\n/** @hidden */\n@Injectable()\nexport class IgxDaysViewNavigationService {\n    public monthView: IgxDaysViewComponent;\n    /**\n     * Implements kb navigation in all MoveDirections. nextDate and nextMonthView naming convention is used for both previous/next\n     * @hidden\n     */\n    public focusNextDate(target: HTMLElement, key: string, nextView = false) {\n        if (target.childElementCount === 0) { target = target.parentElement; }\n        if (key.indexOf('Arrow') === -1) { key = ARROW.concat(key); }\n        const monthView = this.monthView;\n        const node = monthView.dates.find((date) => date.nativeElement === target);\n        let dates = monthView.dates.toArray(),\n            day: IgxDayItemComponent, step, i, nextDate: Date;\n        const index = dates.indexOf(node);\n\n        if (!node) { return; }\n\n        // focus item in current month\n        switch (key) {\n            case Direction.Left: {\n                step = -1;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i > 0; i--) {\n                    day = nextView ? dates[i] : dates[i - 1];\n                    nextDate = day.date.date;\n                    if (day.date.isPrevMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Right: {\n                step = 1;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i < dates.length - 1; i++) {\n                    day = nextView ? dates[i] : dates[i + 1];\n                    nextDate = day.date.date;\n                    if (day.date.isNextMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Up: {\n                step = -7;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i - 7 > -1; i -= 7) {\n                    day = nextView ? dates[i] : dates[i - 7];\n                    nextDate = day.date.date;\n                    if (day.date.isPrevMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Down: {\n                step = 7;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i + 7 < 42; i += 7) {\n                    day = nextView ? dates[i] : dates[i + 7];\n                    nextDate = day.date.date;\n                    if (day.date.isNextMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n        }\n\n        // focus item in prev/next visible month\n        const nextMonthView = step > 0 ? monthView.nextMonthView : monthView.prevMonthView;\n        if (nextMonthView) {\n            dates = nextMonthView.dates.toArray();\n            day = dates.find((item) => item.date.date.getTime() === nextDate.getTime());\n\n            if (day && day.isFocusable) {\n                day.nativeElement.focus();\n                return;\n            }\n            nextMonthView.navService.focusNextDate(day.nativeElement, key);\n        }\n\n        // if iterating in the visible prev/next moths above found a day that is not focusable, ie is disabled, hidden, etc\n        // then it is needed to recalculate the next day, which is going to be part of the prev/next months\n        if (day && !day.isFocusable) {\n            day = dates[i + step];\n            if (!day) {\n                nextDate = this.timedelta(node.date.date, step + i - index);\n            }\n        }\n\n        // focus item in prev/next month, which is currently out of view\n        let dayIsNextMonth: boolean; // determine what we need to check for next date - if it belongs to prev or next month\n        if (day) { dayIsNextMonth = step > 0 ? day.date.isNextMonth : day.date.isPrevMonth; }\n        if (monthView.changeDaysView && !nextMonthView && ((day && dayIsNextMonth) || !day)) {\n            const monthAction = step > 0 ? ScrollMonth.NEXT : ScrollMonth.PREV;\n            monthView.onViewChanging.emit({monthAction: monthAction, key: key, nextDate: nextDate});\n        }\n    }\n\n    /**\n     * Focuses first focusable day in the month. Will go to next visible month, if no day in the first month is focusable\n     * @hidden\n     */\n    public focusHomeDate() {\n        let monthView = this.monthView;\n        while (!this.focusFirstDay(monthView) && monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n        }\n    }\n\n    /**\n     * Focuses last focusable day in the month. Will go to previous visible month, if no day in the first month is focusable\n     * @hidden\n     */\n    public focusEndDate() {\n        let monthView = this.monthView;\n        while (!this.focusLastDay(monthView) && monthView.prevMonthView) {\n            monthView = monthView.prevMonthView;\n        }\n    }\n\n    private timedelta(date: Date, units: number): Date {\n        const ret = new Date(date);\n        ret.setDate(ret.getDate() + units);\n        return ret;\n    }\n\n    private focusFirstDay(monthView: IgxDaysViewComponent): boolean {\n        const dates = monthView.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (dates[i].isFocusable) {\n                dates[i].nativeElement.focus();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private focusLastDay(monthView: IgxDaysViewComponent): boolean {\n        const dates = monthView.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (dates[i].isFocusable) {\n                dates[i].nativeElement.focus();\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostBinding,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { Calendar } from '../calendar';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxCalendarMonthDirective } from '../calendar.directives';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],\n    selector: 'igx-months-view',\n    templateUrl: 'months-view.component.html'\n})\nexport class IgxMonthsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the months view.\n     * If not set, the `id` will have value `\"igx-months-view-0\"`.\n     * ```html\n     * <igx-months-view id=\"my-months-view\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let monthsViewId =  this.monthsView.id;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-months-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the months view.\n     * By default it is the current date.\n     * ```html\n     * <igx-months-view [date]=\"myDate\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let date =  this.monthsView.date;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the month format option of the months view.\n     * ```typescript\n     * let monthFormat = this.monthsView.monthFormat.\n     * ```\n     */\n    @Input()\n    public get monthFormat(): string {\n        return this._monthFormat;\n    }\n\n    /**\n     * Sets the month format option of the months view.\n     * ```html\n     * <igx-months-view> [monthFormat] = \"short'\"</igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set monthFormat(value: string) {\n        this._monthFormat = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the months view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.monthsView.locale;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the months view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-months-view [locale]=\"de\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and monthFormat, if any.\n     */\n    @Input()\n    public formatView = true;\n\n    /**\n     * Emits an event when a selection is made in the months view.\n     * Provides reference the `date` property in the `IgxMonthsViewComponent`.\n     * ```html\n     * <igx-months-view (onSelection)=\"onSelection($event)\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective })\n    public dates: QueryList<IgxCalendarMonthDirective>;\n\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this.date.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this._calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterMonth: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _monthFormat = 'short';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initMonthFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the month in the months view.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatView) {\n            return this._formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectMonth(event) {\n        this.onSelection.emit(event);\n\n        this.date = event;\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public monthTracker(index, item): string {\n        return `${item.getMonth()}}`;\n    }\n\n    /**\n     *@hidden\n     */\n    private initMonthFormatter() {\n        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) - 1; index >= 0; index--) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            const tolerance = 6;\n            if (nodeRect.top !== nextNodeRect.top && (nextNodeRect.left - nodeRect.left) < tolerance) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) + 1; index < months.length; index++) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            const tolerance = 6;\n            if (nextNodeRect.top !== nodeRect.top && (nodeRect.left - nextNodeRect.left) < tolerance ) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) + 1 < months.length) {\n            const month = months[months.indexOf(node) + 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) - 1 >= 0) {\n            const month = months[months.indexOf(node) - 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const month = this.dates.toArray()[0];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const months = this.dates.toArray();\n        const month = months[months.length - 1];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event) {\n        const value = this.dates.find((date) => date.nativeElement === event.target).value;\n        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n}\n","import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable} from '@angular/core';\nimport { range, Calendar } from '../calendar';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\n@Injectable()\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxYearsViewComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-years-view',\n    templateUrl: 'years-view.component.html'\n})\nexport class IgxYearsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the years view.\n     * If not set, the `id` will have value `\"igx-years-view-0\"`.\n     * ```html\n     * <igx-years-view id = \"my-years-view\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let yearsViewId =  this.yearsView.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-years-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the years view.\n     * By default it is the current date.\n     * ```html\n     * <igx-years-view [date]=\"myDate\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let date =  this.yearsView.date;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the year format option of the years view.\n     * ```typescript\n     * let yearFormat = this.yearsView.yearFormat.\n     * ```\n     */\n    @Input()\n    public get yearFormat(): string {\n        return this._yearFormat;\n    }\n\n    /**\n     * Sets the year format option of the years view.\n     * ```html\n     * <igx-years-view [yearFormat]=\"numeric\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set yearFormat(value: string) {\n        this._yearFormat = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the years view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.yearsView.locale;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the years view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-years-view [locale]=\"de\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and yearFormat, if any.\n     */\n    @Input()\n    public formatView: boolean;\n\n    /**\n     * Emits an event when a selection is made in the years view.\n     * Provides reference the `date` property in the `IgxYearsViewComponent`.\n     * ```html\n     * <igx-years-view (onSelection)=\"onSelection($event)\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this.date.getFullYear() - 3;\n        const end = this.date.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this.date.getMonth(), this.date.getDate()));\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterYear: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _yearFormat = 'numeric';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initYearFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the year in the years view.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatView) {\n            return this._formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectYear(event) {\n        this.date = event;\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    public scroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     *@hidden\n     */\n    public pan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public yearTracker(index, item): string {\n        return `${item.getFullYear()}}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(-1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter')\n    public onKeydownEnter() {\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    private initYearFormatter() {\n        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });\n    }\n\n    /**\n     *@hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {\n            return;\n        }\n        this.date = this._calendarModel.timedelta(this.date, 'year', delta);\n    }\n}\n","import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../calendar';\nimport { DateRangeDescriptor } from '../../core/dates';\nimport { CalendarSelection } from '../calendar-base';\n\n/**\n *@hidden\n*/\n@Component({\n    selector: 'igx-day-item',\n    templateUrl: 'day-item.component.html'\n})\nexport class IgxDayItemComponent {\n    @Input()\n    public date: ICalendarDate;\n\n    @Input()\n    public selection: string;\n\n    /**\n     * Returns boolean indicating if the day is selected\n     *\n     */\n    @Input()\n    public get selected(): any {\n        return this._selected;\n    }\n\n    /**\n     * Selects the day\n     */\n    public set selected(value: any) {\n        this._selected = value;\n    }\n\n    @Input()\n    public disabledDates: DateRangeDescriptor[];\n\n    @Input()\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    @Input()\n    public specialDates: DateRangeDescriptor[];\n\n    @Input()\n    public hideOutsideDays = false;\n\n    @Input()\n    @HostBinding('class.igx-calendar__date--last')\n    public isLastInRange = false;\n\n    @Input()\n    @HostBinding('class.igx-calendar__date--first')\n    public isFirstInRange = false;\n\n    @Input()\n    public isWithinRange = false;\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    public get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    public get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    public get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    public get isSelectedCSS(): boolean {\n        return (!this.isDisabled && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    public get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    @HostBinding('class.igx-calendar__date--hidden')\n    public get isHidden(): boolean {\n        return this.hideOutsideDays && this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    public get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    public get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    public get isDisabled(): boolean {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.disabledDates);\n    }\n\n    public get isOutOfRange(): boolean {\n        if (!this.outOfRangeDates) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.outOfRangeDates);\n    }\n\n    public get isFocusable(): boolean {\n        return this.isCurrentMonth && !this.isHidden && !this.isDisabled && !this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--range')\n    public get isWithinRangeCSS(): boolean {\n        return !this.isSingleSelection && this.isWithinRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    public get isSpecial(): boolean {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.specialDates);\n    }\n\n    @HostBinding('class.igx-calendar__date')\n    public get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    public get isDisabledCSS(): boolean {\n        return this.isHidden || this.isDisabled || this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--single')\n    public get isSingleSelection(): boolean {\n        return this.selection !== CalendarSelection.RANGE;\n    }\n\n    @HostBinding('attr.tabindex')\n    public get tabindex(): number {\n        return this.isDisabled || this.isHidden ? -1 : 0;\n    }\n\n    private _selected = false;\n\n    constructor(private elementRef: ElementRef) { }\n\n    @HostListener('click')\n    @HostListener('keydown.enter')\n    public onSelect() {\n        this.onDateSelection.emit(this.date);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    Directive,\n    HostBinding,\n    Optional,\n    Inject,\n    Input,\n    NgModule,\n    OnInit,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardMedia is container for the card media section.\n * Use it to wrap images and videos.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-media'\n})\nexport class IgxCardMediaDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card__media')\n    public cssClass = 'igx-card__media';\n\n    /**\n     * An @Input property that sets the `width` and `min-width` style property\n     * of the media container. If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media width=\"300px\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.width')\n    @HostBinding('style.min-width')\n    @Input()\n    public width = 'auto';\n\n    /**\n     * An @Input property that sets the `height` style property of the media container.\n     * If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media height=\"50%\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.height')\n    @Input()\n    public height = 'auto';\n\n    /**\n     * An @Input property that sets the `role` attribute of the media container.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'img';\n}\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Component({\n    selector: 'igx-card-header',\n    templateUrl: 'card-header.component.html'\n})\nexport class IgxCardHeaderComponent {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header')\n    public cssClass = 'igx-card-header';\n\n    /**\n     * An @Input property that sets the layout style of the header.\n     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.\n     * ```html\n     * <igx-card-header [vertical]=\"true\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('class.igx-card-header--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card header.\n     * By default the value is set to `header`.\n     * ```html\n     * <igx-card-header role=\"header\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'header';\n}\n\n/**\n * IgxCardThumbnail is container for the card thumbnail section.\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    selector: '[igxCardThumbnail]'\n})\nexport class IgxCardThumbnailDirective { }\n\n/**\n * igxCardHeaderTitle is used to denote the header title in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderTitle]'\n})\nexport class IgxCardHeaderTitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__title')\n    public cssClass = 'igx-card__header__title';\n}\n\n/**\n * igxCardHeaderSubtitle is used to denote the header subtitle in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderSubtitle]'\n})\nexport class IgxCardHeaderSubtitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__subtitle')\n    public cssClass = 'igx-card-header__subtitle';\n}\n/**\n * IgxCardContent is container for the card content.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-content')\n    public cssClass = 'igx-card-content';\n}\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card footer.\n     * By default the value is set to `footer`.\n     * ```html\n     * <igx-card-footer role=\"footer\"></igx-card-footer>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'footer';\n}\n\n/**\n * **Ignite UI for Angular Card** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/card.html)\n *\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are\n * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.\n *\n * Example:\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <h3 igxCardHeaderTitle>{{title}}</h3>\n *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>\n *   </igx-card-header>\n *   <igx-card-actions>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n\nexport enum IgxCardType {\n    ELEVATED = 'elevated',\n    OUTLINED = 'outlined'\n}\n\n@Component({\n    selector: 'igx-card',\n    templateUrl: 'card.component.html'\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     * @memberof IgxCardComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card.\n     * By default the value is set to `group`.\n     * ```html\n     * <igx-card role=\"group\"></igx-card>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'group';\n\n    /**\n     * An @Input property that sets the value of the `type` attribute of the card.\n     * By default the value is set to `default`. You can make the card use the\n     * outlined style by setting the value to `outlined`.\n     * ```html\n     * <igx-card type=\"outlined\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card')\n    @Input()\n    public type: IgxCardType | string = IgxCardType.ELEVATED;\n\n    /**\n     * A getter which will return true if the card type is `outlined`.\n     */\n    @HostBinding('class.igx-card--outlined')\n    get isOutlinedCard() {\n        return this.type === IgxCardType.OUTLINED;\n    }\n\n    /**\n     * An @Input property that sets the value of the `horizontal` attribute of the card.\n     * Setting this to `true` will make the different card sections align horizontally,\n     * essentially flipping the card to the side.\n     * ```html\n     * <igx-card [horizontal]=\"true\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card--horizontal')\n    @Input()\n    public horizontal = false;\n}\n\nexport enum IgxCardActionsLayout {\n    START = 'start',\n    JUSTIFY = 'justify',\n}\n\n/**\n * IgxCardActions is container for the card actions.\n */\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions',\n    templateUrl: 'card-actions.component.html'\n})\nexport class IgxCardActionsComponent implements OnInit, OnChanges {\n    private isVerticalSet = false;\n\n    constructor(@Optional() @Inject(IgxCardComponent) public card: IgxCardComponent) { }\n\n    /**\n     * An @Input property that sets the layout style of the actions.\n     * By default icons and icon buttons, as well as regular buttons\n     * are split into two containers, which are then positioned on both ends\n     * of the card-actions area.\n     * You can justify the elements in those groups so they are positioned equally\n     * from one another taking up all the space available along the card actions axis.\n     * ```html\n     * <igx-card-actions layout=\"justify\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions')\n    @Input()\n    public layout: IgxCardActionsLayout | string = IgxCardActionsLayout.START;\n\n    /**\n     * An @Input property that sets the vertical attribute of the actions.\n     * When set to `true` the actions will be layed out vertically.\n     */\n    @HostBinding('class.igx-card-actions--vertical')\n    @Input()\n    public vertical: boolean;\n\n    /**\n     * A getter that returns `true` when the layout has been\n     * set to `justify`.\n     */\n    @HostBinding('class.igx-card-actions--justify')\n    get isJustifyLayout() {\n        return this.layout === IgxCardActionsLayout.JUSTIFY;\n    }\n\n    /**\n     * An @Input property that sets order of the buttons the actions area.\n     * By default all icons/icon buttons are placed at the end of the action\n     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons\n     * placed in the actions area.\n     * If you want to reverse their positions so that icons appear first, use the `reverse`\n     * attribute.\n     * ```html\n     * <igx-card-actions [reverse]=\"true\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions--reverse')\n    @Input()\n    public reverse = false;\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const prop in changes) {\n            if (prop === 'vertical') {\n                this.isVerticalSet = true;\n            }\n        }\n    }\n\n    ngOnInit() {\n        this.vertical = !this.isVerticalSet && this.card.horizontal;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    exports: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    imports: [CommonModule, IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    DoCheck,\n    OnInit\n} from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../../calendar/calendar';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { DateRangeDescriptor, DateRangeType } from '../../core/dates';\nimport { IgxCalendarBaseDirective, CalendarSelection } from '../calendar-base';\nimport { isEqual } from '../../core/utils';\nimport { IViewChangingEventArgs } from './days-view.interface';\nimport { IgxDaysViewNavigationService } from './daysview-navigation.service';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDaysViewComponent\n        },\n        { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }\n    ],\n    selector: 'igx-days-view',\n    templateUrl: 'days-view.component.html'\n})\nexport class IgxDaysViewComponent extends IgxCalendarBaseDirective implements DoCheck, OnInit {\n    /**\n     * Sets/gets the `id` of the days view.\n     * If not set, the `id` will have value `\"igx-days-view-0\"`.\n     * ```html\n     * <igx-days-view id=\"my-days-view\"></igx-days-view>\n     * ```\n     * ```typescript\n     * let daysViewId =  this.daysView.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-days-view-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public changeDaysView = false;\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onViewChanging = new EventEmitter<IViewChangingEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxDayItemComponent, { read: IgxDayItemComponent })\n    public dates: QueryList<IgxDayItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    /**\n     * @hidden\n     */\n    public nextMonthView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    public prevMonthView: IgxDaysViewComponent;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    constructor(public navService: IgxDaysViewNavigationService) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.navService.monthView = this;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        if (!this.changeDaysView && this.dates) {\n            this.disableOutOfRangeDates();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the date in the days view.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this.formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     * @hidden\n     */\n    public isSelected(date: ICalendarDate): boolean {\n        let selectedDates: Date | Date[];\n        if (this.isDateDisabled(date.date) || !this.value ||\n            (Array.isArray(this.value) && this.value.length === 0)\n            )  {\n            return false;\n        }\n\n        if (this.selection === CalendarSelection.SINGLE) {\n            selectedDates = (this.value as Date);\n            return this.getDateOnly(selectedDates).getTime() === date.date.getTime();\n        }\n\n        selectedDates = (this.value as Date[]);\n        if (this.selection === CalendarSelection.RANGE && selectedDates.length === 1) {\n            return this.getDateOnly(selectedDates[0]).getTime() === date.date.getTime();\n        }\n\n        if (this.selection === CalendarSelection.MULTI) {\n            const start = this.getDateOnly(selectedDates[0]);\n            const end = this.getDateOnly(selectedDates[selectedDates.length - 1]);\n\n            if (this.isWithinRange(date.date, false, start, end)) {\n                const currentDate = selectedDates.find(element => element.getTime() === date.date.getTime());\n                return !!currentDate;\n            } else {\n                return false;\n            }\n\n        } else {\n            return this.isWithinRange(date.date, true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isLastInRange(date: ICalendarDate): boolean {\n        if (this.isSingleSelection || !this.value) {\n            return false;\n        }\n\n        const dates = this.value as Date[];\n        const lastDate = dates[dates.length - 1];\n        return isEqual(lastDate, date.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public isFirstInRange(date: ICalendarDate): boolean {\n        if (this.isSingleSelection || !this.value) {\n            return false;\n        }\n\n        return isEqual((this.value as Date[])[0], date.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public isWithinRange(date: Date, checkForRange: boolean, min?: Date, max?: Date): boolean {\n        if (checkForRange && !(Array.isArray(this.value) && this.value.length > 1)) {\n            return false;\n        }\n\n        min = min ? min : this.value[0];\n        max = max ? max : this.value[(this.value as Date[]).length - 1];\n\n        return isDateInRanges(date,\n            [\n                {\n                    type: DateRangeType.Between,\n                    dateRange: [min, max]\n                }\n            ]\n        );\n    }\n\n    /**\n     *@hidden\n     */\n    public focusActiveDate() {\n        let date = this.dates.find((d) => d.selected);\n\n        if (!date) {\n            date = this.dates.find((d) => d.isToday);\n        }\n\n        if (date.isFocusable) {\n            date.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDay(event) {\n        this.selectDateFromClient(event.date);\n        this.onDateSelection.emit(event);\n\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    private disableOutOfRangeDates() {\n        const dateRange = [];\n        this.dates.toArray().forEach((date) => {\n            if (!date.isCurrentMonth) {\n                dateRange.push(date.date.date);\n            }\n        });\n\n        this.outOfRangeDates = [{\n            type: DateRangeType.Specific,\n            dateRange: dateRange\n        }];\n    }\n\n    /**\n     * @hidden\n     */\n    public getFirstMonthView(): IgxDaysViewComponent {\n        let monthView = this as IgxDaysViewComponent;\n        while (monthView.prevMonthView) {\n            monthView = monthView.prevMonthView;\n        }\n        return monthView;\n    }\n\n    /**\n     * @hidden\n     */\n    private getLastMonthView(): IgxDaysViewComponent {\n        let monthView = this as IgxDaysViewComponent;\n        while (monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n        }\n        return monthView;\n    }\n\n    /**\n     * @hidden\n     */\n    private get isSingleSelection(): boolean {\n        return this.selection !== CalendarSelection.RANGE;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    @HostListener('keydown.arrowright', ['$event'])\n    @HostListener('keydown.arrowup', ['$event'])\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrow(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.navService.focusNextDate(event.target as HTMLElement, event.key);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.getFirstMonthView().navService.focusHomeDate();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.getLastMonthView().navService.focusEndDate();\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    ElementRef,\n    AfterViewInit,\n    ViewChildren,\n    QueryList,\n    OnDestroy\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../animations/main';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { KEYS } from '../core/utils';\nimport { ICalendarDate, monthRange } from './calendar';\nimport { CalendarView, IgxMonthPickerBaseDirective } from './month-picker-base';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { interval, Subscription } from 'rxjs';\nimport { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';\nimport { ScrollMonth } from './calendar-base';\nimport { IViewChangingEventArgs } from './days-view/days-view.interface';\n\nlet NEXT_ID = 0;\n\n/**\n * Calendar provides a way to display date information.\n *\n * @igxModule IgxCalendarModule\n *\n * @igxTheme igx-calendar-theme, igx-icon-theme\n *\n * @igxKeywords calendar, datepicker, schedule, date\n *\n * @igxGroup Scheduling\n *\n * @remarks\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * @example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-calendar',\n    templateUrl: 'calendar.component.html'\n})\nexport class IgxCalendarComponent extends IgxMonthPickerBaseDirective implements AfterViewInit, OnDestroy {\n    /**\n     * Sets/gets the `id` of the calendar.\n     *\n     * @remarks\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar id=\"my-first-calendar\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the calendar has header.\n     * Default value is `true`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [hasHeader]=\"false\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    public hasHeader = true;\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets/gets the number of month views displayed.\n     * Default value is `1`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [monthsViewNumber]=\"2\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    get monthsViewNumber() {\n        return this._monthsViewNumber;\n    }\n\n    set monthsViewNumber(val: number) {\n        if (this._monthsViewNumber === val || val <= 0) {\n            return;\n        } else if (this._monthsViewNumber < val) {\n            for (let i = this._monthsViewNumber; i < val; i++) {\n                const nextMonthDate = new Date(this.viewDate);\n                nextMonthDate.setMonth(nextMonthDate.getMonth() + i);\n                const monthView = {\n                    value: null,\n                    viewDate: nextMonthDate\n                };\n                this.dayViews.push(monthView);\n            }\n            this._monthsViewNumber = val;\n        } else {\n            this.dayViews.splice(val, this.dayViews.length - val);\n            this._monthsViewNumber = val;\n        }\n    }\n\n    /**\n     * Apply the different states for the transitions of animateChange\n     * @hidden\n     * @internal\n     */\n    @Input()\n    public animationAction: any = '';\n\n    /**\n     * Used to apply the active date when the calendar view is changed\n     *\n     * @hidden\n     * @internal\n     */\n    public nextDate: Date;\n\n    /**\n     * Denote if the calendar view was changed with the keyboard\n     *\n     * @hidden\n     * @internal\n     */\n    public isKeydownTrigger = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public callback: (next) => void;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-calendar--vertical')\n    get styleVerticalClass(): boolean {\n        return this.vertical;\n    }\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * ViewChild that represents the months view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * Month button, that displays the months view.\n     * @hidden\n     * @internal\n     */\n    @ViewChild('monthsBtn')\n    public monthsBtn: ElementRef;\n\n    /**\n     * ViewChild that represents the decade view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * ViewChild that represents the days view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * ViewChildrenden representing all of the rendered days views.\n     * @hidden\n     * @internal\n     */\n    @ViewChildren('days', { read: IgxDaysViewComponent })\n    public monthViews: QueryList<IgxDaysViewComponent>;\n\n    /**\n     * Button for previous month.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('prevMonthBtn')\n    public prevMonthBtn: ElementRef;\n\n    /**\n     * Button for next month.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('nextMonthBtn')\n    public nextMonthBtn: ElementRef;\n\n    /**\n     * Denote if the year view is active.\n     * @hidden\n     * @internal\n     */\n    get isYearView(): boolean {\n        return this.activeView === CalendarView.YEAR;\n    }\n\n    /**\n     * Gets the header template.\n     *\n     * @example\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the header template.\n     *\n     *  @example\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the subheader template.\n     *\n     * @example\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the subheader template.\n     *\n     * @example\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     *\n     * @example\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     *\n     * @example\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this.viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Date displayed in header\n     *\n     * @hidden\n     * @internal\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective, static: true  })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective, static: true  })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _monthsViewNumber = 1;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _monthViewsChanges$: Subscription;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private defaultDayView = {\n        value: this.value,\n        viewDate: this.viewDate\n    };\n\n    /**\n     * Days which are displayed into the calendar days view\n     *\n     * @hidden\n     * @internal\n     */\n    public dayViews = [this.defaultDayView];\n\n    public ngAfterViewInit() {\n        this.setSiblingMonths(this.monthViews);\n        this._monthViewsChanges$ = this.monthViews.changes.subscribe(c => {\n            this.setSiblingMonths(c);\n        });\n\n        this.startMonthScroll$.pipe(\n            takeUntil(this.stopMonthScroll$),\n            switchMap(() => this.scrollMonth$.pipe(\n                skipLast(1),\n                debounce(() => interval(300)),\n                takeUntil(this.stopMonthScroll$)\n            ))).subscribe(() => {\n                switch (this.monthScrollDirection) {\n                    case ScrollMonth.PREV:\n                        this.previousMonth();\n                        break;\n                    case ScrollMonth.NEXT:\n                        this.nextMonth();\n                        break;\n                    case ScrollMonth.NONE:\n                    default:\n                        break;\n                }\n        });\n    }\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     * @internal\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * Change to previous month\n     *\n     * @hidden\n     * @internal\n     */\n    public previousMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', -1);\n        this.animationAction = ScrollMonth.PREV;\n        this.isKeydownTrigger = isKeydownTrigger;\n    }\n\n    /**\n     * Change to next month\n     *\n     * @hidden\n     * @internal\n     */\n    public nextMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', 1);\n        this.animationAction = ScrollMonth.NEXT;\n        this.isKeydownTrigger = isKeydownTrigger;\n    }\n\n    /**\n     * Continious navigation through the previous months\n     * @hidden\n     * @internal\n     */\n    public startPrevMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.monthScrollDirection = ScrollMonth.PREV;\n\n        this.previousMonth(isKeydownTrigger);\n    }\n\n    /**\n     * Continious navigation through the next months\n     * @hidden\n     * @internal\n     */\n    public startNextMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.monthScrollDirection = ScrollMonth.NEXT;\n\n        this.nextMonth(isKeydownTrigger);\n    }\n\n    /**\n     * Stop continuous navigation\n     * @hidden\n     * @internal\n     */\n    public stopMonthScroll = (event) => {\n        event.stopPropagation();\n\n        // generally the scrolling is built on the calendar component\n        // and all start/stop scrolling methods are called on the calendar\n        // if we change below lines to call stopMonthScroll$ on the calendar instead of on the views,\n        // strange bug is introduced --> after changing number of months, continuous scrolling on mouse click does not happen\n        this.daysView.stopMonthScroll$.next(true);\n        this.daysView.stopMonthScroll$.complete();\n\n\n        if (this.monthScrollDirection === ScrollMonth.PREV) {\n            this.prevMonthBtn.nativeElement.focus();\n        } else if (this.monthScrollDirection === ScrollMonth.NEXT) {\n            this.nextMonthBtn.nativeElement.focus();\n        }\n\n        this.monthScrollDirection = ScrollMonth.NONE;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public activeViewDecade(args: Date) {\n        super.activeViewDecade();\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.date = args;\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public activeViewDecadeKB(event, args: Date) {\n        super.activeViewDecadeKB(event, args);\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.date = args;\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * Handles invoked on date selection\n     * @hidden\n     * @internal\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        if (this.selection === 'multi') {\n            this.deselectDateInMonthViews(instance.date);\n        }\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public viewChanging(args: IViewChangingEventArgs) {\n        this.animationAction = args.monthAction;\n        this.isKeydownTrigger = true;\n        this.nextDate = args.nextDate;\n        this.callback = (next) => {\n            const day = this.daysView.dates.find((item) => item.date.date.getTime() === next.getTime());\n            if (day) {\n                this.daysView.navService.focusNextDate(day.nativeElement, args.key, true);\n            }\n        };\n        this.viewDate = this.calendarModel.timedelta(this.nextDate, 'month', 0);\n    }\n\n    /**\n     * @hidden\n     * @intenal\n     */\n    public changeMonth(event: Date) {\n        this.viewDate = new Date(this.viewDate.getFullYear(), event.getMonth());\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            if (this.monthsBtn) { this.monthsBtn.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public activeViewYear(args: Date, event): void {\n        this.activeView = CalendarView.YEAR;\n        requestAnimationFrame(() => {\n            this.monthsView.date = args;\n            this.focusMonth(event.target);\n        });\n    }\n\n    private focusMonth(target: HTMLElement) {\n        const month = this.monthsView.dates.find((date) =>\n            date.index === parseInt(target.parentElement.attributes['data-month'].value, 10));\n        if (month) { month.nativeElement.focus(); }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public activeViewYearKB(args: Date, event): void {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewYear(args, event);\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *\n     * @example\n     *```typescript\n     * this.calendar.deselectDate(new Date(`2018-06-12`));\n     *````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        super.deselectDate(value);\n\n        this.monthViews.forEach((view) => {\n            view.selectedDates = this.selectedDates;\n            view.rangeStarted = false;\n        });\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Helper method that does deselection for all month views when selection is \"multi\"\n     * If not called, selection in other month views stays\n     * @hidden\n     * @internal\n     */\n    private deselectDateInMonthViews(value: Date) {\n        this.monthViews.forEach(m => {\n            m.deselectMultipleInMonth(value);\n         });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getViewDate(i: number): Date {\n        const date = this.calendarModel.timedelta(this.viewDate, 'month', i);\n        return date;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getMonth(i: number): number {\n        const date = this.calendarModel.timedelta(this.viewDate, 'month', i);\n        return date.getMonth();\n    }\n\n    /**\n     * Getter for the context object inside the calendar templates.\n     * @hidden\n     * @internal\n     */\n    public getContext(i: number) {\n        const date = this.calendarModel.timedelta(this.viewDate, 'month', i);\n        return this.generateContext(date, i);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public animationDone(event) {\n        if (this.monthScrollDirection !== ScrollMonth.NONE) {\n            this.scrollMonth$.next();\n        }\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let date = monthView.dates.find((d) => d.selected);\n\n        while (!date && monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n            date = monthView.dates.find((d) => d.selected);\n        }\n        if (date && date.isFocusable && !this.isKeydownTrigger) {\n            setTimeout(() => {\n                date.nativeElement.focus();\n            }, parseInt(slideInRight.options.params.duration, 10));\n        } else if (this.callback && (event.toState === ScrollMonth.NEXT || event.toState === ScrollMonth.PREV)) {\n            this.callback(this.nextDate);\n        }\n        this.animationAction = ScrollMonth.NONE;\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        const isPageDown = event.key === 'PageDown';\n        const step = isPageDown ? 1 : -1;\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let activeDate;\n\n        while (!activeDate && monthView) {\n            activeDate = monthView.dates.find((date) => date.nativeElement === document.activeElement);\n            monthView = monthView.nextMonthView;\n        }\n\n        if (activeDate) {\n            this.nextDate = new Date(activeDate.date.date);\n\n            let year = this.nextDate.getFullYear();\n\n            let month = this.nextDate.getMonth() + step;\n            if (isPageDown) {\n                if (month > 11) { month = 0; year += step; }\n            } else {\n                if (month < 0) { month = 11; year += step; }\n            }\n\n            const range = monthRange(this.nextDate.getFullYear(), month);\n\n            let day = this.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.nextDate.setDate(day);\n            this.nextDate.setMonth(month);\n            this.nextDate.setFullYear(year);\n\n            this.callback = (next) => {\n                monthView = this.daysView as IgxDaysViewComponent;\n                let dayItem;\n                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {\n                    dayItem = monthView.dates.find((d) => d.date.date.getTime() === next.getTime());\n                    monthView = monthView.nextMonthView;\n                }\n                if (dayItem && dayItem.isFocusable) { dayItem.nativeElement.focus(); }\n            };\n        }\n\n        if (isPageDown) { this.nextMonth(true); } else {\n            this.previousMonth(true);\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        const isPageDown = event.key === 'PageDown';\n        const step = isPageDown ? 1 : -1;\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', step);\n\n        this.animationAction = isPageDown ? ScrollMonth.NEXT : ScrollMonth.PREV;\n        this.isKeydownTrigger = true;\n\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let activeDate;\n\n        while (!activeDate && monthView) {\n            activeDate = monthView.dates.find((date) => date.nativeElement === document.activeElement);\n            monthView = monthView.nextMonthView;\n        }\n\n        if (activeDate) {\n            this.nextDate = new Date(activeDate.date.date);\n\n            const year = this.nextDate.getFullYear() + step;\n\n            const range = monthRange(year, this.nextDate.getMonth());\n\n            let day = this.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.nextDate.setDate(day);\n            this.nextDate.setFullYear(year);\n\n            this.callback = (next) => {\n                monthView = this.daysView as IgxDaysViewComponent;\n                let dayItem;\n                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {\n                    dayItem = monthView.dates.find((d) => d.date.date.getTime() === next.getTime());\n                    monthView = monthView.nextMonthView;\n                }\n                if (dayItem && dayItem.isFocusable) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownEnd(event);\n        }\n    }\n\n    /**\n     * Stop continuous navigation on mouseup event\n     * @hidden\n     * @internal\n     */\n    @HostListener('document:mouseup', ['$event'])\n    public onMouseUp(event: KeyboardEvent) {\n        if (this.monthScrollDirection !== ScrollMonth.NONE) {\n            this.stopMonthScroll(event);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnDestroy(): void {\n        if (this._monthViewsChanges$) {\n            this._monthViewsChanges$.unsubscribe();\n        }\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     * @internal\n     */\n    private generateContext(value: Date, i?: number) {\n        const formatObject = {\n            index: i,\n            monthView: () => this.activeViewYear(value, event),\n            yearView: () => this.activeViewDecade(value),\n            ...this.calendarModel.formatToParts(value, this.locale, this.formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n\n    /**\n     * Helper method that sets references for prev/next months for each month in the view\n     * @hidden\n     * @internal\n     */\n    private setSiblingMonths(monthViews: QueryList<IgxDaysViewComponent>) {\n        monthViews.forEach((item, index) => {\n            const prevMonthView = this.getMonthView(index - 1);\n            const nextMonthView = this.getMonthView(index + 1);\n            item.nextMonthView = nextMonthView;\n            item.prevMonthView = prevMonthView;\n        });\n    }\n\n    /**\n     * Helper method returning previous/next day views\n     * @hidden\n     * @internal\n     */\n    private getMonthView(index: number): IgxDaysViewComponent {\n        if (index === -1 || index === this.monthViews.length ) {\n            return null;\n        } else {\n            return this.monthViews.toArray()[index];\n        }\n    }\n}\n","import {\n    Component,\n    HostListener,\n    ViewChild,\n    HostBinding,\n    Input\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';\nimport { KEYS } from '../../core/utils';\nimport { IgxMonthsViewComponent } from '../months-view/months-view.component';\nimport { IgxMonthPickerBaseDirective, CalendarView } from '../month-picker-base';\nimport { IgxYearsViewComponent } from '../years-view/years-view.component';\nimport { IgxDaysViewComponent } from '../days-view/days-view.component';\n\nlet NEXT_ID = 0;\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxMonthPickerComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-month-picker',\n    templateUrl: 'month-picker.component.html'\n})\nexport class IgxMonthPickerComponent extends IgxMonthPickerBaseDirective {\n    /**\n     * Sets/gets the `id` of the month picker.\n     * If not set, the `id` will have value `\"igx-month-picker-0\"`.\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-month-picker-${NEXT_ID++}`;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    public yearAction = '';\n\n    /**\n     * @hidden\n     */\n    public animationDone() {\n        this.yearAction = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        if (event.key === KEYS.RIGHT_ARROW || event.key === KEYS.RIGHT_ARROW_IE) {\n            event.preventDefault();\n            this.nextYear();\n        }\n\n        if (event.key === KEYS.LEFT_ARROW || event.key === KEYS.LEFT_ARROW_IE) {\n            event.preventDefault();\n            this.previousYear();\n        }\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) { this.dacadeView.el.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            this.dacadeView.el.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYear() {\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.nextYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYear() {\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.previousYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());\n        this.activeView = CalendarView.DEFAULT;\n\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n\n        requestAnimationFrame(() => {\n            if (this.yearsBtn) { this.yearsBtn.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public selectMonth(event: Date) {\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * Selects a date.\n     *```typescript\n     * this.monPicker.selectDate(new Date(`2018-06-12`));\n     *```\n     */\n    public selectDate(value: Date) {\n        if (!value) {\n            return new Date();\n        }\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        super.selectDate(value);\n        this.viewDate = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        if (value) {\n            this.viewDate = this.selectedDates = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownEnd(event);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective,\n    IgxCalendarScrollMonthDirective\n} from './calendar.directives';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { IgxDayItemComponent } from './days-view/day-item.component';\nimport { IgxMonthPickerComponent } from './month-picker/month-picker.component';\nimport { IgxCalendarBaseDirective } from './calendar-base';\nimport { IgxMonthPickerBaseDirective } from './month-picker-base';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCalendarBaseDirective,\n        IgxMonthPickerBaseDirective,\n        IgxDayItemComponent,\n        IgxDaysViewComponent,\n        IgxCalendarComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective,\n        IgxCalendarScrollMonthDirective,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxDaysViewComponent,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { Component, OnDestroy, Input, HostBinding, Output, EventEmitter, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    templateUrl: 'slide.component.html'\n})\n\nexport class IgxSlideComponent implements OnDestroy {\n    private _active = false;\n    private _destroy$ = new Subject<boolean>();\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n\n    /**\n     * Returns the `tabIndex` of the slide component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return this.active ? 0 : null;\n    }\n\n    /**\n     * Returns the `aria-selected` of the slide.\n     *\n     * ```typescript\n     * let slide = this.slide.ariaSelected;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-selected')\n    public get ariaSelected(): boolean {\n        return this.active;\n    }\n\n    /**\n     * Returns the `aria-live` of the slide.\n     *\n     * ```typescript\n     * let slide = this.slide.ariaLive;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-selected')\n    public get ariaLive() {\n        return this.active ? 'polite' : null;\n    }\n\n    /**\n     * Returns the class of the slide component.\n     * ```typescript\n     * let class =  this.slide.cssClass;\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.igx-slide')\n    public cssClass = 'igx-slide';\n\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [(active)] =\"model.isActive\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.igx-slide--current')\n    @Input()\n    public get active(): boolean {\n        return this._active;\n    }\n\n    public set active(value) {\n        this._active = !!value;\n        this.activeChange.emit(this._active);\n    }\n\n    @HostBinding('class.igx-slide--previous')\n    @Input() public previous = false;\n\n    /**\n     *@hidden\n     */\n    @Output() public activeChange = new EventEmitter<boolean>();\n\n    constructor(private elementRef: ElementRef) { }\n\n    /**\n    * Returns a reference to the carousel element in the DOM.\n    * ```typescript\n    * let nativeElement =  this.slide.nativeElement;\n    * ```\n    * @memberof IgxSlideComponent\n    */\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n    * @hidden\n    */\n    public get isDestroyed(): Subject<boolean> {\n    return this._destroy$;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxCarouselIndicator]'\n})\nexport class IgxCarouselIndicatorDirective {\n}\n\n@Directive({\n    selector: '[igxCarouselNextButton]'\n})\nexport class IgxCarouselNextButtonDirective {\n}\n\n@Directive({\n    selector: '[igxCarouselPrevButton]'\n})\nexport class IgxCarouselPrevButtonDirective {\n}\n","import { IGridResourceStrings, GridResourceStringsEN } from './grid-resources';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from './time-picker-resources';\nimport { PaginatorResourceStringsEN } from './paginator-resources';\nimport { cloneValue } from '../utils';\nimport { ICarouselResourceStrings, CarouselResourceStringsEN } from './carousel-resources';\n\nexport interface IResourceStrings extends IGridResourceStrings, ITimePickerResourceStrings, ICarouselResourceStrings  {}\n\n/**\n * @hidden\n */\nexport const CurrentResourceStrings = {\n    GridResStrings: cloneValue(GridResourceStringsEN),\n    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),\n    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN),\n    CarouselResStrings: cloneValue(CarouselResourceStringsEN),\n};\n\nfunction updateResourceStrings(currentStrings: IResourceStrings, newStrings: IResourceStrings ) {\n    for (const key of Object.keys(newStrings)) {\n        if (key in currentStrings) {\n            currentStrings[key] = newStrings[key];\n        }\n    }\n}\n\n/**\n * Changes the resource strings for all components in the application\n * ```\n * @param resourceStrings to be applied\n */\nexport function changei18n(resourceStrings: IResourceStrings) {\n    for (const key of Object.keys(CurrentResourceStrings)) {\n        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);\n    }\n}\n\n/**\n * Returns current resource strings for all components\n */\nexport function getCurrentResourceStrings(): IResourceStrings {\n    return {\n            ...CurrentResourceStrings.GridResStrings,\n            ...CurrentResourceStrings.TimePickerResStrings\n    };\n}\n","export interface IGridResourceStrings {\n    igx_grid_groupByArea_message?: string;\n    igx_grid_emptyFilteredGrid_message?: string;\n    igx_grid_emptyGrid_message?: string;\n    igx_grid_filter?: string;\n    igx_grid_filter_row_close?: string;\n    igx_grid_filter_row_reset?: string;\n    igx_grid_filter_row_placeholder?: string;\n    igx_grid_filter_row_boolean_placeholder?: string;\n    igx_grid_filter_row_date_placeholder?: string;\n    igx_grid_filter_operator_and?: string;\n    igx_grid_complex_filter?: string;\n    igx_grid_filter_operator_or?: string;\n    igx_grid_filter_contains?: string;\n    igx_grid_filter_doesNotContain?: string;\n    igx_grid_filter_startsWith?: string;\n    igx_grid_filter_endsWith?: string;\n    igx_grid_filter_equals?: string;\n    igx_grid_filter_doesNotEqual?: string;\n    igx_grid_filter_empty?: string;\n    igx_grid_filter_notEmpty?: string;\n    igx_grid_filter_null?: string;\n    igx_grid_filter_notNull?: string;\n    igx_grid_filter_before?: string;\n    igx_grid_filter_after?: string;\n    igx_grid_filter_today?: string;\n    igx_grid_filter_yesterday?: string;\n    igx_grid_filter_thisMonth?: string;\n    igx_grid_filter_lastMonth?: string;\n    igx_grid_filter_nextMonth?: string;\n    igx_grid_filter_thisYear?: string;\n    igx_grid_filter_lastYear?: string;\n    igx_grid_filter_nextYear?: string;\n    igx_grid_filter_greaterThan?: string;\n    igx_grid_filter_lessThan?: string;\n    igx_grid_filter_greaterThanOrEqualTo?: string;\n    igx_grid_filter_lessThanOrEqualTo?: string;\n    igx_grid_filter_true?: string;\n    igx_grid_filter_false?: string;\n    igx_grid_filter_all?: string;\n    igx_grid_filter_condition_placeholder?: string;\n    igx_grid_summary_count?: string;\n    igx_grid_summary_min?: string;\n    igx_grid_summary_max?: string;\n    igx_grid_summary_sum?: string;\n    igx_grid_summary_average?: string;\n    igx_grid_summary_earliest?: string;\n    igx_grid_summary_latest?: string;\n    igx_grid_excel_filter_moving_left?: string;\n    igx_grid_excel_filter_moving_left_short?: string;\n    igx_grid_excel_filter_moving_right?: string;\n    igx_grid_excel_filter_moving_right_short?: string;\n    igx_grid_excel_filter_moving_header?: string;\n    igx_grid_excel_filter_sorting_asc?: string;\n    igx_grid_excel_filter_sorting_asc_short?: string;\n    igx_grid_excel_filter_sorting_desc?: string;\n    igx_grid_excel_filter_sorting_desc_short?: string;\n    igx_grid_excel_filter_sorting_header?: string;\n    igx_grid_excel_filter_clear?: string;\n    igx_grid_excel_custom_dialog_add?: string;\n    igx_grid_excel_custom_dialog_clear?: string;\n    igx_grid_excel_custom_dialog_header?: string;\n    igx_grid_excel_cancel?: string;\n    igx_grid_excel_apply?: string;\n    igx_grid_excel_search_placeholder?: string;\n    igx_grid_excel_select_all?: string;\n    igx_grid_excel_blanks?: string;\n    igx_grid_excel_hide?: string;\n    igx_grid_excel_show?: string;\n    igx_grid_excel_pin?: string;\n    igx_grid_excel_unpin?: string;\n    igx_grid_excel_text_filter?: string;\n    igx_grid_excel_number_filter?: string;\n    igx_grid_excel_date_filter?: string;\n    igx_grid_excel_boolean_filter?: string;\n    igx_grid_excel_custom_filter?: string;\n    igx_grid_advanced_filter_title?: string;\n    igx_grid_advanced_filter_and_group?: string;\n    igx_grid_advanced_filter_or_group?: string;\n    igx_grid_advanced_filter_end_group?: string;\n    igx_grid_advanced_filter_create_and_group?: string;\n    igx_grid_advanced_filter_create_or_group?: string;\n    igx_grid_advanced_filter_and_label?: string;\n    igx_grid_advanced_filter_or_label?: string;\n    igx_grid_advanced_filter_add_condition?: string;\n    igx_grid_advanced_filter_ungroup?: string;\n    igx_grid_advanced_filter_delete?: string;\n    igx_grid_advanced_filter_delete_filters?: string;\n    igx_grid_advanced_filter_initial_text?: string;\n    igx_grid_advanced_filter_column_placeholder?: string;\n    igx_grid_advanced_filter_value_placeholder?: string;\n}\n\nexport const GridResourceStringsEN: IGridResourceStrings = {\n    igx_grid_groupByArea_message: 'Drag a column header and drop it here to group by that column.',\n    igx_grid_emptyFilteredGrid_message: 'No records found.',\n    igx_grid_emptyGrid_message: 'Grid has no data.',\n    igx_grid_filter: 'Filter',\n    igx_grid_filter_row_close: 'Close',\n    igx_grid_filter_row_reset: 'Reset',\n    igx_grid_filter_row_placeholder: 'Add filter value',\n    igx_grid_filter_row_boolean_placeholder: 'All',\n    igx_grid_filter_row_date_placeholder: 'Pick up date',\n    igx_grid_filter_operator_and: 'And',\n    igx_grid_filter_operator_or: 'Or',\n    igx_grid_complex_filter: 'Complex Filter',\n    igx_grid_filter_contains: 'Contains',\n    igx_grid_filter_doesNotContain: 'Does Not Contain',\n    igx_grid_filter_startsWith: 'Starts With',\n    igx_grid_filter_endsWith: 'Ends With',\n    igx_grid_filter_equals: 'Equals',\n    igx_grid_filter_doesNotEqual: 'Does Not Equal',\n    igx_grid_filter_empty: 'Empty',\n    igx_grid_filter_notEmpty: 'Not Empty',\n    igx_grid_filter_null: 'Null',\n    igx_grid_filter_notNull: 'Not Null',\n    igx_grid_filter_before: 'Before',\n    igx_grid_filter_after: 'After',\n    igx_grid_filter_today: 'Today',\n    igx_grid_filter_yesterday: 'Yesterday',\n    igx_grid_filter_thisMonth: 'This Month',\n    igx_grid_filter_lastMonth: 'Last Month',\n    igx_grid_filter_nextMonth: 'Next Month',\n    igx_grid_filter_thisYear: 'This Year',\n    igx_grid_filter_lastYear: 'Last Year',\n    igx_grid_filter_nextYear: 'Next Year',\n    igx_grid_filter_greaterThan: 'Greater Than',\n    igx_grid_filter_lessThan: 'Less Than',\n    igx_grid_filter_greaterThanOrEqualTo: 'Greater Than Or Equal To',\n    igx_grid_filter_lessThanOrEqualTo: 'Less Than Or Equal To',\n    igx_grid_filter_true: 'True',\n    igx_grid_filter_false: 'False',\n    igx_grid_filter_all: 'All',\n    igx_grid_filter_condition_placeholder: 'Select filter',\n    igx_grid_summary_count: 'Count',\n    igx_grid_summary_min: 'Min',\n    igx_grid_summary_max: 'Max',\n    igx_grid_summary_sum: 'Sum',\n    igx_grid_summary_average: 'Avg',\n    igx_grid_summary_earliest: 'Earliest',\n    igx_grid_summary_latest: 'Latest',\n    igx_grid_excel_filter_moving_left: 'move left',\n    igx_grid_excel_filter_moving_left_short: 'left',\n    igx_grid_excel_filter_moving_right: 'move right',\n    igx_grid_excel_filter_moving_right_short: 'right',\n    igx_grid_excel_filter_moving_header: 'move',\n    igx_grid_excel_filter_sorting_asc: 'ascending',\n    igx_grid_excel_filter_sorting_asc_short: 'asc',\n    igx_grid_excel_filter_sorting_desc: 'descending',\n    igx_grid_excel_filter_sorting_desc_short: 'desc',\n    igx_grid_excel_filter_sorting_header: 'sort',\n    igx_grid_excel_filter_clear: 'Clear column filters',\n    igx_grid_excel_custom_dialog_add: 'add filter',\n    igx_grid_excel_custom_dialog_clear: 'Clear filter',\n    igx_grid_excel_custom_dialog_header: 'Custom auto-filter on column: ',\n    igx_grid_excel_cancel: 'cancel',\n    igx_grid_excel_apply: 'apply',\n    igx_grid_excel_search_placeholder: 'Search',\n    igx_grid_excel_select_all: 'Select All',\n    igx_grid_excel_blanks: '(Blanks)',\n    igx_grid_excel_hide: 'Hide column',\n    igx_grid_excel_show: 'Show column',\n    igx_grid_excel_pin: 'Pin column',\n    igx_grid_excel_unpin: 'Unpin column',\n    igx_grid_excel_text_filter: 'Text filter',\n    igx_grid_excel_number_filter: 'Number filter',\n    igx_grid_excel_date_filter: 'Date filter',\n    igx_grid_excel_boolean_filter: 'Boolean filter',\n    igx_grid_excel_custom_filter: 'Custom filter...',\n    igx_grid_advanced_filter_title: 'Advanced Filtering',\n    igx_grid_advanced_filter_and_group: '\"And\" Group',\n    igx_grid_advanced_filter_or_group: '\"Or\" Group',\n    igx_grid_advanced_filter_end_group: 'End Group',\n    igx_grid_advanced_filter_create_and_group: 'Create \"And\" Group',\n    igx_grid_advanced_filter_create_or_group: 'Create \"Or\" Group',\n    igx_grid_advanced_filter_and_label: 'and',\n    igx_grid_advanced_filter_or_label: 'or',\n    igx_grid_advanced_filter_add_condition: 'Condition',\n    igx_grid_advanced_filter_ungroup: 'Ungroup',\n    igx_grid_advanced_filter_delete: 'Delete',\n    igx_grid_advanced_filter_delete_filters: 'Delete filters',\n    igx_grid_advanced_filter_initial_text: 'Start with creating a group of conditions linked with \"And\" or \"Or\"',\n    igx_grid_advanced_filter_column_placeholder: 'Select column',\n    igx_grid_advanced_filter_value_placeholder: 'Value'\n};\n","export interface ITimePickerResourceStrings {\n    igx_time_picker_ok?: string;\n    igx_time_picker_cancel?: string;\n}\n\nexport const TimePickerResourceStringsEN: ITimePickerResourceStrings = {\n    igx_time_picker_ok: 'OK',\n    igx_time_picker_cancel: 'Cancel'\n};\n","export interface IPaginatorResourceStrings {\n    igx_paginator_label?: string;\n}\n\nexport const PaginatorResourceStringsEN: IPaginatorResourceStrings = {\n    igx_paginator_label: 'Items per page'\n};\n","export interface ICarouselResourceStrings {\n    igx_carousel_of?: string;\n}\n\nexport const CarouselResourceStringsEN: ICarouselResourceStrings = {\n    igx_carousel_of: 'of'\n};\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    Output,\n    ContentChildren,\n    QueryList,\n    IterableDiffer,\n    IterableDiffers,\n    AfterContentInit,\n    IterableChangeRecord,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\nimport { IBaseEventArgs, PlatformUtil } from '../core/utils';\nimport { Subject, merge } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxCarouselIndicatorDirective, IgxCarouselNextButtonDirective, IgxCarouselPrevButtonDirective } from './carousel.directives';\nimport { useAnimation, AnimationBuilder, AnimationPlayer, AnimationReferenceMetadata } from '@angular/animations';\nimport { slideInLeft, fadeIn } from '../animations/main';\nimport { IgxSlideComponent, Direction } from './slide.component';\nimport { ICarouselResourceStrings } from '../core/i18n/carousel-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\nexport enum CarouselIndicatorsOrientation {\n    bottom = 'bottom',\n    top = 'top'\n}\n\nexport enum CarouselAnimationType {\n    none = 'none',\n    slide = 'slide',\n    fade = 'fade'\n}\n\nexport interface CarouselAnimationSettings {\n    enterAnimation: AnimationReferenceMetadata;\n    leaveAnimation: AnimationReferenceMetadata;\n}\n\n@Injectable()\nexport class CarouselHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_HORIZONTAL }\n    };\n}\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    providers: [\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CarouselHammerConfig\n        }\n    ],\n    selector: 'igx-carousel',\n    templateUrl: 'carousel.component.html',\n    styles: [`\n    :host {\n        display: block;\n        outline-style: none;\n    }`]\n})\n\nexport class IgxCarouselComponent implements OnDestroy, AfterContentInit {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Returns the `aria-label` of the carousel.\n     *\n     * ```typescript\n     * let carousel = this.carousel.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'carousel';\n\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Returns the class of the carousel component.\n     * ```typescript\n     * let class =  this.carousel.cssClass;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('class.igx-carousel')\n    public cssClass = 'igx-carousel';\n\n    /**\n    * Gets the `touch-action` style of the `list item`.\n    * ```typescript\n    * let touchAction = this.listItem.touchAction;\n    * ```\n    */\n    @HostBinding('style.touch-action')\n    get touchAction() {\n        return this.gesturesSupport ? 'pan-y' : 'auto';\n    }\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this.restartInterval();\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n    * Controls whether the carousel should support keyboard navigation.\n    * Default value is `true`.\n    * ```html\n    * <igx-carousel [keyboardSupport] = \"false\"></igx-carousel>\n    * ```\n    * @memberOf IgxCarouselComponent\n    */\n    @Input() public keyboardSupport = true;\n\n    /**\n  * Controls whether the carousel should support gestures.\n  * Default value is `true`.\n  * ```html\n  * <igx-carousel [gesturesSupport] = \"false\"></igx-carousel>\n  * ```\n  * @memberOf IgxCarouselComponent\n  */\n    @Input() public gesturesSupport = true;\n\n    /**\n     * Controls the maximum indexes that can be shown.\n     * Default value is `5`.\n     * ```html\n     * <igx-carousel [maximumIndicatorsCount] = \"10\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public maximumIndicatorsCount = 5;\n\n    /**\n    * Gets/sets the display mode of carousel indicators. It can be top or bottom.\n    * Default value is `bottom`.\n    * ```html\n    * <igx-carousel indicatorsOrientation='top'>\n    * <igx-carousel>\n    * ```\n    * @memberOf IgxSlideComponent\n    */\n    @Input() public indicatorsOrientation: CarouselIndicatorsOrientation = CarouselIndicatorsOrientation.bottom;\n\n    /**\n   * Gets/sets the animation type of carousel.\n   * Default value is `slide`.\n   * ```html\n   * <igx-carousel animationType='none'>\n   * <igx-carousel>\n   * ```\n   * @memberOf IgxSlideComponent\n   */\n    @Input() public animationType = CarouselAnimationType.slide;\n\n    /**\n    * An accessor that sets the resource strings.\n    * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: ICarouselResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): ICarouselResourceStrings {\n        return this._resourceStrings;\n    }\n\n    @ViewChild('defaultIndicator', { read: TemplateRef, static: true })\n    private defaultIndicator: TemplateRef<any>;\n\n    @ViewChild('defaultNextButton', { read: TemplateRef, static: true })\n    private defaultNextButton: TemplateRef<any>;\n\n    @ViewChild('defaultPrevButton', { read: TemplateRef, static: true })\n    private defaultPrevButton: TemplateRef<any>;\n\n    /**\n     * The custom template, if any, that should be used when rendering carousel indicators\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.carousel.indicatorTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-carousel #carousel>\n     *      ...\n     *      <ng-template igxCarouselIndicator let-slide>\n     *         <igx-icon *ngIf=\"slide.active\"  fontSet=\"material\">brightness_7</igx-icon>\n     *         <igx-icon *ngIf=\"!slide.active\"  fontSet=\"material\">brightness_5</igx-icon>\n     *      </ng-template>\n     *  </igx-carousel>\n     * ```\n     */\n    @ContentChild(IgxCarouselIndicatorDirective, { read: TemplateRef, static: false })\n    public indicatorTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering carousel next button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.carousel.nextButtonTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-carousel #carousel>\n     *      ...\n     *      <ng-template igxCarouselNextButton let-disabled>\n     *            <button igxButton=\"fab\" igxRipple=\"white\" [disabled]=\"disabled\">\n     *                <igx-icon fontSet=\"material\">add</igx-icon>\n     *           </button>\n     *      </ng-template>\n     *  </igx-carousel>\n     * ```\n     */\n    @ContentChild(IgxCarouselNextButtonDirective, { read: TemplateRef, static: false })\n    public nextButtonTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering carousel previous button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.carousel.nextButtonTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-carousel #carousel>\n     *      ...\n     *      <ng-template igxCarouselPrevButton let-disabled>\n     *            <button igxButton=\"fab\" igxRipple=\"white\" [disabled]=\"disabled\">\n     *                <igx-icon fontSet=\"material\">remove</igx-icon>\n     *           </button>\n     *      </ng-template>\n     *  </igx-carousel>\n     * ```\n     */\n    @ContentChild(IgxCarouselPrevButtonDirective, { read: TemplateRef, static: false })\n    public prevButtonTemplate: TemplateRef<any> = null;\n\n    /**\n    * The collection of `slides` currently in the carousel.\n    * ```typescript\n    * let slides: QueryList<IgxSlideComponent> = this.carousel.slides;\n    * ```\n    * @memberOf IgxCarouselComponent\n    */\n    @ContentChildren(IgxSlideComponent)\n    public slides: QueryList<IgxSlideComponent>;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    private _interval: number;\n    private _resourceStrings = CurrentResourceStrings.CarouselResStrings;\n    private lastInterval: any;\n    private playing: boolean;\n    private stoppedByInteraction: boolean;\n    private destroyed: boolean;\n    private destroy$ = new Subject<any>();\n    private differ: IterableDiffer<IgxSlideComponent> | null = null;\n    private enterAnimationPlayer?: AnimationPlayer;\n    private leaveAnimationPlayer?: AnimationPlayer;\n    private currentSlide: IgxSlideComponent;\n    private previousSlide: IgxSlideComponent;\n    private animationDuration = 320;\n    private incomingSlide: IgxSlideComponent;\n    private animationPosition = 0;\n    private newDuration = 0;\n\n    constructor(private element: ElementRef, private iterableDiffers: IterableDiffers,\n            private builder: AnimationBuilder, private platformUtil: PlatformUtil) {\n        this.differ = this.iterableDiffers.find([]).create(null);\n    }\n\n    /** @hidden */\n    public ngAfterContentInit() {\n        this.slides.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxSlideComponent>) => { this.initSlides(change); });\n\n        this.initSlides(this.slides);\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.destroyed = true;\n        if (this.lastInterval) {\n            clearInterval(this.lastInterval);\n        }\n    }\n\n    private unsubscriber(slide: IgxSlideComponent) {\n        return merge(this.destroy$, slide.isDestroyed);\n    }\n\n    private onSlideActivated(slide: IgxSlideComponent) {\n        if (slide.active && slide !== this.currentSlide) {\n            if (slide.direction === Direction.NONE) {\n                const newIndex = slide.index;\n                slide.direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n            }\n\n            if (this.currentSlide) {\n                const animationWasStarted = this.finishAnimations();\n                this.currentSlide.direction = slide.direction;\n                this.currentSlide.active = false;\n\n                this.previousSlide = this.currentSlide;\n                this.currentSlide = slide;\n                if (this.animationType !== CarouselAnimationType.none) {\n                    if (animationWasStarted) {\n                        requestAnimationFrame(() => {\n                            this.playAnimations();\n                        });\n                    } else {\n                        this.playAnimations();\n                    }\n                }\n            } else {\n                this.currentSlide = slide;\n            }\n            this.onSlideChanged.emit({ carousel: this, slide });\n            this.restartInterval();\n        }\n    }\n\n    private playAnimations() {\n        this.playLeaveAnimation();\n        this.playEnterAnimation();\n    }\n\n    private finishAnimations(): boolean {\n        let animationWasStarted = false;\n        if (this.previousSlide && this.previousSlide.previous) {\n            this.previousSlide.previous = false;\n        }\n        if (this.leaveAnimationPlayer) {\n            animationWasStarted = true;\n            this.leaveAnimationPlayer.finish();\n        }\n        if (this.enterAnimationPlayer) {\n            animationWasStarted = true;\n            this.enterAnimationPlayer.finish();\n        }\n        return animationWasStarted;\n    }\n\n    private getAnimation(): CarouselAnimationSettings {\n        let duration;\n        if (this.newDuration) {\n            duration = this.animationPosition ? this.animationPosition * this.newDuration : this.newDuration;\n        } else {\n            duration = this.animationPosition ? this.animationPosition * this.animationDuration : this.animationDuration;\n        }\n\n        switch (this.animationType) {\n            case CarouselAnimationType.slide:\n                const trans = this.animationPosition ? this.animationPosition * 100 : 100;\n                return {\n                    enterAnimation: useAnimation(slideInLeft,\n                        {\n                            params: {\n                                delay: '0s',\n                                duration: `${duration}ms`,\n                                endOpacity: 1,\n                                startOpacity: 1,\n                                fromPosition: `translateX(${this.currentSlide.direction === 1 ? trans : -trans}%)`,\n                                toPosition: 'translateX(0%)'\n                            }\n                        }),\n                    leaveAnimation: useAnimation(slideInLeft,\n                        {\n                            params: {\n                                delay: '0s',\n                                duration: `${duration}ms`,\n                                endOpacity: 1,\n                                startOpacity: 1,\n                                fromPosition: `translateX(0%)`,\n                                toPosition: `translateX(${this.currentSlide.direction === 1 ? -trans : trans}%)`,\n                            }\n                        })\n                };\n            case CarouselAnimationType.fade:\n                return {\n                    enterAnimation: useAnimation(fadeIn,\n                        { params: { duration: `${duration}ms`, startOpacity: `${this.animationPosition}` } }),\n                    leaveAnimation: null\n                };\n        }\n        return {\n            enterAnimation: null,\n            leaveAnimation: null\n        };\n    }\n\n    private playEnterAnimation() {\n        if (!this.getAnimation().enterAnimation) {\n            return;\n        }\n        const animationBuilder = this.builder.build(this.getAnimation().enterAnimation);\n\n        this.enterAnimationPlayer = animationBuilder.create(this.currentSlide.nativeElement);\n\n        this.enterAnimationPlayer.onDone(() => {\n            if (this.enterAnimationPlayer) {\n                this.enterAnimationPlayer.reset();\n                this.enterAnimationPlayer = null;\n            }\n            this.animationPosition = 0;\n            this.newDuration = 0;\n            this.previousSlide.previous = false;\n        });\n        this.previousSlide.previous = true;\n        this.enterAnimationPlayer.play();\n    }\n\n    private playLeaveAnimation() {\n        if (!this.getAnimation().leaveAnimation) {\n            return;\n        }\n\n        const animationBuilder = this.builder.build(this.getAnimation().leaveAnimation);\n        this.leaveAnimationPlayer = animationBuilder.create(this.previousSlide.nativeElement);\n\n        this.leaveAnimationPlayer.onDone(() => {\n            if (this.leaveAnimationPlayer) {\n                this.leaveAnimationPlayer.reset();\n                this.leaveAnimationPlayer = null;\n            }\n            this.animationPosition = 0;\n            this.newDuration = 0;\n        });\n        this.leaveAnimationPlayer.play();\n    }\n\n    private initSlides(change: QueryList<IgxSlideComponent>) {\n        const diff = this.differ.diff(change.toArray());\n        if (diff) {\n            this.slides.reduce((any, c, ind) => c.index = ind, 0); // reset slides indexes\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxSlideComponent>) => {\n                const slide = record.item;\n                this.onSlideAdded.emit({ carousel: this, slide });\n                if (slide.active) {\n                    this.currentSlide = slide;\n                }\n                slide.activeChange.pipe(takeUntil(this.unsubscriber(slide))).subscribe(() => this.onSlideActivated(slide));\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxSlideComponent>) => {\n                const slide = record.item;\n                this.onSlideRemoved.emit({ carousel: this, slide });\n                if (slide.active) {\n                    slide.active = false;\n                    this.currentSlide = this.get(slide.index < this.total ? slide.index : this.total - 1);\n                }\n            });\n\n            this.updateSlidesSelection();\n        }\n    }\n\n    private updateSlidesSelection() {\n        requestAnimationFrame(() => {\n            if (this.currentSlide) {\n                this.currentSlide.active = true;\n                const activeSlides = this.slides.filter(slide => slide.active && slide.index !== this.currentSlide.index);\n                activeSlides.forEach(slide => { slide.active = false; });\n            } else if (this.total) {\n                this.slides.first.active = true;\n            }\n            this.play();\n        });\n    }\n\n    /** @hidden */\n    public get getIndicatorTemplate(): TemplateRef<any> {\n        if (this.indicatorTemplate) {\n            return this.indicatorTemplate;\n        }\n        return this.defaultIndicator;\n    }\n\n    /** @hidden */\n    public get getNextButtonTemplate(): TemplateRef<any> {\n        if (this.nextButtonTemplate) {\n            return this.nextButtonTemplate;\n        }\n        return this.defaultNextButton;\n    }\n\n    /** @hidden */\n    public get getPrevButtonTemplate(): TemplateRef<any> {\n        if (this.prevButtonTemplate) {\n            return this.prevButtonTemplate;\n        }\n        return this.defaultPrevButton;\n    }\n\n    /** @hidden */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /** @hidden */\n    public get indicatorsOrientationClass() {\n        return `igx-carousel-indicators--${this.indicatorsOrientation}`;\n    }\n\n    /** @hidden */\n    public get showIndicators(): boolean {\n        return this.total <= this.maximumIndicatorsCount && this.total > 0;\n    }\n\n    /** @hidden */\n    public get showIndicatorsLabel(): boolean {\n        return this.total > this.maximumIndicatorsCount;\n    }\n\n    /** @hidden */\n    public get getCarouselLabel() {\n        return `${this.current + 1} ${this.resourceStrings.igx_carousel_of} ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this.slides.length;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this.currentSlide ? 0 : this.currentSlide.index;\n    }\n\n    private getNextIndex(): number {\n        return (this.current + 1) % this.total;\n    }\n\n    private getPrevIndex(): number {\n        return this.current - 1 < 0 ? this.total - 1 : this.current - 1;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this.playing;\n    }\n\n    /**\n     * Returns Ð° boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this.destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        return this.slides.find((slide) => slide.index === index);\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        const newSlides = this.slides.toArray();\n        newSlides.push(slide);\n        this.slides.reset(newSlides);\n        this.slides.notifyOnChanges();\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            const newSlides = this.slides.toArray();\n            newSlides.splice(slide.index, 1);\n            this.slides.reset(newSlides);\n            this.slides.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        if (slide && slide !== this.currentSlide) {\n            slide.direction = direction;\n            slide.active = true;\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = this.getNextIndex();\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.getPrevIndex();\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this.playing) {\n            this.playing = true;\n            this.onCarouselPlaying.emit(this);\n            this.restartInterval();\n            this.stoppedByInteraction = false;\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this.playing = false;\n            this.onCarouselPaused.emit(this);\n            this.resetInterval();\n        }\n    }\n\n    private resetInterval() {\n        if (this.lastInterval) {\n            clearInterval(this.lastInterval);\n            this.lastInterval = null;\n        }\n    }\n\n    private restartInterval() {\n        this.resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0 && this.platformUtil.isBrowser) {\n            this.lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this.playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n\n    /** @hidden */\n    public get nextButtonDisabled() {\n        return !this.loop && this.current === (this.total - 1);\n    }\n\n    /** @hidden */\n    public get prevButtonDisabled() {\n        return !this.loop && this.current === 0;\n    }\n\n    /** @hidden */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event) {\n        if (this.keyboardSupport) {\n            event.preventDefault();\n            this.next();\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n\n    /** @hidden */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event) {\n        if (this.keyboardSupport) {\n            event.preventDefault();\n            this.prev();\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n\n    /** @hidden */\n    @HostListener('tap', ['$event'])\n    public onTap(event) {\n        // play pause only when tap on slide\n        if (event.target && event.target.classList.contains('igx-slide')) {\n            if (this.isPlaying) {\n                if (this.pause) {\n                    this.stoppedByInteraction = true;\n                }\n                this.stop();\n            } else if (this.stoppedByInteraction) {\n                this.play();\n            }\n        }\n    }\n\n    /** @hidden */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event) {\n        if (this.keyboardSupport && this.slides.length > 0) {\n            event.preventDefault();\n            this.slides.first.active = true;\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n\n    /** @hidden */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event) {\n        if (this.keyboardSupport && this.slides.length > 0) {\n            event.preventDefault();\n            this.slides.last.active = true;\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n\n    /** @hidden */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.pause && this.isPlaying) {\n            this.stoppedByInteraction = true;\n        }\n        this.stop();\n    }\n\n    /** @hidden */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.stoppedByInteraction) {\n            this.play();\n        }\n    }\n\n    /** @hidden */\n    @HostListener('panleft', ['$event'])\n    public onPanLeft(event) {\n        this.pan(event);\n    }\n\n    /** @hidden */\n    @HostListener('panright', ['$event'])\n    public onPanRight(event) {\n        this.pan(event);\n    }\n\n    private resetSlideStyles(slide: IgxSlideComponent) {\n        slide.nativeElement.style.transform = '';\n        slide.nativeElement.style.opacity = '';\n    }\n\n    private pan(event) {\n        const slideWidth = this.currentSlide.nativeElement.offsetWidth;\n        const panOffset = (slideWidth / 1000);\n        const deltaX = event.deltaX;\n        const index = deltaX < 0 ? this.getNextIndex() : this.getPrevIndex();\n        const offset = deltaX < 0 ? slideWidth + deltaX : -slideWidth + deltaX;\n\n        if (!this.gesturesSupport || event.isFinal || Math.abs(deltaX) + panOffset >= slideWidth) {\n            return;\n        }\n\n        if (!this.loop && ((this.current === 0 && deltaX > 0) || (this.current === this.total - 1 && deltaX < 0))) {\n            this.incomingSlide = null;\n            return;\n        }\n\n        event.preventDefault();\n        if (this.isPlaying) {\n            this.stoppedByInteraction = true;\n            this.stop();\n        }\n        this.finishAnimations();\n\n        if (this.incomingSlide) {\n            if (index !== this.incomingSlide.index) {\n                this.resetSlideStyles(this.incomingSlide);\n                this.incomingSlide.previous = false;\n                this.incomingSlide = this.get(index);\n            }\n        } else {\n            this.incomingSlide = this.get(index);\n        }\n        this.incomingSlide.previous = true;\n\n        if (this.animationType === CarouselAnimationType.fade) {\n            this.currentSlide.nativeElement.style.opacity = `${Math.abs(offset) / slideWidth}`;\n        } else {\n            this.currentSlide.nativeElement.style.transform = `translateX(${deltaX}px)`;\n            this.incomingSlide.nativeElement.style.transform = `translateX(${offset}px)`;\n        }\n    }\n\n    /**\n    * @hidden\n    */\n    @HostListener('panend', ['$event'])\n    public onPanEnd(event) {\n        if (!this.gesturesSupport) {\n            return;\n        }\n        event.preventDefault();\n\n        const slideWidth = this.currentSlide.nativeElement.offsetWidth;\n        const panOffset = (slideWidth / 1000);\n        const deltaX = Math.abs(event.deltaX) + panOffset < slideWidth ? Math.abs(event.deltaX) : slideWidth - panOffset;\n        const velocity = Math.abs(event.velocity);\n        this.resetSlideStyles(this.currentSlide);\n        if (this.incomingSlide) {\n            this.resetSlideStyles(this.incomingSlide);\n            if (slideWidth / 2 < deltaX || velocity > 1) {\n                this.incomingSlide.direction = event.deltaX < 0 ? Direction.NEXT : Direction.PREV;\n                this.incomingSlide.previous = false;\n\n                this.animationPosition = this.animationType === CarouselAnimationType.fade ?\n                    deltaX / slideWidth : (slideWidth - deltaX) / slideWidth;\n\n                if (velocity > 1) {\n                    this.newDuration = this.animationDuration / velocity;\n                }\n                this.incomingSlide.active = true;\n            } else {\n                this.currentSlide.direction = event.deltaX > 0 ? Direction.NEXT : Direction.PREV;\n                this.previousSlide = this.incomingSlide;\n                this.previousSlide.previous = true;\n                this.animationPosition = this.animationType === CarouselAnimationType.fade ?\n                    Math.abs((slideWidth - deltaX) / slideWidth) : deltaX / slideWidth;\n                this.playAnimations();\n            }\n        }\n\n        if (this.stoppedByInteraction) {\n            this.play();\n        }\n    }\n}\n\nexport interface ISlideEventArgs extends IBaseEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCarouselComponent,\n        IgxSlideComponent,\n        IgxCarouselIndicatorDirective,\n        IgxCarouselNextButtonDirective,\n        IgxCarouselPrevButtonDirective\n    ],\n    exports: [\n        IgxCarouselComponent,\n        IgxSlideComponent,\n        IgxCarouselIndicatorDirective,\n        IgxCarouselNextButtonDirective,\n        IgxCarouselPrevButtonDirective\n    ],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum LabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeCheckboxEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Checkbox** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/checkbox.html)\n *\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice. It behaves similarly\n * to the native browser checkbox.\n *\n * Example:\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    templateUrl: 'checkbox.component.html'\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.aruaLabel;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     * @memberof IgxCheckboxComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDisabled = this.checkbox.disabled;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the checkbox is readonly.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [readonly]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let readonly = this.checkbox.readonly;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public readonly = false;\n    /**\n     * Sets/gets whether the checkbox should disable all css transitions.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disableTransitions]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let disableTransitions = this.checkbox.disableTransitions;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--plain')\n    @Input() public disableTransitions = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    public toggle() {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (this.readonly) {\n            // readonly prevents the component from changing state (see toggle() method).\n            // However, the native checkbox can still be activated through user interaction (focus + space, label click)\n            // Prevent the native change so the input remains in sync\n            event.preventDefault();\n        }\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener,\n    Input, NgModule, OnInit, OnDestroy, Output, TemplateRef, ViewChild, Optional, Inject, Injector, Type\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective,\n    IgxComboToggleIconDirective,\n    IgxComboClearIconDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic } from '../data-operations/filtering-expression.interface';\nimport { IgxForOfModule, IForOfState, IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilteringPipe, IgxComboGroupingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxInputState, IgxInputDirective } from '../directives/input/input.directive';\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\n/**\n * @hidden\n */\nconst ItemHeights = {\n    'comfortable': 40,\n    'cosy': 32,\n    'compact': 28,\n};\n\n/**\n * @hidden\n * The default number of items that should be in the combo's\n * drop-down list if no `[itemsMaxHeight]` is specified\n */\nconst itemsInContainer = 10;\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL = IgxInputState.INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID = IgxInputState.VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID = IgxInputState.INVALID\n}\n\n/** Event emitted when an igx-combo's selection is changing */\nexport interface IComboSelectionChangeEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /** An array containing the values that are currently selected */\n    oldSelection: any[];\n    /** An array containing the values that will be selected after this event */\n    newSelection: any[];\n    /** An array containing the values that will be added to the selection (if any) */\n    added: any[];\n    /** An array containing the values that will be removed from the selection (if any) */\n    removed: any[];\n    /** The text that will be displayed in the combo text box */\n    displayText: string;\n    /** The user interaction that triggered the selection change */\n    event?: Event;\n}\n\nexport interface IComboItemAdditionEvent extends IBaseEventArgs {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\n/**\n * When called with sets A & B, returns A - B (as array);\n * @hidden\n */\nfunction diffInSets(set1: Set<any>, set2: Set<any>): any[] {\n    const results = [];\n    set1.forEach(entry => {\n        if (!set2.has(entry)) {\n            results.push(entry);\n        }\n    });\n    return results;\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    templateUrl: 'combo.component.html',\n    providers: [\n        IgxComboAPIService,\n        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxComboComponent, multi: true }\n    ]\n})\nexport class IgxComboComponent extends DisplayDensityBase implements IgxComboBase, AfterViewInit, ControlValueAccessor, OnInit,\n    OnDestroy, EditorProvider {\n    /**\n     * @hidden @internal\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden @internal\n     */\n    public defaultFallbackGroup = 'Other';\n    protected stringFilters = IgxStringFilteringOperand;\n    protected booleanFilters = IgxBooleanFilteringOperand;\n    protected _groupKey = '';\n    protected _displayKey: string;\n    protected _prevInputValue = '';\n    private _dataType = '';\n    private ngControl: NgControl = null;\n    private destroy$ = new Subject<any>();\n    private _data = [];\n    private _filteredData = [];\n    private _itemHeight = null;\n    private _itemsMaxHeight = null;\n    private _remoteSelection = {};\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n    private _overlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n    private _value = '';\n    private _valid = IgxComboState.INITIAL;\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Optional() private _injector: Injector) {\n        super(_displayDensityOptions);\n        this.comboAPI.register(this);\n    }\n\n    @ViewChild(IgxForOfDirective, { read: IgxForOfDirective, static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    /**\n     * Set custom overlay settings that control how the combo's list of items is displayed.\n     * Set:\n     * ```html\n     * <igx-combo [overlaySettings] = \"customOverlaySettings\"></igx-combo>\n     * ```\n     *\n     * ```typescript\n     *  const customSettings = { positionStrategy: { settings: { target: myTarget } } };\n     *  combo.overlaySettings = customSettings;\n     * ```\n     * Get any custom overlay settings used by the combo:\n     * ```typescript\n     *  const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;\n     * ```\n     */\n\n    @Input()\n    public overlaySettings: OverlaySettings = null;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('comboInput', { read: IgxInputDirective, static: true }) public comboInput: IgxInputDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent, static: true })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchInput')\n    public searchInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    get displaySearchInput(): boolean {\n        return this.filterable || this.allowCustomValues;\n    }\n\n    /**\n     * The custom template, if any, that should be used when rendering ITEMS in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.itemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboItem>\n     *          <div class=\"custom-item\" let-item let-key=\"valueKey\">\n     *              <div class=\"custom-item__name\">{{ item[key] }}</div>\n     *              <div class=\"custom-item__cost\">{{ item.cost }}</div>\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef })\n    public itemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeader>\n     *          <div class=\"combo__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboFooter>\n     *          <div class=\"combo__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">\n     *          <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef })\n    public headerItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.addItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboAddItem>\n     *          <button class=\"combo__add-button\">\n     *              Click to add item\n     *          </button>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef })\n    public addItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.emptyTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboEmpty>\n     *          <div class=\"combo--empty\">\n     *              There are no items to display\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef })\n    public emptyTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo CLEAR button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.clearIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboClearIcon>\n     *          <igx-icon>clear</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboClearIconDirective, { read: TemplateRef })\n    public clearIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('primitive', { read: TemplateRef, static: true })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    @ViewChild('complex', { read: TemplateRef, static: true })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxForOfDirective, { static: true })\n    public virtualScrollContainer: IgxForOfDirective<any>;\n\n    @ViewChild('dropdownItemContainer', { static: true })\n    protected dropdownContainer: ElementRef = null;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<any>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public width: string;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-combo')\n    public cssClass = 'igx-combo'; // Independent of display density, at the time being\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding(`attr.role`)\n    public role = 'combobox';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded(): boolean {\n        return !this.dropdown.collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.dropdown.id;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n    */\n    @Input()\n    public get itemsMaxHeight(): number {\n        if (this._itemsMaxHeight === null || this._itemsMaxHeight === undefined) {\n            return this.itemHeight * itemsInContainer;\n        }\n        return this._itemsMaxHeight;\n    }\n\n    public set itemsMaxHeight(val: number) {\n        this._itemsMaxHeight = val;\n    }\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public get itemHeight(): number {\n        if (this._itemHeight === null || this._itemHeight === undefined) {\n            return ItemHeights[this.displayDensity];\n        }\n        return this._itemHeight;\n    }\n\n    public set itemHeight(val: number) {\n        this._itemHeight = val;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder;\n\n    /**\n     * @hidden @internal\n     */\n    public get inputEmpty(): boolean {\n        return !this.value && !this.placeholder;\n    }\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data(): any[] {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public valueKey: string = null;\n\n    @Input()\n    set displayKey(val: string) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='myDisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this.valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string) {\n        this._groupKey = val;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     *<igx-combo [filterable]=\"false\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     *<igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     *<igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     *<igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public type = 'box';\n\n    /**\n     * Gets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n     * */\n    public get valid(): IgxComboState {\n        return this._valid;\n    }\n\n    /**\n    * Sets if control is valid, when used in a form\n    *\n    * ```typescript\n    * // set\n    * this.combo.valid = IgxComboState.INVALID;\n    * ```\n   */\n    public set valid(valid: IgxComboState) {\n        this._valid = valid;\n        this.comboInput.valid = IgxInputState[IgxComboState[valid]];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue = '';\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.open();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    onInputClick(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.toggle();\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n    */\n    get virtualizationState(): IForOfState {\n        return this.virtDir.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state: IForOfState) {\n        this.virtDir.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n    */\n    get totalItemCount(): number {\n        return this.virtDir.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count: number) {\n        this.virtDir.totalItemCount = count;\n    }\n\n    /**\n     * The text displayed in the combo input\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyUp(event: KeyboardEvent): void {\n        if (event.key === 'ArrowDown' || event.key === 'Down') {\n            this.dropdown.focusedItem = this.dropdown.items[0];\n            this.dropdownContainer.nativeElement.focus();\n        } else if (event.key === 'Escape' || event.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyDown(event: KeyboardEvent) {\n        if (event.key === 'ArrowUp' || event.key === 'Up') {\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n\n    private checkMatch(): void {\n        const displayKey = this.displayKey;\n        const matchFn = (e) => {\n            const value = displayKey ? e[displayKey] : e;\n            return value.toString().toLowerCase() === this.searchValue.trim().toLowerCase();\n        };\n        const itemMatch = this.filteredData.some(matchFn);\n        this.customValueFlag = this.allowCustomValues && !itemMatch;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleInputChange(event?: string) {\n        if (event !== undefined) {\n            this.onSearchInput.emit(event);\n        }\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataType(): string {\n        if (this.displayKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    /** Contains key-value pairs of the selected valueKeys and their resp. displayKeys */\n    private registerRemoteEntries(ids: any[], add = true) {\n        if (add) {\n            const selection = this.getValueDisplayPairs(ids);\n            for (const entry of selection) {\n                this._remoteSelection[entry[this.valueKey]] = entry[this.displayKey];\n            }\n        } else {\n            for (const entry of ids) {\n                delete this._remoteSelection[entry];\n            }\n        }\n    }\n\n    /** For `id: any[]` returns a mapped `{ [combo.valueKey]: any, [combo.displayKey]: any }[]`*/\n    private getValueDisplayPairs(ids: any[]) {\n        return this.data.filter(entry => ids.indexOf(entry[this.valueKey]) > -1).map(e => {\n            return {\n                [this.valueKey]: e[this.valueKey],\n                [this.displayKey]: e[this.displayKey]\n            };\n        });\n    }\n\n    /**\n     * Returns if the specified itemID is selected\n     * @hidden\n     * @internal\n     */\n    public isItemSelected(item: any): boolean {\n        return this.selection.is_item_selected(this.id, item);\n    }\n\n    /**\n     * Triggers change detection on the combo view\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.selectItems(this.comboAPI.valueKey !== null ? [addedItem[this.valueKey]] : [addedItem], false);\n        this.customValueFlag = false;\n        this.searchInput.nativeElement.focus();\n        this.dropdown.focusedItem = null;\n        this.virtDir.scrollTo(0);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public focusSearchInput(opening?: boolean): void {\n        if (this.displaySearchInput && this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        } else {\n            if (opening) {\n                this.dropdownContainer.nativeElement.focus();\n            } else {\n                this.comboInput.nativeElement.focus();\n                this.toggle();\n            }\n        }\n    }\n\n    protected onStatusChanged = () => {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            this.valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n        }\n        this.manageRequiredAsterisk();\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur() {\n        if (this.collapsed) {\n            this._onTouchedCallback();\n            if (this.ngControl && !this.ngControl.valid) {\n                this.valid = IgxComboState.INVALID;\n            } else {\n                this.valid = IgxComboState.INITIAL;\n            }\n        }\n    }\n\n    /** @hidden @internal */\n    public onFocus() {\n        if (this.collapsed) {\n            this._onTouchedCallback();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get<NgControl>(NgControl, null);\n        this._overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;\n        this.selection.set(this.id, new Set());\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);\n            this.manageRequiredAsterisk();\n            this.cdr.detectChanges();\n        }\n        this.virtDir.onChunkPreload.pipe(takeUntil(this.destroy$)).subscribe((e) => {\n            this.onDataPreLoad.emit(e);\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.comboAPI.clear();\n        this.selection.clear(this.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public writeValue(value: any[]): void {\n        this.selectItems(value, true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public getEditElement(): HTMLElement {\n        return this.comboInput.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClearItems(event: Event): void {\n        this.deselectAllItems(true, event);\n        if (this.collapsed) {\n            this.getEditElement().focus();\n        } else {\n            this.focusSearchInput(true);\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.toggle()\">Toggle Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public toggle(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.toggle(overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     *```html\n     *<button (click)=\"combo.open()\">Open Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public open(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.open(overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.close()\">Close Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public close(): void {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * let state = this.combo.collapsed;\n     * ```\n    */\n    public get collapsed(): boolean {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = Array.from(this.selection.get(this.id));\n        return items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean, event?: Event) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>, event?: Event) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean, event?: Event) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData, this.valueKey);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean, event?: Event): void {\n        let newSelection = this.selection.get_empty();\n        if (this.filteredData.length !== this.data.length && !ignoreFilter) {\n            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData, this.valueKey));\n        }\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Selects/Deselects a single item\n     * @param itemID the itemID of the specific item\n     * @param select If the item should be selected (true) or deselected (false)\n     *\n     * Without specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = null;\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem(items[0], true);\n     * ```\n     * With specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = 'field';\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem('Connecticut', true);\n     * ```\n     */\n    public setSelectedItem(itemID: any, select = true, event?: Event): void {\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (select) {\n            this.selectItems([itemID], false, event);\n        } else {\n            this.deselectItems([itemID], event);\n        }\n    }\n\n    protected setSelection(newSelection: Set<any>, event?: Event): void {\n        const removed = diffInSets(this.selection.get(this.id), newSelection);\n        const added = diffInSets(newSelection, this.selection.get(this.id));\n        const newSelectionAsArray = Array.from(newSelection);\n        const oldSelectionAsArray = Array.from(this.selection.get(this.id) || []);\n        const displayText = this.createDisplayText(newSelectionAsArray, oldSelectionAsArray);\n        const args: IComboSelectionChangeEventArgs = {\n            newSelection: newSelectionAsArray,\n            oldSelection: oldSelectionAsArray,\n            added,\n            removed,\n            event,\n            displayText,\n            cancel: false\n        };\n        this.onSelectionChange.emit(args);\n        if (!args.cancel) {\n            this.selection.select_items(this.id, args.newSelection, true);\n            if (displayText !== args.displayText) {\n                this._value = args.displayText;\n            } else {\n                this._value = this.createDisplayText(args.newSelection, args.oldSelection);\n            }\n            this._onChangeCallback(args.newSelection);\n        }\n    }\n\n    /** Returns a string that should be populated in the combo's text box */\n    private concatDisplayText(selection: any[]): string {\n        const value = this.displayKey !== null && this.displayKey !== undefined ?\n        this.convertKeysToItems(selection).map(entry => entry[this.displayKey]).join(', ') :\n        selection.join(', ');\n        return value;\n    }\n\n    /** Constructs the combo display value\n     * If remote, caches the key displayText\n     * If not, just combine the object.displayKeys\n     */\n    private createDisplayText(newSelection: any[], oldSelection: any[]) {\n        let value = '';\n        if (this.isRemote) {\n            if (newSelection.length) {\n                const removedItems = oldSelection.filter(e => newSelection.indexOf(e) < 0);\n                const addedItems = newSelection.filter(e => oldSelection.indexOf(e) < 0);\n                this.registerRemoteEntries(addedItems);\n                this.registerRemoteEntries(removedItems, false);\n                value = Object.keys(this._remoteSelection).map(e => this._remoteSelection[e]).join(', ');\n            } else {\n                // If new selection is empty, clear all items\n                this.registerRemoteEntries(oldSelection, false);\n            }\n        } else {\n            value = this.concatDisplayText(newSelection);\n        }\n        return value;\n    }\n\n    /** if there is a valueKey - map the keys to data items, else - just return the keys */\n    private convertKeysToItems(keys: any[]) {\n        if (this.comboAPI.valueKey === null) {\n            return keys;\n        }\n        // map keys vs. filter data to retain the order of the selected items\n        return keys.map(key => this.data.find(entry => entry[this.valueKey] === key)).filter(e => e !== undefined);\n    }\n    /**\n     * Event handlers\n     * @hidden\n     * @internal\n     */\n    public handleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleOpened() {\n        this.triggerCheck();\n        this.focusSearchInput(true);\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosing(event) {\n        this.onClosing.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.searchValue = '';\n        this.comboInput.nativeElement.focus();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosed() {\n        this.onClosed.emit();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule]\n})\nexport class IgxComboModule { }\n","ï»¿import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IDropBaseEventArgs,\n    IDropDroppedEventArgs\n} from '../directives/drag-drop/drag-drop.directive';\nimport { IBaseEventArgs } from '../core/utils';\nimport { fromEvent } from 'rxjs';\nimport { take, filter } from 'rxjs/operators';\n\n\nexport interface IBaseChipEventArgs extends IBaseEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n@Component({\n    selector: 'igx-chip',\n    templateUrl: 'chip.component.html'\n})\nexport class IgxChipComponent extends DisplayDensityBase {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n        /**\n     * An @Input property that enables/disables the draggable element animation when the element is released.\n     * By default it's set to true.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [animateOnRelease]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = true;\n\n    /**\n     * An @Input property that enables/disables the hiding of the base element that has been dragged.\n     * By default it's set to true.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [hideBaseOnDrag]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = true;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [(selected)]=\"model.isSelected\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedChange = new EventEmitter<boolean>();\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * ```typescript\n     * moveStarted(event: IBaseChipEventArgs){\n     *     let movingChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * ```typescript\n     * moveEnded(event: IBaseChipEventArgs){\n     *     let movedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * ```typescript\n     * remove(event: IBaseChipEventArgs){\n     *     let removedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * ```typescript\n     * chipClick(event: IChipClickEventArgs){\n     *     let clickedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * ```typescript\n     * chipSelect(event: IChipSelectEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected and any related animations and transitions also end.\n     * ```typescript\n     * chipSelectEnd(event: IBaseChipEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (onSelectionDone)=\"chipSelectEnd($event)\">\n     * ```\n     */\n    @Output()\n    public onSelectionDone = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * ```typescript\n     * chipKeyDown(event: IChipKeyDownEventArgs){\n     *     let keyDown = event.key;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * ```typescript\n     * chipEnter(event: IChipEnterDragAreaEventArgs){\n     *     let targetChip = event.targetChip;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-chip')];\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * Property that contains a reference to the `IgxDragDirective` the `IgxChipComponent` uses for dragging behavior.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\"></igx-chip>\n     * ```\n     * ```typescript\n     * onMoveStart(event: IBaseChipEventArgs){\n     *     let dragDirective = event.owner.dragDirective;\n     * }\n     * ```\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective, static: true })\n    public dragDirective: IgxDragDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: ElementRef, static: true })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectContainer', { read: ElementRef, static: true })\n    public selectContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef, static: true })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef, static: true })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get ghostClass(): string {\n        return this.getComponentDensityClass('igx-chip__ghost');\n    }\n\n    public get chipTabindex() {\n        return !this.disabled ? 0 : '';\n    }\n\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * @hidden\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        fromEvent(this.selectContainer.nativeElement, 'transitionend')\n            .pipe(filter<TransitionEvent>(event => event.propertyName === 'width'), take(1))\n            .subscribe(event => this.onSelectTransitionDone(event));\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n                this.selectedChange.emit(this._selected);\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n                this.selectedChange.emit(this._selected);\n            }\n        }\n    }\n\n    public onSelectTransitionDone(event) {\n        if (!!event.target.tagName) {\n            // Trigger onSelectionDone on when `width` property is changed and the target is valid element(not comment).\n            this.onSelectionDone.emit({\n                owner: this,\n                originalEvent: event\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrag behavior\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragEnd() {\n        if (this.animateOnRelease) {\n            this.dragDirective.transitionToOrigin();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n    }\n    // End chip igxDrag behavior\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrop behavior\n    public onChipDragEnterHandler(event: IDropBaseEventArgs) {\n        if (this.dragDirective === event.drag || !event.drag.data || !event.drag.data.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.drag.data.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDrop(event: IDropDroppedEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behavior\n}\n","ï»¿import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport { IDropBaseEventArgs, IDragBaseEventArgs } from '../directives/drag-drop/drag-drop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n@Component({\n    selector: 'igx-chips-area',\n    templateUrl: 'chips-area.component.html',\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public changedOrder(event: IChipsAreaReorderEventArgs){\n     *      let chips: IgxChipComponent[] = event.chipsArray;\n     * }\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public selection(event: IChipsAreaSelectEventArgs){\n     *      let selectedChips: IgxChipComponent[] = event.newSelection;\n     * }\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveStart(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveEnd(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent, { descendants: true })\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            const selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        let selectedChips = this.chipsList.filter((chip) => chip.selected);\n        if (event.selected && !selectedChips.includes(event.owner)) {\n            selectedChips.push(event.owner);\n        } else if (!event.selected && selectedChips.includes(event.owner)) {\n            selectedChips = selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: selectedChips,\n            owner: this\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboToggleIcon]'\n})\nexport class IgxComboToggleIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboClearIcon]'\n})\nexport class IgxComboClearIconDirective {\n}\n\n","import { IgxComboBase } from './combo.common';\nimport { Injectable } from '@angular/core';\n\n/**\n * @hidden\n */\n@Injectable()\nexport class IgxComboAPIService {\n    protected combo: IgxComboBase;\n\n    public disableTransitions = false;\n\n    public register(combo: IgxComboBase) {\n        this.combo = combo;\n    }\n\n\n    public clear(): void {\n        this.combo = null;\n    }\n\n    public get valueKey() {\n        return this.combo.valueKey !== null && this.combo.valueKey !== undefined ? this.combo.valueKey : null;\n    }\n\n    public get item_focusable(): boolean {\n        return false;\n    }\n    public get isRemote(): boolean {\n        return this.combo.isRemote;\n    }\n\n    public add_custom_item(): void {\n        if (!this.combo) {\n            return;\n        }\n        this.combo.addItemToCollection();\n    }\n\n    public get comboID(): string {\n        return this.combo.id;\n    }\n\n    public set_selected_item(itemID: any, event?: Event): void {\n        const selected = this.combo.isItemSelected(itemID);\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (!selected) {\n            this.combo.selectItems([itemID], false, event);\n        } else {\n            this.combo.deselectItems([itemID], event);\n        }\n    }\n\n    public is_item_selected(itemID: any): boolean {\n        return this.combo.isItemSelected(itemID);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Input,\n    DoCheck\n} from '@angular/core';\nimport { IgxDropDownItemComponent } from '../drop-down/drop-down-item.component';\nimport { IGX_DROPDOWN_BASE, IDropDownBase, Navigate } from '../drop-down/drop-down.common';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    templateUrl: 'combo-item.component.html'\n})\nexport class IgxComboItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /**\n     * Gets the height of a list item\n     * @hidden\n     */\n    @Input()\n    @HostBinding('style.height.px')\n    public itemHeight = '';\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        const valueKey = this.comboAPI.valueKey;\n        return valueKey !== null ? this.value[valueKey] : this.value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get comboID() {\n        return this.comboAPI.comboID;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get disableTransitions() {\n        return this.comboAPI.disableTransitions;\n    }\n\n    constructor(\n        protected comboAPI: IgxComboAPIService,\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Inject(IgxSelectionAPIService) protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef, null, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    get selected(): boolean {\n        return this.comboAPI.is_item_selected(this.itemID);\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden\n     */\n    isVisible(direction: Navigate): boolean {\n        const rect = this.element.nativeElement.getBoundingClientRect();\n        const parentDiv = this.element.nativeElement.parentElement.parentElement.getBoundingClientRect();\n        if (direction === Navigate.Down) {\n            return rect.y + rect.height <= parentDiv.y + parentDiv.height;\n        }\n        return rect.y >= parentDiv.y;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clicked(event): void {\n        this.comboAPI.disableTransitions = false;\n        if (!this.isSelectable) { return; }\n        this.dropDown.navigateItem(this.index);\n        this.comboAPI.set_selected_item(this.itemID, event);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     * The event that is prevented is the click on the checkbox label element.\n     * That is the only visible element that a user can interact with.\n     * The click propagates to the host and the preventDefault is to stop it from\n     * switching focus to the input it's base on.\n     * The toggle happens in an internal handler in the drop-down on the next task queue cycle.\n     */\n    disableCheck(event: MouseEvent) {\n        event.preventDefault();\n    }\n\n    ngDoCheck() {\n    }\n}\n","import { ElementRef, EventEmitter, InjectionToken } from '@angular/core';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\n\nexport const IGX_COMBO_COMPONENT = new InjectionToken<IgxComboBase>('IgxComboComponentToken');\n\n/** @hidden @internal TODO: Evaluate */\nexport interface IgxComboBase {\n    id: string;\n    data: any[];\n    valueKey: string;\n    groupKey: string;\n    isRemote: boolean;\n    filteredData: any[];\n    totalItemCount: number;\n    itemsMaxHeight: number;\n    itemHeight: number;\n    searchValue: string;\n    searchInput: ElementRef<HTMLInputElement>;\n    comboInput: ElementRef<HTMLInputElement>;\n    onOpened: EventEmitter<void>;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    focusSearchInput(opening?: boolean): void;\n    triggerCheck(): void;\n    addItemToCollection(): void;\n    isAddButtonVisible(): boolean;\n    handleInputChange(event?: string): void;\n    isItemSelected(itemID: any): boolean;\n    selectItems(itemIDs: any[], clearSelection?: boolean, event?: Event): void;\n    deselectItems(itemIDs: any[], event?: Event): void;\n}\n","import { IgxComboItemComponent } from './combo-item.component';\nimport { Component } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-combo-add-item',\n    template: '<ng-content></ng-content>',\n    providers: [{ provide: IgxComboItemComponent, useExisting: IgxComboAddItemComponent}]\n})\nexport class IgxComboAddItemComponent extends IgxComboItemComponent {\n    get selected(): boolean {\n        return false;\n    }\n    set selected(value: boolean) {\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clicked(event?) {\n        this.comboAPI.disableTransitions = false;\n        this.comboAPI.add_custom_item();\n    }\n}\n","import {\n    ChangeDetectorRef, Component, ElementRef, Inject, QueryList, OnDestroy, AfterViewInit, ContentChildren, Optional\n} from '@angular/core';\nimport { IgxComboBase, IGX_COMBO_COMPONENT } from './combo.common';\nimport { IDropDownBase, IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { DropDownActionKey } from '../drop-down/drop-down.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxDropDownItemBaseDirective } from '../drop-down/drop-down-item.base';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    templateUrl: '../drop-down/drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]\n})\nexport class IgxComboDropDownComponent extends IgxDropDownComponent implements IDropDownBase, OnDestroy, AfterViewInit {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    /** @hidden @internal */\n   public get scrollContainer(): HTMLElement {\n        return this.virtDir.dc.location.nativeElement;\n    }\n\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.virtDir.scrollPosition;\n        const scrollHeight = this.virtDir.getScroll().scrollHeight;\n        return Math.floor(scrollTop + this.virtDir.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxComboItemComponent, { descendants: true })\n    public children: QueryList<IgxDropDownItemBaseDirective> = null;\n\n    /**\n     * @hidden @internal\n     */\n    public onFocus() {\n        this.focusedItem = this._focusedItem || this.items[0];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur(evt?) {\n        this.focusedItem = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    public navigateFirst() {\n        this.navigateItem(this.virtDir.igxForOf.findIndex(e => !e.isHeader));\n    }\n\n    /**\n     * @hidden\n     */\n    public navigatePrev() {\n        if (this._focusedItem && this._focusedItem.index === 0 && this.virtDir.state.startIndex === 0) {\n            this.combo.focusSearchInput(false);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n\n    /**\n     * @hidden\n     */\n    public navigateNext() {\n        const lastIndex = this.combo.totalItemCount ? this.combo.totalItemCount - 1 : this.virtDir.igxForOf.length - 1;\n        if (this._focusedItem && this._focusedItem.index === lastIndex) {\n            this.focusAddItemButton();\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectItem(item: IgxDropDownItemBaseDirective) {\n        if (item === null || item === undefined) {\n            return;\n        }\n        this.comboAPI.set_selected_item(item.itemID);\n        this._focusedItem = item;\n    }\n\n    private focusAddItemButton() {\n        if (this.combo.isAddButtonVisible()) {\n            this.focusedItem = this.items[this.items.length - 1];\n        }\n    }\n\n    protected scrollToHiddenItem(newItem: any): void { }\n\n    protected scrollHandler = () => {\n        this.comboAPI.disableTransitions = true;\n    }\n\n    protected get sortedChildren(): IgxDropDownItemBaseDirective[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxDropDownItemBaseDirective, b: IgxDropDownItemBaseDirective) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxComboItemComponent[] {\n        const items: IgxComboItemComponent[] = [];\n        if (this.children !== undefined) {\n            const sortedChildren = this.sortedChildren as IgxComboItemComponent[];\n            for (const child of sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public updateScrollPosition() {\n        this.virtDir.getScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onItemActionKey(key: DropDownActionKey) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n                this.handleEnter();\n                break;\n            case DropDownActionKey.SPACE:\n                this.handleSpace();\n                break;\n            case DropDownActionKey.ESCAPE:\n                this.close();\n        }\n    }\n\n    private handleEnter() {\n        if (this.isAddItemFocused()) {\n            this.combo.addItemToCollection();\n        } else {\n            this.close();\n        }\n    }\n\n    private handleSpace() {\n        if (this.isAddItemFocused()) {\n            return;\n        } else {\n            this.selectItem(this.focusedItem);\n        }\n    }\n\n    private isAddItemFocused(): boolean {\n        return this.focusedItem instanceof IgxComboAddItemComponent;\n    }\n\n    public ngAfterViewInit() {\n        this.virtDir.getScroll().addEventListener('scroll', this.scrollHandler);\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.virtDir.getScroll().removeEventListener('scroll', this.scrollHandler);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { Inject, Pipe, PipeTransform} from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { DefaultSortingStrategy } from '../data-operations/sorting-strategy';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n    public transform(collection: any[], searchValue: any, displayKey: any, shouldFilter: boolean) {\n        if (!collection) {\n            return [];\n        }\n        if (!searchValue || !shouldFilter) {\n            return collection;\n        } else {\n            const searchTerm = searchValue.toLowerCase().trim();\n            if (displayKey != null) {\n                return collection.filter(e => e[displayKey].toLowerCase().includes(searchTerm));\n            } else {\n                return collection.filter(e => e.toLowerCase().includes(searchTerm));\n            }\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], groupKey: any, valueKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const sorted = DataUtil.sort(cloneArray(collection), [{\n            fieldName: groupKey,\n            dir: SortingDirection.Asc,\n            ignoreCase: true,\n            strategy: DefaultSortingStrategy.instance()\n        }]);\n        const data = cloneArray(sorted);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < sorted.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== sorted[i][groupKey]) {\n                currentHeader = sorted[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [valueKey]: currentHeader,\n                    [groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n","/**\n * This enumeration is used to configure whether the date/time picker has an editable input with drop down\n * or is readonly - the date/time is selected only through a dialog.\n */\nexport enum InteractionMode {\n    DropDown = 'dropdown',\n    Dialog = 'dialog'\n}\n","import { isIE } from '../core/utils';\n\n/**\n * This enum is used to keep the date validation result.\n *\n *@hidden\n */\nexport const enum DateState {\n    Valid = 'valid',\n    Invalid = 'invalid',\n}\n\n/**\n *@hidden\n */\nconst enum FormatDesc {\n    Numeric = 'numeric',\n    TwoDigits = '2-digit'\n}\n\n/**\n *@hidden\n */\nconst enum DateChars {\n    YearChar = 'y',\n    MonthChar = 'M',\n    DayChar = 'd'\n}\n\n/**\n *@hidden\n */\nconst enum DateParts {\n    Day = 'day',\n    Month = 'month',\n    Year = 'year'\n}\n\n/**\n *@hidden\n */\nexport abstract class DatePickerUtil {\n    private static readonly SHORT_DATE_MASK = 'MM/dd/yy';\n    private static readonly SEPARATOR = 'literal';\n    private static readonly NUMBER_OF_MONTHS = 12;\n    private static readonly PROMPT_CHAR = '_';\n    private static readonly DEFAULT_LOCALE = 'en';\n\n    /**\n     * This method generates date parts structure based on editor mask and locale.\n     * @param maskValue: string\n     * @param locale: string\n     * @returns array containing information about date parts - type, position, format\n     */\n    public static parseDateFormat(maskValue: string, locale: string = DatePickerUtil.DEFAULT_LOCALE): any[] {\n        let dateStruct = [];\n        if (maskValue === undefined && !isIE()) {\n            dateStruct = DatePickerUtil.getDefaultLocaleMask(locale);\n        } else {\n            const mask = (maskValue) ? maskValue : DatePickerUtil.SHORT_DATE_MASK;\n            const maskArray = Array.from(mask);\n            const monthInitPosition = mask.indexOf(DateChars.MonthChar);\n            const dayInitPosition = mask.indexOf(DateChars.DayChar);\n            const yearInitPosition = mask.indexOf(DateChars.YearChar);\n\n            if (yearInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Year,\n                    initialPosition: yearInitPosition,\n                    formatType: DatePickerUtil.getYearFormatType(mask)\n                });\n            }\n\n            if (monthInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Month,\n                    initialPosition: monthInitPosition,\n                    formatType: DatePickerUtil.getMonthFormatType(mask)\n                });\n            }\n\n            if (dayInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Day,\n                    initialPosition: dayInitPosition,\n                    formatType: DatePickerUtil.getDayFormatType(mask)\n                });\n            }\n\n            for (let i = 0; i < maskArray.length; i++) {\n                if (!DatePickerUtil.isDateChar(maskArray[i])) {\n                    dateStruct.push({\n                        type: DatePickerUtil.SEPARATOR,\n                        initialPosition: i,\n                        value: maskArray[i]\n                    });\n                }\n            }\n\n            dateStruct.sort((a, b) => a.initialPosition - b.initialPosition);\n            DatePickerUtil.fillDatePartsPositions(dateStruct);\n        }\n        return dateStruct;\n    }\n\n    /**\n     * This method generates input mask based on date parts.\n     * @param dateStruct array\n     * @returns input mask\n     */\n    public static getInputMask(dateStruct: any[]): string {\n        const inputMask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                inputMask.push(dateStruct[i].value);\n            } else if (dateStruct[i].type === DateParts.Day || dateStruct[i].type === DateParts.Month) {\n                inputMask.push('00');\n            } else if (dateStruct[i].type === DateParts.Year) {\n                switch (dateStruct[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        inputMask.push('0000');\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        inputMask.push('00');\n                        break;\n                    }\n                }\n            }\n        }\n        return inputMask.join('');\n    }\n\n    /**\n     * This method generates editor mask.\n     * @param dateStruct\n     * @returns editor mask\n     */\n    public static getMask(dateStruct: any[]): string {\n        const mask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].formatType) {\n                case FormatDesc.Numeric: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('d');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('M');\n                    } else {\n                        mask.push('yyyy');\n                    }\n                    break;\n                }\n                case FormatDesc.TwoDigits: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('dd');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('MM');\n                    } else {\n                        mask.push('yy');\n                    }\n                }\n            }\n\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                mask.push(dateStruct[i].value);\n            }\n        }\n\n        return mask.join('');\n    }\n    /**\n     * This method parses an input string base on date parts and returns a date and its validation state.\n     * @param dateFormatParts\n     * @param prevDateValue\n     * @param inputValue\n     * @returns object containing a date and its validation state\n     */\n    public static parseDateArray(dateFormatParts: any[], prevDateValue: Date, inputValue: string): any {\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, inputValue);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue);\n        const yearStr = DatePickerUtil.getYearValueFromInput(dateFormatParts, inputValue);\n        const yearFormat = DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType;\n        const day = (dayStr !== '') ? parseInt(dayStr, 10) : 1;\n        const month = (monthStr !== '') ? parseInt(monthStr, 10) - 1 : 0;\n\n        let year;\n        if (yearStr === '') {\n            year = (yearFormat === FormatDesc.TwoDigits) ? '00' : '2000';\n        } else {\n            year = yearStr;\n        }\n        let yearPrefix;\n        if (prevDateValue) {\n            const originalYear = prevDateValue.getFullYear().toString();\n            if (originalYear.length === 4) {\n                yearPrefix = originalYear.substring(0, 2);\n            }\n        } else {\n            yearPrefix = '20';\n        }\n        const fullYear = (yearFormat === FormatDesc.TwoDigits) ? yearPrefix.concat(year) : year;\n\n        if ((month < 0) || (month > 11) || (month === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        if ((day < 1) || (day > DatePickerUtil.daysInMonth(fullYear, month + 1)) || (day === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        return { state: DateState.Valid, date: new Date(fullYear, month, day) };\n    }\n\n    public static maskToPromptChars(mask: string): string {\n        const result = mask.replace(/0|L/g, DatePickerUtil.PROMPT_CHAR);\n        return result;\n    }\n\n    /**\n     * This method replaces prompt chars with empty string.\n     * @param value\n     */\n    public static trimUnderlines(value: string): string {\n        const result = value.replace(/_/g, '');\n        return result;\n    }\n\n    /**\n     * This method is used for spinning date parts.\n     * @param dateFormatParts\n     * @param inputValue\n     * @param position\n     * @param delta\n     * @param isSpinLoop\n     * @return modified text input\n     */\n    public static getModifiedDateInput(dateFormatParts: any[],\n        inputValue: string,\n        position: number,\n        delta: number,\n        isSpinLoop: boolean): string {\n        const datePart = DatePickerUtil.getDatePartOnPosition(dateFormatParts, position);\n        const datePartType = datePart.type;\n        const datePartFormatType = datePart.formatType;\n        let newValue;\n\n        const datePartValue = DatePickerUtil.getDateValueFromInput(dateFormatParts, datePartType, inputValue);\n        newValue = parseInt(datePartValue, 10);\n\n        let maxValue, minValue;\n        const minMax = DatePickerUtil.getMinMaxValue(dateFormatParts, datePart, inputValue);\n        minValue = minMax.min;\n        maxValue = minMax.max;\n\n        if (isNaN(newValue)) {\n            if (minValue === 'infinite') {\n                newValue = 2000;\n            } else {\n                newValue = minValue;\n            }\n        }\n        let tempValue = newValue;\n        tempValue += delta;\n\n        // Infinite loop for full years\n        if (maxValue === 'infinite' && minValue === 'infinite') {\n            newValue = tempValue;\n        }\n\n        if (isSpinLoop) {\n            if (tempValue > maxValue) {\n                tempValue = minValue;\n            }\n            if (tempValue < minValue) {\n                tempValue = maxValue;\n            }\n            newValue = tempValue;\n        } else {\n            if (tempValue <= maxValue && tempValue >= minValue) {\n                newValue = tempValue;\n            }\n        }\n\n        const startIdx = datePart.position[0];\n        const endIdx = datePart.position[1];\n        const start = inputValue.slice(0, startIdx);\n        const end = inputValue.slice(endIdx, inputValue.length);\n        let changedPart: string;\n\n        const prefix = DatePickerUtil.getNumericFormatPrefix(datePartFormatType);\n        changedPart = (newValue < 10) ? `${prefix}${newValue}` : `${newValue}`;\n\n        return `${start}${changedPart}${end}`;\n    }\n\n    /**\n     * This method returns date input with prompt chars.\n     * @param dateFormatParts\n     * @param date\n     * @param inputValue\n     * @returns date input including prompt chars\n     */\n    public static addPromptCharsEditMode(dateFormatParts: any[], date: Date, inputValue: string): string {\n        const dateArray = Array.from(inputValue);\n        for (let i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].formatType === FormatDesc.Numeric) {\n                if ((dateFormatParts[i].type === DateParts.Day && date.getDate() < 10)\n                    || (dateFormatParts[i].type === DateParts.Month && date.getMonth() + 1 < 10)) {\n                    dateArray.splice(dateFormatParts[i].position[0], 0, DatePickerUtil.PROMPT_CHAR);\n                    dateArray.join('');\n                }\n            }\n        }\n        return dateArray.join('');\n    }\n\n    /**\n     * This method checks if date input is done.\n     * @param dateFormatParts\n     * @param input\n     * @returns input completeness\n     */\n    public static checkForCompleteDateInput(dateFormatParts: any[], input: string): string {\n        const dayValue = DatePickerUtil.getDayValueFromInput(dateFormatParts, input);\n        const monthValue = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input);\n        const yearValue = DatePickerUtil.getYearValueFromInput(dateFormatParts, input);\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, input, false);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input, false);\n\n        if (DatePickerUtil.isFullInput(dayValue, dayStr)\n            && DatePickerUtil.isFullInput(monthValue, monthStr)\n            && DatePickerUtil.isFullYearInput(dateFormatParts, yearValue)) {\n            return 'complete';\n        } else if (dayValue === '' && monthValue === '' && yearValue === '') {\n            return 'empty';\n        } else if (dayValue === '' || monthValue === '' || yearValue === '') {\n            return 'partial';\n        }\n        return '';\n    }\n\n    private static getYearFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.YearChar, 'g')).length) {\n            case 1: {\n                // y (2020)\n                return FormatDesc.Numeric;\n            }\n            case 4: {\n                // yyyy (2020)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // yy (20)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getMonthFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.MonthChar, 'g')).length) {\n            case 1: {\n                // M (8)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // MM (08)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDayFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.DayChar, 'g')).length) {\n            case 1: {\n                // d (6)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // dd (06)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDefaultLocaleMask(locale: string) {\n        const dateStruct = [];\n        const formatter = new Intl.DateTimeFormat(locale);\n        const formatToParts = formatter.formatToParts(new Date());\n        for (let i = 0; i < formatToParts.length; i++) {\n            if (formatToParts[i].type === DatePickerUtil.SEPARATOR) {\n                dateStruct.push({\n                    type: DatePickerUtil.SEPARATOR,\n                    value: formatToParts[i].value\n                });\n            } else {\n                dateStruct.push({\n                    type: formatToParts[i].type,\n                });\n            }\n        }\n        const formatterOptions = formatter.resolvedOptions();\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].type) {\n                case DateParts.Day: {\n                    dateStruct[i].formatType = formatterOptions.day;\n                    break;\n                }\n                case DateParts.Month: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n                case DateParts.Year: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n            }\n        }\n        DatePickerUtil.fillDatePartsPositions(dateStruct);\n        return dateStruct;\n    }\n\n    private static isDateChar(char: string): boolean {\n        return (char === DateChars.YearChar || char === DateChars.MonthChar || char === DateChars.DayChar);\n    }\n\n    private static getNumericFormatPrefix(formatType: string): string {\n        switch (formatType) {\n            case FormatDesc.TwoDigits: {\n                return '0';\n            }\n            case FormatDesc.Numeric: {\n                return DatePickerUtil.PROMPT_CHAR;\n            }\n        }\n    }\n\n    private static getMinMaxValue(dateFormatParts: any[], datePart, inputValue: string): any {\n        let maxValue, minValue;\n        switch (datePart.type) {\n            case DateParts.Month: {\n                minValue = 1;\n                maxValue = DatePickerUtil.NUMBER_OF_MONTHS;\n                break;\n            }\n            case DateParts.Day: {\n                minValue = 1;\n                maxValue = DatePickerUtil.daysInMonth(\n                    DatePickerUtil.getFullYearFromString(DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year), inputValue),\n                    parseInt(DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue), 10));\n                break;\n            }\n            case DateParts.Year: {\n                if (datePart.formatType === FormatDesc.TwoDigits) {\n                    minValue = 0;\n                    maxValue = 99;\n                } else {\n                    // Infinite loop\n                    minValue = 'infinite';\n                    maxValue = 'infinite';\n                }\n                break;\n            }\n        }\n        return { min: minValue, max: maxValue };\n    }\n\n    private static daysInMonth(fullYear: number, month: number): number {\n        return new Date(fullYear, month, 0).getDate();\n    }\n\n    private static getDateValueFromInput(dateFormatParts: any[], type: DateParts, inputValue: string, trim: boolean = true): string {\n        const partPosition = DatePickerUtil.getDateFormatPart(dateFormatParts, type).position;\n        const result = inputValue.substring(partPosition[0], partPosition[1]);\n        return (trim) ? DatePickerUtil.trimUnderlines(result) : result;\n    }\n\n    private static getDayValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Day, inputValue, trim);\n    }\n\n    private static getMonthValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Month, inputValue, trim);\n    }\n\n    private static getYearValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Year, inputValue, trim);\n    }\n\n    private static getDateFormatPart(dateFormatParts: any[], type: DateParts): any {\n        const result = dateFormatParts.filter((datePart) => (datePart.type === type))[0];\n        return result;\n    }\n\n    private static isFullInput(value: any, input: string): boolean {\n        return (value !== '' && input.length === 2 && input.charAt(1) !== DatePickerUtil.PROMPT_CHAR);\n    }\n\n    private static isFullYearInput(dateFormatParts: any[], value: any): boolean {\n        switch (DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType) {\n            case FormatDesc.Numeric: {\n                return (value !== '' && value.length === 4);\n            }\n            case FormatDesc.TwoDigits: {\n                return (value !== '' && value.length === 2);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    private static getDatePartOnPosition(dateFormatParts: any[], position: number) {\n        const result = dateFormatParts.filter((element) =>\n            element.position[0] <= position && position <= element.position[1] && element.type !== DatePickerUtil.SEPARATOR)[0];\n        return result;\n    }\n\n    private static getFullYearFromString(yearPart, inputValue): number {\n        return parseInt(inputValue.substring(yearPart.position[0], yearPart.position[1]), 10);\n    }\n\n    private static fillDatePartsPositions(dateArray: any[]): void {\n        let currentPos = 0;\n\n        for (let i = 0; i < dateArray.length; i++) {\n            // Day|Month part positions\n            if (dateArray[i].type === DateParts.Day || dateArray[i].type === DateParts.Month) {\n                // Offset 2 positions for number\n                dateArray[i].position = [currentPos, currentPos + 2];\n                currentPos += 2;\n            } else if (dateArray[i].type === DateParts.Year) {\n                // Year part positions\n                switch (dateArray[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        // Offset 4 positions for full year\n                        dateArray[i].position = [currentPos, currentPos + 4];\n                        currentPos += 4;\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        // Offset 2 positions for short year\n                        dateArray[i].position = [currentPos, currentPos + 2];\n                        currentPos += 2;\n                        break;\n                    }\n                }\n            } else if (dateArray[i].type === DatePickerUtil.SEPARATOR) {\n                // Separator positions\n                dateArray[i].position = [currentPos, currentPos + 1];\n                currentPos++;\n            }\n        }\n    }\n}\n\n\n","import { PipeTransform, Pipe, Inject } from '@angular/core';\nimport { IGX_DATE_PICKER_COMPONENT, IDatePicker } from './date-picker.common';\nimport { DatePickerUtil } from './date-picker.utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'displayValue'\n})\nexport class DatePickerDisplayValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (value !== '') {\n            if (value === DatePickerUtil.maskToPromptChars(this._datePicker.inputMask)) {\n                return '';\n            }\n            this._datePicker.rawDateString = value;\n            return DatePickerUtil.trimUnderlines(value);\n        }\n        return '';\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'inputValue'\n})\nexport class DatePickerInputValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (this._datePicker.invalidDate !== '') {\n            return this._datePicker.invalidDate;\n        } else {\n            if (this._datePicker.value === null || this._datePicker.value === undefined) {\n                return DatePickerUtil.maskToPromptChars(this._datePicker.inputMask);\n            } else {\n                return DatePickerUtil.addPromptCharsEditMode(this._datePicker.dateFormatParts, this._datePicker.value, value);\n            }\n        }\n    }\n}\n","/** @hidden */\nexport const IGX_DATE_PICKER_COMPONENT = 'IgxDatePickerComponentToken';\n\n/** @hidden */\nexport interface IDatePicker {\n    value: Date;\n    mask: string;\n    inputMask: string;\n    rawDateString: string;\n    dateFormatParts: any[];\n    invalidDate: string;\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\n\n/**\n * IgxDatePickerTemplateDirective can be used to re-template the date-picker input-group.\n *\n * @hidden\n */\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * IgxDatePickerActionsDirective can be used to re-template the dropdown/dialog action buttons.\n */\n@Directive({\n    selector: '[igxDatePickerActions]'\n})\nexport class IgxDatePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';\nimport { IgxCalendarComponent } from '../calendar';\nimport { InteractionMode } from '../core/enums';\nimport { IgxDatePickerActionsDirective } from './date-picker.directives';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-calendar-container',\n    styles: [':host {display: block;}'],\n    templateUrl: 'calendar-container.component.html'\n})\nexport class IgxCalendarContainerComponent {\n    @ViewChild('calendar', { static: true })\n    public calendar: IgxCalendarComponent;\n\n    @Input()\n    public mode: InteractionMode = InteractionMode.Dialog;\n\n    @Input()\n    public vertical = false;\n\n    @Input()\n    public cancelButtonLabel: string;\n\n    @Input()\n    public todayButtonLabel: string;\n\n    @Input()\n    public datePickerActions: IgxDatePickerActionsDirective;\n\n    @Output()\n    public onClose = new EventEmitter();\n\n    @Output()\n    public onTodaySelection = new EventEmitter();\n\n    @HostBinding('class.igx-date-picker')\n    public styleClass = 'igx-date-picker';\n\n    @HostBinding('class.igx-date-picker--dropdown')\n    get dropdownCSS(): boolean {\n        return this.mode === InteractionMode.DropDown;\n    }\n\n    @HostBinding('class.igx-date-picker--vertical')\n    get verticalCSS(): boolean {\n        return this.vertical && this.mode === InteractionMode.Dialog;\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    @HostListener('keydown.alt.arrowup', ['$event'])\n    public onEscape(event) {\n        event.preventDefault();\n        this.onClose.emit();\n    }\n\n    /**\n     * Returns whether the date-picker is in readonly dialog mode.\n     *\n     * @hidden\n    */\n    public get isReadonly() {\n        return this.mode === InteractionMode.Dialog;\n    }\n\n    /**\n     * Emits close event for the calendar.\n     */\n    public closeCalendar() {\n        this.onClose.emit();\n    }\n\n    /**\n    * Emits today selection event for the calendar.\n    */\n    public triggerTodaySelection() {\n        this.onTodaySelection.emit();\n    }\n}\n","import { CommonModule, formatDate } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    Output,\n    ViewChild,\n    ElementRef,\n    TemplateRef,\n    Inject,\n    ChangeDetectorRef,\n    HostListener,\n    NgModuleRef,\n    OnInit,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS,\n    isDateInRanges\n} from '../calendar/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputDirective, IgxInputGroupComponent } from '../input-group/index';\nimport { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';\nimport { filter, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { IgxTextSelectionModule} from '../directives/text-selection/text-selection.directive';\nimport {\n    OverlaySettings,\n    IgxOverlayService,\n    PositionSettings,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy,\n    OverlayCancelableEventArgs\n} from '../services/index';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport {\n    DatePickerUtil,\n    DateState\n} from './date-picker.utils';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { KEYS, CancelableBrowserEventArgs, isIE, isEqual, IBaseEventArgs } from '../core/utils';\nimport { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';\nimport { IgxCalendarContainerComponent } from './calendar-container.component';\nimport { InteractionMode } from '../core/enums';\nimport { fadeIn, fadeOut } from '../animations/fade';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport enum PredefinedFormatOptions {\n    ShortDate = 'shortDate',\n    MediumDate = 'mediumDate',\n    LongDate = 'longDate',\n    FullDate = 'fullDate'\n}\n\n/**\n * **Ignite UI for Angular Date Picker** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)\n *\n * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.\n *\n * Example:\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDatePickerComponent,\n            multi: true\n        }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-date-picker',\n    templateUrl: 'date-picker.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor, EditorProvider, OnInit, AfterViewInit, OnDestroy {\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label.\n     * The default label is 'Date'.\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public label = 'Date';\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label visibility.\n     * By default the visibility is set to true.\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     *An @Input property that sets locales. Default locale is en.\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input() public locale: 'en';\n\n    /**\n     *An @Input property that sets on which day the week starts.\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     *Returns the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatOptions = this.datePicker.formatOptions;\n     *}\n     *```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets/gets whether the inactive dates (dates that are out of the current month) will be hidden.\n     * Default value is `false`.\n     * ```html\n     * <igx-date-picker [hideOutsideDays]=\"true\"></igx-date-picker>\n     * ```\n     * ```typescript\n     * let hideOutsideDays = this.datePicker.hideOutsideDays;\n     * ```\n     */\n    @Input()\n    public hideOutsideDays: boolean;\n\n    /**\n     * Sets/gets the number of month views displayed.\n     * Default value is `1`.\n     * ```html\n     * <igx-date-picker [monthsViewNumber]=\"2\"></igx-date-picker>\n     * ```\n     * ```typescript\n     * let monthViewsDisplayed = this.datePicker.monthsViewNumber;\n     * ```\n     */\n    @Input()\n    public monthsViewNumber = 1;\n\n    /**\n     *Sets the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Options;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Options = {\n     *        day: \"numeric\",\n     *        month: \"long\",\n     *        weekday: \"long\",\n     *        year: \"numeric\"\n     *    }\n     *this.datePicker.formatOptions = this.Options;\n     *}\n     *```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     *Returns the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let format = this.datePicker.format;\n     *}\n     *```\n     */\n    @Input()\n    public get format(): string {\n        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;\n    }\n\n    /**\n    *Sets the date format of the `IgxDatePickerComponent` when in editable dropdown mode.\n    *```typescript\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *this.datePicker.format = 'yyyy-M-d';\n    *}\n    *```\n    */\n    public set format(format: string) {\n        this._format = format;\n    }\n\n    /**\n     *Returns the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let mask = this.datePicker.mask;\n     *}\n     *```\n     */\n    @Input()\n    public mask: string;\n\n    /**\n     *Returns the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatViews = this.datePicker.formatViews;\n     *}\n     *```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    /**\n     *Sets the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Views;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Views = {day:false, month: false, year:false};\n     *    this.datePicker.formatViews = this.Views;\n     *}\n     *```\n     */\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * ```\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * ```\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    @Input()\n    public get modalOverlaySettings(): OverlaySettings {\n        return this._modalOverlay;\n    }\n\n    public set modalOverlaySettings(value: OverlaySettings) {\n        this._modalOverlay = value;\n    }\n\n    @Input()\n    public get dropDownOverlaySettings(): OverlaySettings {\n        return this._dropDownOverlaySettings || this._defaultDropDownOverlaySettings;\n    }\n\n    public set dropDownOverlaySettings(value: OverlaySettings) {\n        this._dropDownOverlaySettings = value;\n    }\n\n    /**\n     *Returns the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *public selection(event){\n     *    let selectedDate = this.datePicker.displayData;\n     *    alert(selectedDate);\n     *}\n     *```\n     *```html\n     *<igx-date-picker #MyDatePicker (onSelection)=\"selection()\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    public get displayData(): string {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n        return '';\n    }\n\n    /**\n     hidden\n     */\n    public get transformedDate(): string {\n        if (this._value) {\n            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);\n            this.isEmpty = false;\n        } else {\n            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';\n        }\n        return this._transformedDate;\n    }\n\n    public set transformedDate(value) {\n        this._transformedDate = value;\n    }\n\n    constructor(@Inject(IgxOverlayService) private _overlayService: IgxOverlayService, public element: ElementRef,\n        private _cdr: ChangeDetectorRef, private _moduleRef: NgModuleRef<any>) { }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxDatePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxDatePickerComponent\n     */\n    get context() {\n        return {\n            disabled: this.disabled,\n            disabledDates: this.disabledDates,\n            displayData: this.displayData,\n            format: this.format,\n            isSpinLoop: this.isSpinLoop,\n            label: this.label,\n            labelVisibility: this.labelVisibility,\n            locale: this.locale,\n            mask: this.mask,\n            mode: this.mode,\n            specialDates: this.specialDates,\n            value: this.value,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    /**\n     *An @Input property that gets/sets the selected date.\n     *```typescript\n     *public date: Date = new Date();\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public get value(): Date {\n        return this._value;\n    }\n\n    public set value(date: Date) {\n        this._value = date;\n        this._onChangeCallback(date);\n    }\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     *An @Input property that applies a custom formatter function on the selected or passed date.\n     *```typescript\n     *public date: Date = new Date();\n     *private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     *private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *public formatter = (date: Date) => { return `You selected\n     *                     ${this.dayFormatter.format(date)},\n     *                     ${date.getDate()} ${this.monthFormatter.format(date)},\n     *                     ${date.getFullYear()}`;\n     *}\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     *An @Input property that disables the `IgxDatePickerComponent`.\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     *An @Input property that sets the orientation of the `IgxDatePickerComponent` header.\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     *An @Input property that renders today button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     *An @Input property that renders cancel button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     *An @Input property that sets whether `IgxDatePickerComponent` is in dialog or drop down mode.\n     *```html\n     *<igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *An @Input property that sets whether the `IgxDatePickerComponent` date parts would spin continuously or stop when min/max is reached.\n     *```html\n     *<igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-date-picker [outlet]=\"outlet\"></igx-date-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker calendar has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxDatePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n    */\n    @Output()\n    public onOpened = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxDatePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     *An event that is emitted after the `IgxDatePickerComponent` is closed.\n    */\n    @Output()\n    public onClosed = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * An event that is emitted when the `IgxDatePickerComponent` is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     *An @Output property that is fired when selection is made in the calendar.\n     *```typescript\n     *public selection(event){\n     *    alert(\"A date has been selected!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     *An @Output property that is fired when date picker value is changed.\n     *```typescript\n     *public valueChanged(event){\n        *    alert(\"Date picker value is changed\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (valueChange)=\"valueChanged($event)\" mode=\"dropdown\"></igx-date-picker>\n        *```\n    */\n    @Output()\n    public valueChange = new EventEmitter<Date>();\n\n    /**\n    *An @Output property that fires when the user types/spins to a disabled date in the date-picker editor.\n    *```typescript\n    *public onDisabledDate(event){\n    *    alert(\"This date is disabled!\");\n    *}\n    *```\n    *```html\n    *<igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n    *```\n    */\n    @Output()\n    public onDisabledDate = new EventEmitter<IDatePickerDisabledDateEventArgs>();\n\n    /**\n    *An @Output property that fires when the user types/spins invalid date in the date-picker editor.\n    *```typescript\n    *public onValidationFailed(event){\n        *    alert(\"This date is not valid!\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n        *```\n        */\n    @Output()\n    public onValidationFailed = new EventEmitter<IDatePickerValidationFailedEventArgs>();\n\n    /*\n     * @hidden\n     */\n    @ViewChild('readOnlyDatePickerTemplate', { read: TemplateRef, static: true })\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableDatePickerTemplate', { read: TemplateRef, static: true })\n    protected editableDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild(IgxInputGroupComponent)\n    protected inputGroup: IgxInputGroupComponent;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableInput', { read: ElementRef })\n    protected editableInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ViewChild('readonlyInput', { read: ElementRef })\n    protected readonlyInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ContentChild(IgxInputDirective)\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective })\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerActionsDirective, { read: IgxDatePickerActionsDirective })\n    public datePickerActionsDirective: IgxDatePickerActionsDirective;\n\n    public calendar: IgxCalendarComponent;\n    public hasHeader = true;\n    public collapsed = true;\n    public displayValuePipe = new DatePickerDisplayValuePipe(this);\n    public inputValuePipe = new DatePickerInputValuePipe(this);\n    public dateFormatParts = [];\n    public rawDateString: string;\n    public inputMask: string;\n    public isEmpty = true;\n    public invalidDate = '';\n\n    private readonly spinDelta = 1;\n    private readonly defaultLocale = 'en';\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    private _destroy$ = new Subject<boolean>();\n    private _componentID: string;\n    private _format: string;\n    private _value: Date;\n    private _isInEditMode: boolean;\n    private _disabledDates: DateRangeDescriptor[] = null;\n    private _specialDates: DateRangeDescriptor[] = null;\n    private _modalOverlay: OverlaySettings;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _positionSettings: PositionSettings;\n    private _defaultDropDownOverlaySettings: OverlaySettings;\n    private _modalOverlaySettings: OverlaySettings;\n    private _transformedDate;\n    private _onOpen = new EventEmitter<IgxDatePickerComponent>();\n    private _onClose = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n    * @hidden\n    */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event: KeyboardEvent) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n    /**\n     *Method that sets the selected date.\n     *```typescript\n     *public date = new Date();\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.writeValue(this.date);\n     *}\n     *```\n     *@param value The date you want to select.\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public writeValue(value: Date) {\n        this.value = value;\n        this._cdr.markForCheck();\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\n\n    /** @hidden */\n    public getEditElement() {\n        const inputElement = this.editableInput || this.readonlyInput || this.input;\n        return (inputElement) ? inputElement.nativeElement : null;\n    }\n\n    /** @hidden */\n    public getInputGroupElement() {\n        return this.inputGroup ? this.inputGroup.element.nativeElement : null;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        this._positionSettings = {\n            openAnimation: fadeIn,\n            closeAnimation: fadeOut\n        };\n\n        this._defaultDropDownOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(this._positionSettings),\n            outlet: this.outlet\n        };\n\n        this._modalOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: true,\n            outlet: this.outlet\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpening(eventArgs);\n            });\n\n        this._overlayService.onOpened.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onOpened();\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onClosed();\n            });\n\n        this._overlayService.onClosing.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n                // If canceled in a user onClosing handler\n                if (event.cancel) {\n                    return;\n                }\n                // Do not focus the input if clicking outside in dropdown mode\n                const input = this.getEditElement();\n                if (input && !(event.event && this.mode === InteractionMode.DropDown)) {\n                    input.focus();\n                }\n            });\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);\n            if (this.mask === undefined) {\n                this.mask = DatePickerUtil.getMask(this.dateFormatParts);\n            }\n            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);\n        }\n    }\n\n    ngAfterViewInit() {\n        if (this.mode === InteractionMode.DropDown && this.editableInput) {\n            fromEvent(this.editableInput.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((res) => this.onKeyDown(res));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._componentID) {\n            this._overlayService.hide(this._componentID);\n        }\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.triggerTodaySelection();\n     *}\n     *```\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public triggerTodaySelection(): void {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.selectDate(this.date);\n     *}\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public selectDate(date: Date): void {\n        const oldValue =  this.value;\n        this.value = date;\n\n        this.emitValueChangeEvent(oldValue, this.value );\n        this.onSelection.emit(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.deselectDate();\n     *}\n     * ```\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public deselectDate(): void {\n        const oldValue =  this.value;\n        this.value = null;\n        this.emitValueChangeEvent(oldValue, this.value );\n        if (this.calendar) {\n            this.calendar.deselectDate();\n        }\n    }\n\n    /**\n     * Opens the date picker drop down or dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-date-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxDatePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayData=\"displayData\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayData\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-date-picker>\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.collapsed) {\n            return;\n        }\n        switch (this.mode) {\n            case InteractionMode.Dialog: {\n                this.hasHeader = true;\n                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n            case InteractionMode.DropDown: {\n                this.hasHeader = false;\n                if (target) {\n                    this.dropDownOverlaySettings.positionStrategy.settings.target = target;\n                }\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent,\n                    this.dropDownOverlaySettings, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Close the calendar.\n     *\n     * @hidden\n     */\n    public closeCalendar(): void {\n        this._overlayService.hide(this._componentID);\n    }\n\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden\n     */\n    public clear(): void {\n        this.isEmpty = true;\n        this.invalidDate = '';\n        this.deselectDate();\n        this._setCursorPosition(0);\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden\n     */\n    public handleSelection(date: Date): void {\n        if (this.value) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n        const oldValue =  this.value;\n        this.value = date;\n\n        this.emitValueChangeEvent(oldValue, this.value );\n        this.calendar.viewDate = date;\n        this.closeCalendar();\n        this.onSelection.emit(date);\n    }\n\n    /**\n    * Evaluates when the input blur event was fired\n    * and re-calculate the date picker value.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onBlur(event): void {\n        this._isInEditMode = false;\n        this.calculateDate(event.target.value, event.type);\n    }\n\n    /**\n    * Evaluates when the input focus event was fired\n    * and re-calculate the editor text.\n    *\n    * @param event\n    * @hidden\n    */\n    public onFocus(): void {\n        this._isInEditMode = true;\n        if (this.value && this.invalidDate === '') {\n            this._transformedDate = this._getEditorDate(this.value);\n        }\n    }\n\n    /**\n    * Evaluates when the keydown event was fired for up/down keys\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onKeyDown(event) {\n        switch (event.key) {\n            case KEYS.UP_ARROW:\n            case KEYS.UP_ARROW_IE:\n                event.preventDefault();\n                event.stopPropagation();\n                this.spinValue(event.target.value, 1, event.type);\n                break;\n            case KEYS.DOWN_ARROW:\n            case KEYS.DOWN_ARROW_IE:\n                if (event.altKey) {\n                    this.openDialog(this.getInputGroupElement());\n                } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.spinValue(event.target.value, -1, event.type);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n    * Evaluates when the mouse wheel event was fired\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onWheel(event) {\n        if (this._isInEditMode) {\n            event.preventDefault();\n            event.stopPropagation();\n            const sign = (event.deltaY > 0) ? -1 : 1;\n            this.spinValue(event.target.value, sign, event.type);\n        }\n    }\n\n    /**\n    * Evaluates when input event was fired in editor.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onInput(event) {\n        const targetValue = event.target.value;\n        const cursorPosition = this._getCursorPosition();\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);\n        this._isInEditMode = true;\n\n        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {\n            this.isEmpty = false;\n        }\n\n        // If all date parts are completed, change the date-picker value, stay in edit mode\n        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {\n            this._transformedDate = targetValue;\n            this.calculateDate(targetValue, event.type);\n            this._setCursorPosition(cursorPosition);\n        } else if (checkInput === 'partial') {\n            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.\n            this.deselectDate();\n            requestAnimationFrame(() => {\n                this.getEditElement().value = targetValue;\n                this._setCursorPosition(cursorPosition);\n            });\n        } else if (checkInput === 'empty') {\n            // Total clean-up as input is deleted.\n            this.isEmpty = true;\n            this.deselectDate();\n        }\n    }\n\n    private emitValueChangeEvent(oldValue: Date, newValue: Date) {\n        if (!isEqual(oldValue, newValue)) {\n            this.valueChange.emit(newValue);\n        }\n    }\n\n    private calculateDate(dateString: string, invokedByEvent: string): void {\n        if (dateString !== '') {\n            const prevDateValue = this.value;\n            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;\n            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);\n\n            if (newDateArray.state === DateState.Valid) {\n                const newValue = newDateArray.date;\n                // Restore the time part if any\n                if (prevDateValue) {\n                    newValue.setHours(prevDateValue.getHours());\n                    newValue.setMinutes(prevDateValue.getMinutes());\n                    newValue.setSeconds(prevDateValue.getSeconds());\n                    newValue.setMilliseconds(prevDateValue.getMilliseconds());\n                }\n\n                if (this.disabledDates === null\n                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {\n                        const oldValue =  this.value;\n                        this.value = newValue;\n\n                        this.emitValueChangeEvent(oldValue, this.value );\n                        this.invalidDate = '';\n                } else {\n                    const args: IDatePickerDisabledDateEventArgs = {\n                        datePicker: this,\n                        currentValue: newValue,\n                    };\n                    this.onDisabledDate.emit(args);\n                }\n            } else {\n                const args: IDatePickerValidationFailedEventArgs = {\n                    datePicker: this,\n                    prevValue: prevDateValue\n                };\n                this.invalidDate = dateString;\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    private spinValue(inputValue: string, sign: number, eventType: string): void {\n        this._isInEditMode = true;\n        this.isEmpty = false;\n        const cursorPosition = this._getCursorPosition();\n\n        const modifiedInputValue =\n            DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);\n\n        this.getEditElement().value = modifiedInputValue;\n        this._setCursorPosition(cursorPosition);\n\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);\n        if (checkInput === 'complete') {\n            this._isInEditMode = true;\n            this.calculateDate(modifiedInputValue, eventType);\n            this._setCursorPosition(cursorPosition);\n        }\n    }\n\n    private _onOpening(event: OverlayCancelableEventArgs) {\n        this._initializeCalendarContainer(event.componentRef.instance as IgxCalendarContainerComponent);\n        this.collapsed = false;\n    }\n\n    private _onOpened(): void {\n        this._onTouchedCallback();\n        this.onOpened.emit(this);\n\n        // TODO: remove this line after deprecating 'onOpen'\n        this._onOpen.emit(this);\n\n        if (this.calendar) {\n            this._focusCalendarDate();\n        }\n    }\n\n    private _onClosed(): void {\n        this.collapsed = true;\n        this._componentID = null;\n        this.onClosed.emit(this);\n\n        // TODO: remove this line after deprecating 'onClose'\n        this.onClose.emit(this);\n    }\n\n    private _initializeCalendarContainer(componentInstance: IgxCalendarContainerComponent) {\n        this.calendar = componentInstance.calendar;\n        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);\n        this.calendar.hasHeader = this.hasHeader;\n        this.calendar.formatOptions = this.formatOptions;\n        this.calendar.formatViews = this.formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = isVertical;\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.specialDates = this.specialDates;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.headerTemplate = this.headerTemplate;\n        this.calendar.subheaderTemplate = this.subheaderTemplate;\n        this.calendar.hideOutsideDays = this.hideOutsideDays;\n        this.calendar.monthsViewNumber = this.monthsViewNumber;\n        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n\n        componentInstance.mode = this.mode;\n        componentInstance.vertical = isVertical;\n        componentInstance.cancelButtonLabel = this.cancelButtonLabel;\n        componentInstance.todayButtonLabel = this.todayButtonLabel;\n        componentInstance.datePickerActions = this.datePickerActionsDirective;\n\n        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());\n        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());\n    }\n\n    // Focus a date, after the calendar appearance into DOM.\n    private _focusCalendarDate(): void {\n        requestAnimationFrame(() => {\n            this.calendar.daysView.focusActiveDate();\n        });\n    }\n\n    private _setLocaleToDate(value: Date): string {\n        if (isIE()) {\n            // this is a workaround fixing the following IE11 issue:\n            // IE11 has added character code 8206 (mark for RTL) to the output of toLocaleDateString() that\n            // precedes each portion that comprises the total date... For more information read this article:\n            // tslint:disable-next-line: max-line-length\n            // https://www.csgpro.com/blog/2016/08/a-bad-date-with-internet-explorer-11-trouble-with-new-unicode-characters-in-javascript-date-strings/\n            const localeDateStrIE = new Date(value.getFullYear(), value.getMonth(), value.getDate(),\n                value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());\n            return localeDateStrIE.toLocaleDateString(this.locale);\n        }\n\n        return value.toLocaleDateString(this.locale);\n    }\n\n    private _getCursorPosition(): number {\n        return this.getEditElement().selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        requestAnimationFrame(() => {\n            this.getEditElement().setSelectionRange(start, end);\n        });\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);\n    }\n\n    /*\n    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode\n    * using @angular/common formatDate method: https://angular.io/api/common/formatDate\n    * @param  value: string | number | Date\n    * @returns formatted string\n    */\n    private _getDisplayDate(value: any): string {\n        if (this.format && !this.formatter) {\n            const locale = this.locale || this.defaultLocale;\n            return formatDate(value, this.format, locale);\n        } else {\n            return this._customFormatChecker(this.formatter, value);\n        }\n    }\n\n    private _getEditorDate(value: any) {\n        const locale = this.locale || this.defaultLocale;\n        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';\n        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);\n    }\n\n    private _onTouchedCallback: () => void = () => { };\n\n    private _onChangeCallback: (_: Date) => void = () => { };\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDatePickerComponent,\n        IgxCalendarContainerComponent,\n        IgxDatePickerActionsDirective,\n        IgxDatePickerTemplateDirective,\n        DatePickerDisplayValuePipe,\n        DatePickerInputValuePipe\n    ],\n    entryComponents: [\n        IgxCalendarContainerComponent\n    ],\n    exports: [\n        IgxDatePickerComponent,\n        IgxDatePickerTemplateDirective,\n        IgxDatePickerActionsDirective,\n        DatePickerDisplayValuePipe,\n        DatePickerInputValuePipe\n    ],\n    imports: [\n        CommonModule,\n        IgxIconModule,\n        IgxInputGroupModule,\n        IgxCalendarModule,\n        IgxButtonModule,\n        IgxRippleModule,\n        IgxMaskModule,\n        IgxTextSelectionModule\n    ]\n})\nexport class IgxDatePickerModule { }\n","import {\n    Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n    SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, Output, EventEmitter\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { IBaseEventArgs } from '../../core/utils';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxTemplateOutlet]' })\nexport class IgxTemplateOutletDirective implements OnChanges {\n    private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n    * The embedded views cache. Collection is key-value paired.\n    * Key is the template id, value is the embedded view for the related template.\n    */\n    private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n    @Input() public igxTemplateOutletContext !: Object;\n\n    @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n    @Output()\n    public onViewCreated = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onViewMoved = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onCachedViewLoaded = new EventEmitter<ICachedViewLoadedEventArgs>();\n\n    @Output()\n    public onBeforeViewDetach = new EventEmitter<IViewChangeEventArgs>();\n\n    constructor(public _viewContainerRef: ViewContainerRef, private _zone: NgZone, public cdr: ChangeDetectorRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const actionType: TemplateOutletAction = this._getActionType(changes);\n        switch (actionType) {\n            case TemplateOutletAction.CreateView: this._recreateView(); break;\n            case TemplateOutletAction.MoveView: this._moveView(); break;\n            case TemplateOutletAction.UseCachedView: this._useCachedView(); break;\n            case TemplateOutletAction.UpdateViewContext: this._updateExistingContext(this.igxTemplateOutletContext); break;\n        }\n    }\n\n    public cleanCache() {\n        this._embeddedViewsMap.forEach((item) => {\n            if (!item.destroyed) {\n                item.destroy();\n            }\n        });\n        this._embeddedViewsMap.clear();\n    }\n\n    public cleanView(tmplID) {\n        const embView = this._embeddedViewsMap.get(tmplID);\n        if (embView) {\n            embView.destroy();\n            this._embeddedViewsMap.delete(tmplID);\n        }\n    }\n\n    private _recreateView() {\n        const prevIndex = this._viewRef ? this._viewContainerRef.indexOf(this._viewRef) : -1;\n        // detach old and create new\n        if (prevIndex !== -1) {\n            this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            this._viewContainerRef.detach(prevIndex);\n        }\n        if (this.igxTemplateOutlet) {\n            this._viewRef = this._viewContainerRef.createEmbeddedView(\n                this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            this.onViewCreated.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], this._viewRef);\n                }\n            }\n        }\n    }\n\n    private _moveView() {\n        // using external view and inserting it in current view.\n        const view = this.igxTemplateOutletContext['moveView'];\n        const owner = this.igxTemplateOutletContext['owner'];\n        if (view !== this._viewRef) {\n            if (owner._viewContainerRef.indexOf(view) !== -1) {\n                // detach in case view it is attached somewhere else at the moment.\n                this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n                owner._viewContainerRef.detach(owner._viewContainerRef.indexOf(view));\n            }\n            if (this._viewRef && this._viewContainerRef.indexOf(this._viewRef) !== -1) {\n                this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = view;\n            this._viewContainerRef.insert(view, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n            this.onViewMoved.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        } else {\n            this._updateExistingContext(this.igxTemplateOutletContext);\n        }\n    }\n    private _useCachedView() {\n        // use view for specific template cached in the current template outlet\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        // if view exists, but template has been changed and there is a view in the cache with the related template\n        // then detach old view and insert the stored one with the matching template\n        // after that update its context.\n        if (this._viewContainerRef.length > 0) {\n            this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        }\n\n        this._viewRef = cachedView;\n        const oldContext = this._cloneContext(cachedView.context);\n        this._viewContainerRef.insert(this._viewRef, 0);\n        this._updateExistingContext(this.igxTemplateOutletContext);\n        this.onCachedViewLoaded.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext, oldContext });\n    }\n\n    private _shouldRecreateView(changes: SimpleChanges): boolean {\n        const ctxChange = changes['igxTemplateOutletContext'];\n        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n\n    private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _updateExistingContext(ctx: Object): void {\n        for (const propName of Object.keys(ctx)) {\n            (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n        }\n    }\n\n    private _cloneContext(ctx: any): any {\n        const clone = {};\n        for (const propName of Object.keys(ctx)) {\n            clone[propName] = ctx[propName];\n        }\n        return clone;\n    }\n\n    private _getActionType(changes: SimpleChanges) {\n        const movedView = this.igxTemplateOutletContext['moveView'];\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        const shouldRecreate = this._shouldRecreateView(changes);\n        if (movedView) {\n            // view is moved from external source\n            return TemplateOutletAction.MoveView;\n        } else if (shouldRecreate && cachedView) {\n            // should recreate (template or context change) and there is a matching template in cache\n            return TemplateOutletAction.UseCachedView;\n        } else if (!this._viewRef || shouldRecreate) {\n            // no view or should recreate\n            return TemplateOutletAction.CreateView;\n        } else if (this.igxTemplateOutletContext) {\n            // has context, update context\n            return TemplateOutletAction.UpdateViewContext;\n        }\n    }\n}\nenum TemplateOutletAction {\n    CreateView,\n    MoveView,\n    UseCachedView,\n    UpdateViewContext\n}\n\nexport interface IViewChangeEventArgs extends IBaseEventArgs {\n    owner: IgxTemplateOutletDirective;\n    view: EmbeddedViewRef<any>;\n    context: any;\n}\n\nexport interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {\n    oldContext: any;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IBaseEventArgs } from '../core/utils';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    templateUrl: 'dialog-content.component.html'\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    /**\n    * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n    *```html\n    *<igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    @Input()\n    get isModal() {\n        return this._isModal;\n    }\n\n    set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n    * An @Input property controlling the `title` of the dialog.\n    *```html\n    *<igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     *```html\n     *<igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     *```html\n     *<igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     *```html\n     *<igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     *```html\n     *<igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     *```html\n     *<igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     *rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     *</igx-dialog>\n     *```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * Get the position and animation settings used by the dialog.\n     * ```typescript\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     * let currentPosition: PositionSettings = this.alert.positionSettings\n     * ```\n     */\n    @Input()\n    public get positionSettings(): PositionSettings {\n        return this._positionSettings;\n    }\n\n    /**\n     * Set the position and animation settings used by the dialog.\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     *  public newPositionSettings: PositionSettings = {\n     *      openAnimation: useAnimation(slideInTop, { params: { duration: '2000ms' } }),\n     *      closeAnimation: useAnimation(slideOutBottom, { params: { duration: '2000ms'} }),\n     *      horizontalDirection: HorizontalAlignment.Left,\n     *      verticalDirection: VerticalAlignment.Middle,\n     *      horizontalStartPoint: HorizontalAlignment.Left,\n     *      verticalStartPoint: VerticalAlignment.Middle,\n     *      minSize: { height: 100, width: 100 }\n     *  };\n     * this.alert.positionSettings = this.newPositionSettings;\n     * ```\n     */\n    public set positionSettings(settings: PositionSettings) {\n        this._positionSettings = settings;\n        this._overlayDefaultSettings.positionStrategy = new GlobalPositionStrategy(this._positionSettings);\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     *```html\n     *<igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     *```html\n     *<igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     *```html\n     *<igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     *<igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     *#dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     *rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    private _positionSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, { params: { fromPosition: 'translateY(100%)' } }),\n        closeAnimation: useAnimation(slideOutTop, { params: { toPosition: 'translateY(-100%)' } })\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogState = this.dialog.state;\n     *}\n     *```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * Returns whether the dialog is visible to the end user.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogOpen = this.dialog.isOpen;\n     *}\n     * ```\n     */\n    @Input()\n    get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     *Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogRole = this.dialog.role;\n     *}\n     * ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     *Returns the value of the title id.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogTitle = this.dialog.titleId;\n     *}\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._positionSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n        if (!this.leftButtonLabel && !this.rightButtonLabel) {\n            this.toggleRef.element.focus();\n        }\n    }\n\n    /**\n     *A method that that closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public close() {\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n\n}\n\nexport interface IDialogEventArgs extends IBaseEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule, IgxFocusModule]\n})\nexport class IgxDialogModule { }\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxProgressBarGradient]'\n})\nexport class IgxProgressBarGradientDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { Injectable, Inject, InjectionToken, inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @hidden\n */\nexport type Direction = 'ltr' | 'rtl';\n\n/**\n * Injection token is used to inject the document into Directionality\n * which factory could be faked for testing purposes.\n *\n * We can't provide and mock the DOCUMENT token from platform-browser because configureTestingModule\n * allows override of the default providers, directive, pipes, modules of the test injector\n * which causes errors.\n *\n * @hidden\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY\n});\n\n/**\n * @hidden\n */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n    return inject(DOCUMENT);\n}\n\n/**\n * @hidden\n *\n * Bidirectional service that extracts the value of the direction attribute on the body or html elements.\n *\n * The dir attribute over the body element takes precedence.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class IgxDirectionality {\n    private _dir: Direction;\n    private _document: Document;\n\n    public get value(): Direction {\n        return this._dir;\n    }\n\n    public get document() {\n        return this._document;\n    }\n\n    public get rtl() {\n        return this._dir === 'rtl';\n    }\n\n    constructor(@Inject(DIR_DOCUMENT) document) {\n        this._document = <Document>document;\n        const bodyDir = this._document.body ? this._document.body.dir : null;\n        const htmlDir = this._document.documentElement ? this._document.documentElement.dir : null;\n        const extractedDir = bodyDir || htmlDir;\n        this._dir = (extractedDir === 'ltr' || extractedDir === 'rtl') ? extractedDir : 'ltr';\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Renderer2,\n    ViewChild,\n    ContentChild,\n    AfterViewInit\n} from '@angular/core';\nimport {\n    IgxProcessBarTextTemplateDirective,\n    IgxProgressBarGradientDirective,\n} from './progressbar.common';\nimport { IBaseEventArgs } from '../core/utils';\nimport { IgxDirectionality } from '../services/direction/directionality';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport enum IgxTextAlign {\n    START = 'start',\n    CENTER = 'center',\n    END = 'end'\n}\n\nexport enum IgxProgressType {\n    ERROR = 'error',\n    INFO = 'info',\n    WARNING = 'warning',\n    SUCCESS = 'success'\n}\n\nexport interface IChangeProgressEventArgs extends IBaseEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\nexport abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId: number = undefined;\n\n    /**\n     * @hidden\n     */\n    protected _valueInPercent = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _max = 100;\n    /**\n     * @hidden\n     */\n    protected _value = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _animate = true;\n\n    /**\n     * @hidden\n     */\n    protected _step;\n\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    /**\n     *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *    public setValue(event){\n     *    this.progressBar.valueInPercent = 56;\n     *}\n     * //...\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n     *```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value += step;\n        const passedValue = convertInPercentage(val, this._max);\n        const progressValue = convertInPercentage(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number {\n        if (currentValue < prevValue) {\n            return step;\n        }\n\n        return -step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\nlet NEXT_GRADIENT_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    templateUrl: 'templates/linear-bar.component.html'\n})\nexport class IgxLinearProgressBarComponent extends BaseProgress {\n\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('attr.aria-valuemax')\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     *```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    constructor() {\n        super();\n    }\n\n    @HostBinding('attr.aria-valuemin')\n    public valueMin = 0;\n\n    @HostBinding('class.igx-linear-bar')\n    public cssClass = 'igx-linear-bar';\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--striped')\n    @Input()\n    public striped = false;\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     *```html\n     *<igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     *<igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'progressbar';\n\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"error\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `error`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"error\"></igx-linear-bar>\n     *```\n     */\n\n    @Input()\n    public type = 'default';\n\n    /**\n    *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n    *```typescript\n    *@ViewChild(\"MyProgressBar\")\n    *public progressBar: IgxLinearProgressBarComponent;\n    *public getValue(event) {\n    *    let value = this.progressBar.value;\n    *    alert(value);\n    *}\n    *```\n    */\n    @HostBinding('attr.aria-valuenow')\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    set value(val) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInRange)) {\n            return;\n        }\n        const changedValues = {\n            currentValue: valueInRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this._animate && val >= this.step) {\n            super.runAnimation(valueInRange, updateValue);\n        } else {\n            super.updateProgressDirectly(valueInRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    @Output() public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--danger')\n    public get error() {\n        return this.type === IgxProgressType.ERROR;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--info')\n    public get info() {\n        return this.type === IgxProgressType.INFO;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--warning')\n    public get warning() {\n        return this.type === IgxProgressType.WARNING;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--success')\n    public get success() {\n        return this.type === IgxProgressType.SUCCESS;\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    templateUrl: 'templates/circular-bar.component.html'\n})\nexport class IgxCircularProgressBarComponent extends BaseProgress implements AfterViewInit {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /** @hidden */\n    @HostBinding('class.igx-circular-bar')\n    public cssClass = 'igx-circular-bar';\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     * @hidden\n     */\n    public gradientId = `igx-circular-gradient-${NEXT_GRADIENT_ID++}`;\n\n    /**\n     *An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     *```html\n     *<igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('class.igx-circular-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    @ContentChild(IgxProgressBarGradientDirective, { read: IgxProgressBarGradientDirective })\n    public gradientTemplate: IgxProgressBarGradientDirective;\n\n    /**\n     * @hidden\n    */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max }\n        };\n    }\n\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     *```html\n     *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n     *```\n     */\n    get max(): number {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```html\n     *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    set value(val: number) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInProperRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInProperRange)) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: valueInProperRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this.animate && val >= this.step) {\n            super.runAnimation(valueInProperRange, updateValue);\n        } else {\n            this.updateProgressDirectly(valueInProperRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle', { static: true }) private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2, private _directionality: IgxDirectionality) {\n        super();\n    }\n\n    ngAfterViewInit() {\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke',\n            `url(#${this.gradientId})`\n        );\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n    */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n    */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        return this._directionality.rtl ?\n            this._circumference + (percentage * this._circumference / 100) :\n            this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function getValueInProperRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function convertInPercentage(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxLinearProgressBarComponent,\n        IgxCircularProgressBarComponent,\n        IgxProcessBarTextTemplateDirective,\n        IgxProgressBarGradientDirective,\n    ],\n    exports: [\n        IgxLinearProgressBarComponent,\n        IgxCircularProgressBarComponent,\n        IgxProcessBarTextTemplateDirective,\n        IgxProgressBarGradientDirective,\n    ],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule { }\n\n","import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';\nimport { Component, DoCheck, Input } from '@angular/core';\n\n@Component({\n    selector: 'igx-select-item',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxSelectItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    private _text: any;\n\n    /**\n     * An @Input property that gets/sets the item's text to be displayed in the select component's input when the item is selected.\n     *\n     * ```typescript\n     *  //get\n     *  let mySelectedItem = this.dropDown.selectedItem;\n     *  let selectedItemText = mySelectedItem.text;\n     * ```\n\n     * ```html\n     * // set\n     * <igx-select-item [text]=\"'London'\"></igx-select-item>\n     * ```\n     */\n    @Input()\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(text: string) {\n        this._text = text;\n    }\n\n    /** @hidden @internal */\n    public get itemText() {\n        if (this._text !== undefined) {\n            return this._text;\n        }\n        // If text @Input is undefined, try extract a meaningful item text out of the item template\n        return this.elementRef.nativeElement.textContent.trim();\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the select\n     *\n     * ```typescript\n     *  let mySelectedItem = this.select.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    public get selected() {\n        return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);\n    }\n\n    public set selected(value: any) {\n        if (value && !this.isHeader && !this.disabled) {\n            this.dropDown.selectItem(this);\n        }\n    }\n\n    /** @hidden @internal */\n    public isHeader: boolean;\n\n    ngDoCheck(): void {\n    }\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings, Size, Util, ConnectedFit  } from '../services/overlay/utilities';\nimport { IPositionStrategy } from '../services/overlay/position';\nimport { fadeOut, fadeIn } from '../animations/main';\nimport { IgxSelectBase } from './select.common';\nimport { isIE } from '../core/utils';\nimport { BaseFitPositionStrategy } from '../services/overlay/position/base-fit-position-strategy';\n\n/** @hidden @internal */\nexport class SelectPositioningStrategy extends BaseFitPositionStrategy implements IPositionStrategy {\n\n    private _selectDefaultSettings = {\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Top,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(public select: IgxSelectBase, settings?: PositionSettings) {\n        super();\n        this.settings = Object.assign({}, this._selectDefaultSettings, settings);\n    }\n\n    // Global variables required for cases of !initialCall (page scroll/overlay repositionAll)\n    private global_yOffset = 0;\n    private global_xOffset = 0;\n    private global_styles: SelectStyles = {};\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const rects = super.calculateElementRectangles(contentElement);\n        // selectFit obj, to be used for both cases of initialCall and !initialCall(page scroll/overlay repositionAll)\n        const selectFit: SelectFit = {\n            verticalOffset: this.global_yOffset,\n            horizontalOffset: this.global_xOffset,\n            targetRect: rects.targetRect,\n            contentElementRect: rects.elementRect,\n            styles: this.global_styles,\n            scrollContainer: this.select.scrollContainer,\n            scrollContainerRect: this.select.scrollContainer.getBoundingClientRect()\n        };\n\n        if (initialCall) {\n            // Fill in the required selectFit object properties.\n            selectFit.viewPortRect = Util.getViewportRect(document);\n            selectFit.itemElement = this.getInteractionItemElement();\n            selectFit.itemRect = selectFit.itemElement.getBoundingClientRect();\n\n            // Calculate input and selected item elements style related variables\n            selectFit.styles = this.calculateStyles(selectFit);\n\n            selectFit.scrollAmount = this.calculateScrollAmount(selectFit);\n            // Calculate how much to offset the overlay container.\n            this.calculateYoffset(selectFit);\n            this.calculateXoffset(selectFit);\n\n            super.updateViewPortFit(selectFit);\n            // container does not fit in viewPort and is out on Top or Bottom\n            if (selectFit.fitVertical.back < 0 || selectFit.fitVertical.forward < 0 ) {\n                this.fitInViewport(contentElement, selectFit);\n            }\n            this.select.scrollContainer.scrollTop = selectFit.scrollAmount;\n        }\n        this.setStyles(contentElement, selectFit);\n    }\n\n    /**\n     * Calculate selected item scroll position.\n     */\n    private calculateScrollAmount(selectFit: SelectFit): number {\n        const itemElementRect = selectFit.itemRect;\n        const scrollContainer = selectFit.scrollContainer;\n        const scrollContainerRect = selectFit.scrollContainerRect;\n        const scrollDelta = scrollContainerRect.top - itemElementRect.top;\n        let scrollPosition = scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += itemElementRect.height / 2;\n\n        return Math.round(Math.min(Math.max(0, scrollPosition), scrollContainer.scrollHeight - scrollContainerRect.height));\n    }\n\n    /**\n     * Position the items outer container so selected item text is positioned over input text and if header\n     * And/OR footer - both header/footer are visible\n     * @param selectFit selectFit to use for computation.\n     */\n    protected fitInViewport(contentElement: HTMLElement, selectFit: SelectFit) {\n        const footer = selectFit.scrollContainerRect.bottom - selectFit.contentElementRect.bottom;\n        const header = selectFit.scrollContainerRect.top - selectFit.contentElementRect.top;\n        const lastItemFitSize = selectFit.targetRect.bottom + selectFit.styles.itemTextToInputTextDiff - footer;\n        const firstItemFitSize = selectFit.targetRect.top - selectFit.styles.itemTextToInputTextDiff - header;\n        // out of viewPort on Top\n        if (selectFit.fitVertical.back < 0) {\n            const possibleScrollAmount = selectFit.scrollContainer.scrollHeight -\n                selectFit.scrollContainerRect.height - selectFit.scrollAmount;\n            if (possibleScrollAmount + selectFit.fitVertical.back > 0 && firstItemFitSize > selectFit.viewPortRect.top) {\n                selectFit.scrollAmount -= selectFit.fitVertical.back;\n                selectFit.verticalOffset -= selectFit.fitVertical.back;\n                this.global_yOffset = selectFit.verticalOffset;\n            } else {\n                selectFit.verticalOffset = 0 ;\n                this.global_yOffset = 0;\n            }\n        // out of viewPort on Bottom\n        } else if (selectFit.fitVertical.forward < 0) {\n            if (selectFit.scrollAmount + selectFit.fitVertical.forward > 0 && lastItemFitSize < selectFit.viewPortRect.bottom) {\n                selectFit.scrollAmount += selectFit.fitVertical.forward;\n                selectFit.verticalOffset += selectFit.fitVertical.forward;\n                this.global_yOffset = selectFit.verticalOffset;\n            } else {\n                selectFit.verticalOffset = -selectFit.contentElementRect.height + selectFit.targetRect.height;\n                this.global_yOffset = selectFit.verticalOffset;\n            }\n        }\n    }\n\n    /**\n     * Sets element's style which effectively positions the provided element\n     * @param element Element to position\n     * @param selectFit selectFit to use for computation.\n     * @param initialCall should be true if this is the initial call to the position method calling setStyles\n     */\n    protected setStyles(contentElement: HTMLElement, selectFit: SelectFit) {\n        super.setStyle(contentElement, selectFit.targetRect, selectFit.contentElementRect, selectFit);\n        contentElement.style.width = `${selectFit.styles.contentElementNewWidth}px`; // manage container based on paddings?\n        this.global_styles.contentElementNewWidth = selectFit.styles.contentElementNewWidth;\n    }\n\n    /**\n     * Calculate the necessary input and selected item styles to be used for positioning item text over input text.\n     * Calculate & Set default items container width.\n     * @param selectFit selectFit to use for computation.\n     */\n    private calculateStyles(selectFit: SelectFit): SelectStyles  {\n        const styles: SelectStyles = {};\n        const inputElementStyles = window.getComputedStyle(this.settings.target as Element);\n        const itemElementStyles = window.getComputedStyle(selectFit.itemElement);\n        const numericInputFontSize = parseFloat(inputElementStyles.fontSize);\n        const numericItemFontSize = parseFloat(itemElementStyles.fontSize);\n        const inputTextToInputTop = (selectFit.targetRect.bottom - selectFit.targetRect.top - numericInputFontSize) / 2;\n        const itemTextToItemTop = (selectFit.itemRect.height - numericItemFontSize) / 2;\n         // Adjust for input top padding\n        const negateInputPaddings = (\n                parseFloat(inputElementStyles.paddingTop) -\n                parseFloat(inputElementStyles.paddingBottom)\n            ) / 2;\n        styles.itemTextToInputTextDiff = Math.round(itemTextToItemTop - inputTextToInputTop + negateInputPaddings);\n\n        const numericLeftPadding = parseFloat(itemElementStyles.paddingLeft);\n        const numericTextIndent = parseFloat(itemElementStyles.textIndent);\n\n        styles.itemTextPadding = numericLeftPadding;\n        styles.itemTextIndent = numericTextIndent;\n        // 24 is the input's toggle ddl icon width\n        styles.contentElementNewWidth = selectFit.targetRect.width + 24 + numericLeftPadding * 2;\n\n        return styles;\n    }\n\n    /**\n     * Obtain the selected item if there is such one or otherwise use the first one\n     */\n    public getInteractionItemElement(): HTMLElement {\n        let itemElement;\n        if (this.select.selectedItem) {\n            itemElement = this.select.selectedItem.element.nativeElement;\n            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay\n            if (isIE()) {\n                this.select.scrollContainer.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);\n            }\n        } else {\n            itemElement = this.select.getFirstItemElement();\n        }\n        return itemElement;\n    }\n\n    /**\n     * Calculate how much to offset the overlay container for Y-axis.\n     */\n    private calculateYoffset(selectFit: SelectFit) {\n        selectFit.verticalOffset = -(selectFit.itemRect.top - selectFit.contentElementRect.top +\n            selectFit.styles.itemTextToInputTextDiff - selectFit.scrollAmount);\n        this.global_yOffset = selectFit.verticalOffset;\n    }\n\n    /**\n     * Calculate how much to offset the overlay container for X-axis.\n     */\n    private calculateXoffset(selectFit: SelectFit) {\n        selectFit.horizontalOffset = selectFit.styles.itemTextIndent - selectFit.styles.itemTextPadding;\n        this.global_xOffset = selectFit.horizontalOffset;\n    }\n}\n\n/** @hidden */\nexport interface SelectFit extends ConnectedFit {\n    itemElement?: HTMLElement;\n    scrollContainer: HTMLElement;\n    scrollContainerRect: ClientRect;\n    itemRect?: ClientRect;\n    styles?: SelectStyles;\n    scrollAmount?: number;\n}\n\n/** @hidden */\nexport interface SelectStyles {\n    itemTextPadding?: number;\n    itemTextIndent?: number;\n    itemTextToInputTextDiff?: number;\n    contentElementNewWidth?: number;\n    numericLeftPadding?: number;\n}\n","import { IgxInputDirective, IgxInputState } from './../directives/input/input.directive';\nimport {\n    Component, ContentChildren, forwardRef, QueryList, ViewChild, Input, ContentChild,\n    AfterContentInit, HostBinding, Directive, TemplateRef, ElementRef, ChangeDetectorRef, Optional,\n    Injector, OnInit, AfterViewInit, OnDestroy, Inject, Type\n\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { IgxDropDownItemBaseDirective } from '../drop-down/index';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\n\nimport { IgxDropDownComponent } from './../drop-down/drop-down.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { SelectPositioningStrategy } from './select-positioning-strategy';\n\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services/index';\nimport { IGX_DROPDOWN_BASE, ISelectionEventArgs, Navigate } from '../drop-down/drop-down.common';\nimport { CancelableEventArgs } from '../core/utils';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxSelectBase } from './select.common';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectToggleIcon]'\n})\nexport class IgxSelectToggleIconDirective {\n}\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectHeader]'\n})\nexport class IgxSelectHeaderDirective {\n}\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectFooter]'\n})\nexport class IgxSelectFooterDirective {\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Select** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select.html)\n *\n * The `igxSelect` provides an input with dropdown list allowing selection of a single item.\n *\n * Example:\n * ```html\n * <igx-select #select1 [placeholder]=\"'Pick One'\">\n *   <label igxLabel>Select Label</label>\n *   <igx-select-item *ngFor=\"let item of items\" [value]=\"item.field\">\n *     {{ item.field }}\n *   </igx-select-item>\n * </igx-select>\n * ```\n */\n@Component({\n    selector: 'igx-select',\n    templateUrl: './select.component.html',\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },\n        { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }],\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSelectComponent extends IgxDropDownComponent implements IgxSelectBase, ControlValueAccessor,\n    AfterContentInit, OnInit, AfterViewInit, OnDestroy, EditorProvider {\n\n    private ngControl: NgControl = null;\n    private _statusChanges$: Subscription;\n    private _overlayDefaults: OverlaySettings;\n    private _value: any;\n\n    /** @hidden @internal do not use the drop-down container class */\n    public cssClass = false;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('input', { read: IgxInputDirective, static: true }) public input: IgxInputDirective;\n\n    /** @hidden @internal */\n    @ContentChildren(forwardRef(() => IgxSelectItemComponent), { descendants: true })\n    public children: QueryList<IgxSelectItemComponent>;\n\n    /** @hidden @internal */\n    @ContentChild(forwardRef(() => IgxLabelDirective), { static: true }) label: IgxLabelDirective;\n\n    /** @hidden @internal */\n    public allowItemsFocus = false;\n\n    /** @hidden @internal */\n    public height: string;\n\n    /**\n     * An @Input property that gets/sets the component value.\n     *\n     * ```typescript\n     * // get\n     * let selectValue = this.select.value;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.select.value = 'London';\n     * ```\n     * ```html\n     * <igx-select [value]=\"value\"></igx-select>\n     * ```\n     */\n    @Input()\n    public get value(): any {\n        return this._value;\n    }\n    public set value(v: any) {\n        if (this._value === v) {\n            return;\n        }\n        this._value = v;\n        this.setSelection(this.items.find(x => x.value === this.value));\n    }\n    /**\n     * An @Input property that sets input placeholder.\n     *\n     */\n    @Input() public placeholder;\n\n\n    /**\n     * An @Input property that disables the `IgxSelectComponent`.\n     * ```html\n     * <igx-select [disabled]=\"'true'\"></igx-select>\n     * ```\n     */\n    @Input() public disabled = false;\n\n    /**\n     * An @Input property that sets custom OverlaySettings `IgxSelectComponent`.\n     * ```html\n     * <igx-select [overlaySettings] = \"customOverlaySettings\"></igx-select>\n     * ```\n     */\n    @Input()\n    overlaySettings: OverlaySettings;\n\n    /** @hidden @internal */\n    @HostBinding('style.maxHeight')\n    public maxHeight = '256px';\n\n    /** @hidden @internal */\n    public width: string;\n\n    /**\n     * An @Input property that sets how the select will be styled.\n     * The allowed values are `line`, `box` and `border`. The default is `line`.\n     * ```html\n     *<igx-select [type]=\"'box'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public type = 'line';\n\n    /**\n     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the select items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectHeader>\n     *          <div class=\"select__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectHeaderDirective, { read: TemplateRef, static: false })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the select items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectFooter>\n     *          <div class=\"select__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectFooterDirective, { read: TemplateRef, static: false })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /** @hidden @internal */\n    public get selectionValue() {\n        const selectedItem = this.selectedItem;\n        return selectedItem ? selectedItem.itemText : '';\n    }\n\n    /** @hidden @internal */\n    public get selectedItem(): IgxSelectItemComponent {\n        return this.selection.first_item(this.id);\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        private _injector: Injector) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    //#region ControlValueAccessor\n\n    /** @hidden @internal */\n    private _onChangeCallback: (_: any) => void = noop;\n    /** @hidden @internal */\n    private _onTouchedCallback: () => void = noop;\n\n    /** @hidden @internal */\n    public writeValue = (value: any) => {\n        this.value = value;\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n    //#endregion\n\n    /** @hidden @internal */\n    public getEditElement(): HTMLElement {\n        return this.input.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public selectItem(newSelection: IgxDropDownItemBaseDirective, event?) {\n        const oldSelection = this.selectedItem;\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {\n            return;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        this.setSelection(newSelection);\n        this._value = newSelection.value;\n        this.cdr.detectChanges();\n        this._onChangeCallback(this.value);\n    }\n\n    /** @hidden @internal */\n    public getFirstItemElement(): HTMLElement {\n        return this.children.first.element.nativeElement;\n    }\n\n    /**\n     * Opens the select\n     *\n     * ```typescript\n     * this.select.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        if (this.disabled || this.items.length === 0) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.navigateFirst();\n        }\n\n        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));\n    }\n\n    /** @hidden @internal */\n    ngAfterContentInit() {\n        this._overlayDefaults = {\n            modal: false,\n            closeOnOutsideClick: false,\n            positionStrategy: new SelectPositioningStrategy(this, { target: this.getEditElement() }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            excludePositionTarget: true\n        };\n        this.children.changes.subscribe(() => {\n            this.setSelection(this.items.find(x => x.value === this.value));\n            this.cdr.detectChanges();\n        });\n        Promise.resolve().then(() => this.children.notifyOnChanges());\n    }\n\n    /** @hidden @internal */\n    public onToggleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        if (this.collapsed && this.selectedItem) {\n            this.navigateItem(this.selectedItem.itemIndex);\n        }\n        super.navigate(direction, currentIndex);\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n            this.cdr.markForCheck();\n        }\n    }\n    private setSelection(item: IgxDropDownItemBaseDirective) {\n        if (item && item.value !== undefined && item.value !== null) {\n            this.selection.set(this.id, new Set([item]));\n        } else {\n            this.selection.clear(this.id);\n        }\n    }\n\n    /** @hidden @internal */\n    public onBlur(): void {\n        this._onTouchedCallback();\n        if (this.ngControl && !this.ngControl.valid) {\n             this.input.valid = IgxInputState.INVALID;\n        } else {\n            this.input.valid = IgxInputState.INITIAL;\n        }\n        if (!this.collapsed) {\n            this.toggleDirective.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public onFocus(): void {\n        this._onTouchedCallback();\n    }\n\n    protected onStatusChanged() {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            if (this.inputGroup.isFocused) {\n                this.input.valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                this.input.valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n        this.manageRequiredAsterisk();\n    }\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get<NgControl>(NgControl, null);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n            this.manageRequiredAsterisk();\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.selection.clear(this.id);\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     * Prevent input blur - closing the items container on Header/Footer Template click.\n     */\n   public mousedownHandler(event) {\n        event.preventDefault();\n    }\n}\n\n","import { IgxDropDownItemNavigationDirective } from '../drop-down/drop-down-navigation.directive';\nimport { Directive, Input, HostListener, OnDestroy } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectBase } from './select.common';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectItemNavigation]'\n})\nexport class IgxSelectItemNavigationDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    @Input('igxSelectItemNavigation')\n    public target: IgxSelectBase;\n\n    constructor() { super(null); }\n\n    /** Captures keydown events and calls the appropriate handlers on the target component */\n    handleKeyDown(event: KeyboardEvent) {\n        if (!event || event.shiftKey) {\n            return;\n        }\n\n        const key = event.key.toLowerCase();\n        if (event.altKey && (key === 'arrowdown' || key === 'arrowup' || key === 'down' || key === 'up')) {\n            this.target.toggle();\n            return;\n        }\n\n        if (this.target.collapsed) {\n            switch (key) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'enter':\n                    event.preventDefault();\n                    this.target.open();\n                    return;\n                case 'arrowdown':\n                case 'down':\n                    this.target.navigateNext();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                case 'arrowup':\n                case 'up':\n                    this.target.navigatePrev();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                default:\n                    break;\n            }\n        }\n\n        super.handleKeyDown(event);\n    }\n\n    // tslint:disable:member-ordering\n    private inputStream = '';\n    private clearStream$ = Subscription.EMPTY;\n\n    /** Handle continuous letter typing navigation */\n    @HostListener('keyup', ['$event'])\n    public captureKey(event: KeyboardEvent) {\n        // relying only on key, available on all major browsers:\n        // https://caniuse.com/#feat=keyboardevent-key (IE/Edge quirk doesn't affect letter typing)\n        if (!event || !event.key || event.key.length > 1) {\n            // ignore longer keys ('Alt', 'ArrowDown', etc)\n            return;\n        }\n\n        this.clearStream$.unsubscribe();\n        this.clearStream$ = timer(500).subscribe(() => {\n            this.inputStream = '';\n        });\n        this.inputStream += event.key;\n        const focusedItem = this.target.focusedItem as IgxSelectItemComponent;\n\n        // select the item\n        if (focusedItem && this.inputStream.length > 1 && focusedItem.itemText.toLowerCase().startsWith(this.inputStream.toLowerCase())) {\n            return;\n        }\n        this.activateItemByText(this.inputStream);\n    }\n\n    public activateItemByText(text: string) {\n        const items = this.target.items as IgxSelectItemComponent[];\n        const activeItemIndex = items.indexOf(this.target.focusedItem as IgxSelectItemComponent) || 0;\n        // ^ this is focused OR selected if the dd is closed\n        let nextItem = items.slice(activeItemIndex + 1).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n\n        if (!nextItem) {\n            nextItem = items.slice(0, activeItemIndex).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n        }\n\n        if (!nextItem) {\n            return;\n        }\n\n        if (this.target.collapsed) {\n            this.target.selectItem(nextItem);\n        }\n        this.target.navigateItem(items.indexOf(nextItem));\n    }\n\n    ngOnDestroy(): void {\n        this.clearStream$.unsubscribe();\n    }\n}\n","import { Component } from '@angular/core';\nimport { IgxDropDownGroupComponent } from '../drop-down/index';\n\n/**\n * The `<igx-select-item>` is a container intended for row items in\n * a `<igx-select>` container.\n */\n@Component({\n    selector: 'igx-select-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-select-item\"></ng-content>\n    `\n})\nexport class IgxSelectGroupComponent extends IgxDropDownGroupComponent {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxDropDownModule } from './../drop-down/index';\nimport { IgxToggleModule } from './../directives/toggle/toggle.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nimport { IgxSelectComponent, IgxSelectToggleIconDirective, IgxSelectHeaderDirective, IgxSelectFooterDirective } from './select.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectItemNavigationDirective } from './select-navigation.directive';\nimport { IgxSelectGroupComponent } from './select-group.component';\n\n/** @hidden */\n@NgModule({\n    declarations: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n        IgxSelectToggleIconDirective, IgxSelectGroupComponent, IgxSelectHeaderDirective,\n        IgxSelectFooterDirective],\n    exports: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n         IgxSelectToggleIconDirective, IgxSelectGroupComponent, IgxSelectHeaderDirective,\n         IgxSelectFooterDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxToggleModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: []\n})\nexport class IgxSelectModule { }\n","import { SimpleChanges, SimpleChange } from '@angular/core';\n\n/**\n* @hidden\n*/\nexport function WatchChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const init = this._init;\n            const oldValue = this[key];\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                originalSetter.call(this, val);\n                if (this.ngOnChanges && !init) {\n                    // in case wacthed prop changes trigger ngOnChanges manually\n                    const changes: SimpleChanges = {\n                        [key]: new SimpleChange(oldValue, val, false)\n                    };\n                    this.ngOnChanges(changes);\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n\nexport function WatchColumnChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const init = this._init;\n            const oldValue = this[key];\n            originalSetter.call(this, val);\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                if (this.rowIslandAPI.rowIsland) {\n                    this.rowIslandAPI.rowIsland.updateColumnList();\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n\nexport function notifyChanges(repaint = false) {\n    return (_: any, key: string, propDesc?: PropertyDescriptor) => {\n\n        const privateKey = `__${key}`;\n\n        propDesc = propDesc || {\n            enumerable: true,\n            configurable: true\n        };\n\n\n        const originalSetter = propDesc ? propDesc.set : null;\n\n        propDesc.get = propDesc.get || (function(this) { return this[privateKey]; });\n\n        propDesc.set = function(this, newValue) {\n            if (originalSetter) {\n                originalSetter.call(this, newValue);\n                if (this.grid) {\n                    this.grid.notifyChanges(repaint);\n                }\n            } else {\n                if (newValue === this[key]) { return; }\n                this[privateKey] = newValue;\n                if (this.grid) {\n                    this.grid.notifyChanges(repaint);\n                }\n            }\n        };\n        return propDesc as any;\n    };\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxRowIslandAPIService {\n    public rowIsland: IgxRowIslandComponent;\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<any, IgxHierarchicalGridComponent> = new Map<any, IgxHierarchicalGridComponent>();\n\n    public register(rowIsland: IgxRowIslandComponent) {\n        this.state.set(rowIsland.id, rowIsland);\n        this.destroyMap.set(rowIsland.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(rowIsland: IgxRowIslandComponent) {\n        this.state.delete(rowIsland.id);\n    }\n\n    public get(id: string): IgxRowIslandComponent {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const rowIsland = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (rowIsland) {\n            this.state.set(newId, rowIsland);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n    }\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(rowIslandKey: string) {\n        return this.childRowIslands.get(rowIslandKey);\n    }\n\n    registerChildGrid(parentRowID: string|object, grid: IgxHierarchicalGridComponent) {\n        this.childGrids.set(parentRowID, grid);\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        let allChildren = [];\n        this.childGrids.forEach((grid) => {\n            allChildren.push(grid);\n        });\n        if (inDepth) {\n            this.childRowIslands.forEach((layout) => {\n                allChildren = allChildren.concat(layout.rowIslandAPI.getChildGrids(inDepth));\n            });\n        }\n\n        return allChildren;\n    }\n\n    getChildGridByID(rowID) {\n        return this.childGrids.get(rowID);\n    }\n}\n","import { Injectable, EventEmitter, NgZone } from '@angular/core';\nimport { IGridEditEventArgs } from '../common/events';\nimport { IgxGridBaseDirective } from '../grid';\nimport { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\n\n\nexport interface GridSelectionRange {\n    rowStart: number;\n    rowEnd: number;\n    columnStart: string | number;\n    columnEnd: string | number;\n}\n\nexport interface ISelectionNode {\n    row: number;\n    column: number;\n    layout?: IMultiRowLayoutNode;\n    isSummaryRow?: boolean;\n}\n\nexport interface IMultiRowLayoutNode {\n    rowStart: number;\n    colStart: number;\n    rowEnd: number;\n    colEnd: number;\n    columnVisibleIndex: number;\n}\n\ninterface ISelectionKeyboardState {\n    node: null | ISelectionNode;\n    shift: boolean;\n    range: GridSelectionRange;\n    active: boolean;\n}\n\ninterface ISelectionPointerState extends ISelectionKeyboardState {\n    ctrl: boolean;\n    primaryButton: boolean;\n}\n\ntype SelectionState = ISelectionKeyboardState | ISelectionPointerState;\n\n\n// TODO: Refactor - export in a separate file\n\nexport class IgxRow {\n    transactionState: any;\n    state: any;\n    newData: any;\n\n    constructor(public id: any, public index: number, public data: any) {}\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id,\n            oldValue: { ... this.data },\n            newValue: this.newData,\n            cancel: false\n        };\n    }\n}\n\nexport class IgxCell {\n\n    primaryKey: any;\n    state: any;\n\n    constructor(\n        public id,\n        public rowIndex: number,\n        public column,\n        public value: any,\n        public editValue: any,\n        public rowData: any) {}\n\n    castToNumber(value: any): any {\n        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {\n            const v = parseFloat(value);\n            return !isNaN(v) && isFinite(v) ? v : 0;\n        }\n        return value;\n    }\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id.rowID,\n            cellID: this.id,\n            oldValue: this.value,\n            newValue: this.editValue,\n            cancel: false\n        };\n    }\n}\n\n@Injectable()\nexport class IgxGridCRUDService {\n\n    grid;\n    cell: IgxCell | null = null;\n    row: IgxRow | null = null;\n\n    createCell(cell): IgxCell {\n        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);\n    }\n\n    createRow(cell: IgxCell): IgxRow {\n        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);\n    }\n\n    sameRow(rowID): boolean {\n        return this.row && this.row.id === rowID;\n    }\n\n    sameCell(cell: IgxCell): boolean {\n        return (this.cell.id.rowID === cell.id.rowID &&\n            this.cell.id.columnID === cell.id.columnID);\n    }\n\n    get inEditMode(): boolean {\n        return !!this.cell;\n    }\n\n    get rowEditing(): boolean {\n        return this.grid.rowEditable;\n    }\n\n    get primaryKey(): any {\n        return this.grid.primaryKey;\n    }\n\n    beginRowEdit() {\n        if (this.grid.rowEditable && (this.grid.primaryKey === undefined || this.grid.primaryKey === null)) {\n            console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');\n        }\n        this.row = this.createRow(this.cell);\n        const args = {\n            rowID: this.row.id,\n            oldValue: this.row.data,\n            cancel: false\n        };\n        this.grid.onRowEditEnter.emit(args);\n        if (args.cancel) {\n            this.endRowEdit();\n            return;\n        }\n        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);\n        this.grid.transactions.startPending();\n        this.grid.openRowOverlay(this.row.id);\n    }\n\n\n    endRowEdit() {\n        this.row = null;\n    }\n\n    begin(cell): void {\n        const newCell = this.createCell(cell);\n        newCell.primaryKey = this.primaryKey;\n        const args = {\n            cellID: newCell.id,\n            rowID: newCell.id.rowID,\n            oldValue: newCell.value,\n            cancel: false\n        };\n\n        this.grid.onCellEditEnter.emit(args);\n\n        if (args.cancel) {\n            this.end();\n            return;\n        }\n\n        if (this.rowEditing) {\n            if (this.row && !this.sameRow(newCell.id.rowID)) {\n                this.grid.endEdit(true);\n                this.cell = newCell;\n                this.beginRowEdit();\n                return;\n            }\n\n            this.cell = newCell;\n\n            if (!this.row) {\n                this.beginRowEdit();\n                return;\n            }\n        } else {\n            this.cell = newCell;\n            this.endRowEdit();\n        }\n    }\n\n    end(): void {\n        this.cell = null;\n    }\n\n\n    isInEditMode(rowIndex: number, columnIndex: number): boolean {\n        if (!this.cell) {\n            return false;\n        }\n        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;\n    }\n}\n\n\n@Injectable()\nexport class IgxGridSelectionService {\n    grid;\n    dragMode = false;\n    activeElement: ISelectionNode | null;\n    keyboardState = {} as ISelectionKeyboardState;\n    pointerState = {} as ISelectionPointerState;\n\n\n    selection = new Map<number, Set<number>>();\n    temp = new Map<number, Set<number>>();\n    _ranges: Set<string> = new Set<string>();\n    _selectionRange: Range;\n    rowSelection: Set<any> = new Set<any>();\n    private allRowsSelected: boolean;\n\n    /**\n     * Returns the current selected ranges in the grid from both\n     * keyboard and pointer interactions\n     */\n    get ranges(): GridSelectionRange[] {\n\n        // The last action was keyboard + shift selection -> add it\n        this.addKeyboardRange();\n\n        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));\n\n        // No ranges but we have a focused cell -> add it\n        if (!ranges.length && this.activeElement && this.grid.isCellSelectable) {\n            ranges.push(this.generateRange(this.activeElement));\n        }\n\n        return ranges;\n    }\n\n    get primaryButton(): boolean {\n        return this.pointerState.primaryButton;\n    }\n\n    set primaryButton(value: boolean) {\n        this.pointerState.primaryButton = value;\n    }\n\n    constructor(private zone: NgZone) {\n        this.initPointerState();\n        this.initKeyboardState();\n    }\n\n    /**\n     * Resets the keyboard state\n     */\n    initKeyboardState(): void {\n        this.keyboardState.node = null;\n        this.keyboardState.shift = false;\n        this.keyboardState.range = null;\n        this.keyboardState.active = false;\n    }\n\n    /**\n     * Resets the pointer state\n     */\n    initPointerState(): void {\n        this.pointerState.node = null;\n        this.pointerState.ctrl = false;\n        this.pointerState.shift = false;\n        this.pointerState.range = null;\n        this.pointerState.primaryButton = true;\n    }\n\n    /**\n     * Adds a single node.\n     * Single clicks | Ctrl + single clicks on cells is the usual case.\n     */\n    add(node: ISelectionNode, addToRange = true): void {\n        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :\n            this.selection.set(node.row, new Set<number>()).get(node.row).add(node.column);\n\n        if (addToRange) { this._ranges.add(JSON.stringify(this.generateRange(node))); }\n    }\n\n    /**\n     * Adds the active keyboard range selection (if any) to the `ranges` meta.\n     */\n    addKeyboardRange(): void {\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n    }\n\n    remove(node: ISelectionNode): void {\n        if (this.selection.has(node.row)) {\n            this.selection.get(node.row).delete(node.column);\n        }\n        if (this.isActiveNode(node)) {\n            this.activeElement = null;\n        }\n        this._ranges.delete(JSON.stringify(this.generateRange(node)));\n    }\n\n    isInMap(node: ISelectionNode): boolean {\n        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||\n            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));\n    }\n\n    selected(node: ISelectionNode): boolean {\n        return (this.isActiveNode(node) && this.grid.isCellSelectable) || this.isInMap(node);\n    }\n\n    isActiveNode(node: ISelectionNode): boolean {\n        if (this.activeElement) {\n            const isActive = this.activeElement.column === node.column && this.activeElement.row === node.row;\n            if (this.grid.hasColumnLayouts) {\n                const layout = this.activeElement.layout;\n                return isActive && this.isActiveLayout(layout, node.layout);\n            }\n            return isActive;\n        }\n        return false;\n    }\n\n    isActiveLayout(current: IMultiRowLayoutNode, target: IMultiRowLayoutNode): boolean {\n        return current.columnVisibleIndex === target.columnVisibleIndex;\n    }\n\n    addRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.add(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    removeRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    /**\n     * Generates a new selection range from the given `node`.\n     * If `state` is passed instead it will generate the range based on the passed `node`\n     * and the start node of the `state`.\n     */\n    generateRange(node: ISelectionNode, state?: SelectionState): GridSelectionRange {\n        if (!state) {\n            return {\n                rowStart: node.row,\n                rowEnd: node.row,\n                columnStart: node.column,\n                columnEnd: node.column\n            };\n        }\n\n        const { row, column } = state.node;\n        const rowStart = Math.min(node.row, row);\n        const rowEnd = Math.max(node.row, row);\n        const columnStart = Math.min(node.column, column);\n        const columnEnd = Math.max(node.column, column);\n\n        return { rowStart, rowEnd, columnStart, columnEnd };\n    }\n\n    /**\n     *\n     */\n    keyboardStateOnKeydown(node: ISelectionNode, shift: boolean, shiftTab: boolean): void {\n        this.keyboardState.active = true;\n        this.initPointerState();\n        this.keyboardState.shift = shift && !shiftTab;\n\n        // Kb navigation with shift and no previous node.\n        // Clear the current selection init the start node.\n        if (this.keyboardState.shift && !this.keyboardState.node) {\n            this.clear();\n            this.keyboardState.node = node;\n        }\n    }\n\n    keyboardStateOnFocus(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>, dom): void {\n        const kbState = this.keyboardState;\n\n        // Focus triggered by keyboard navigation\n        if (kbState.active) {\n            if (isChromium()) {\n                this._moveSelectionChrome(dom);\n            }\n            // Start generating a range if shift is hold\n            if (kbState.shift) {\n                this.dragSelect(node, kbState);\n                kbState.range = this.generateRange(node, kbState);\n                emitter.emit(this.generateRange(node, kbState));\n                return;\n            }\n\n            this.initKeyboardState();\n            this.clear();\n            this.add(node);\n        }\n    }\n\n    pointerDown(node: ISelectionNode, shift: boolean, ctrl: boolean): void {\n        this.addKeyboardRange();\n        this.initKeyboardState();\n        this.pointerState.ctrl = ctrl;\n        this.pointerState.shift = shift;\n\n        // No ctrl key pressed - no multiple selection\n        if (!ctrl) {\n            this.clear();\n        }\n\n        if (shift) {\n            // No previously 'clicked' node. Use the last active node.\n            if (!this.pointerState.node) {\n                this.pointerState.node = this.activeElement || node;\n            }\n            this.pointerDownShiftKey(node);\n            this.clearTextSelection();\n            return;\n        }\n\n        this.removeRangeMeta(node);\n        this.pointerState.node = node;\n    }\n\n    pointerDownShiftKey(node: ISelectionNode): void {\n        this.clear();\n        this.selectRange(node, this.pointerState);\n    }\n\n    mergeMap(target: Map<number, Set<number>>, source: Map<number, Set<number>>): void {\n        const iterator = source.entries();\n        let pair = iterator.next();\n        let key: number;\n        let value: Set<number>;\n\n        while (!pair.done) {\n            [key, value] = pair.value;\n            if (target.has(key)) {\n                const newValue = target.get(key);\n                value.forEach(record => newValue.add(record));\n                target.set(key, newValue);\n            } else {\n                target.set(key, value);\n            }\n            pair = iterator.next();\n        }\n    }\n\n    pointerEnter(node: ISelectionNode, event: PointerEvent): boolean {\n        // https://www.w3.org/TR/pointerevents/#the-button-property\n        this.dragMode = event.buttons === 1 && event.button === -1;\n        if (!this.dragMode) {\n            return false;\n        }\n        this.clearTextSelection();\n\n        // If the users triggers a drag-like event by first clicking outside the grid cells\n        // and then enters in the grid body we may not have a initial pointer starting node.\n        // Assume the first pointerenter node is where we start.\n        if (!this.pointerState.node) {\n            this.pointerState.node = node;\n        }\n\n        this.pointerState.ctrl ? this.selectRange(node, this.pointerState, this.temp) :\n            this.dragSelect(node, this.pointerState);\n        return true;\n    }\n\n    pointerUp(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): boolean {\n        if (this.dragMode) {\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            this.mergeMap(this.selection, this.temp);\n            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));\n            this.temp.clear();\n            this.dragMode = false;\n            return true;\n        }\n\n        if (this.pointerState.shift) {\n            this.clearTextSelection();\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            emitter.emit(this.generateRange(node, this.pointerState));\n            return true;\n        }\n\n        this.add(node);\n        return false;\n    }\n\n    selectRange(node: ISelectionNode, state: SelectionState, collection: Map<number, Set<number>> = this.selection): void {\n        if (collection === this.temp) {\n            collection.clear();\n        }\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                collection.has(i) ? collection.get(i).add(j) :\n                    collection.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    dragSelect(node: ISelectionNode, state: SelectionState): void {\n        if (!this.pointerState.ctrl) {\n            this.selection.clear();\n        }\n        this.selectRange(node, state);\n    }\n\n    clear(clearAcriveEl = false): void {\n        if (clearAcriveEl) { this.activeElement = null; }\n        this.selection.clear();\n        this.temp.clear();\n        this._ranges.clear();\n    }\n\n    clearTextSelection(): void {\n        const selection = window.getSelection();\n        if (selection.rangeCount) {\n            this._selectionRange = selection.getRangeAt(0);\n            this._selectionRange.collapse(true);\n            selection.removeAllRanges();\n        }\n    }\n\n    restoreTextSelection(): void {\n        const selection = window.getSelection();\n        if (!selection.rangeCount) {\n            selection.addRange(this._selectionRange || document.createRange());\n        }\n    }\n\n    /**\n     * (â¯Â°â¡Â°ï¼â¯ï¸µ â»ââ»\n     * Chrome and Chromium don't care about the active\n     * range after keyboard navigation, thus this.\n     */\n    _moveSelectionChrome(node: Node) {\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        const range = new Range();\n        range.selectNode(node);\n        range.collapse(true);\n        selection.addRange(range);\n    }\n\n    /** Returns array of the selected row id's. */\n    getSelectedRows(): Array<any> {\n        return this.rowSelection.size ? Array.from(this.rowSelection.keys()) : [];\n    }\n\n    /** Clears row selection, if filtering is applied clears only selected rows from filtered data. */\n    clearRowSelection(event?): void {\n        const removedRec = this.isFilteringApplied() ?\n            this.getRowIDs(this.allData).filter(rID => this.isRowSelected(rID)) : this.getSelectedRows();\n        const newSelection = this.isFilteringApplied() ? this.getSelectedRows().filter(x => !removedRec.includes(x)) : [];\n        this.emitRowSelectionEvent(newSelection, [], removedRec, event);\n    }\n\n    /** Select all rows, if filtering is applied select only from filtered data. */\n    selectAllRows(event?) {\n        const allRowIDs = this.getRowIDs(this.allData);\n        const addedRows =  allRowIDs.filter((rID) => !this.isRowSelected(rID));\n        const newSelection = this.rowSelection.size ? this.getSelectedRows().concat(addedRows) : addedRows;\n\n        this.emitRowSelectionEvent(newSelection, addedRows, [], event);\n    }\n\n    /** Select the specified row and emit event. */\n    selectRowById(rowID, clearPrevSelection?, event?): void {\n        if (!this.grid.isRowSelectable || this.isRowDeleted(rowID)) { return; }\n        clearPrevSelection = !this.grid.isMultiRowSelectionEnabled || clearPrevSelection;\n\n        const newSelection = clearPrevSelection ? [rowID] : this.getSelectedRows().indexOf(rowID) !== -1 ?\n            this.getSelectedRows() : [...this.getSelectedRows(), rowID];\n        const removed = clearPrevSelection ? this.getSelectedRows() : [];\n        this.emitRowSelectionEvent(newSelection, [rowID], removed, event);\n    }\n\n    /** Deselect the specified row and emit event. */\n    deselectRow(rowID, event?): void {\n        if (!this.isRowSelected(rowID)) { return; }\n        const newSelection = this.getSelectedRows().filter(r => r !== rowID);\n        if (this.rowSelection.size && this.rowSelection.has(rowID)) {\n            this.emitRowSelectionEvent(newSelection, [], [rowID], event);\n        }\n    }\n\n    /** Select specified rows. No event is emitted. */\n    selectRowsWithNoEvent(rowIDs: any[], clearPrevSelection?): void {\n        if (clearPrevSelection) { this.rowSelection.clear(); }\n        rowIDs.forEach(rowID => { this.rowSelection.add(rowID); });\n        this.allRowsSelected = undefined;\n    }\n\n    /** Deselect specified rows. No event is emitted. */\n    deselectRowsWithNoEvent(rowIDs: any[]): void  {\n        rowIDs.forEach(rowID => this.rowSelection.delete(rowID));\n        this.allRowsSelected = undefined;\n    }\n\n    isRowSelected(rowID): boolean {\n        return this.rowSelection.size > 0 && this.rowSelection.has(rowID);\n    }\n\n    /** Select range from last selected row to the current specified row.*/\n    selectMultipleRows(rowID, rowData, event?): void  {\n        this.allRowsSelected = undefined;\n        if (!this.rowSelection.size || this.isRowDeleted(rowID)) {\n            this.selectRowById(rowID);\n            return;\n        }\n        const gridData = this.allData;\n        const lastRowID = this.getSelectedRows()[this.rowSelection.size - 1];\n        const currIndex = gridData.indexOf(this.getRowDataById(lastRowID));\n        const newIndex = gridData.indexOf(rowData);\n        const rows = gridData.slice(Math.min(currIndex, newIndex), Math.max(currIndex, newIndex) + 1);\n\n        const added = this.getRowIDs(rows).filter(rID => !this.isRowSelected(rID));\n        const newSelection = this.getSelectedRows().concat(added);\n\n        this.emitRowSelectionEvent(newSelection, added, [], event);\n    }\n\n    areAllRowSelected(): boolean {\n        if (!this.grid.data) { return false; }\n        if (this.allRowsSelected !== undefined) { return this.allRowsSelected; }\n\n        const dataItemsID = this.getRowIDs(this.allData);\n        return this.allRowsSelected = Math.min(this.rowSelection.size, dataItemsID.length) > 0 &&\n            new Set(Array.from(this.rowSelection.values()).concat(dataItemsID)).size === this.rowSelection.size;\n    }\n\n    hasSomeRowSelected(): boolean {\n        const filteredData = this.isFilteringApplied() ?\n            this.getRowIDs(this.grid.filteredData).some(rID => this.isRowSelected(rID)) : true;\n        return this.rowSelection.size > 0 && filteredData && !this.areAllRowSelected();\n    }\n\n    public get filteredSelectedRowIds(): any[] {\n        return this.isFilteringApplied() ?\n            this.getRowIDs(this.allData).filter(rowID => this.isRowSelected(rowID)) :\n            this.getSelectedRows().filter(rowID => !this.isRowDeleted(rowID));\n    }\n\n    public emitRowSelectionEvent(newSelection, added, removed, event?): boolean {\n        const currSelection = this.getSelectedRows();\n        if (this.areEqualCollections(currSelection, newSelection)) { return; }\n\n        const args = {\n            oldSelection: currSelection, newSelection: newSelection,\n            added: added, removed: removed, event: event, cancel: false\n        };\n        this.grid.onRowSelectionChange.emit(args);\n        if (args.cancel) { return; }\n        this.selectRowsWithNoEvent(args.newSelection, true);\n    }\n\n    public getRowDataById(rowID): Object {\n        if (!this.grid.primaryKey) { return rowID; }\n        const rowIndex = this.getRowIDs(this.grid.gridAPI.get_all_data(true)).indexOf(rowID);\n        return rowIndex < 0 ? {} : this.grid.gridAPI.get_all_data(true)[rowIndex];\n    }\n\n    public getRowIDs(data): Array<any> {\n        return this.grid.primaryKey && data.length ? data.map(rec => rec[this.grid.primaryKey]) : data;\n    }\n\n    public clearHeaderCBState(): void  {\n        this.allRowsSelected = undefined;\n    }\n\n    /**Clear rowSelection and update checkbox state*/\n    public clearAllSelectedRows(): void {\n        this.rowSelection.clear();\n        this.clearHeaderCBState();\n    }\n\n    /** Returns all data in the grid, with applied filtering and sorting and without deleted rows. */\n    public get allData(): Array<any> {\n        const allData = this.isFilteringApplied() || this.grid.sortingExpressions.length ?\n            this.grid.filteredSortedData : this.grid.gridAPI.get_all_data(true);\n        return allData.filter(rData => !this.isRowDeleted(this.grid.gridAPI.get_row_id(rData)));\n    }\n\n    private areEqualCollections(first, second): boolean {\n        return first.length === second.length && new Set(first.concat(second)).size === first.length;\n    }\n\n    private isFilteringApplied(): boolean {\n        const grid = this.grid as IgxGridBaseDirective;\n        return !FilteringExpressionsTree.empty(grid.filteringExpressionsTree) ||\n            !FilteringExpressionsTree.empty(grid.advancedFilteringExpressionsTree);\n    }\n\n    private isRowDeleted(rowID): boolean {\n        return this.grid.gridAPI.row_deleted_transaction(rowID);\n    }\n}\n\nexport function isChromium(): boolean {\n    return (/Chrom|e?ium/g.test(navigator.userAgent) || /Google Inc/g.test(navigator.vendor)) && !/Edge/g.test(navigator.userAgent);\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\nimport { PlatformUtil } from './utils';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    private platformBrowser: boolean;\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {};\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any, private platformUtil: PlatformUtil) {\n        this.platformBrowser = this.platformUtil.isBrowser;\n        if (this.platformBrowser) {\n            this.hammerOptions = {\n                // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n                // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n                inputClass: Hammer.TouchInput,\n                recognizers: [\n                    [Hammer.Pan, { threshold: 0 }],\n                    [Hammer.Swipe, {\n                        direction: Hammer.DIRECTION_HORIZONTAL\n                    }],\n                    [Hammer.Tap],\n                    [Hammer.Tap, { event: 'doubletap', taps: 2 }, ['tap']]\n                ]\n            };\n        }\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(\n        element: HTMLElement,\n        eventName: string,\n        eventHandler: (eventObj) => void,\n        options: HammerOptions = null): () => void {\n        if (!this.platformBrowser) {\n            return;\n        }\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, Object.assign(this.hammerOptions, options));\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        if (!this.platformBrowser) {\n            return;\n        }\n\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","\nexport enum FilterMode {\n    quickFilter = 'quickFilter',\n    excelStyleFilter = 'excelStyleFilter'\n}\n\nexport enum GridSummaryPosition {\n    top = 'top',\n    bottom = 'bottom'\n}\n\nexport enum GridSummaryCalculationMode {\n    rootLevelOnly = 'rootLevelOnly',\n    childLevelsOnly = 'childLevelsOnly',\n    rootAndChildLevels = 'rootAndChildLevels'\n}\n\nexport enum GridKeydownTargetType {\n    dataCell = 'dataCell',\n    summaryCell = 'summaryCell',\n    groupRow = 'groupRow',\n    hierarchicalRow = 'hierarchicalRow'\n}\n\nexport enum GridSelectionMode {\n    none = 'none',\n    single = 'single',\n    multiple = 'multiple',\n}\n\nexport enum ColumnDisplayOrder {\n    Alphabetical = 'Alphabetical',\n    DisplayOrder = 'DisplayOrder'\n}\n","ï»¿import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    OnInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport {\n    getNodeSizeViaRange, ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS, NAVIGATION_KEYS, isIE, isLeftClick, PlatformUtil\n} from '../core/utils';\nimport { State } from '../services/index';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxGridSelectionService, ISelectionNode, IgxGridCRUDService } from './selection/selection.service';\nimport { DeprecateProperty, DeprecateMethod } from '../core/deprecateDecorators';\nimport { HammerGesturesManager } from '../core/touch';\nimport { ColumnType } from './common/column.interface';\nimport { RowType } from './common/row.interface';\nimport { GridSelectionMode } from './common/enums';\nimport { GridType } from './common/grid.interface';\nimport { IgxGridComponent, ISearchInfo } from './grid';\n\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-grid-cell',\n    templateUrl: './cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxGridCellComponent implements OnInit, OnChanges, OnDestroy {\n    private _vIndex = -1;\n    protected _lastSearchInfo: ISearchInfo;\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: ColumnType;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: RowType;\n\n    /**\n     * Gets the data of the row of the cell.\n     * ```typescript\n     * let rowData = this.cell.rowData;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public rowData: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.editMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    @Input()\n    get visibleColumnIndex() {\n        return this.column.columnLayoutChild ? this.column.visibleIndex : this._vIndex;\n    }\n\n    set visibleColumnIndex(val) {\n        this._vIndex = val;\n    }\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @deprecated\n     * Use `cell.editMode` as a getter and\n     * `cell.setEditMode(true | false)` to start/exit edit mode.\n     *\n     * Gets/sets whether the cell is in edit mode.\n     * ```typescript\n     * let isCellInEditMode = this.cell.inEditMode;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateProperty(`'inEditMode' is deprecated\\nUse 'editMode' to get the current state and 'setEditMode(boolean)' as a setter`)\n    get inEditMode(): boolean {\n        return this.editMode;\n    }\n\n    set inEditMode(value: boolean) {\n        this.setEditMode(value);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    get cellSelectionMode() {\n        return this._cellSelection;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    set lastSearchInfo(value: ISearchInfo) {\n        this._lastSearchInfo = value;\n        this.highlightText(this._lastSearchInfo.searchText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n    }\n\n    set cellSelectionMode(value) {\n        if (this._cellSelection === value) { return; }\n         this.zone.runOutsideAngular(() => {\n            value === GridSelectionMode.multiple ?\n            this.addPointerListeners(value) : this.removePointerListeners(this._cellSelection);\n        });\n        this._cellSelection = value;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--pinned-last')\n    lastPinned = false;\n\n    /**\n     * Returns whether the cell is in edit mode.\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--editing')\n    editMode = false;\n\n    /**\n     * Sets/get the `tabindex` property of the cell.\n     * Default value is `0`.\n     * ```typescript\n     * this.cell.tabindex = 1;\n     * ```\n     * ```typescript\n     * let cellTabIndex = this.cell.tabindex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.column.editable;\n    }\n\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Returns a string containing the grid `id` and the column `field` concatenated by \"_\".\n     * ```typescript\n     * let describedBy = this.cell.describedBy;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedby(): string {\n        return `${this.row.gridID}_${this.column.field}`;\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    width = '';\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-grid__td--selected')\n    get selected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set selected(val: boolean) {\n        const node = this.selectionNode;\n        val ? this.selectionService.add(node) : this.selectionService.remove(node);\n        this.grid.notifyChanges();\n    }\n\n    @HostBinding('class.igx-grid__td--edited')\n    get dirty() {\n        if (this.grid.rowEditable) {\n            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);\n            if (rowCurrentState) {\n                return rowCurrentState[this.column.field] !== undefined && rowCurrentState[this.column.field] !== null;\n            }\n        } else {\n            const rowTransaction: State = this.grid.transactions.getState(this.row.rowID);\n                return rowTransaction && rowTransaction.value &&\n                (rowTransaction.value[this.column.field] ||\n                 rowTransaction.value[this.column.field] === 0 ||\n                 rowTransaction.value[this.column.field] === false);\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * this.cell.editValue = value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public set editValue(value) {\n        if (this.crudService.inEditMode) {\n            this.crudService.cell.editValue = value;\n        }\n    }\n\n    /**\n     * Gets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * let editValue = this.cell.editValue;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get editValue() {\n        if (this.crudService.inEditMode) {\n            return this.crudService.cell.editValue;\n        }\n    }\n\n    /**\n     * Returns whether the cell is editable.\n     */\n    get editable(): boolean {\n        return this.column.editable;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-grid__td--active')\n    public focused = false;\n\n    @ViewChild('defaultCell', { read: TemplateRef, static: true })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef, static: true })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective })\n    protected set highlight(value: IgxTextHighlightDirective) {\n        this._highlight = value;\n\n        if (this._highlight && this.grid.lastSearchInfo.searchText) {\n            this._highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this._highlight.activateIfNecessary();\n        }\n    }\n\n    protected get highlight() {\n        return this._highlight;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            layout: this.column.columnLayoutChild ? {\n                rowStart: this.column.rowStart,\n                colStart: this.column.colStart,\n                rowEnd: this.column.rowEnd,\n                colEnd: this.column.colEnd,\n                columnVisibleIndex: this.visibleColumnIndex\n            } : null\n            };\n    }\n\n    protected isInCompositionMode = false;\n    protected compositionStartHandler;\n    protected compositionEndHandler;\n    private _highlight: IgxTextHighlightDirective;\n    private _cellSelection = GridSelectionMode.multiple;\n\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef,\n        protected zone: NgZone,\n        private touchManager: HammerGesturesManager,\n        protected platformUtil: PlatformUtil) { }\n\n    private addPointerListeners(selection) {\n        if (selection !== GridSelectionMode.multiple) { return; }\n        this.nativeElement.addEventListener('pointerdown', this.pointerdown);\n        this.nativeElement.addEventListener('pointerenter', this.pointerenter);\n        this.nativeElement.addEventListener('pointerup', this.pointerup);\n    }\n\n    private  removePointerListeners(selection) {\n        if (selection !== GridSelectionMode.multiple) { return; }\n        this.nativeElement.removeEventListener('pointerdown', this.pointerdown);\n        this.nativeElement.removeEventListener('pointerenter', this.pointerenter);\n        this.nativeElement.removeEventListener('pointerup', this.pointerup);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.addPointerListeners(this.cellSelectionMode);\n            // IE 11 workarounds\n            if (isIE()) {\n                this.compositionStartHandler = () => this.isInCompositionMode = true;\n                this.compositionEndHandler = () => this.isInCompositionMode = false;\n                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog\n                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n        if (this.platformUtil.isIOS) {\n            this.touchManager.addEventListener(this.nativeElement, 'doubletap', this.onDoubleClick, {\n                cssProps: { } /* don't disable user-select, etc */\n            } as HammerOptions);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.removePointerListeners(this.cellSelectionMode);\n            if (isIE()) {\n                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n        this.touchManager.destroy();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    _updateCRUDStatus() {\n        if (this.editMode) {\n            return;\n        }\n\n        const crud = this.crudService;\n        const editableCell = this.crudService.cell;\n        const editMode = !!(crud.row || crud.cell);\n\n        if (this.editable && editMode && !this.row.deleted) {\n            if (editableCell) {\n                this.gridAPI.update_cell(editableCell, editableCell.editValue);\n                /* This check is related with the following issue #6517:\n                 * when edit cell that belongs to a column which is sorted and press tab,\n                 * the next cell in edit mode is with wrong value /its context is not updated/;\n                 * So we reapply sorting before the next cell enters edit mode.\n                 * Also we need to keep the notifyChanges below, because of the current\n                 * change detection cycle when we have editing with enabled transactions\n                 */\n                if (this.grid.sortingExpressions.length && this.grid.sortingExpressions.indexOf(editableCell.column.field)) {\n                    this.grid.cdr.detectChanges();\n                }\n            }\n            crud.end();\n            this.grid.notifyChanges();\n            crud.begin(this);\n            return;\n        }\n\n        if (editableCell && crud.sameRow(this.cellID.rowID)) {\n            this.gridAPI.submit_value();\n        } else if (editMode && !crud.sameRow(this.cellID.rowID)) {\n            this.grid.endEdit(true);\n        }\n    }\n\n    /**\n     * @deprecated\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateMethod(`'isCellSelected' is deprecated. Use 'selected' property instead.`)\n    public isCellSelected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value && !changes.value.firstChange) {\n            if (this.highlight) {\n                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;\n                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;\n                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;\n            }\n        }\n    }\n\n    /**\n     * Starts/ends edit mode for the cell.\n     *\n     * ```typescript\n     * cell.setEditMode(true);\n     * ```\n     */\n    setEditMode(value: boolean): void {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.editable && value) {\n            this.gridAPI.submit_value();\n            this.crudService.begin(this);\n        } else {\n            this.gridAPI.escape_editMode();\n        }\n        this.grid.notifyChanges();\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    // TODO: Refactor\n    public update(val: any) {\n        if (this.row.deleted) {\n            return;\n        }\n        const cell = this.crudService.createCell(this);\n        const args = this.gridAPI.update_cell(cell, val);\n        if (this.crudService.cell && this.crudService.sameCell(cell)) {\n            if (args.cancel) {\n                return;\n            }\n            this.gridAPI.escape_editMode();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerdown = (event: PointerEvent) => {\n        if (!isLeftClick(event)) {\n            this.selectionService.addKeyboardRange();\n            this.selectionService.initKeyboardState();\n            this.selectionService.primaryButton = false;\n            return;\n        }\n        this.selectionService.pointerDown(this.selectionNode, event.shiftKey, event.ctrlKey);\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerenter = (event: PointerEvent) => {\n        const dragMode = this.selectionService.pointerEnter(this.selectionNode, event);\n        if (dragMode) {\n            this.grid.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    pointerup = (event: PointerEvent) => {\n        if (this.grid.hasColumnLayouts) {\n            this.grid.navigation.setStartNavigationCell(this.colStart, this.rowStart, null);\n        }\n        if (!isLeftClick(event)) { return; }\n        if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {\n            this.grid.cdr.detectChanges();\n        }\n        this._updateCRUDStatus();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick = (event: MouseEvent | HammerInput) => {\n        if (event.type === 'doubletap') {\n            // prevent double-tap to zoom on iOS\n            (event as HammerInput).preventDefault();\n        }\n        if (this.editable && !this.editMode && !this.row.deleted) {\n            this.crudService.begin(this);\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event: MouseEvent) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event: FocusEvent) {\n        if (this.focused) {\n            return;\n        }\n        this.focused = true;\n        this.row.focused = true;\n        const node = this.selectionNode;\n        const shouldEmitSelection = !this.selectionService.isActiveNode(node);\n\n        if (this.selectionService.primaryButton) {\n            this._updateCRUDStatus();\n            this.selectionService.activeElement = node;\n        } else {\n            this.selectionService.activeElement = null;\n            if (this.crudService.inEditMode && !this.editMode) {\n                this.gridAPI.submit_value();\n            }\n        }\n\n        this.selectionService.primaryButton = true;\n        if (this.cellSelectionMode === GridSelectionMode.multiple && this.selectionService.activeElement) {\n            this.selectionService.add(this.selectionService.activeElement, false); // pointer events handle range generation\n            this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection, this.nativeElement);\n        }\n        if (this.grid.isCellSelectable && shouldEmitSelection) {\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n        this.row.focused = false;\n    }\n\n    protected handleAlt(key: string, event: KeyboardEvent) {\n        if (this.isToggleKey(key)) {\n            const collapse = (this.row as any).expanded && ROW_COLLAPSE_KEYS.has(key);\n            const expand = !(this.row as any).expanded && ROW_EXPAND_KEYS.has(key);\n            if (expand) {\n                this.gridAPI.set_row_expansion_state(this.row.rowID, true, event);\n            } else if (collapse) {\n                this.gridAPI.set_row_expansion_state(this.row.rowID, false, event);\n            }\n            this.grid.notifyChanges();\n        }\n    }\n\n    protected handleTab(shift: boolean) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.selectionNode);\n        } else {\n            this.grid.navigation.performTab(this.row.nativeElement, this.selectionNode);\n        }\n    }\n\n    protected handleEnd(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToLastCell();\n        } else {\n            this.grid.navigation.onKeydownEnd(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    protected handleHome(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToFirstCell();\n        } else {\n            this.grid.navigation.onKeydownHome(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    // TODO: Refactor\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const node = this.selectionNode;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n\n        const keydownArgs = { targetType: 'dataCell', target: this, event: event, cancel: false };\n\n        // This fixes IME editing issue(#6335) that happens only on IE\n        if (isIE() && keydownArgs.event.keyCode === 229 && event.key === 'Tab') {\n            return;\n        }\n\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            this.selectionService.clear();\n            this.selectionService.keyboardState.active = true;\n            return;\n        }\n\n        if (event.altKey) {\n            event.preventDefault();\n            this.handleAlt(key, event);\n            return;\n        }\n\n        this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');\n\n\n        if (key === 'tab') {\n            event.preventDefault();\n        }\n\n        if (this.editMode) {\n            if (NAVIGATION_KEYS.has(key)) {\n                if (this.column.inlineEditorTemplate) { return; }\n                if (['date', 'boolean'].indexOf(this.column.dataType) > -1) { return; }\n                return;\n            }\n        }\n\n        if (NAVIGATION_KEYS.has(key)) {\n            event.preventDefault();\n        }\n\n        switch (key) {\n            case 'tab':\n                this.handleTab(shift);\n                break;\n            case 'end':\n                this.handleEnd(ctrl);\n                break;\n            case 'home':\n                this.handleHome(ctrl);\n                break;\n            case 'arrowleft':\n            case 'left':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownHome(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowright':\n            case 'right':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownEnd(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl) {\n                    this.grid.navigation.navigateTop(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateUp(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                if (ctrl) {\n                    this.grid.navigation.navigateBottom(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateDown(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'enter':\n            case 'f2':\n                this.onKeydownEnterEditMode();\n                break;\n            case 'escape':\n            case 'esc':\n                this.onKeydownExitEditMode();\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                if (this.grid.isRowSelectable) {\n                    this.row.selected ? this.selectionService.deselectRow(this.row.rowID, event) :\n                    this.selectionService.selectRowById(this.row.rowID, false, event);\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownEnterEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n        if (this.column.editable && !this.row.deleted) {\n            if (this.editMode) {\n                this.grid.endEdit(true);\n                this.nativeElement.focus();\n            } else {\n                this.crudService.begin(this);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownExitEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n\n        if (this.editMode) {\n            const args = this.crudService.cell.createEditEventArgs();\n            this.grid.onCellEditCancel.emit(args);\n            if (args.cancel) {\n                return;\n            }\n            this.grid.endEdit(false);\n            this.nativeElement.focus();\n        }\n    }\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { first, debounceTime } from 'rxjs/operators';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IgxGridGroupByRowComponent } from './grid/groupby-row.component';\nimport { ISelectionNode } from './selection/selection.service';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridType } from './common/grid.interface';\nimport { FilterMode } from './common/enums';\n\nenum MoveDirection {\n    LEFT = 'left',\n    RIGHT = 'right'\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: GridType;\n\n    get displayContainerWidth() {\n        return Math.round(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth);\n    }\n\n    get displayContainerScrollLeft() {\n        return Math.ceil(this.grid.headerContainer.scrollPosition);\n    }\n\n    get verticalDisplayContainerElement() {\n        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public horizontalScroll(rowIndex) {\n        let rowComp = this.grid.dataRowList.find((row) => row.index === rowIndex) || this.grid.dataRowList.first;\n        if (!rowComp) {\n            rowComp = this.grid.summariesRowList.find((row) => row.index === rowIndex);\n        }\n        return rowComp.virtDirRow;\n    }\n\n    public getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    public isColumnFullyVisible(columnIndex: number) {\n        return this.isColumnRightEdgeVisible(columnIndex) && this.isColumnLeftEdgeVisible(columnIndex);\n    }\n\n    public isColumnRightEdgeVisible(columnIndex: number) {\n        const forOfDir: IgxForOfDirective<any> = this.forOfDir();\n        if (this.isColumnPinned(columnIndex, forOfDir)) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft;\n    }\n\n    public isColumnLeftEdgeVisible(columnIndex: number) {\n        const forOfDir = this.forOfDir();\n        if (this.isColumnPinned(columnIndex, forOfDir)) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        return this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    private forOfDir(): IgxForOfDirective<any> {\n        let forOfDir: IgxForOfDirective<any>;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        return forOfDir;\n    }\n\n    private isColumnPinned(columnIndex: number, forOfDir: IgxForOfDirective<any>): boolean {\n        const horizontalScroll = forOfDir.getScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === columnIndex);\n        return (!horizontalScroll.clientWidth || column.pinned);\n    }\n\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);\n    }\n\n    public isRowInEditMode(rowIndex): boolean {\n        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);\n    }\n\n    public findNextEditable(direction: string, visibleColumnIndex: number) {\n        // go trough all columns in one cycle instead of\n        // splice().reverse().find()\n        const gridColumns = this.gridOrderedColumns;\n        const start = visibleColumnIndex;\n        let end = 0;\n        let step = 0;\n        let result = -1;\n        if (direction === MoveDirection.LEFT) {\n            end = 0;\n            step = -1;\n        } else if (direction === MoveDirection.RIGHT) {\n            end = gridColumns.length - 1;\n            step = 1;\n        }\n        for (let c = start; (c * step) <= end; c += step) {\n            const column = gridColumns[c];\n            if (column.editable) {\n                result = c;\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        return this.grid.nativeElement.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`) as HTMLElement;\n    }\n\n    public onKeydownArrowRight(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.isColumnRightEdgeVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned\n            if (element.classList.contains('igx-grid__td--pinned-last') || element.classList.contains('igx-grid-summary--pinned-last')) {\n                if (this.isColumnLeftEdgeVisible(visibleColumnIndex + 1)) {\n                    element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                } else {\n                    this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n                    this.grid.parentVirtDir.onChunkLoad\n                        .pipe(first())\n                        .subscribe(() => {\n                            element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                        });\n                    this.horizontalScroll(rowIndex).scrollTo(0);\n                }\n            } else {\n                element.nextElementSibling.focus({ preventScroll: true });\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1, isSummary);\n        }\n    }\n\n    public onKeydownArrowLeft(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0) {\n            return;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);\n        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === - 1) {\n            element.parentNode.previousElementSibling.focus({ preventScroll: true });\n        } else if (!this.isColumnLeftEdgeVisible(visibleColumnIndex - 1)) {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1, isSummary);\n        } else {\n            element.previousElementSibling.focus({ preventScroll: true });\n        }\n\n    }\n\n    public movePreviousEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        let prevEditableColumnIndex = this.findNextEditable(MoveDirection.LEFT, currentColumnVisibleIndex - 1);\n        if (prevEditableColumnIndex === -1) {\n            if (this.grid.rowEditTabs.length) {\n                //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                this.grid.rowEditTabs.last.element.nativeElement.focus();\n                return;\n            } else {\n                // In case when row edit template is empty select last editable cell\n                prevEditableColumnIndex = this.grid.lastEditableColumnIndex;\n            }\n\n        }\n        this.focusEditableTarget(rowIndex, prevEditableColumnIndex);\n    }\n\n    public moveNextEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        let nextEditableColumnIndex = this.findNextEditable(MoveDirection.RIGHT, currentColumnVisibleIndex + 1);\n        if (nextEditableColumnIndex === -1) {\n            if ( this.grid.rowEditTabs.length) {\n                 //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                this.grid.rowEditTabs.first.element.nativeElement.focus();\n                return;\n            } else {\n                // In case when row edit template is empty select first editable cell\n                nextEditableColumnIndex = this.grid.firstEditableColumnIndex;\n            }\n        }\n        this.focusEditableTarget(rowIndex, nextEditableColumnIndex);\n    }\n\n    public focusEditableTarget(rowIndex: number, columnIndex: number) {\n        if (this.isColumnFullyVisible(columnIndex)) {\n            this.getCellElementByVisibleIndex(rowIndex, columnIndex).focus();\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, columnIndex);\n        }\n    }\n\n    public onKeydownHome(rowIndex, isSummary = false) {\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        const cellSelector = this.getCellSelector(0, isSummary);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        let firstCell = rowElement.querySelector(cellSelector);\n        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {\n            firstCell.focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    firstCell = rowElement.querySelector(cellSelector);\n                    firstCell.focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(0);\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        const index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        if (this.isColumnRightEdgeVisible(index)) {\n            const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n            allCells[allCells.length - 1].focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n                    allCells[allCells.length - 1].focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        const targetIndex = this.findFirstDataRowIndex();\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, false);\n        if (targetScr >= verticalScroll.scrollTop) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            (cells[0] as HTMLElement).focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : 0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(debounceTime(10)).pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { (cells[0] as HTMLElement).focus(); }\n                });\n        }\n    }\n\n    private findFirstDataRowIndex() {\n        const dv = this.grid.dataView;\n        return dv.findIndex(rec => !this.grid.isGroupByRecord(rec) && !this.grid.isDetailRecord(rec));\n    }\n\n    private findLastDataRowIndex() {\n        let i = this.grid.dataView.length;\n        while (i--) {\n            const rec = this.grid.dataView[i];\n            if (!this.grid.isGroupByRecord(rec) && !this.grid.isDetailRecord(rec)) {\n                 return i;\n            }\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        const targetIndex = this.findLastDataRowIndex();\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === targetScr) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            (cells[cells.length - 1] as HTMLElement).focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(debounceTime(10)).pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) {\n                        (cells[cells.length - 1] as HTMLElement).focus({preventScroll: true});\n                    }\n                });\n        }\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === 0) {\n            return;\n        }\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        if (!rowElement.previousElementSibling ||\n            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    rowElement = this.getRowByIndex(currentRowIndex, tag);\n                    this.focusPreviousElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusPreviousElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusPreviousElement(currentRowEl, visibleColumnIndex) {\n        this.focusElem(currentRowEl.previousElementSibling, visibleColumnIndex);\n    }\n\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === this.grid.dataView.length - 1 ||\n            (currentRowIndex === 0 && rowElement.tagName.toLowerCase() === 'igx-grid-summary-row')) {\n            // check if this is rootSummary row\n            return;\n        }\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = rowElement.nextElementSibling ?\n            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :\n            containerHeight + rowHeight;\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        if (containerHeight && containerHeight < targetEndTopOffset) {\n            const nextIndex = currentRowIndex + 1;\n            this.grid.verticalScrollContainer.scrollTo(nextIndex);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    rowElement = this.getNextRowByIndex(nextIndex);\n                    this.focusElem(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusNextElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusElem(rowElement, visibleColumnIndex) {\n        if (rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row' || rowElement.className === 'igx-grid__tr-container') {\n            rowElement.focus();\n        } else {\n            const isSummaryRow = rowElement.tagName.toLowerCase() === 'igx-grid-summary-row';\n            if (this.isColumnFullyVisible(visibleColumnIndex)) {\n                const cellSelector = this.getCellSelector(visibleColumnIndex, isSummaryRow);\n                const cell = rowElement.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return cell;\n            }\n            this.performHorizontalScrollToCell(parseInt(\n                rowElement.getAttribute('data-rowindex'), 10), visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    protected focusNextElement(rowElement, visibleColumnIndex) {\n        return this.focusElem(rowElement.nextElementSibling, visibleColumnIndex);\n    }\n\n    public goToFirstCell() {\n        const targetIndex = this.findFirstDataRowIndex();\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, false);\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollTop === targetScr) {\n            this.onKeydownHome(this.grid.dataRowList.first.index);\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : 0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    this.onKeydownHome(this.grid.dataRowList.first.index);\n                });\n        }\n    }\n\n    public goToLastCell() {\n        const targetIndex = this.findLastDataRowIndex();\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === targetScr) {\n            const rows = this.getAllRows();\n            const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n            this.onKeydownEnd(rowIndex);\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rows = this.getAllRows();\n                    if (rows.length > 0) {\n                        const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n                        this.onKeydownEnd(rowIndex);\n                    }\n                });\n        }\n    }\n\n    public goToLastBodyElement() {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rowIndex = this.grid.dataView.length - 1;\n            const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`) as HTMLElement;\n            const isRowTarget = row.tagName.toLowerCase() === 'igx-grid-groupby-row' ||\n            this.grid.isDetailRecord(this.grid.dataView[rowIndex]);\n            if (row && isRowTarget) {\n                row.focus();\n                return;\n            }\n            const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n            this.onKeydownEnd(rowIndex, isSummary);\n        } else {\n            this.grid.verticalScrollContainer.scrollTo(this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rowIndex = this.grid.dataView.length - 1;\n                    const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`) as HTMLElement;\n                    const isRowTarget = row.tagName.toLowerCase() === 'igx-grid-groupby-row' ||\n                    this.grid.isDetailRecord(this.grid.dataView[rowIndex]);\n                    if (row && isRowTarget) {\n                        row.focus();\n                        return;\n                    }\n                    const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n                    this.onKeydownEnd(rowIndex, isSummary);\n                });\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        const nextIsDetailRow = rowIndex + 1 <= this.grid.dataView.length - 1 ?\n         this.grid.isDetailRecord(this.grid.dataView[rowIndex + 1]) : false;\n        const isLastColumn = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;\n        if (isSummaryRow && rowIndex === 0 &&\n            this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n\n        if (this.isRowInEditMode(rowIndex)) {\n            this.moveNextEditable(rowIndex, visibleColumnIndex);\n            return;\n        }\n\n        if (nextIsDetailRow && isLastColumn) {\n            this.navigateDown(currentRowEl, { row: rowIndex, column: visibleColumnIndex });\n            return;\n        }\n\n        if (isLastColumn) {\n            const rowEl = this.grid.rowList.find(row => row.index === rowIndex + 1) ?\n                this.grid.rowList.find(row => row.index === rowIndex + 1) :\n                this.grid.summariesRowList.find(row => row.index === rowIndex + 1);\n            if (rowIndex === this.grid.dataView.length - 1 && this.grid.rootSummariesEnabled) {\n                this.onKeydownHome(0, true);\n                return;\n            }\n            if (rowEl) {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummaryRow);\n            if (cell) {\n                this.onKeydownArrowRight(cell, selectedNode);\n            }\n        }\n    }\n\n    public moveFocusToFilterCell(toStart?: boolean) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            this.grid.filteringService.focusFilterRowCloseButton();\n            return;\n        }\n\n        const columns = this.grid.filteringService.unpinnedFilterableColumns;\n        const targetIndex = toStart ? 0 : columns.length - 1;\n        const visibleIndex = columns[targetIndex].visibleIndex;\n        const isVisible = toStart ? this.isColumnLeftEdgeVisible(visibleIndex) : this.isColumnRightEdgeVisible(visibleIndex);\n        if (isVisible) {\n            this.grid.filteringService.focusFilterCellChip(columns[targetIndex], false);\n        } else {\n            this.grid.filteringService.scrollToFilterCell(columns[targetIndex], false);\n        }\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const prevFilterableIndex = cols.indexOf(column) - 1;\n        const visibleIndex = column.visibleIndex;\n        if (visibleIndex === 0 || prevFilterableIndex < 0) {\n            // prev is not filter cell\n            const firstFiltarableCol = this.getFirstPinnedFilterableColumn();\n            if (!firstFiltarableCol || column === firstFiltarableCol) {\n                eventArgs.preventDefault();\n            }\n            return;\n        }\n        const prevColumn = cols[prevFilterableIndex];\n        const prevVisibleIndex = prevColumn.visibleIndex;\n\n        if (prevFilterableIndex >= 0 && visibleIndex > 0 && !this.isColumnLeftEdgeVisible(prevVisibleIndex) && !column.pinned) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(prevColumn, false);\n        }\n    }\n\n    public navigateFirstCellIfPossible(eventArgs) {\n        if (this.grid.rowList.length > 0) {\n            if (this.grid.rowList.filter(row => row instanceof IgxGridGroupByRowComponent).length > 0) {\n                eventArgs.stopPropagation();\n                return;\n            }\n            this.goToFirstCell();\n        } else if (this.grid.rootSummariesEnabled) {\n            this.onKeydownHome(0, true);\n        }\n        eventArgs.preventDefault();\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            this.navigateFirstCellIfPossible(eventArgs);\n            return;\n        }\n        const nextColumn = cols[nextFilterableIndex];\n        const nextVisibleIndex = nextColumn.visibleIndex;\n        if (!column.pinned && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(nextColumn, true);\n        } else if (column === this.getLastPinnedFilterableColumn() && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {\n            this.grid.filteringService.scrollToFilterCell(nextColumn, false);\n            eventArgs.stopPropagation();\n        }\n    }\n\n    private getLastPinnedFilterableColumn(): IgxColumnComponent {\n        const pinnedFilterableColums =\n            this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable);\n        return pinnedFilterableColums[pinnedFilterableColums.length - 1];\n    }\n\n    private getFirstPinnedFilterableColumn(): IgxColumnComponent {\n        return this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable)[0];\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (isSummary && rowIndex === 0 && visibleColumnIndex === 0 && this.grid.rowList.length) {\n            this.goToLastBodyElement();\n            return;\n        }\n\n        if (this.isRowInEditMode(rowIndex)) {\n            this.movePreviousEditable(rowIndex, visibleColumnIndex);\n            return;\n        }\n\n        const prevIsDetailRow = rowIndex > 0 ? this.grid.isDetailRecord(this.grid.dataView[rowIndex - 1]) : false;\n        if (visibleColumnIndex === 0 && prevIsDetailRow) {\n            let target = currentRowEl.previousElementSibling;\n            const applyFocusFunc = () => {\n                    target = this.getRowByIndex(rowIndex - 1, '');\n                    target.focus({ preventScroll: true });\n            };\n            if (target) {\n                applyFocusFunc();\n            } else {\n                this.performVerticalScrollToCell(rowIndex - 1, visibleColumnIndex, () => {\n                    applyFocusFunc();\n                });\n            }\n\n            return;\n        }\n\n        if (visibleColumnIndex === 0) {\n            if (rowIndex === 0 && this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                this.navigateUp(currentRowEl,\n                    {\n                        row: rowIndex,\n                        column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex\n                    });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n            if (cell) {\n                this.onKeydownArrowLeft(cell, selectedNode);\n            }\n        }\n    }\n\n    public shouldPerformVerticalScroll(targetRowIndex: number, visibleColumnIndex: number): boolean {\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        const targetRow = this.getRowByIndex(targetRowIndex, '') as any;\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(targetRowIndex);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = targetRow ? targetRow.offsetTop + rowHeight + containerTopOffset :\n            containerHeight + rowHeight;\n        if (!targetRow || targetRow.offsetTop < Math.abs(containerTopOffset)\n            || containerHeight && containerHeight < targetEndTopOffset) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColIndex: number, cb?: () => void) {\n        this.grid.verticalScrollContainer.scrollTo(rowIndex);\n        this.grid.verticalScrollContainer.onChunkLoad\n            .pipe(first()).subscribe(() => {\n                cb();\n            });\n    }\n\n    public performHorizontalScrollToCell(\n        rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    const cellElement = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n                    if (cellElement) {\n                        cellElement.focus({ preventScroll: true });\n                    }\n                }\n            });\n        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n    }\n\n    protected getFocusableGrid() {\n        return this.grid;\n    }\n\n    protected getRowByIndex(index, selector = this.getRowSelector()) {\n        const gridTag = this.grid.nativeElement.tagName.toLocaleLowerCase();\n        const row = Array.from(this.grid.tbody.nativeElement.querySelectorAll(\n            `${selector}[data-rowindex=\"${index}\"]`))\n            .find(x => this.getClosestElemByTag(x, gridTag).getAttribute('id') === this.grid.id);\n            return row;\n        }\n\n    protected getNextRowByIndex(nextIndex) {\n        const gridTag = this.grid.nativeElement.tagName.toLocaleLowerCase();\n        const row = Array.from(this.grid.tbody.nativeElement.querySelectorAll(\n            `[data-rowindex=\"${nextIndex}\"]`)).find(x => this.getClosestElemByTag(x, gridTag).getAttribute('id') === this.grid.id);\n        return row;\n    }\n\n    private getAllRows() {\n        const selector = this.getRowSelector();\n        return this.grid.nativeElement.querySelectorAll(selector);\n    }\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        if (visibleIndex === 0 && this.grid.hasDetails && !isSummary) {\n            return 'igx-expandable-grid-cell';\n        }\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-grid-cell';\n    }\n\n    protected getRowSelector(): string {\n        return 'igx-grid-row';\n    }\n\n    protected getClosestElemByTag(sourceElem, targetTag) {\n        let result = sourceElem;\n        while (result !== null && result.nodeType === 1) {\n            if (result.tagName.toLowerCase() === targetTag.toLowerCase()) {\n                return result;\n            }\n            result = result.parentNode;\n        }\n        return null;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    Directive\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { TransactionType } from '../services';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from './selection/selection.service';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { GridType } from './common/grid.interface';\n\n@Directive({\n    selector: '[igxRowBaseComponent]'\n})\nexport class IgxRowDirective<T extends IgxGridBaseDirective & GridType> implements DoCheck {\n\n    private _rowData: any;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent })\n    public checkboxElement: IgxCheckboxComponent;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxGridCellComponent))\n    public cells: QueryList<IgxGridCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    get selected(): boolean {\n        return this.selectionService.isRowSelected(this.rowID);\n    }\n\n    set selected(value: boolean) {\n        value ? this.selectionService.selectRowsWithNoEvent([this.rowID]) :\n        this.selectionService.deselectRowsWithNoEvent([this.rowID]);\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number {\n        if ((this.grid as any).groupingExpressions.length) {\n            return this.grid.filteredSortedData.indexOf(this.rowData);\n        }\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showRowSelectors(): boolean {\n        return this.grid.showRowSelectors;\n    }\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    @DeprecateProperty('isSelected property is deprecated. Use selected property instead.')\n    public get isSelected() {\n        return this.selectionService.isRowSelected(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowDraggable(): boolean {\n        return this.grid.rowDraggable;\n    }\n\n    /** @hidden */\n    public get added(): boolean {\n        const row = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD;\n        }\n\n         return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.gridAPI.row_deleted_transaction(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public dragging = false;\n\n    // TODO: Refactor\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.crudService.row;\n            return (editRowState && editRowState.id === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    public get rowID() {\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public defaultCssClass = 'igx-grid__tr';\n\n\n    constructor(\n        public gridAPI: GridBaseAPIService<T>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        public element: ElementRef<HTMLElement>,\n        public cdr: ChangeDetectorRef) {}\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        if (this.grid.rowSelection === 'none' || this.deleted) { return; }\n        if (event.shiftKey && this.grid.rowSelection === 'multiple') {\n            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);\n            return;\n        }\n        this.selectionService.selectRowById(this.rowID, !event.ctrlKey, event);\n    }\n\n    /**\n     * @hidden\n     */\n    public onRowSelectorClick(event) {\n        event.stopPropagation();\n        if (event.shiftKey && this.grid.rowSelection === 'multiple') {\n            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);\n            return;\n        }\n        this.selected ? this.selectionService.deselectRow(this.rowID, event) :\n        this.selectionService.selectRowById(this.rowID, false, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const crudService = this.crudService;\n        if (crudService.inEditMode && crudService.cell.id.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        const row = new IgxRow(this.rowID, this.index, this.rowData);\n        this.gridAPI.update_row(row, value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.selected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.selected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.selected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        const mrlClass = this.grid.hasColumnLayouts ? 'igx-grid__tr--mrl' : '';\n        const dragClass = this.dragging ? 'igx-grid__tr--drag' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass}\n         ${deletedClass} ${mrlClass} ${dragClass}`.trim();\n    }\n\n    /**\n     * @hidden\n     */\n    public get resolveDragIndicatorClasses(): string {\n        const defaultDragIndicatorCssClass = 'igx-grid__drag-indicator';\n        const dragIndicatorOff = this.grid.rowDragging && !this.dragging ? 'igx-grid__drag-indicator--off' : '';\n        return `${defaultDragIndicatorCssClass} ${dragIndicatorOff}`;\n    }\n}\n","export interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport interface ISummaryRecord {\n    summaries: Map<string, IgxSummaryResult[]>;\n    max?: number;\n    cellIndentation?: number;\n}\n\nconst clear = (el) => el === 0 || Boolean(el);\nconst first = (arr) => arr[0];\nconst last = (arr) => arr[arr.length - 1];\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): number {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: IgxSummaryOperand.count(data)\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.min(a, b)) : 0;\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.max(a, b)) : 0;\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => +a + +b) : 0;\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): number {\n        return data.length && data.filter(clear).length ? this.sum(data) / this.count(data) : 0;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: \"max\",\n     *       label: \"Max\",\n     *       summaryResult: IgxNumberSummaryOperand.max(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        const result = super.operate(data, allData, fieldName);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: IgxNumberSummaryOperand.min(data)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: IgxNumberSummaryOperand.max(data)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: IgxNumberSummaryOperand.sum(data)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: IgxNumberSummaryOperand.average(data)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            first(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            last(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"latest\",\n     *       label: \"Latest Date\",\n     *       summaryResult: IgxDateSummaryOperand.latest(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        const result = super.operate(data, allData, fieldName);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: IgxDateSummaryOperand.earliest(data)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: IgxDateSummaryOperand.latest(data)\n        });\n        return result;\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxFilterCellTemplate]'\n})\nexport class IgxFilterCellTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCollapsibleIndicator]'\n})\nexport class IgxCollapsibleIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { notifyChanges } from '../watch-changes';\nimport { WatchColumnChanges } from '../watch-changes';\nimport { IgxRowIslandAPIService } from '../hierarchical-grid/row-island-api.service';\nimport { DataType } from '../../data-operations/data-util';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\nimport {\n    IgxFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand\n} from '../../data-operations/filtering-condition';\nimport { ISortingStrategy, DefaultSortingStrategy } from '../../data-operations/sorting-strategy';\nimport { DisplayDensity } from '../../core/displayDensity';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxRowDirective } from '../row.directive';\nimport { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { GridBaseAPIService } from '../api.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxGridHeaderComponent } from '../headers/grid-header.component';\nimport { IgxGridFilteringCellComponent } from '../filtering/base/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from '../headers/grid-header-group.component';\nimport { getNodeSizeViaRange } from '../../core/utils';\nimport { IgxSummaryOperand, IgxNumberSummaryOperand, IgxDateSummaryOperand } from '../summaries/grid-summary';\nimport {\n    IgxCellTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellEditorTemplateDirective,\n    IgxCollapsibleIndicatorTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './templates.directive';\nimport { MRLResizeColumnInfo, MRLColumnSizeInfo } from './interfaces';\n\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit {\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public sortable = false;\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    groupable = false;\n    /**\n     * Gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    get editable(): boolean {\n        // Updating the primary key when grid has transactions (incl. row edit)\n        // should not be allowed, as that can corrupt transaction state.\n        const rowEditable = this.grid && this.grid.rowEditable;\n        const hasTransactions = this.grid && this.grid.transactions.enabled;\n\n        if (this.isPrimaryColumn && (rowEditable || hasTransactions)) {\n            return false;\n        }\n\n        if (this._editable !== undefined) {\n            return this._editable;\n        } else {\n            return rowEditable;\n        }\n    }\n    /**\n     * Sets whether the column is editable.\n     * ```typescript\n     * this.column.editable = true;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set editable(editable: boolean) {\n        this._editable = editable;\n    }\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public filterable = true;\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public resizable = false;\n    /**\n     * Gets a value indicating whether the summary for the column is enabled.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    get hasSummary() {\n        return this._hasSummary;\n    }\n    /**\n     * Sets a value indicating whether the summary for the column is enabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hasSummary(value) {\n        this._hasSummary = value;\n\n        if (this.grid) {\n            this.grid.summaryService.resetSummaryHeight();\n        }\n    }\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     *@memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(hidden)] = \"model.isHidden\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            this.hiddenChange.emit(this._hidden);\n            if (this.columnLayoutChild && this.parent.hidden !== value) {\n                this.parent.hidden = value;\n                return;\n            }\n            if (this.grid) {\n                this.grid.endEdit(false);\n                this.grid.summaryService.resetSummaryHeight();\n                this.grid.filteringService.refreshExpressions();\n                this.grid.notifyChanges();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hiddenChange = new EventEmitter<boolean>();\n\n    /** @hidden */\n    @Output()\n    public expandedChange = new EventEmitter<boolean>();\n\n    /** @hidden */\n    @Output()\n    public collapsibleChange = new EventEmitter<boolean>();\n    /** @hidden */\n    @Output()\n    public visibleWhenCollapsedChange = new EventEmitter<boolean>();\n\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    disableHiding = false;\n    /**\n     * Gets whether the pinning is disabled.\n     * ```typescript\n     * let isPinningDisabled =  this.column.disablePinning;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    disablePinning = false;\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @notifyChanges()\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(width)]=\"model.columns[0].width\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this._calcWidth = null;\n            this.calcPixelWidth = NaN;\n            this.widthSetByUser = true;\n            // width could be passed as number from the template\n            // host bindings are not px affixed so we need to ensure we affix simple number strings\n            if (typeof(value) === 'number' || value.match(/^[0-9]*$/)) {\n                value = value + 'px';\n            }\n            this._width = value;\n            if (this.grid) {\n                this.cacheCalcWidth();\n            }\n            this.widthChange.emit(this._width);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public widthChange = new EventEmitter<string>();\n\n    /**\n     * @hidden\n     */\n    public get calcWidth(): any {\n        return this.getCalcWidth();\n    }\n\n    private _calcWidth = null;\n    public calcPixelWidth: number;\n\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'75%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public maxWidth: string;\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'15%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public set minWidth(value: string) {\n        const minVal = parseFloat(value);\n        if (Number.isNaN(minVal)) { return; }\n        this._defaultMinWidth = value;\n\n    }\n    public get minWidth(): string {\n        return !this._defaultMinWidth ? this.defaultMinWidth : this._defaultMinWidth;\n    }\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public headerClasses = '';\n\n    /**\n     * Sets/gets the class selector of the column group header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerGroupClasses;\n     * ```\n     * ```html\n     * <igx-column [headerGroupClasses] = \"'column-group-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public headerGroupClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey, cellValue, rowIndex) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public cellClasses: any;\n\n    /**\n     * Sets conditional style properties on the column cells.\n     * Similar to `ngStyle` it accepts an object literal where the keys are\n     * the style properties and the value is the expression to be evaluated.\n     * As with `cellClasses` it accepts a callback function.\n     * ```typescript\n     * styles = {\n     *  background: 'royalblue',\n     *  color: (rowData, columnKey, cellValue, rowIndex) => value.startsWith('Important') : 'red': 'inherit'\n     * }\n     * ```\n     * ```html\n     * <igx-column [cellStyles]=\"styles\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    cellStyles = null;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * When autogenerating columns, the formatter is used to format the display of the column data\n     * without modifying the underlying bound values.\n     *\n     * In this example, we check to see if the column name is Salary, and then provide a method as the column formatter\n     * to format the value into a currency string.\n     *\n     * ```typescript\n     * onColumnInit(column: IgxColumnComponent) {\n     *   if (column.field == \"Salary\") {\n     *     column.formatter = (salary => this.format(salary));\n     *   }\n     * }\n     *\n     * format(value: number) : string {\n     *   return formatCurrency(value, \"en-us\", \"$\");\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(pinned)] = \"model.columns[0].isPinned\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._unpinnedIndex = this.grid ? this.grid.columns.filter(x => !x.pinned).indexOf(this) : 0;\n            this._pinned = value;\n            this.pinnedChange.emit(this._pinned);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public pinnedChange = new EventEmitter<boolean>();\n\n    /**\n     * @deprecated\n     * Gets/Sets the `id` of the `igx-grid`.\n     * ```typescript\n     * let columnGridId = this.column.gridID;\n     * ```\n     * ```typescript\n     * this.column.gridID = 'grid-1';\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @DeprecateProperty(`The property is deprecated. Please, use \\`column.grid.id\\` instead.`)\n    public gridID: string;\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n\n        if (this.grid) {\n            this.grid.summaryService.removeSummariesCachePerColumn(this.field);\n            (this.grid as any)._summaryPipeTrigger++;\n            this.grid.summaryService.resetSummaryHeight();\n        }\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): IgxFilteringOperand {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.instance().\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(instance: IgxFilteringOperand) {\n        this._filters = instance;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): ISortingStrategy {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     * class CustomSortingStrategy extends SortingStrategy {...}\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: ISortingStrategy) {\n        this._sortStrategy = classRef;\n    }\n    /**\n    * Gets the function that compares values for grouping.\n    * ```typescript\n    * let groupingComparer = this.column.groupingComparer'\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    @Input()\n    public get groupingComparer(): (a: any, b: any) => number {\n        return this._groupingComparer;\n    }\n    /**\n     * Sets a custom function to compare values for grouping.\n     * Subsequent values in the sorted data that the function returns 0 for are grouped.\n     * ```typescript\n     * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set groupingComparer(funcRef: (a: any, b: any) => number) {\n        this._groupingComparer = funcRef;\n    }\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        if (!this.grid) { return '80'; }\n        switch (this.grid.displayDensity) {\n            case DisplayDensity.cosy:\n                return '64';\n            case DisplayDensity.compact:\n                return '56';\n            default:\n                return '80';\n        }\n    }\n    /**\n     * The reference to the `igx-grid` owner.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public get grid(): IgxGridBaseDirective {\n        return this.gridAPI.grid;\n    }\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('cellTemplate')\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * Note that the column header height is fixed and any content bigger than it will be cut off.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('cellEditorTemplate')\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n    }\n    /**\n     * Returns a reference to the `filterCellTemplate`.\n     * ```typescript\n     * let filterCellTemplate = this.column.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('filterCellTemplate')\n    get filterCellTemplate(): TemplateRef<any> {\n        return this._filterCellTemplate;\n    }\n    /**\n     * Sets the quick filter template.\n     * ```html\n     * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column=\"column\">\n     *    <input (input)=\"onInput()\">\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'filterCellTemplate'\", {read: TemplateRef })\n     * public filterCellTemplate: TemplateRef<any>;\n     * this.column.filterCellTemplate = this.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set filterCellTemplate(template: TemplateRef<any>) {\n        this._filterCellTemplate = template;\n    }\n\n    /** @hidden */\n    @Input('collapsibleIndicatorTemplate')\n    public collapsibleIndicatorTemplate: TemplateRef<any>;\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowDirective)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup)[0] as any;\n        }\n        if (this.columnLayoutChild) {\n            return this.parent.childrenVisibleIndexes.find(x => x.column === this).index;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(col);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n\n    /**\n    * Returns a boolean indicating if the column is a child of a `ColumnLayout` for multi-row layout.\n    * ```typescript\n    * let columnLayoutChild =  this.column.columnLayoutChild;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get columnLayoutChild() {\n        return this.parent && this.parent.columnLayout;\n    }\n\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    get isLastPinned(): boolean {\n        return this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1] === this;\n    }\n    get gridRowSpan(): number {\n        return this.rowEnd && this.rowStart ? this.rowEnd - this.rowStart : 1;\n    }\n    get gridColumnSpan(): number {\n        return this.colEnd && this.colStart ? this.colEnd - this.colStart : 1;\n    }\n\n    /**\n     * Row index where the current field should end.\n     * The amount of rows between rowStart and rowEnd will determine the amount of spanning rows to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowEnd]=\"2\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public rowEnd: number;\n\n    /**\n     * Column index where the current field should end.\n     * The amount of columns between colStart and colEnd will determine the amount of spanning columns to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colEnd]=\"3\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public colEnd: number;\n\n    /**\n     * Row index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() rowStart: number;\n\n    /**\n     * Column index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colStart]=\"1\" [rowStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() colStart: number;\n\n    /**\n     * Indicates whether the column will be visible when its parent is collapsed.\n     * ```html\n     * <igx-column-group>\n     *   <igx-column [visibleWhenCollapsed]=\"true\"></igx-column>\n     * </igx-column-group>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @Input()\n    set visibleWhenCollapsed(value: boolean) {\n        this._visibleWhenCollapsed = value;\n        this.visibleWhenCollapsedChange.emit(this._visibleWhenCollapsed);\n        if (this.parent) { this.parent.setExpandCollapseState(); }\n    }\n\n    get visibleWhenCollapsed(): boolean {\n        return this._visibleWhenCollapsed;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public collapsible = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public expanded = true;\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children: QueryList<IgxColumnComponent>;\n\n    /**\n     *@hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     *@hidden\n     */\n    protected _pinned = false;\n    /**\n     *@hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _filterCellTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _collapseIndicatorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _summaries = null;\n    /**\n     *@hidden\n     */\n    protected _filters = null;\n    /**\n     *@hidden\n     */\n    protected _sortStrategy: ISortingStrategy = DefaultSortingStrategy.instance();\n    /**\n     *@hidden\n     */\n    protected _groupingComparer: (a: any, b: any) => number;\n    /**\n     *@hidden\n     */\n    protected _hidden = false;\n    /**\n     *@hidden\n     */\n    protected _index: number;\n    /**\n     *@hidden\n     */\n    protected _disablePinning = false;\n    /**\n     *@hidden\n     */\n    protected _width: string;\n    /**\n     *@hidden\n     */\n    protected _defaultMinWidth = '';\n    /**\n     *@hidden\n     */\n    protected _hasSummary = false;\n    /**\n     * @hidden\n     */\n    protected _editable: boolean;\n    /**\n     *  @hidden\n    */\n    protected _visibleWhenCollapsed;\n    /**\n     * @hidden\n     */\n    protected _collapsible = false;\n    /**\n     * @hidden\n     */\n    protected _expanded = true;\n    /**\n     * @hidden\n     */\n    protected get isPrimaryColumn(): boolean {\n        return this.field !== undefined && this.grid !== undefined && this.field === this.grid.primaryKey;\n    }\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChildren(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective, descendants: false })\n    protected headTemplate: QueryList<IgxCellHeaderTemplateDirective>;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    protected _vIndex = NaN;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxFilterCellTemplateDirective, { read: IgxFilterCellTemplateDirective })\n    public filterCellTemplateDirective: IgxFilterCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCollapsibleIndicatorTemplateDirective, { read: IgxCollapsibleIndicatorTemplateDirective, static: false })\n    protected collapseIndicatorTemplate:  IgxCollapsibleIndicatorTemplateDirective;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, public cdr: ChangeDetectorRef,\n        public rowIslandAPI: IgxRowIslandAPIService) { }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this._vIndex = NaN;\n        if (this.grid) {\n            this.cacheCalcWidth();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (this.filterCellTemplateDirective) {\n            this._filterCellTemplate = this.filterCellTemplateDirective.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand.instance();\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand.instance();\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand.instance();\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand.instance();\n                    break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getGridTemplate(isRow: boolean, isIE: boolean): string {\n        if (isRow) {\n            const rowsCount = this.grid.multiRowLayoutRowSize;\n            return isIE ?\n                `(1fr)[${rowsCount}]` :\n                `repeat(${rowsCount},1fr)`;\n        } else {\n            return this.getColumnSizesString(this.children);\n        }\n    }\n\n    public getInitialChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<MRLColumnSizeInfo> {\n        const columnSizes: MRLColumnSizeInfo[] = [];\n        // find the smallest col spans\n        children.forEach(col => {\n            if (!col.colStart) {\n                return;\n            }\n            const newWidthSet = col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n            const newSpanSmaller = columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].colSpan > col.gridColumnSpan;\n            const bothWidthsSet = col.widthSetByUser && columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].widthSetByUser;\n            const bothWidthsNotSet = !col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n\n            if (columnSizes[col.colStart - 1] === undefined) {\n                // If nothing is defined yet take any column at first\n                // We use colEnd to know where the column actually ends, because not always it starts where we have it set in columnSizes.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (newWidthSet || (newSpanSmaller && ((bothWidthsSet) || (bothWidthsNotSet)))) {\n                // If a column is set already it should either not have width defined or have width with bigger span than the new one.\n\n                /**\n                 *  If replaced column has bigger span, we want to fill the remaining columns\n                 *  that the replacing column does not fill with the old one.\n                 **/\n                if (bothWidthsSet && newSpanSmaller) {\n                    // Start from where the new column set would end and apply the old column to the rest depending on how much it spans.\n                    // We have not yet replaced it so we can use it directly from the columnSizes collection.\n                    // This is where colEnd is used because the colStart of the old column is not actually i + 1.\n                    for (let i = col.colStart - 1 + col.gridColumnSpan; i < columnSizes[col.colStart - 1].colEnd - 1; i++) {\n                        if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                            columnSizes[i] = columnSizes[col.colStart - 1];\n                        } else {\n                            break;\n                        }\n                    }\n                }\n\n                // Replace the old column with the new one.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (bothWidthsSet && columnSizes[col.colStart - 1].colSpan < col.gridColumnSpan) {\n                // If the column already in the columnSizes has smaller span, we still need to fill any empty places with the current col.\n                // Start from where the smaller column set would end and apply the bigger column to the rest depending on how much it spans.\n                // Since here we do not have it in columnSizes we set it as a new column keeping the same colSpan.\n                for (let i = col.colStart - 1 + columnSizes[col.colStart - 1].colSpan; i < col.colStart - 1 + col.gridColumnSpan; i++) {\n                    if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                        columnSizes[i] = {\n                            ref: col,\n                            width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                            colSpan: col.gridColumnSpan,\n                            colEnd: col.colStart + col.gridColumnSpan,\n                            widthSetByUser: col.widthSetByUser\n                        };\n                    } else {\n                        break;\n                    }\n                }\n            }\n        });\n\n        // Flatten columnSizes so there are not columns with colSpan > 1\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && columnSizes[i].colSpan > 1) {\n                let j = 1;\n\n                // Replace all empty places depending on how much the current column spans starting from next col.\n                for (; j < columnSizes[i].colSpan && i + j + 1 < columnSizes[i].colEnd; j++) {\n                    if (columnSizes[i + j] &&\n                        ((!columnSizes[i].width && columnSizes[i + j].width) ||\n                            (!columnSizes[i].width && !columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan) ||\n                            (!!columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan))) {\n                        // If we reach an already defined column that has width and the current doesn't have or\n                        // if the reached column has bigger colSpan we stop.\n                        break;\n                    } else {\n                        const width = columnSizes[i].widthSetByUser ?\n                            columnSizes[i].width / columnSizes[i].colSpan :\n                            columnSizes[i].width;\n                        columnSizes[i + j] = {\n                            ref: columnSizes[i].ref,\n                            width: width,\n                            colSpan: 1,\n                            colEnd: columnSizes[i].colEnd,\n                            widthSetByUser: columnSizes[i].widthSetByUser\n                        };\n                    }\n                }\n\n                // Update the current column width so it is divided between all columns it spans and set it to 1.\n                columnSizes[i].width = columnSizes[i].widthSetByUser ?\n                    columnSizes[i].width / columnSizes[i].colSpan :\n                    columnSizes[i].width;\n                columnSizes[i].colSpan = 1;\n\n                // Update the index based on how much we have replaced. Subtract 1 because we started from 1.\n                i += j - 1;\n            }\n        }\n\n        return columnSizes;\n    }\n\n    public getFilledChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<string> {\n        const columnSizes = this.getInitialChildColumnSizes(children);\n\n        // fill the gaps if there are any\n        const result: string[] = [];\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && !!columnSizes[i].width) {\n                result.push(columnSizes[i].width + 'px');\n            } else {\n                result.push(parseInt(this.grid.getPossibleColumnWidth(), 10) + 'px');\n            }\n        }\n        return result;\n    }\n\n    protected getColumnSizesString(children: QueryList<IgxColumnComponent>): string {\n        const res = this.getFilledChildColumnSizes(children);\n        return res.join(' ');\n    }\n\n    public getResizableColUnderEnd(): MRLResizeColumnInfo[] {\n        if (this.columnLayout || !this.columnLayoutChild || this.columnGroup) {\n            return [{ target: this, spanUsed: 1 }];\n        }\n\n        const columnSized = this.getInitialChildColumnSizes(this.parent.children);\n        const targets: MRLResizeColumnInfo[] = [];\n        const colEnd = this.colEnd ? this.colEnd : this.colStart + 1;\n\n        for (let i = 0; i < columnSized.length; i++) {\n            if (this.colStart <= i + 1 && i + 1 < colEnd) {\n                targets.push({ target: columnSized[i].ref, spanUsed: 1 });\n            }\n        }\n\n        const targetsSquashed: MRLResizeColumnInfo[] = [];\n        for (let j = 0; j < targets.length; j++) {\n            if (targetsSquashed.length && targetsSquashed[targetsSquashed.length - 1].target.field === targets[j].target.field) {\n                targetsSquashed[targetsSquashed.length - 1].spanUsed++;\n            } else {\n                targetsSquashed.push(targets[j]);\n            }\n        }\n\n        return targetsSquashed;\n    }\n\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.\n     * Column cannot be pinned if:\n     * - Is already pinned\n     * - index argument is out of range\n     * - The pinned area exceeds 80% of the grid width\n     * ```typescript\n     * let success = this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?: number): boolean {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        if (!this.parent && !this.pinnable) {\n            return false;\n        }\n\n        this._pinned = true;\n        this.pinnedChange.emit(this._pinned);\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        index = index !== undefined ? index : grid._pinnedColumns.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index, isPinned: true };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.resetCaches();\n        grid.notifyChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.\n     * Column cannot be unpinned if:\n     * - Is already unpinned\n     * - index argument is out of range\n     * ```typescript\n     * let success = this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?: number): boolean {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n        this.pinnedChange.emit(this._pinned);\n\n        const targetColumn = grid._unpinnedColumns[index];\n\n        grid._unpinnedColumns.splice(index, 0, this);\n        if (grid._pinnedColumns.indexOf(this) !== -1) {\n            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n        grid.resetCaches();\n\n        const insertAtIndex = grid._unpinnedColumns.indexOf(this);\n        const args = { column: this, insertAtIndex, isPinned: false };\n        grid.onColumnPinning.emit(args);\n\n        grid.notifyChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n\n        return true;\n    }\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        return this.grid.headerCellList.find((header) => header.column === this);\n    }\n\n    /**\n    * Returns a reference to the filter cell of the column.\n    * ```typescript\n    * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n    * let filterell = column.filterell;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get filterCell(): IgxGridFilteringCellComponent {\n        return this.grid.filterCellList.find((filterCell) => filterCell.column === this);\n    }\n\n    /**\n     * Returns a reference to the header group of the column.\n     * @memberof IgxColumnComponent\n     */\n    get headerGroup(): IgxGridHeaderGroupComponent {\n        return this.grid.headerGroupsList.find((headerGroup) => headerGroup.column === this);\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public autosize() {\n        if (!this.columnGroup) {\n\n            this.width = this.getLargestCellWidth();\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        if (this._calcWidth !== null && !isNaN(this.calcPixelWidth)) {\n            return this._calcWidth;\n        }\n        this.cacheCalcWidth();\n        return this._calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => getNodeSizeViaRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            let headerCell;\n            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[0].children.length > 0) {\n                headerCell = Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[0].children)\n                    .map((child) => getNodeSizeViaRange(range, child)));\n            } else {\n                headerCell = getNodeSizeViaRange(range, this.headerCell.elementRef.nativeElement.children[0]);\n            }\n\n            if (this.sortable || this.filterable) {\n                headerCell += this.headerCell.elementRef.nativeElement.children[1].getBoundingClientRect().width;\n            }\n\n            const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n            const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n                parseFloat(headerStyle.borderRightWidth);\n            largest.set(headerCell, headerPadding);\n\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public getCellWidth() {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (this.columnLayoutChild) {\n            return '';\n        }\n\n        if (colWidth && !isPercentageWidth) {\n\n            let cellWidth = colWidth;\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected cacheCalcWidth(): any {\n        const grid = this.gridAPI.grid;\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n        if (isPercentageWidth) {\n            this._calcWidth = parseInt(colWidth, 10) / 100 * (grid.calcWidth - grid.featureColumnsWidth());\n        } else if (!colWidth) {\n            // no width\n            this._calcWidth = this.defaultWidth || grid.getPossibleColumnWidth();\n        } else {\n            this._calcWidth = this.width;\n        }\n        this.calcPixelWidth = parseInt(this._calcWidth, 10);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected setExpandCollapseState() {\n        this.children.filter(col => (col.visibleWhenCollapsed !== undefined)).forEach(c =>  {\n            if (!this.collapsible) { c.hidden = this.hidden; return; }\n            c.hidden = this._expanded ? c.visibleWhenCollapsed : !c.visibleWhenCollapsed;\n        });\n    }\n     /**\n     * @hidden\n     * @internal\n     */\n    protected checkCollapsibleState() {\n        if (!this.children) { return false; }\n        const cols = this.children.map(child => child.visibleWhenCollapsed);\n        return (cols.some(c => c === true) && cols.some(c => c === false));\n    }\n\n    /**\n     *@hidden\n    */\n    public get pinnable() {\n        return (this.grid as any)._init || !this.pinned;\n    }\n\n    /**\n     * @hidden\n     */\n    public populateVisibleIndexes() { }\n}\n","ï»¿import { Directive } from '@angular/core';\nimport { ConnectedPositioningStrategy } from '../services';\nimport { VerticalAlignment, PositionSettings } from '../services/overlay/utilities';\nimport { scaleInVerBottom, scaleInVerTop } from '../animations/main';\nimport { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';\n\n\n@Directive({\n    selector: '[igxGridBody]',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxGridBodyDirective {}\n\n\n/**\n * @hidden\n */\nexport interface RowEditPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\n/**\n * @hidden\n */\nexport class RowEditPositionStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: RowEditPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        const container = this.settings.container; // grid.tbody\n        const target = <HTMLElement>this.settings.target; // current grid.row\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.getBoundingClientRect().bottom <\n                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;\n\n        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.\n        contentElement.style.width = target.clientWidth + 'px';\n        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;\n\n        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);\n    }\n}\n","import { EventEmitter, Input, Output, Directive } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n *@hidden\n */\n@Directive()\nexport abstract class ItemPropertyValueChangedDirective {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\n@Directive()\nexport class ColumnChooserItemBaseDirective extends ItemPropertyValueChangedDirective {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBaseDirective } from '../column-chooser-item-base';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface IColumnVisibilityChangedEventArgs extends IBaseEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBaseDirective {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy, Directive } from '@angular/core';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBaseDirective } from './column-chooser-item-base';\nimport { ColumnDisplayOrder } from './common/enums';\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBaseDirective[] = [];\n        data.forEach((item: ColumnChooserItemBaseDirective) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n\n/** @hidden */\n@Directive()\nexport abstract class ColumnChooserBaseDirective implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Hides/ shows the filtering columns input from the UI.\n     */\n    @Input()\n    public disableFilter = false;\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     *@hidden\n     */\n    private _currentColumns = [];\n    /**\n     *@hidden\n     */\n    private _gridColumns = [];\n    /**\n     *@hidden\n     */\n    private _rawColumns = [];\n    /**\n     *@hidden\n     */\n    private _columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     *@hidden\n     */\n    private _filterCriteria = '';\n    /**\n     *@hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     *@hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     *@hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     *@hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     *@hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\n\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { ColumnChooserBaseDirective } from '../column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    templateUrl: './column-hiding.component.html'\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBaseDirective implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     *@memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     *@hidden\n     */\n    public get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     *@hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        if (column.grid.hasColumnLayouts && !column.columnLayout) {\n            return null;\n        }\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n\n        item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n        });\n\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        const collection = this.hidableColumns;\n        for (const col of collection) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        const collection = this.hidableColumns;\n        for (const col of collection) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n","import { Directive } from '@angular/core';\nimport { ColumnChooserItemBaseDirective } from '../column-chooser-item-base';\n\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBaseDirective {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        return this.column.pinnable;\n    }\n}\n","\nimport { Component, ChangeDetectorRef } from '@angular/core';\nimport { ColumnChooserBaseDirective } from '../column-chooser-base';\nimport { IgxColumnPinningItemDirective } from './pinning.directive';\n\n\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    templateUrl: './column-pinning.component.html'\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBaseDirective {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0 || column.disablePinning) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild,\n    Inject,\n    TemplateRef\n} from '@angular/core';\n\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../../services/index';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxButtonDirective } from '../../directives/button/button.directive';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxDropDownComponent } from '../../drop-down/drop-down.component';\nimport { IgxColumnHidingComponent } from '../hiding/column-hiding.component';\nimport { IgxColumnPinningComponent } from '../pinning/column-pinning.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position';\nimport { GridType } from '../common/grid.interface';\n\n/**\n * This class encapsulates the Toolbar's logic and is internally used by\n * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.\n */\n@Component({\n    selector: 'igx-grid-toolbar',\n    templateUrl: './grid-toolbar.component.html'\n})\nexport class IgxGridToolbarComponent extends DisplayDensityBase {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = 'Filter columns list ...';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.calcHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnHidingComponent`.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingComponent)\n    public columnHidingUI: IgxColumnHidingComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton', { read: IgxButtonDirective })\n    public columnHidingButton: IgxButtonDirective;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport', { read: IgxButtonDirective })\n    public exportButton: IgxButtonDirective;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnPinningComponent`.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningComponent)\n    public columnPinningUI: IgxColumnPinningComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton', { read: IgxButtonDirective })\n    public columnPinningButton: IgxButtonDirective;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseDirective {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.filter(col => !col.columnLayout).length;\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid-toolbar');\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public showAdvancedFilteringUI() {\n        this.grid.openAdvancedFilteringDialog();\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the\n     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.\n     * ```typescript\n     * const context =  this.igxGrid.toolbar.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            // $implicit: this\n            grid: this.grid,\n            toolbar: this\n        };\n    }\n\n    /** @hidden */\n    public get customContentTemplate(): TemplateRef<any> {\n        if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {\n            return this.grid.toolbarCustomContentTemplate.template;\n        } else {\n            return null;\n        }\n    }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { GridType } from './common/grid.interface';\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n\n// TODO: Refactor circular ref, deps and logic\n/** @hidden */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private currentCellIndex: number;\n\n\n    constructor(public api: GridBaseAPIService<any>, public element: ElementRef) {}\n\n    get grid(): GridType {\n        return this.api.grid;\n    }\n\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if ((this.grid.rowEditTabs.last === this && !event.shiftKey) ||\n            (this.grid.rowEditTabs.first === this && event.shiftKey)\n        ) {\n            this.move(event);\n        }\n    }\n\n    @HostListener('keydown.Escape', [`$event`])\n    public handleEscape(event: KeyboardEvent): void {\n        this.grid.endEdit(false, event);\n        const activeNode = this.grid.selectionService.activeElement;\n        //  on right click activeNode is deleted, so we may have no one\n        if (activeNode) {\n            const cell = this.grid.navigation.getCellElementByVisibleIndex(\n                activeNode.row,\n                activeNode.layout ? activeNode.layout.columnVisibleIndex : activeNode.column);\n            cell.focus();\n        }\n    }\n\n    /**\n     * Moves focus to first/last editable cell in the editable row and put the cell in edit mode.\n     * If cell is out of view first scrolls to the cell\n     * @param event keyboard event containing information about whether SHIFT key was pressed\n     */\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        this.currentCellIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        if (!this.grid.navigation.isColumnFullyVisible(this.currentCellIndex)) {\n            this.grid.navigation.performHorizontalScrollToCell(\n                this.grid.rowInEditMode.index, this.currentCellIndex, false, this.activateCell);\n        } else {\n            this.activateCell();\n        }\n    }\n\n    /**\n     * Sets the cell in edit mode and focus its native element\n     * @param cellIndex index of the cell to activate\n     */\n    private activateCell = (): void => {\n        const cell = this.grid.rowInEditMode.cells.find(e => e.visibleColumnIndex === this.currentCellIndex);\n        cell.nativeElement.focus();\n        cell.setEditMode(true);\n        this.currentCellIndex = -1;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    TemplateRef,\n} from '@angular/core';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { DataType } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridSelectionService, ISelectionNode } from '../selection/selection.service';\nimport { ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS } from '../../core/utils';\nimport { GridType } from '../common/grid.interface';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    templateUrl: './groupby-row.component.html'\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        private gridSelection: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultGroupByExpandedTemplate', { read: TemplateRef, static: true })\n    protected defaultGroupByExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultGroupByCollapsedTemplate', { read: TemplateRef, static: true })\n    protected defaultGroupByCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isFocused;\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent', { static: true })\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.focused ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.isFocused = true;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.isFocused = false;\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        const isVirtualized = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const groupRowIndex = this.index;\n        this.grid.toggleGroup(this.groupRow);\n        if (isVirtualized) {\n            const groupRow = this.grid.nativeElement.querySelector(`[data-rowIndex=\"${groupRowIndex}\"]`);\n            if (groupRow) {\n                groupRow.focus();\n            }\n        }\n    }\n\n    public get iconTemplate() {\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultGroupByExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultGroupByCollapsedTemplate;\n        }\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.index,\n            column: this.gridSelection.activeElement ? this.gridSelection.activeElement.column : 0\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const keydownArgs = { targetType: 'groupRow', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInGroupRow(key, event.shiftKey, event.altKey) || event.ctrlKey) { return; }\n\n        if (this.isToggleKey(key, event.altKey)) {\n            if ((this.expanded && ROW_COLLAPSE_KEYS.has(key)) || (!this.expanded && ROW_EXPAND_KEYS.has(key))) {\n                this.toggle();\n            }\n            return;\n        }\n\n        const selection = this.gridSelection;\n        selection.keyboardState.shift = event.shiftKey && !(key === 'tab');\n\n        const activeNode = selection.activeElement ? Object.assign({}, selection.activeElement) : this.selectionNode;\n        activeNode.row = this.index;\n        switch (key) {\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(this.nativeElement, activeNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(this.nativeElement, activeNode);\n                break;\n            case 'tab':\n                this.handleTabKey(event.shiftKey, activeNode);\n                break;\n        }\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        const column = this.grid.getColumnByName(this.groupRow.expression.fieldName);\n        return (column && column.dataType) || DataType.String;\n    }\n\n    private handleTabKey(shift: boolean, activeNode: ISelectionNode) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.nativeElement, activeNode);\n        } else {\n            if (this.index === this.grid.dataView.length - 1 && this.grid.rootSummariesEnabled) {\n                this.grid.navigation.onKeydownHome(0, true);\n            } else {\n                const orderedColumns = this.grid.navigation.gridOrderedColumns;\n                const lastCol = orderedColumns[orderedColumns.length - 1];\n                activeNode.column = lastCol.columnLayoutChild ? lastCol.parent.visibleIndex : lastCol.visibleIndex;\n                this.grid.navigation.performTab(this.nativeElement, activeNode);\n            }\n        }\n    }\n\n    private isKeySupportedInGroupRow(key, shift = false, alt = false) {\n        if (shift) {\n            return ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n        }\n        return this.isToggleKey(key, alt) ? true : ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n    }\n\n    private isToggleKey(key, altKey) {\n        return altKey && ['left', 'right', 'up', 'down', 'arrowleft', 'arrowright', 'arrowup', 'arrowdown'].indexOf(key) !== -1;\n    }\n\n}\n","import { Directive, TemplateRef, EventEmitter, QueryList, Optional, Inject } from '@angular/core';\nimport { DisplayDensityBase, IDisplayDensityOptions, DisplayDensityToken } from '../core/density';\n\nexport interface IListChild {\n    index: number;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxListBase]'\n})\nexport class IgxListBaseDirective extends DisplayDensityBase {\n    onItemClicked: EventEmitter<any>;\n    allowLeftPanning: boolean;\n    allowRightPanning: boolean;\n    panEndTriggeringThreshold: number;\n    onLeftPan: EventEmitter<any>;\n    onRightPan: EventEmitter<any>;\n    onPanStateChange: EventEmitter<any>;\n    children: QueryList<any>;\n    listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n    listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","/* tslint:disable */\nexport default [\n    {\n        name: 'add_filter',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 15v-3h-2v3h-3v2h3v3h2v-3h3v-2h-3zM5 10h10v2H5zM2 5h16v2H2zM8 15h4v2H8z\"/>\n      </svg>`\n    },\n    {\n        name: 'contains',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 3v18h18V3zm16 16H5V5h14z\"/>\n        <path d=\"M12 11.3a4.39 4.39 0 0 0-2.54.63 2.07 2.07 0 0 0-.9 1.78 2.29 2.29 0 0 0 .66 1.74 2.63 2.63 0 0 0 1.89.63 2.39 2.39 0 0 0 1.32-.37 3.05 3.05 0 0 0 1-.93 3.72 3.72 0 0 0 .08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 0 1-.21-.88 5.57 5.57 0 0 1-.07-.93v-3.5a2.44 2.44 0 0 0-.84-2 3.34 3.34 0 0 0-2.22-.7 3.54 3.54 0 0 0-2.3.72A1.93 1.93 0 0 0 9 10.29h1.71a.93.93 0 0 1 .29-.71 1.5 1.5 0 0 1 1-.29 1.45 1.45 0 0 1 1 .35 1.3 1.3 0 0 1 .37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 0 1-.71.77 2.27 2.27 0 0 1-1.21.34 1.18 1.18 0 0 1-.84-.27.92.92 0 0 1-.3-.72 1.16 1.16 0 0 1 .44-.9 1.76 1.76 0 0 1 1.22-.39z\"/>\n      </svg>`\n    },\n    {\n        name: 'does_not_contain',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21,19.74V3H4.26L2.89,1.63,1.63,2.92,3,4.29V21H19.73l1.37,1.37,1.27-1.26ZM5,19V6.28l5.28,5.27a3.19,3.19,0,0,0-.81.38,2.07,2.07,0,0,0-.9,1.78,2.29,2.29,0,0,0,.66,1.74,2.63,2.63,0,0,0,1.89.63,2.39,2.39,0,0,0,1.32-.37,3.05,3.05,0,0,0,1-.93,3.72,3.72,0,0,0,.08.57c0,.19.1.38.16.58h1L17.73,19Zm5.79-6.23a1.31,1.31,0,0,1,.45-.25l1.37,1.36.28.29a1.57,1.57,0,0,1-.19.15,2.27,2.27,0,0,1-1.21.34,1.18,1.18,0,0,1-.84-.27.92.92,0,0,1-.3-.72A1.16,1.16,0,0,1,10.79,12.77Zm2.6-1.47h-.83L10.94,9.68l.08-.1a1.5,1.5,0,0,1,1-.29,1.45,1.45,0,0,1,1,.35,1.3,1.3,0,0,1,.37,1ZM19,17.74l-3.85-3.85V10.62a2.44,2.44,0,0,0-.84-2,3.34,3.34,0,0,0-2.22-.7,3.64,3.64,0,0,0-2.24.67L6.26,5H19Z\"/>\n    </svg>`\n    },\n    {\n        name: 'all',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M2 14h8v2H2zM2 6h12v2H2zM16 17l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 17h2v2H5zM13 17h2v2h-2zM5 13h2v2H5zM17 17h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zM17 9h2v2h-2zM17 13h2v2h-2zM17 5h2v2h-2zM5 9h2v2H5zM5 5h2v2H5zM9 5h2v2H9z\"/>\n      </svg>`\n    },\n    {\n        name: 'end_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13.14 6.76L17.49 12l-4.35 5.24 1.54 1.28L20.09 12l-5.41-6.52-1.54 1.28z\"/>\n        <path d=\"M11.91 11h2v2h-2zM7.91 11h2v2h-2zM3.91 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'ends_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 14.5h2v2H3zM11 14.5h2v2h-2zM7 14.5h2v2H7zM20.8 14.8v-3A2.1 2.1 0 0 0 20 10a3 3 0 0 0-2-.6 3 3 0 0 0-2 .6 1.7 1.7 0 0 0-.7 1.5h1.5a.8.8 0 0 1 .3-.7 1.3 1.3 0 0 1 .9-.3 1.3 1.3 0 0 1 .9.4 1.1 1.1 0 0 1 .3.8v.6H18a3.8 3.8 0 0 0-2.2.6 1.8 1.8 0 0 0-.8 1.5 2 2 0 0 0 .6 1.6 2.3 2.3 0 0 0 1.6.6 2.1 2.1 0 0 0 1.2-.4 2.8 2.8 0 0 0 .8-.8 4.3 4.3 0 0 0 .1.5l.1.5H21a4.1 4.1 0 0 1-.2-.7 5.4 5.4 0 0 1 0-1zm-1.6-.5a1.5 1.5 0 0 1-.6.7 2 2 0 0 1-1 .2 1.1 1.1 0 0 1-.8-.2.8.8 0 0 1-.2-.6 1 1 0 0 1 .3-.8 1.5 1.5 0 0 1 1.1-.3h1.2z\"/>\n      </svg>`\n    },\n    {\n        name: 'equals',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 13.5h14v2H5zM5 8.5h14v2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'is_after',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 7h4v10h-4v2h6V5h-6v2zM11 3h2v18h-2zM7 5h2v2H7zM3 5h2v2H3zM3 17h2v2H3zM3 13h2v2H3zM3 9h2v2H3zM7 17h2v2H7z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_before',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 19h6v-2H5V7h4V5H3v14zM11 3h2v18h-2zM15 5h2v2h-2zM19 5h2v2h-2zM19 13h2v2h-2zM15 17h2v2h-2zM19 17h2v2h-2zM19 9h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_false',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7z\"/>\n        <path d=\"M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_not_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M16.58 6.07l.79-1.36-1.74-1-.78 1.35a7.5 7.5 0 0 0-7.43 12.87l-.79 1.36 1.74 1 .78-1.35a7.5 7.5 0 0 0 7.43-12.87zM6.5 12A5.5 5.5 0 0 1 12 6.5a5.65 5.65 0 0 1 1.84.32l-5.41 9.36A5.49 5.49 0 0 1 6.5 12zm5.5 5.5a5.65 5.65 0 0 1-1.84-.32l5.41-9.36A5.5 5.5 0 0 1 12 17.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 4.5a7.5 7.5 0 1 0 7.5 7.5A7.5 7.5 0 0 0 12 4.5zm0 13a5.5 5.5 0 1 1 5.5-5.5 5.5 5.5 0 0 1-5.5 5.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_true',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.44 14.22zM16.56 14.22zM16.56 14.22L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z\"/>\n        <path d=\"M18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7zM8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.5 14a4.48 4.48 0 1 0 4.5 4.5 4.47 4.47 0 0 0-4.5-4.5zm3.5 5.5h-4v2l-3-3 3-3v2h4zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 10v11H7v2h14a2 2 0 0 0 2-2V10z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.87 9l-2.99 3 2.99 3v-2.25h5.26v-1.5H8.87V9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2 6.74v-2h-4v-2h4v-2l3 3zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M11.13 11.25H5.88v1.5h5.25V15l3-3-3-3v2.25z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 9h2v2H5zM9 17h2v2H9zM13 17h2v2h-2zM17 9h2v2h-2zM17 5h2v2h-2zM5 17h2v2H5zM13 5h2v2h-2zM5 13h2v2H5zM19 15v-2h-2v.47L18.53 15H19zM11 7V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z\"/>\n      </svg>`\n    },\n    {\n        name: 'start_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.1 11h2v2h-2zM10.1 11h2v2h-2z\"/>\n        <path d=\"M10.9 6.8L9.3 5.5 4 12l5.4 6.5 1.6-1.3L6.5 12 11 6.8zM14.1 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'starts_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M4.97 13.23h3.06L6.5 9.12l-1.53 4.11z\"/>\n        <path d=\"M5.89 7.5L2 16.5h1.72l.73-1.8h4.1l.73 1.8H11l-3.89-9zM5 13.23l1.5-4.11L8 13.23zM12 14.5h2v2h-2zM20 14.5h2v2h-2zM16 14.5h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 9h2v2H6zM6 13h2v2H6zM11 13h2v2h-2zM6 17h2v2H6zM11 17h2v2h-2zM11 9h2v2h-2zM16 9h2v2h-2zM21 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2.94 5.41l-1.75-1.76.69-.71 1.05 1L20 16.83l.71.71z\"/>\n        <path d=\"M5 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.85 13.15l-1.77-1.77-.88.89 2.65 2.65 4.95-4.96-.88-.88-4.07 4.07z\"/>\n      </svg>`\n    },\n    {\n        name: 'today',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n        <path d=\"M16.53 12.06L15.47 11l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 18l5.94-5.94z\"/>\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 15h5v5h-5zM6 13h5v5H6zM13 6h5v5h-5zM6 6h5v5H6z\"/>\n        <path d=\"M20 2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h9v-2H4V4h16v9h2V4a2 2 0 0 0-2-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'yesterday',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M10.68 15.38h6.13v-1.75h-6.13V11l-3.49 3.5 3.49 3.5v-2.62z\"/>\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n      </svg>`\n    },\n    {\n        name: 'pin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15.18 2.25l7.07 7.07-2.83-.01-3.54 3.55.01 4.24-3.53-3.54-5.66 5.66H5.28V17.8l5.66-5.66L7.4 8.61l4.24.01 3.55-3.54-.01-2.83z\"/>\n      </svg>`\n    },\n    {\n        name: 'unpin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M0 0h24v25H0V0z\"/>\n        <path d=\"M11.84 14.08L6.7 19.22H5.28V17.8l5.14-5.14L2 4.26 3.29 3l18 18L20 22.21zm4-.49l-5-5h.73l3.55-3.54v-2.8l7.07 7.07h-2.77l-3.54 3.54z\" />\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n          <path d=\"M18,4.5H6A1.5,1.5,0,0,0,4.5,6V18A1.5,1.5,0,0,0,6,19.5h6.75V18H6V6H18v6.75h1.5V6A1.5,1.5,0,0,0,18,4.5Z\"/>\n          <rect x=\"7.5\" y=\"12.75\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"14.25\" y=\"14.25\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"7.5\" y=\"7.5\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"12.75\" y=\"7.5\" width=\"3.75\" height=\"3.75\"/>\n        </svg>`\n    }\n];\n","import { Pipe, PipeTransform, Inject, LOCALE_ID } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { GridType } from './grid.interface';\nimport { DatePipe, DecimalPipe } from '@angular/common';\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxCellStyleClasses'\n})\nexport class IgxGridCellStyleClassesPipe implements PipeTransform {\n\n    transform(cssClasses: { [prop: string]: any }, value: any, data: any, field: string, index: number): string {\n        if (!cssClasses) {\n            return '';\n        }\n\n        const result = [];\n\n        for (const cssClass of Object.keys(cssClasses)) {\n            const callbackOrValue = cssClasses[cssClass];\n            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field, value, index) : callbackOrValue;\n            if (apply) {\n                result.push(cssClass);\n            }\n        }\n\n        return result.join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxCellStyles'\n})\nexport class IgxGridCellStylesPipe implements PipeTransform {\n\n    transform(styles: { [prop: string]: any }, value: any, data: any, field: string, index: number): { [prop: string]: any } {\n        const css = {};\n        if (!styles) {\n            return css;\n        }\n\n        for (const prop of Object.keys(styles)) {\n            const res = styles[prop];\n            css[prop] = typeof res === 'function' ? res(data, field, value, index) : res;\n        }\n\n        return css;\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxNotGrouped'\n})\nexport class IgxGridNotGroupedPipe implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => !item.columnGroup);\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxTopLevel'\n})\nexport class IgxGridTopLevelColumns implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => item.level === 0);\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseDirective = this.gridAPI.grid;\n\n        if ( grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'paginatorOptions',\n    pure: true,\n})\nexport class IgxGridPaginatorOptionsPipe implements PipeTransform {\n    public transform(values: Array<number>) {\n        return Array.from(new Set([...values])).sort((a, b) => a - b);\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'visibleColumns',\n    pure: true\n})\nexport class IgxHasVisibleColumnsPipe implements PipeTransform {\n    transform(values: any[], hasVisibleColumns) {\n        if (!(values && values.length)) {\n            return values;\n        }\n        return hasVisibleColumns ? values : [];\n    }\n\n}\n\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxdate'\n})\nexport class IgxDatePipeComponent extends DatePipe implements PipeTransform {\n\n    private readonly DEFAULT_DATE_FORMAT = 'mediumDate';\n\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && value instanceof Date) {\n            if (locale) {\n                return super.transform(value, this.DEFAULT_DATE_FORMAT, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxdecimal'\n})\nexport class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && typeof value === 'number') {\n            if (locale) {\n                return super.transform(value, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport icons from './svgIcons';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { GridBaseAPIService } from '../api.service';\nimport { IColumnVisibilityChangedEventArgs } from '../grid';\nimport { IColumnResizeEventArgs } from '../common/events';\nimport { GridType } from '../common/grid.interface';\nimport { IgxDatePipeComponent } from '../common/pipes';\n\nconst FILTERING_ICONS_FONT_SET = 'filtering-icons';\n\n/**\n *@hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n    public isVisible = true;\n}\n\n/**\n *@hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private _datePipe: IgxDatePipeComponent;\n    private columnStartIndex = -1;\n    private _filterIconsRegistered = false;\n\n    public gridId: string;\n    public isFilterRowVisible = false;\n    public filteredColumn: IgxColumnComponent = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToFocus: IgxColumnComponent = null;\n    public shouldFocusNext = false;\n    public columnToMoreIconHidden = new Map<string, boolean>();\n\n    grid: IgxGridBaseDirective;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, private iconService: IgxIconService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    public get displayContainerScrollLeft() {\n        return this.grid.headerContainer.scrollPosition;\n    }\n\n    public get areAllColumnsInView() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10) === 0;\n    }\n\n    public get unpinnedFilterableColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup && col.filterable);\n    }\n\n    public get unpinnedColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup);\n    }\n\n    public get datePipe(): IgxDatePipeComponent {\n        if (!this._datePipe) {\n            this._datePipe = new IgxDatePipeComponent(this.grid.locale);\n        }\n        return this._datePipe;\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                    });\n                }\n                if (this.columnToFocus) {\n                    this.focusFilterCellChip(this.columnToFocus, false);\n                    this.columnToFocus = null;\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n\n            this.grid.onColumnVisibilityChanged.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnVisibilityChangedEventArgs) => {\n                if (this.grid.filteringRow && this.grid.filteringRow.column === eventArgs.column ) {\n                    this.grid.filteringRow.close();\n\n                }\n            });\n        }\n    }\n\n    /**\n     * Internal method to create expressionsTree and filter grid used in both filter modes.\n     */\n    public filterInternal(field: string, expressions: FilteringExpressionsTree | Array<ExpressionUI> = null): void {\n        this.isFiltering = true;\n\n        let expressionsTree;\n        if (expressions instanceof FilteringExpressionsTree) {\n            expressionsTree = expressions;\n        } else {\n            expressionsTree = this.createSimpleFilteringTree(field, expressions);\n        }\n\n        if (expressionsTree.filteringOperands.length === 0) {\n            this.clearFilter(field);\n        } else {\n            this.filter(field, null, expressionsTree);\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(field);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);\n            if (!expressionsTreeForColumn) {\n                throw new Error('Invalid condition or Expression Tree!');\n            } else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(col.filteringExpressionsTree));\n    }\n\n    /**\n     * Clear the filter of a given column.\n     */\n    public clearFilter(field: string): void {\n        if (field) {\n            const column = this.gridAPI.get_column_by_name(field);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.isFiltering = true;\n\n        this.gridAPI.clear_filter(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(null));\n\n        if (field) {\n            const expressions = this.getExpressions(field);\n            expressions.length = 0;\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.gridAPI.filter_global(value, condition, ignoreCase);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(this.grid.filteringExpressionsTree));\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        if (!this._filterIconsRegistered) {\n            for (const icon of icons) {\n                if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {\n                    this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);\n                }\n            }\n            this._filterIconsRegistered = true;\n        }\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n            if (column) {\n                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n                this.columnToExpressionsMap.set(columnId, expressionUIs);\n            }\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                if (column) {\n                    value.length = 0;\n\n                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                    if (isComplex) {\n                        this.columnsWithComplexFilter.add(key);\n                    }\n\n                    this.updateFilteringCell(column);\n                } else {\n                    this.columnToExpressionsMap.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string, expressionUIList = null): FilteringExpressionsTree {\n        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {\n                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {\n                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                    expressionsTree.filteringOperands.push(currAndBranch);\n                }\n                continue;\n            }\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                 currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = column && this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        if (operator === 0) {\n            return this.grid.resourceStrings.igx_grid_filter_operator_and;\n        } else {\n            return this.grid.resourceStrings.igx_grid_filter_operator_or;\n        }\n    }\n\n    /**\n     * Generate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;\n        } else if (expression.searchVal instanceof Date) {\n            return this.datePipe.transform(expression.searchVal, this.grid.locale);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    /**\n     * Updates the content of a filterCell.\n     */\n    public updateFilteringCell(column: IgxColumnComponent) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    /**\n     * Focus a chip in a filterCell.\n     */\n    public focusFilterCellChip(column: IgxColumnComponent, focusFirst: boolean) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.focusChip(focusFirst);\n        }\n    }\n\n    /**\n     * Focus the close button in the filtering row.\n     */\n    public focusFilterRowCloseButton() {\n        this.grid.filteringRow.closeButton.nativeElement.focus();\n    }\n\n    public get filteredData() {\n        return this.grid.filteredData;\n    }\n\n    /**\n     * Scrolls to a filterCell.\n     */\n    public scrollToFilterCell(column: IgxColumnComponent, shouldFocusNext: boolean) {\n        this.grid.nativeElement.focus({preventScroll: true});\n        this.columnToFocus = column;\n        this.shouldFocusNext = shouldFocusNext;\n\n        let currentColumnRight = 0;\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.unpinnedColumns[index].width, 10);\n            if (this.unpinnedColumns[index] === column) {\n                currentColumnLeft = currentColumnRight - parseInt(this.unpinnedColumns[index].width, 10);\n                break;\n            }\n        }\n\n        const forOfDir = this.grid.headerContainer;\n        const width = this.displayContainerWidth + this.displayContainerScrollLeft;\n        if (shouldFocusNext) {\n            forOfDir.scrollPosition += currentColumnRight - width;\n        } else {\n            forOfDir.scrollPosition = currentColumnLeft;\n        }\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    public generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n        operator: FilteringLogic,\n        expressionsUIs: ExpressionUI[]): void {\n        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);\n\n        // The beforeOperator of the first expression and the afterOperator of the last expression should be null\n        if (expressionsUIs.length) {\n            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;\n        }\n    }\n\n    private generateExpressionsListRecursive(expressions: IFilteringExpressionsTree | IFilteringExpression,\n                                    operator: FilteringLogic,\n                                    expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n            if (expressionsUIs.length) {\n                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            exprUI.afterOperator = operator;\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                exprUI.beforeOperator = prevExprUI.afterOperator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n\n    public isFilteringExpressionsTreeEmpty(expressionTree: IFilteringExpressionsTree): boolean {\n        if (FilteringExpressionsTree.empty(expressionTree)) {\n            return true;\n        }\n\n        let expr: any;\n\n        for (let i = 0; i < expressionTree.filteringOperands.length; i++) {\n            expr = expressionTree.filteringOperands[i];\n\n            if ((expr instanceof FilteringExpressionsTree)) {\n                const exprTree = expr as FilteringExpressionsTree;\n                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\n\n/**\n * @hidden\n * @internal\n */\n@Injectable()\nexport class IgxColumnResizingService {\n\n    private pinnedMaxWidth: string;\n\n    /**\n     *@hidden\n     */\n    public startResizePos: number;\n    /**\n     * Indicates that a column is currently being resized.\n     */\n    public isColumnResizing: boolean;\n    /**\n     *@hidden\n     */\n    public resizeCursor: string = null;\n    /**\n     *@hidden\n     */\n    public showResizer = false;\n    /**\n     * The column being resized.\n     */\n    public column: IgxColumnComponent;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     *@hidden\n     */\n    get resizerHeight(): number {\n        let height = this.column.grid.getVisibleContentHeight();\n\n        // Column height multiplier in case there are Column Layouts. The resizer height need to take into account rowStart.\n        let columnHeightMultiplier = 1;\n        if (this.column.columnLayoutChild) {\n            columnHeightMultiplier = this.column.grid.multiRowLayoutRowSize - this.column.rowStart + 1;\n        }\n\n        if (this.column.level !== 0) {\n            height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height * columnHeightMultiplier;\n        }\n\n        return height;\n    }\n\n    /**\n     * Returns the minimal possible width to which the column can be resized.\n     */\n    get restrictResizeMin(): number {\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const minWidth = actualMinWidth < parseFloat(this.column.width) ? actualMinWidth : parseFloat(this.column.width);\n\n        return this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width - minWidth;\n    }\n\n    /**\n     * Returns the maximal possible width to which the column can be resized.\n     */\n    get restrictResizeMax(): number {\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        if (this.column.maxWidth) {\n            return parseFloat(this.column.maxWidth) - actualWidth;\n        } else {\n            return Number.MAX_SAFE_INTEGER;\n        }\n    }\n\n    /**\n     * Autosizes the column to the longest currently visible cell value, including the header cell.\n     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,\n     * then the column is sized to its maxWidth.\n     * If the column is pinned and the autosized column width will cause the pinned area to become bigger\n     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.\n     */\n    public autosizeColumnOnDblClick() {\n        const currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        const size = this.column.getLargestCellWidth();\n        if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {\n            this.column.width = parseFloat(this.column.maxWidth) + 'px';\n        } else if (parseFloat(size) < parseFloat(this.column.minWidth)) {\n            this.column.width = this.column.minWidth + 'px';\n        } else {\n            this.column.width = size;\n        }\n\n        this.zone.run(() => {});\n\n        this.column.grid.onColumnResized.emit({\n            column: this.column,\n            prevWidth: currentColWidth.toString(),\n            newWidth: this.column.width\n        });\n    }\n\n    /**\n     * Resizes the column regaridng to the column minWidth and maxWidth.\n     */\n    public resizeColumn(event: MouseEvent) {\n        this.showResizer = false;\n        const diff = event.clientX - this.startResizePos;\n\n        let currentColWidth = parseFloat(this.column.width);\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const colMinWidth = this.getColMinWidth(this.column);\n        const colMaxWidth = this.getColMaxWidth(this.column);\n        if (this.column.grid.hasColumnLayouts) {\n            this.resizeColumnLayoutFor(this.column, diff);\n        } else {\n            if (currentColWidth + diff < colMinWidth) {\n                this.column.width = colMinWidth + 'px';\n            } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n                this.column.width = colMaxWidth + 'px';\n            } else {\n                this.column.width = (currentColWidth + diff) + 'px';\n            }\n        }\n\n        this.zone.run(() => {});\n\n        if (currentColWidth !== parseFloat(this.column.width)) {\n            this.column.grid.onColumnResized.emit({\n                column: this.column,\n                prevWidth: currentColWidth.toString(),\n                newWidth: this.column.width\n            });\n        }\n\n        this.isColumnResizing = false;\n    }\n\n    protected getColMinWidth(column: IgxColumnComponent) {\n        let currentColWidth = parseFloat(column.width);\n        const actualWidth = column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const actualMinWidth = parseFloat(column.minWidth);\n        return actualMinWidth < currentColWidth ? actualMinWidth : currentColWidth;\n    }\n\n    protected getColMaxWidth(column: IgxColumnComponent) {\n        return column.pinned ? parseFloat(this.pinnedMaxWidth) : parseFloat(column.maxWidth);\n    }\n\n    protected resizeColumnLayoutFor(column: IgxColumnComponent, diff: number) {\n        const relativeColumns = column.getResizableColUnderEnd();\n        const combinedSpan = relativeColumns.reduce((acc, col) =>  acc + col.spanUsed, 0);\n\n        // Resize first those who might reach min/max width\n        let columnsToResize = [...relativeColumns];\n        let updatedDiff = diff;\n        let updatedCombinedSpan = combinedSpan;\n        let setMinMaxCols = false;\n        do {\n            // Cycle them until there are not ones that reach min/max size, because the diff accumulates after each cycle.\n            // This is because we can have at first 2 cols reaching min width and then after\n            // recalculating the diff there might be 1 more that reaches min width.\n            setMinMaxCols = false;\n            let newCombinedSpan = updatedCombinedSpan;\n            const newColsToResize = [];\n            columnsToResize.forEach((col) => {\n                const currentResizeWidth = parseFloat(col.target.calcWidth);\n                const resizeScaled = (diff / updatedCombinedSpan) * col.target.gridColumnSpan;\n\n                const minWidth = this.getColMinWidth(col.target);\n                const maxWidth = this.getColMaxWidth(col.target);\n                if (currentResizeWidth + resizeScaled < minWidth) {\n                    col.target.width = minWidth + 'px';\n                    updatedDiff += (currentResizeWidth - minWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else if (maxWidth && (currentResizeWidth + resizeScaled > maxWidth)) {\n                    col.target.width = maxWidth + 'px';\n                    updatedDiff -= (maxWidth - currentResizeWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else {\n                    // Save new ones that can be resized\n                    newColsToResize.push(col);\n                }\n            });\n\n            updatedCombinedSpan = newCombinedSpan;\n            columnsToResize = newColsToResize;\n        } while (setMinMaxCols);\n\n        // Those left that don't reach min/max size resize them normally.\n        columnsToResize.forEach((col) => {\n            const currentResizeWidth = parseFloat(col.target.calcWidth);\n            const resizeScaled = (updatedDiff / updatedCombinedSpan) * col.target.gridColumnSpan;\n            col.target.width = (currentResizeWidth + resizeScaled) + 'px';\n        });\n    }\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnDestroy, NgZone, OnInit } from '@angular/core';\nimport { interval, Observable, Subscription, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nexport enum DragScrollDirection {\n    NONE,\n    LEFT,\n    TOP,\n    RIGHT,\n    BOTTOM,\n    TOPLEFT,\n    TOPRIGHT,\n    BOTTOMLEFT,\n    BOTTOMRIGHT\n}\n\n\n@Directive({\n    selector: '[igxGridDragSelect]'\n})\nexport class IgxGridDragSelectDirective implements OnInit, OnDestroy {\n    _activeDrag: boolean;\n\n    @Input('igxGridDragSelect')\n    get activeDrag(): boolean {\n        return this._activeDrag;\n    }\n\n    set activeDrag(val: boolean) {\n        if (val !== this._activeDrag) {\n            this.unsubscribe();\n            this._activeDrag = val;\n        }\n    }\n\n    @Output()\n    onDragStop = new EventEmitter<boolean>();\n\n    @Output()\n    onDragScroll = new EventEmitter<DragScrollDirection>();\n\n    get nativeElement(): HTMLElement {\n        return this.ref.nativeElement;\n    }\n\n    get clientRect(): ClientRect {\n        return this.nativeElement.getBoundingClientRect();\n    }\n\n    protected end$ = new Subject<any>();\n    protected lastDirection = DragScrollDirection.NONE;\n    protected _interval$: Observable<any>;\n    protected _sub: Subscription;\n\n    constructor(private ref: ElementRef, private zone: NgZone) {\n        this._interval$ = interval(100).pipe(\n            takeUntil(this.end$),\n            filter(() => this.activeDrag)\n        );\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.addEventListener('pointerleave', this.stopDragSelection);\n        });\n    }\n\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.removeEventListener('pointerleave', this.stopDragSelection);\n        });\n        this.unsubscribe();\n        this.end$.complete();\n    }\n\n\n    startDragSelection = (ev: PointerEvent) => {\n        if (!this.activeDrag) {\n            return;\n        }\n        const x = ev.clientX;\n        const y = ev.clientY;\n        const direction = this._measureDimensions(x, y);\n        if (direction === this.lastDirection) {\n            return;\n        }\n        this.unsubscribe();\n        this._sub = this._interval$.subscribe(() => this.onDragScroll.emit(direction));\n        this.lastDirection = direction;\n    }\n\n    stopDragSelection = () => {\n        if (!this.activeDrag) {\n            return;\n        }\n        this.onDragStop.emit(false);\n        this.unsubscribe();\n        this.lastDirection = DragScrollDirection.NONE;\n    }\n\n    _measureDimensions(x: number, y: number): DragScrollDirection {\n        let direction: DragScrollDirection;\n\n        const rect = this.clientRect;\n        const RATIO = 0.15;\n        const offsetX = Math.trunc(x - rect.left);\n        const offsetY = Math.trunc(y - rect.top);\n\n        const left = offsetX <= rect.width * RATIO;\n        const right = offsetX >= rect.width * (1 - RATIO);\n        const top = offsetY <= rect.height * RATIO;\n        const bottom = offsetY >= rect.height * (1 - RATIO);\n\n        if (top && left) {\n            direction = DragScrollDirection.TOPLEFT;\n        } else if (top && right) {\n            direction = DragScrollDirection.TOPRIGHT;\n        } else if (bottom && left) {\n            direction = DragScrollDirection.BOTTOMLEFT;\n        } else if (bottom && right) {\n            direction = DragScrollDirection.BOTTOMRIGHT;\n        } else if (top) {\n            direction = DragScrollDirection.TOP;\n        } else if (bottom) {\n            direction = DragScrollDirection.BOTTOM;\n        } else if (left) {\n            direction = DragScrollDirection.LEFT;\n        } else if (right) {\n            direction = DragScrollDirection.RIGHT;\n        } else {\n            direction = DragScrollDirection.NONE;\n        }\n\n        return direction;\n\n    }\n\n    protected unsubscribe() {\n        if (this._sub) {\n            this._sub.unsubscribe();\n        }\n    }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild,\n    IgxListBaseDirective\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\n\n/**\n * The Ignite UI List Item component is a container intended for row items in the Ignite UI for Angular List component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    templateUrl: 'list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     *@hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     *@hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * @hidden\n     */\n    private _index: number = null;\n\n    /**\n     *@hidden\n     */\n    private lastPanDir = IgxListPanState.NONE;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl')\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl')\n    public rightPanningTemplateElement;\n\n    constructor(\n        public list: IgxListBaseDirective,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt, direction: this.lastPanDir });\n        this.lastPanDir = IgxListPanState.NONE;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        this.lastPanDir = dir;\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     *@hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     *@hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     *@hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     *@hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public get index(): number {\n        return this._index !== null ? this._index : this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Sets the `index` of the `list item`.\n     * ```typescript\n     * this.listItem.index = index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public set index(value: number) {\n        this._index = value;\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     *@hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     *@hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    Optional,\n    Inject, Directive\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxListBaseDirective,\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective\n} from './list.common';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../core/density';\nimport { IBaseEventArgs } from '../core/utils';\n\nlet NEXT_ID = 0;\nexport interface IPanStateChangeEventArgs extends IBaseEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\nexport interface IListItemClickEventArgs extends IBaseEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n    direction: IgxListPanState;\n}\n\nexport interface IListItemPanningEventArgs extends IBaseEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * **Ignite UI for Angular List** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)\n *\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n\n/**\n * igxListThumbnail is container for the List media\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListThumbnail]'\n})\n\nexport class IgxListThumbnailDirective {}\n\n/**\n * igxListAction is container for the List action\n * Use it to wrap anything you want to be used as a list action: icon, checkbox...\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListAction]'\n})\n\nexport class IgxListActionDirective {}\n\n/**\n * igxListLine is container for the List text content\n * Use it to wrap anything you want to be used as a plane text.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLine]'\n})\n\nexport class IgxListLineDirective {}\n\n/**\n * igxListLineTitle is a directive that add class to the target element\n * Use it to make anything to look like list Title.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineTitle]'\n})\n\nexport class IgxListLineTitleDirective {\n    @HostBinding('class.igx-list__item-line-title')\n    public cssClass = 'igx-list__item-line-title';\n}\n\n/**\n * igxListLineSubTitle is a directive that add class to the target element\n * Use it to make anything to look like list Subtitle.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineSubTitle]'\n})\n\nexport class IgxListLineSubTitleDirective {\n    @HostBinding('class.igx-list__item-line-subtitle')\n    public cssClass = 'igx-list__item-line-subtitle';\n}\n\n@Component({\n    selector: 'igx-list',\n    templateUrl: 'list.component.html',\n    providers: [{ provide: IgxListBaseDirective, useExisting: IgxListComponent }]\n})\nexport class IgxListComponent extends IgxListBaseDirective {\n\n    constructor(public element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent), { descendants: true })\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected get sortedChildren(): IgxListItemComponent[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxListItemComponent, b: IgxListItemComponent) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when left panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when right panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     * ```typescript\n     * this.list.panEndTriggeringThreshold = 0.8;\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**@hidden*/\n    @ViewChild('defaultEmptyList', { read: TemplateRef, static: true })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ViewChild('defaultDataLoading', { read: TemplateRef, static: true })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     * ```html\n     * <igx-list id = \"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId =  this.list.id;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowRightPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Emits an event within the current list when left pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Emits an event within the current list when right pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n    * Emits an event within the current list when pan gesture is executed on list item.\n    * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n    * ```html\n    * <igx-list (onPanStateChange) = \"onPanStateChange($event)\"></igx-list>\n    * ```\n    * @memberof IgxListComponent\n    */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Emits an event within the current list when a list item has been clicked.\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *  ```html\n     * <igx-list (onItemClicked) = \"onItemClicked($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Returns boolean indicating if the list is empty.\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--compact')\n    public get cssClassCompact(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--cosy')\n    public get cssClassCosy(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * Returns the `items` in the list excluding the headers.\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Returns the headers in the list.\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Returns the `template` of an empty list.\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxListBaseDirective,\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    exports: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxRippleModule\n    ]\n})\nexport class IgxListModule {\n}\n","import {\n    AfterViewInit,\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ViewChild,\n    ChangeDetectorRef,\n    TemplateRef,\n    Directive\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IChangeCheckboxEventArgs } from '../../../checkbox/checkbox.component';\nimport { IgxInputDirective } from '../../../directives/input/input.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\nimport { IgxListComponent } from '../../../list';\n\nconst SEARCH_LIST_HEIGHT = 250;\n\n@Directive({\n    selector: '[igxExcelStyleLoading]'\n})\nexport class IgxExcelStyleLoadingValuesTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-search',\n    templateUrl: './excel-style-search.component.html'\n})\nexport class IgxExcelStyleSearchComponent implements AfterViewInit {\n\n    private _isLoading;\n\n    public get isLoading() {\n        return this._isLoading;\n    }\n\n    public set isLoading(value: boolean) {\n        this._isLoading = value;\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    public searchValue: any;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public data: FilterListItem[];\n\n    @Input()\n    public inline: boolean;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('input', { read: IgxInputDirective, static: true })\n    public searchInput: IgxInputDirective;\n\n    @ViewChild('list', { read: IgxListComponent, static: true })\n    public list: IgxListComponent;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild(IgxForOfDirective, { static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild('defaultExcelStyleLoadingValuesTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleLoadingValuesTemplate: TemplateRef<any>;\n\n    public get valuesLoadingTemplate() {\n        if (this.grid.excelStyleLoadingValuesTemplateDirective) {\n            return this.grid.excelStyleLoadingValuesTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleLoadingValuesTemplate;\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) { }\n\n    public ngAfterViewInit() {\n        this.refreshSize();\n    }\n\n    public refreshSize() {\n        requestAnimationFrame(() => {\n            this.virtDir.recalcUpdateSizes();\n        });\n    }\n\n    public clearInput() {\n        this.searchValue = null;\n    }\n\n    public onCheckboxChange(eventArgs: IChangeCheckboxEventArgs) {\n        const selectedIndex = this.data.indexOf(eventArgs.checkbox.value);\n        if (selectedIndex === 0) {\n            this.data.forEach(element => {\n                element.isSelected = eventArgs.checked;\n                this.data[0].indeterminate = false;\n            });\n        } else {\n            eventArgs.checkbox.value.isSelected = eventArgs.checked;\n            if (!this.data.slice(1, this.data.length).find(el => el.isSelected === false)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = true;\n            } else if (!this.data.slice(1, this.data.length).find(el => el.isSelected === true)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = false;\n            } else {\n                this.data[0].indeterminate = true;\n            }\n        }\n        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();\n    }\n\n    public get itemSize() {\n        let itemSize = '40px';\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy: itemSize = '32px'; break;\n            case DisplayDensity.compact: itemSize = '24px'; break;\n            default: break;\n        }\n        return itemSize;\n    }\n\n    public get listSize() {\n        return this.inline ? null : SEARCH_LIST_HEIGHT;\n    }\n\n    public get containerSize() {\n        return this.inline ? this.list.element.nativeElement.offsetHeight : SEARCH_LIST_HEIGHT;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterViewInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDropDownItemComponent, IgxDropDownComponent } from '../../../drop-down/index';\nimport { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/index';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { OverlaySettings, ConnectedPositioningStrategy, CloseScrollStrategy } from '../../../services/index';\nimport { KEYS, IBaseEventArgs } from '../../../core/utils';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\nexport interface ILogicOperatorChangedArgs extends IBaseEventArgs {\n    target: ExpressionUI;\n    newValue: FilteringLogic;\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-default-expression',\n    templateUrl: './excel-style-default-expression.component.html'\n})\nexport class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {\n\n    private _dropDownOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public expressionUI: ExpressionUI;\n\n    @Input()\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Output()\n    public onExpressionRemoved = new EventEmitter<ExpressionUI>();\n\n    @Output()\n    public onLogicOperatorChanged = new EventEmitter<ILogicOperatorChangedArgs>();\n\n    @ViewChild('inputGroupConditions', { read: IgxInputGroupComponent, static: true })\n    protected inputGroupConditions: IgxInputGroupComponent;\n\n    @ViewChild('inputValues', { read: IgxInputDirective, static: true })\n    protected inputValuesDirective: IgxInputDirective;\n\n    @ViewChild('dropdownConditions', { read: IgxDropDownComponent, static: true })\n    protected dropdownConditions: IgxDropDownComponent;\n\n    @ViewChild('logicOperatorButtonGroup', { read: IgxButtonGroupComponent })\n    protected logicOperatorButtonGroup: IgxButtonGroupComponent;\n\n    protected get inputValuesElement() {\n        return this.inputValuesDirective;\n    }\n\n    get isLast(): boolean {\n        return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;\n    }\n\n    get isSingle(): boolean {\n        return this.expressionsList.length === 1;\n    }\n\n    get inputConditionsPlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];\n    }\n\n    get inputValuePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.Number:\n                return 'number';\n            default:\n                return 'text';\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._dropDownOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._dropDownOverlaySettings.positionStrategy.settings.target = this.inputGroupConditions.element.nativeElement;\n    }\n\n    public focus() {\n        // use requestAnimationFrame to focus the values input because when initializing the component\n        // datepicker's input group is not yet fully initialized\n        requestAnimationFrame(() => this.inputValuesElement.focus());\n    }\n\n    public isConditionSelected(conditionName: string): boolean {\n        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;\n    }\n\n    public getConditionName(condition: IFilteringOperation) {\n        return condition ? this.translateCondition(condition.name) : null;\n    }\n\n    public getInputWidth() {\n        return this.inputGroupConditions.element.nativeElement.offsetWidth + 'px';\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else if (!this.expressionUI.expression.condition) {\n            return 'filter_list';\n        } else {\n            return this.expressionUI.expression.condition.iconName;\n        }\n    }\n\n    public toggleCustomDialogDropDown() {\n        this.dropdownConditions.toggle(this._dropDownOverlaySettings);\n    }\n\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    public onConditionsChanged(eventArgs: any) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expressionUI.expression.condition = this.getCondition(value);\n\n        this.focus();\n    }\n\n    public onValuesInput(eventArgs) {\n        this.expressionUI.expression.searchVal = DataUtil.parseValue(this.column.dataType, eventArgs.target.value);\n    }\n\n    public onLogicOperatorButtonClicked(eventArgs, buttonIndex: number) {\n        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {\n            eventArgs.stopPropagation();\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n        } else {\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onLogicOperatorKeyDown(eventArgs, buttonIndex: number) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onRemoveButtonClick() {\n        this.onExpressionRemoved.emit(this.expressionUI);\n    }\n\n    public onInputConditionsKeyDown(eventArgs) {\n        if (eventArgs.altKey && (eventArgs.key === KEYS.DOWN_ARROW || eventArgs.key === KEYS.DOWN_ARROW_IE)) {\n            this.toggleCustomDialogDropDown();\n        }\n\n        if (eventArgs.key === KEYS.TAB && eventArgs.shiftKey && this.expressionsList[0] === this.expressionUI) {\n            eventArgs.preventDefault();\n        }\n\n        event.stopPropagation();\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxDatePickerComponent } from '../../../date-picker/date-picker.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-date-expression',\n    templateUrl: './excel-style-date-expression.component.html'\n})\nexport class IgxExcelStyleDateExpressionComponent extends IgxExcelStyleDefaultExpressionComponent {\n\n    @ViewChild('datePicker', { read: IgxDatePickerComponent, static: true })\n    private datePicker: IgxDatePickerComponent;\n\n    protected get inputValuesElement() {\n        return this.datePicker.getEditElement();\n    }\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    get inputDatePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_date_placeholder'];\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ChangeDetectorRef,\n    ViewChild,\n    AfterViewInit,\n    TemplateRef,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DataType } from '../../../data-operations/data-util';\nimport {\n    IgxStringFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    ConnectedPositioningStrategy,\n    AutoPositionStrategy,\n    OverlaySettings,\n    VerticalAlignment,\n    PositionSettings,\n    HorizontalAlignment,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { ILogicOperatorChangedArgs, IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { KEYS } from '../../../core/utils';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-custom-dialog',\n    templateUrl: './excel-style-custom-dialog.component.html'\n})\nexport class IgxExcelStyleCustomDialogComponent implements AfterViewInit {\n\n    @Input()\n    public expressionsList = new Array<ExpressionUI>();\n\n    private _customDialogPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _customDialogOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new AutoPositionStrategy(this._customDialogPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public selectedOperator: string;\n\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChildren(IgxExcelStyleDefaultExpressionComponent)\n    private expressionComponents: QueryList<IgxExcelStyleDefaultExpressionComponent>;\n\n    @ViewChildren(IgxExcelStyleDateExpressionComponent)\n    private expressionDateComponents: QueryList<IgxExcelStyleDateExpressionComponent>;\n\n    @ViewChild('toggle', { read: IgxToggleDirective, static: true })\n    public toggle: IgxToggleDirective;\n\n    @ViewChild('defaultExpressionTemplate', { read: TemplateRef })\n    protected defaultExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('dateExpressionTemplate', { read: TemplateRef })\n    protected dateExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('expressionsContainer', { static: true })\n    protected expressionsContainer: ElementRef;\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._customDialogOverlaySettings.outlet = this.grid.outlet;\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.dateExpressionTemplate;\n        }\n\n        return this.defaultExpressionTemplate;\n    }\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    public onCustomDialogOpening() {\n        if (this.selectedOperator) {\n            this.createInitialExpressionUIElement();\n        }\n    }\n\n    public onCustomDialogOpened() {\n        if (this.expressionComponents.first) {\n            this.expressionComponents.first.focus();\n        }\n    }\n\n    public open(esf) {\n        this._customDialogOverlaySettings.positionStrategy.settings.target =\n            this.overlayComponentId ?\n                this.grid.rootGrid ? this.grid.rootGrid.nativeElement : this.grid.nativeElement :\n                esf;\n        this.toggle.open(this._customDialogOverlaySettings);\n    }\n\n    public onClearButtonClick() {\n        this.filteringService.clearFilter(this.column.field);\n        this.createInitialExpressionUIElement();\n        this.cdr.detectChanges();\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        } else {\n            this.toggle.close();\n        }\n    }\n\n    public onApplyButtonClick() {\n        this.expressionsList = this.expressionsList.filter(\n            element => element.expression.condition &&\n            (element.expression.searchVal || element.expression.searchVal === 0 || element.expression.condition.isUnary));\n\n        if (this.expressionsList.length > 0) {\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.filteringService.filterInternal(this.column.field, this.expressionsList);\n        this.closeDialog();\n    }\n\n    public onAddButtonClick() {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        this.expressionsList[this.expressionsList.length - 1].afterOperator = FilteringLogic.And;\n        exprUI.beforeOperator = this.expressionsList[this.expressionsList.length - 1].afterOperator;\n\n        this.expressionsList.push(exprUI);\n\n        this.markChildrenForCheck();\n        this.scrollToBottom();\n    }\n\n    public onExpressionRemoved(event: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(event);\n\n        if (indexToRemove === 0 && this.expressionsList.length > 1) {\n            this.expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === this.expressionsList.length - 1) {\n            this.expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            this.expressionsList[indexToRemove - 1].afterOperator = this.expressionsList[indexToRemove + 1].beforeOperator;\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.expressionsList.splice(indexToRemove, 1);\n\n        this.cdr.detectChanges();\n\n        this.markChildrenForCheck();\n    }\n\n    public onLogicOperatorChanged(event: ILogicOperatorChangedArgs) {\n        const index = this.expressionsList.indexOf(event.target);\n        event.target.afterOperator = event.newValue;\n        if (index + 1 < this.expressionsList.length) {\n            this.expressionsList[index + 1].beforeOperator = event.newValue;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        eventArgs.stopPropagation();\n    }\n\n    public onApplyButtonKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.TAB && !eventArgs.shiftKey) {\n            eventArgs.stopPropagation();\n            eventArgs.preventDefault();\n        }\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n\n    private markChildrenForCheck() {\n        this.expressionComponents.forEach(x => x.cdr.markForCheck());\n        this.expressionDateComponents.forEach(x => x.cdr.markForCheck());\n    }\n\n    private createInitialExpressionUIElement() {\n        this.expressionsList = [];\n        const firstExprUI = new ExpressionUI();\n\n        firstExprUI.expression = {\n            condition: this.createCondition(this.selectedOperator),\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n        firstExprUI.afterOperator = FilteringLogic.And;\n\n        this.expressionsList.push(firstExprUI);\n\n        const secondExprUI = new ExpressionUI();\n        secondExprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        secondExprUI.beforeOperator = FilteringLogic.And;\n\n        this.expressionsList.push(secondExprUI);\n    }\n\n    private scrollToBottom() {\n        requestAnimationFrame(() => {\n            this.expressionsContainer.nativeElement.scrollTop = this.expressionsContainer.nativeElement.scrollHeight;\n        });\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input,\n    AfterViewInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { DisplayDensity } from '../../../core/density';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { GridType } from '../../common/grid.interface';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-sorting',\n    templateUrl: './excel-style-sorting.component.html'\n})\nexport class IgxExcelStyleSortingComponent implements AfterViewInit, OnDestroy, OnChanges {\n    private destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: GridType;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild('sortButtonGroup', { read: IgxButtonGroupComponent, static: true })\n    public sortButtonGroup: IgxButtonGroupComponent;\n\n    constructor() {}\n\n    ngAfterViewInit(): void {\n        this.grid.sortingExpressionsChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.updateSelectedButtons(this.column.field);\n        });\n        this.updateSelectedButtons(this.column.field);\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.column && !changes.column.firstChange) {\n            this.updateSelectedButtons(changes.column.currentValue.field);\n        }\n    }\n\n    private updateSelectedButtons(fieldName: string) {\n        const sortIndex = this.grid.sortingExpressions.findIndex(s => s.fieldName === fieldName);\n\n        this.sortButtonGroup.buttons.forEach((b, i) => {\n            this.sortButtonGroup.deselectButton(i);\n        });\n\n        if (sortIndex !== -1 ) {\n            const sortDirection = this.grid.sortingExpressions[sortIndex].dir;\n            this.sortButtonGroup.selectButton(sortDirection - 1);\n        }\n    }\n\n    public onSortButtonClicked(sortDirection) {\n        if (this.sortButtonGroup.selectedIndexes.length === 0) {\n            if (this.grid.isColumnGrouped(this.column.field)) {\n                this.sortButtonGroup.selectButton(sortDirection - 1);\n            } else {\n                this.grid.clearSort(this.column.field);\n            }\n        } else {\n            this.grid.sort({ fieldName: this.column.field, dir: sortDirection, ignoreCase: true });\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n    HostBinding,\n    ChangeDetectionStrategy,\n    TemplateRef,\n    Directive,\n    OnDestroy,\n    AfterViewInit,\n    ElementRef,\n    Input,\n    ViewRef\n} from '@angular/core';\nimport {\n    HorizontalAlignment,\n    VerticalAlignment,\n    OverlaySettings,\n    IgxOverlayService,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy\n} from '../../../services/index';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport {\n    IFilteringOperation,\n    IgxStringFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { cloneArray, KEYS } from '../../../core/utils';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { Subscription, Subject } from 'rxjs';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectionEventArgs, IgxDropDownComponent } from '../../../drop-down';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxGridBaseDirective } from '../../grid-base.directive';\n\n/**\n *@hidden\n */\nexport class FilterListItem {\n    public value: any;\n    public label: any;\n    public isSelected: boolean;\n    public indeterminate: boolean;\n    public isSpecial = false;\n}\n\n@Directive({\n    selector: '[igxExcelStyleSorting]'\n})\nexport class IgxExcelStyleSortingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleMoving]'\n})\nexport class IgxExcelStyleMovingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleHiding]'\n})\nexport class IgxExcelStyleHidingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStylePinning]'\n})\nexport class IgxExcelStylePinningTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * A component used for presenting Excel style filtering UI for a specific column.\n * It is used internally in the Grid, but could also be hosted in a container outside of it.\n *\n * Example:\n * ```html\n * <igx-grid-excel-style-filtering\n *     [column]=\"grid1.columns[0]\">\n * </igx-grid-excel-style-filtering>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-excel-style-filtering',\n    templateUrl: './grid.excel-style-filtering.component.html'\n})\nexport class IgxGridExcelStyleFilteringComponent implements OnDestroy, AfterViewInit {\n    private static readonly filterOptimizationThreshold = 2;\n\n    private shouldOpenSubMenu = true;\n    private expressionsList = new Array<ExpressionUI>();\n    private destroy$ = new Subject<boolean>();\n    private containsNullOrEmpty = false;\n    private selectAllSelected = true;\n    private selectAllIndeterminate = false;\n    private filterValues = new Set<any>();\n    private _column: IgxColumnComponent;\n    private _columnPinning: Subscription;\n    private _columnVisibilityChanged: Subscription;\n    private _filteringChanged: Subscription;\n    private _densityChanged: Subscription;\n\n    /**\n     * An @Input property that sets the column.\n     */\n    @Input()\n    public set column(value: IgxColumnComponent) {\n        this._column = value;\n\n        if (this._columnPinning) {\n            this._columnPinning.unsubscribe();\n        }\n\n        if (this._columnVisibilityChanged) {\n            this._columnVisibilityChanged.unsubscribe();\n        }\n\n        if (this._filteringChanged) {\n            this._filteringChanged.unsubscribe();\n        }\n\n        if (this._densityChanged) {\n            this._densityChanged.unsubscribe();\n        }\n\n        if (this._column) {\n            this._column.grid.filteringService.registerSVGIcons();\n            this.isColumnPinnable = this.column.pinnable;\n            this.init();\n\n            this._columnPinning = this.grid.onColumnPinning.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                requestAnimationFrame(() => {\n                    this.isColumnPinnable = this.column.pinnable;\n                    if (!(this.cdr as ViewRef).destroyed) {\n                       this.cdr.detectChanges();\n                    }\n                });\n            });\n            this._columnVisibilityChanged = this.grid.onColumnVisibilityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.cdr.detectChanges();\n            });\n            this._filteringChanged = this.grid.filteringExpressionsTreeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.init();\n            });\n            this._densityChanged = this.grid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * Returns the current column.\n     */\n    public get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteringService(): IgxFilteringService {\n        return this.grid.filteringService;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public listData = new Array<FilterListItem>();\n    /**\n     * @hidden @internal\n     */\n    public uniqueValues = [];\n    /**\n     * @hidden @internal\n     */\n    public overlayService: IgxOverlayService;\n    /**\n     * @hidden @internal\n     */\n    public overlayComponentId: string;\n\n    private _subMenuPositionSettings = {\n        verticalStartPoint: VerticalAlignment.Top\n    };\n\n    private _subMenuOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new AutoPositionStrategy(this._subMenuPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-excel-filter')\n    className = 'igx-excel-filter';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-excel-filter--inline')\n    public inline = true;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('dropdown', { read: ElementRef })\n    public mainDropdown: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('subMenu', { read: IgxDropDownComponent })\n    public subMenu: IgxDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent })\n    public customDialog: IgxExcelStyleCustomDialogComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('excelStyleSearch', { read: IgxExcelStyleSearchComponent })\n    protected excelStyleSearch: IgxExcelStyleSearchComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('excelStyleSorting', { read: IgxExcelStyleSortingComponent })\n    protected excelStyleSorting: IgxExcelStyleSortingComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultExcelStyleSortingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleSortingTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultExcelStyleHidingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleHidingTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultExcelStyleMovingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleMovingTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultExcelStylePinningTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStylePinningTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    public isColumnPinnable: boolean;\n\n    /**\n     * @hidden @internal\n     */\n    get grid(): IgxGridBaseDirective {\n        return this.column.grid;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get subMenuText() {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return this.grid.resourceStrings.igx_grid_excel_boolean_filter;\n            case DataType.Number:\n                return this.grid.resourceStrings.igx_grid_excel_number_filter;\n            case DataType.Date:\n                return this.grid.resourceStrings.igx_grid_excel_date_filter;\n            default:\n                return this.grid.resourceStrings.igx_grid_excel_text_filter;\n        }\n    }\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    /**\n     * @hidden @internal\n     */\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    ngAfterViewInit(): void {\n        requestAnimationFrame(() => {\n            this.excelStyleSearch.searchInput.nativeElement.focus();\n        });\n    }\n\n    private init() {\n        this.expressionsList = new Array<ExpressionUI>();\n        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);\n        this.populateColumnData();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public clearFilterClass() {\n        if (this.column.filteringExpressionsTree) {\n            return 'igx-excel-filter__actions-clear';\n        }\n\n        return 'igx-excel-filter__actions-clear--disabled';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public pinClass() {\n        return this.isColumnPinnable ? 'igx-excel-filter__actions-pin' : 'igx-excel-filter__actions-pin--disabled';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public initialize(column: IgxColumnComponent, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.inline = false;\n        this.column = column;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this._subMenuOverlaySettings.outlet = (this.grid as any).outlet;\n\n        this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.closeDropdown();\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onPin() {\n        this.column.pinned = !this.column.pinned;\n        this.closeDropdown();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onHideToggle() {\n        this.column.hidden = !this.column.hidden;\n        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: this.column.hidden });\n        this.closeDropdown();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onTextFilterClick(eventArgs) {\n        if (this.shouldOpenSubMenu) {\n            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;\n\n            const gridRect = this.grid.nativeElement.getBoundingClientRect();\n            const dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();\n\n            let x = dropdownRect.left + dropdownRect.width;\n            let x1 = gridRect.left + gridRect.width;\n            x += window.pageXOffset;\n            x1 += window.pageXOffset;\n            if (Math.abs(x - x1) < 200) {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;\n            } else {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;\n            }\n\n            this.subMenu.open(this._subMenuOverlaySettings);\n            this.shouldOpenSubMenu = false;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onTextFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.onTextFilterClick(eventArgs);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onSubMenuClosed() {\n        requestAnimationFrame(() => {\n            this.shouldOpenSubMenu = true;\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onSubMenuSelection(eventArgs: ISelectionEventArgs) {\n        if (this.expressionsList && this.expressionsList.length &&\n            this.expressionsList[0].expression.condition.name !== 'in') {\n            this.customDialog.expressionsList = this.expressionsList;\n        }\n\n        this.customDialog.selectedOperator = eventArgs.newSelection.value;\n        eventArgs.cancel = true;\n        if (this.overlayComponentId) {\n            this.mainDropdown.nativeElement.style.display = 'none';\n        }\n        this.subMenu.close();\n        this.customDialog.open(this.mainDropdown.nativeElement);\n    }\n\n    private areExpressionsSelectable () {\n        if (this.expressionsList.length === 1 &&\n            (this.expressionsList[0].expression.condition.name === 'equals' ||\n             this.expressionsList[0].expression.condition.name === 'true' ||\n             this.expressionsList[0].expression.condition.name === 'false' ||\n             this.expressionsList[0].expression.condition.name === 'empty' ||\n             this.expressionsList[0].expression.condition.name === 'in')) {\n            return true;\n        }\n\n        const selectableExpressionsCount = this.expressionsList.filter(exp =>\n            (exp.beforeOperator === 1 || exp.afterOperator === 1) &&\n            (exp.expression.condition.name === 'equals' ||\n             exp.expression.condition.name === 'true' ||\n             exp.expression.condition.name === 'false' ||\n             exp.expression.condition.name === 'empty' ||\n             exp.expression.condition.name === 'in')).length;\n\n        return selectableExpressionsCount === this.expressionsList.length;\n    }\n\n    private areExpressionsValuesInTheList() {\n        if (this.column.dataType === DataType.Boolean) {\n            return true;\n        }\n\n        if (this.filterValues.size === 1) {\n            const firstValue = this.filterValues.values().next().value;\n\n            if (!firstValue && firstValue !== 0) {\n                return true;\n            }\n        }\n\n        for (let index = 0; index < this.uniqueValues.length; index++) {\n            if (this.filterValues.has(this.uniqueValues[index])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private populateColumnData() {\n        if (this.grid.uniqueColumnValuesStrategy) {\n            this.cdr.detectChanges();\n            this.renderColumnValuesRemotely();\n        } else {\n            this.renderColumnValuesFromData();\n        }\n    }\n\n    private renderColumnValuesRemotely() {\n        this.excelStyleSearch.isLoading = true;\n        const expressionsTree: FilteringExpressionsTree = this.getColumnFilterExpressionsTree();\n\n        this.grid.uniqueColumnValuesStrategy(this.column, expressionsTree, (colVals: any[]) => {\n            const columnValues = (this.column.dataType === DataType.Date) ?\n                colVals.map(val => val ? val.toDateString() : val) : colVals;\n\n            this.renderValues(columnValues);\n            this.excelStyleSearch.isLoading = false;\n            this.excelStyleSearch.refreshSize();\n        });\n    }\n\n    private renderColumnValuesFromData() {\n        let data = this.column.gridAPI.get_all_data((this.grid as any).id);\n        const expressionsTree = this.getColumnFilterExpressionsTree();\n\n        if (expressionsTree.filteringOperands.length) {\n            const state = { expressionsTree: expressionsTree };\n            data = DataUtil.filter(cloneArray(data), state);\n        }\n\n        const columnField = this.column.field;\n        const columnValues = (this.column.dataType === DataType.Date) ?\n            data.map(record => record[columnField] ? record[columnField].toDateString() : record[columnField]) :\n            data.map(record => record[columnField]);\n\n        this.renderValues(columnValues);\n    }\n\n    private renderValues(columnValues: any[]) {\n        this.generateUniqueValues(columnValues);\n        this.generateFilterValues(this.column.dataType === DataType.Date);\n        this.generateListData();\n    }\n\n    private generateUniqueValues(columnValues: any[]) {\n        this.uniqueValues = Array.from(new Set(columnValues));\n    }\n\n    private generateFilterValues(isDateColumn: boolean = false) {\n        if (isDateColumn) {\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()).map(v =>\n                        new Date(v).toDateString()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal] ];\n            }, []));\n        } else {\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal] ];\n            }, []));\n        }\n    }\n\n    private generateListData() {\n        this.listData = new Array<FilterListItem>();\n\n        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();\n\n        if (this.column.dataType === DataType.Boolean) {\n            this.addBooleanItems();\n        } else {\n            this.addItems(shouldUpdateSelection);\n        }\n\n        this.listData.sort((a, b) => this.sortData(a, b));\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = this.uniqueValues.map(value => new Date(value));\n        }\n\n        if (this.containsNullOrEmpty) {\n            this.addBlanksItem(shouldUpdateSelection);\n        }\n\n        this.addSelectAllItem();\n\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    private getColumnFilterExpressionsTree() {\n        const gridExpressionsTree: IFilteringExpressionsTree = this.grid.filteringExpressionsTree;\n        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);\n\n        for (const operand of gridExpressionsTree.filteringOperands) {\n            if (operand instanceof FilteringExpressionsTree) {\n                const columnExprTree = operand as FilteringExpressionsTree;\n                if (columnExprTree.fieldName === this.column.field) {\n                    break;\n                }\n            }\n            expressionsTree.filteringOperands.push(operand);\n        }\n\n        return expressionsTree;\n    }\n\n    private addBooleanItems() {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            const filterListItem = new FilterListItem();\n            if (element !== undefined && element !== null && element !== '') {\n                if (this.column.filteringExpressionsTree) {\n                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true' )) {\n                        filterListItem.isSelected = true;\n                        this.selectAllIndeterminate = true;\n                    } else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false' )) {\n                            filterListItem.isSelected = true;\n                            this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                filterListItem.value = element;\n                filterListItem.label = element;\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addItems(shouldUpdateSelection: boolean) {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            if (element !== undefined && element !== null && element !== '') {\n                const filterListItem = new FilterListItem();\n                if (this.column.filteringExpressionsTree) {\n                    if (shouldUpdateSelection) {\n                        if (this.filterValues.has(element)) {\n                            filterListItem.isSelected = true;\n                        } else {\n                            filterListItem.isSelected = false;\n                        }\n                        this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                        this.selectAllSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                if (this.column.dataType === DataType.Date) {\n                    filterListItem.value = new Date(element);\n                    filterListItem.label = new Date(element);\n                } else {\n                    filterListItem.value = element;\n                    filterListItem.label = element;\n                }\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addSelectAllItem() {\n        const selectAll =  new FilterListItem();\n        selectAll.isSelected = this.selectAllSelected;\n        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.indeterminate = this.selectAllIndeterminate;\n        selectAll.isSpecial = true;\n        this.listData.unshift(selectAll);\n    }\n\n    private addBlanksItem(shouldUpdateSelection) {\n        const blanks =  new FilterListItem();\n        if (this.column.filteringExpressionsTree) {\n            if (shouldUpdateSelection) {\n                if (this.filterValues.has(null)) {\n                    blanks.isSelected = true;\n                } else {\n                    blanks.isSelected = false;\n                }\n            }\n        } else {\n            blanks.isSelected = true;\n        }\n        blanks.value = null;\n        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;\n        blanks.indeterminate = false;\n        blanks.isSpecial = true;\n        this.listData.unshift(blanks);\n    }\n\n    private sortData(a: FilterListItem, b: FilterListItem) {\n        let valueA = a.value;\n        let valueB = b.value;\n        if (typeof(a) === DataType.String) {\n            valueA = a.value.toUpperCase();\n            valueB = b.value.toUpperCase();\n        }\n        if (valueA < valueB) {\n            return -1;\n        } else if (valueA > valueB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    private selectAllFilterItems() {\n        this.listData.forEach(filterListItem => {\n            filterListItem.isSelected = true;\n            filterListItem.indeterminate = false;\n        });\n        this.excelStyleSearch.cdr.detectChanges();\n    }\n\n    // TODO: sort members by access modifier\n\n    /**\n     * @hidden @internal\n     */\n    get sortingTemplate() {\n        if (this.grid.excelStyleSortingTemplateDirective) {\n            return this.grid.excelStyleSortingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleSortingTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get movingTemplate() {\n        if (this.grid.excelStyleMovingTemplateDirective) {\n            return this.grid.excelStyleMovingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleMovingTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get pinningTemplate() {\n        if (this.grid.excelStylePinningTemplateDirective) {\n            return this.grid.excelStylePinningTemplateDirective.template;\n        } else {\n            return this.defaultExcelStylePinningTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get hidingTemplate() {\n        if (this.grid.excelStyleHidingTemplateDirective) {\n            return this.grid.excelStyleHidingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleHidingTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get applyButtonDisabled() {\n        return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public applyFilter() {\n        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);\n        const selectedItems = this.listData.slice(1, this.listData.length).filter(el => el.isSelected === true);\n        const unselectedItem = this.listData.slice(1, this.listData.length).find(el => el.isSelected === false);\n\n        if (unselectedItem) {\n            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold) {\n                selectedItems.forEach(element => {\n                    let condition = null;\n                    if (element.value !== null && element.value !== undefined) {\n                        if (this.column.dataType === DataType.Boolean) {\n                            condition = this.createCondition(element.value.toString());\n                        } else {\n                            condition = this.createCondition('equals');\n                        }\n                    } else {\n                        condition = this.createCondition('empty');\n                    }\n                    filterTree.filteringOperands.push({\n                        condition: condition,\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: element.value\n                    });\n                });\n            } else {\n                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);\n                let blanksItem: any;\n                if (blanksItemIndex >= 0) {\n                    blanksItem = selectedItems[blanksItemIndex];\n                    selectedItems.splice(blanksItemIndex, 1);\n                }\n\n                filterTree.filteringOperands.push({\n                    condition: this.createCondition('in'),\n                    fieldName: this.column.field,\n                    ignoreCase: this.column.filteringIgnoreCase,\n                    searchVal: new Set(this.column.dataType === DataType.Date ?\n                        selectedItems.map(d => new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString()) :\n                        selectedItems.map(e => e.value))\n                });\n\n                if (blanksItem) {\n                    filterTree.filteringOperands.push({\n                        condition: this.createCondition('empty'),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: blanksItem.value\n                    });\n                }\n            }\n\n            this.filteringService.filterInternal(this.column.field, filterTree);\n            this.expressionsList = new Array<ExpressionUI>();\n            this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree,\n                this.grid.filteringLogic, this.expressionsList);\n        } else {\n            this.filteringService.clearFilter(this.column.field);\n        }\n\n        this.closeDropdown();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public cancel() {\n        if (!this.overlayComponentId) {\n            this.init();\n        }\n        this.closeDropdown();\n    }\n\n    private closeDropdown() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n            this.overlayComponentId = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE) {\n            this.closeDropdown();\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public clearFilter() {\n        this.filteringService.clearFilter(this.column.field);\n        this.selectAllFilterItems();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onClearFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.clearFilter();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public showCustomFilterItem(): boolean {\n        const exprTree = this.column.filteringExpressionsTree;\n        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&\n            !((exprTree.filteringOperands[0] as IFilteringExpression).condition &&\n            (exprTree.filteringOperands[0] as IFilteringExpression).condition.name === 'in');\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnInit,\n    Inject,\n    OnDestroy,\n    NgModuleRef\n} from '@angular/core';\nimport { DataType } from '../../data-operations/data-util';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { IgxGridExcelStyleFilteringComponent } from '../filtering/excel-style/grid.excel-style-filtering.component';\nimport { OverlaySettings, PositionSettings, VerticalAlignment } from '../../services/overlay/utilities';\nimport { AutoPositionStrategy } from '../../services/overlay/position/auto-position-strategy';\nimport { useAnimation } from '@angular/animations';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { fadeIn, fadeOut } from '../../animations/main';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll/absolute-scroll-strategy';\nimport { GridType } from '../common/grid.interface';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    templateUrl: './grid-header.component.html'\n})\nexport class IgxGridHeaderComponent implements DoCheck, OnInit, OnDestroy {\n\n    private _componentOverlayId: string;\n    private _filterMenuPositionSettings: PositionSettings;\n    private _filterMenuOverlaySettings: OverlaySettings;\n    private _destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sortable': this.column.sortable,\n            'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,\n            'igx-grid__th--sorted': this.sorted\n        };\n\n        for (const klass of Object.keys(classList)) {\n            if (classList[klass]) {\n                defaultClasses.push(klass);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    @HostBinding('style.height.rem')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight / this.grid._baseFontSize;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'arrow_upward';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get filterIconClassName() {\n        return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    protected sortDirection = SortingDirection.None;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        public colResizingService: IgxColumnResizingService,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone,\n        private _filteringService: IgxFilteringService,\n        private _moduleRef: NgModuleRef<any>,\n        @Inject(IgxOverlayService) private _overlayService: IgxOverlayService\n    ) { }\n\n    public ngOnInit() {\n        this.initFilteringSettings();\n    }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n\n        if (this._componentOverlayId) {\n            this._overlayService.hide(this._componentOverlayId);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.colResizingService.isColumnResizing) {\n            event.stopPropagation();\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.column.sortable) {\n                this.triggerSort();\n            }\n        }\n    }\n\n    public onFilteringIconClick(event) {\n        event.stopPropagation();\n\n        this.toggleFilterDropdown();\n    }\n\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.grid.sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    public onSortingIconClick(event) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            event.stopPropagation();\n            this.triggerSort();\n        }\n    }\n\n    private triggerSort() {\n        const groupingExpr = this.grid.groupingExpressions ?\n            this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n        const sortDir = groupingExpr ?\n            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n        this.sortDirection = sortDir;\n        this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n            strategy: this.column.sortStrategy });\n    }\n\n    private toggleFilterDropdown() {\n        if (!this._componentOverlayId) {\n            const headerTarget = this.elementRef.nativeElement;\n            const filterIconTarget = headerTarget.querySelector('.' + this.filterIconClassName);\n\n            this._filterMenuOverlaySettings.positionStrategy.settings.target = filterIconTarget;\n            this._filterMenuOverlaySettings.outlet = this.grid.outlet;\n\n            this._componentOverlayId =\n                this._overlayService.attach(IgxGridExcelStyleFilteringComponent, this._filterMenuOverlaySettings, this._moduleRef);\n            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);\n        }\n    }\n\n    private initFilteringSettings() {\n        this._filterMenuPositionSettings = {\n            verticalStartPoint: VerticalAlignment.Bottom,\n            openAnimation: useAnimation(fadeIn, {\n                params: {\n                    duration: '250ms'\n                }\n            }),\n            closeAnimation: useAnimation(fadeOut, {\n                params: {\n                    duration: '200ms'\n                }\n            })\n        };\n\n        this._filterMenuOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            positionStrategy: new AutoPositionStrategy(this._filterMenuPositionSettings),\n            scrollStrategy: new AbsoluteScrollStrategy()\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this.onOverlayOpening(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this.onOverlayClosed();\n            });\n    }\n\n    private onOverlayOpening(eventArgs) {\n        const instance = eventArgs.componentRef.instance as IgxGridExcelStyleFilteringComponent;\n        if (instance) {\n            instance.initialize(this.column, this._overlayService, eventArgs.id);\n        }\n    }\n\n    private onOverlayClosed() {\n        this._componentOverlayId = null;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    HostListener,\n    OnInit,\n    ChangeDetectionStrategy,\n    DoCheck\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../../chips';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { KEYS } from '../../../core/utils';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    templateUrl: './grid-filtering-cell.component.html'\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {\n\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n    private currentTemplate = null;\n\n    public expressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef, static: true })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef, static: true })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef, static: true })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent })\n    protected complexChip: IgxChipComponent;\n\n    @HostBinding('class.igx-grid__filtering-cell')\n    public cssClass = 'igx-grid__filtering-cell';\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    public ngDoCheck() {\n        this.updateFilterCellArea();\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeyDown(eventArgs) {\n\n        if (this.isLastElementFocused()) {\n            this.filteringService.grid.navigation.navigateNextFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    public onShiftTabKeyDown(eventArgs) {\n        if (this.isFirstElementFocused()) {\n            this.filteringService.grid.navigation.navigatePrevFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * Returns whether a chip with a given index is visible or not.\n     */\n    public isChipVisible(index: number) {\n        const expression = this.expressionsList[index];\n        return !!(expression && expression.isVisible);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            this.currentTemplate = null;\n            return null;\n        }\n\n        if (this.column.filterCellTemplate) {\n            this.currentTemplate = this.column.filterCellTemplate;\n            return this.column.filterCellTemplate;\n        }\n\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            this.currentTemplate = this.emptyFilter;\n            return this.emptyFilter;\n        }\n\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            this.currentTemplate = this.complexFilter;\n            return this.complexFilter;\n        }\n\n        this.currentTemplate = this.defaultFilter;\n        return this.defaultFilter;\n    }\n\n    /**\n     * Gets the context passed to the filter template.\n     * @memberof IgxGridFilteringCellComponent\n     */\n    get context() {\n        return {\n            column: this.column\n        };\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n\n        const index = this.filteringService.unpinnedFilterableColumns.indexOf(this.column);\n        if (index >= 0 && !this.isColumnRightVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], true);\n        } else if (index >= 0 && !this.isColumnLeftVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], false);\n        }\n\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n        this.focusChip();\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Chip keydown event handler.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.onChipClicked(expression);\n        }\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconHidden(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconHidden()\n        };\n    }\n\n    /**\n     * Focus a chip depending on the current visible template.\n     */\n    public focusChip(focusFirst: boolean = false) {\n        if (this.currentTemplate === this.defaultFilter) {\n            if (focusFirst) {\n                this.focusFirstElement();\n            } else {\n                this.focusElement();\n            }\n        } else if (this.currentTemplate === this.emptyFilter) {\n            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else if (this.currentTemplate === this.complexFilter) {\n            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        }\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private isMoreIconHidden(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.expressionsList.forEach((ex) => ex.isVisible = true);\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        this.cdr.detectChanges();\n\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    break;\n                }\n            }\n\n            for (let i = visibleChipsCount; i < this.expressionsList.length; i++) {\n                this.expressionsList[i].isVisible = false;\n            }\n            this.cdr.detectChanges();\n        }\n    }\n\n    private isFirstElementFocused(): boolean {\n        return !(this.chipsArea && this.chipsArea.chipsList.length > 0 &&\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`) !== document.activeElement);\n    }\n\n    private isLastElementFocused(): boolean {\n        if (this.chipsArea) {\n            if (this.isMoreIconHidden() && this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`) !==\n                document.activeElement) {\n                return false;\n            } else if (!this.isMoreIconHidden() && this.moreIcon.nativeElement !== document.activeElement) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private focusFirstElement(): void {\n        if (this.chipsArea.chipsList.length > 0) {\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else {\n            this.moreIcon.nativeElement.focus();\n        }\n    }\n\n    private focusElement(): void {\n        if (this.filteringService.shouldFocusNext) {\n            if (!this.isMoreIconHidden() && this.chipsArea.chipsList.length === 0) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n            }\n        } else {\n            if (!this.isMoreIconHidden()) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`).focus();\n            }\n        }\n    }\n\n    private isColumnRightVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnRight = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n        }\n        const width = this.filteringService.displayContainerWidth + this.filteringService.displayContainerScrollLeft;\n        return currentColumnRight <= width;\n    }\n\n    private isColumnLeftVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n            currentColumnLeft += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n        }\n        return currentColumnLeft >= this.filteringService.displayContainerScrollLeft;\n    }\n}\n","import {\n    Component,\n    HostBinding,\n    Input,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    forwardRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    HostListener\n} from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridFilteringCellComponent } from '../filtering/base/grid-filtering-cell.component';\nimport { isIE } from '../../core/utils';\nimport { GridType } from '../common/grid.interface';\n\nconst Z_INDEX = 9999;\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header-group',\n    templateUrl: './grid-header-group.component.html'\n})\nexport class IgxGridHeaderGroupComponent implements DoCheck {\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Gets the column of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the `id` of the grid in which the header group is stored.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridHeaderComponent)\n    public headerCell: IgxGridHeaderComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridFilteringCellComponent)\n    public filterCell: IgxGridFilteringCellComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxGridHeaderGroupComponent), { read: IgxGridHeaderGroupComponent })\n    public children: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * Gets the width of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get width() {\n        return this.grid.getHeaderGroupWidth(this.column);\n    }\n\n    /**\n     * Gets the style classes of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__thead-item',\n            this.column.headerGroupClasses\n        ];\n\n        const classList = {\n            'igx-grid__th--pinned': this.isPinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__drag-col-header': this.isHeaderDragged,\n            'igx-grid__th--filtering': this.isFiltered\n        };\n\n        for (const className of Object.keys(classList)) {\n            if (classList[className]) {\n                defaultClasses.push(className);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return Z_INDEX - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    /**\n     * Gets the grid of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is filtered.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isFiltered(): boolean {\n        return this.filteringService.filteredColumn === this.column;\n    }\n\n    /**\n     * Gets whether the header group is stored in the last column in the pinned area.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isLastPinned(): boolean {\n        return !this.grid.hasColumnLayouts ? this.column.isLastPinned : false;\n    }\n\n    @HostBinding('style.display')\n    get groupDisplayStyle(): string {\n        return this.grid.hasColumnLayouts && this.column.children && !isIE() ? 'flex' : '';\n    }\n\n    /**\n     * Gets whether the header group is stored in a pinned column.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isPinned(): boolean {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is moved.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isHeaderDragged(): boolean {\n        return this.grid.draggedColumn ===  this.column;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasLastPinnedChildColumn(): boolean {\n        return this.column.allChildren.some(child => child.isLastPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    get height() {\n        return this.element.nativeElement.getBoundingClientRect().height;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event): void {\n        // hack for preventing text selection in IE and Edge while dragging the resizer\n        event.preventDefault();\n    }\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    constructor(private cdr: ChangeDetectorRef,\n                public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n                public element: ElementRef,\n                public colResizingService: IgxColumnResizingService,\n                public filteringService: IgxFilteringService) { }\n}\n","import { Injectable} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\n\n/** @hidden */\n@Injectable()\nexport class IgxGridSummaryService {\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, IgxSummaryResult[]>>();\n    public grid;\n    public rootSummaryID = 'igxGridRootSummary';\n    public summaryHeight = 0;\n    public maxSummariesLenght = 0;\n    public groupingExpressions = [];\n    public retriggerRootPipe = 0;\n    public deleteOperation = false;\n\n    public recalculateSummaries() {\n        this.resetSummaryHeight();\n        this.grid.notifyChanges(true);\n    }\n\n    public clearSummaryCache(args?) {\n        if (!this.summaryCacheMap.size) { return; }\n        if (!args) {\n            this.summaryCacheMap.clear();\n            if (this.grid && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n            return;\n        }\n        if (args.data) {\n            const rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;\n            this.removeSummaries(rowID);\n        }\n        if (args.rowID !== undefined && args.rowID !== null) {\n            let columnName = args.cellID ? this.grid.columnList.find(col => col.index === args.cellID.columnID).field : undefined;\n            if (columnName && this.grid.rowEditable) { return; }\n\n            const isGroupedColumn = this.grid.groupingExpressions &&\n                    this.grid.groupingExpressions.map(expr => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && isGroupedColumn ) {\n                columnName = undefined;\n            }\n            this.removeSummaries(args.rowID, columnName);\n        }\n    }\n\n    public removeSummaries(rowID, columnName?) {\n        this.deleteSummaryCache(this.rootSummaryID, columnName);\n        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) { return; }\n        if (this.isTreeGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                // TODO: this.removeChildRowSummaries(rowID, columnName);\n                this.summaryCacheMap.clear();\n                return;\n            }\n            this.removeAllTreeGridSummaries(rowID, columnName);\n        } else if (this.isHierarchicalGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                this.summaryCacheMap.clear();\n            }\n        } else {\n           const summaryIds = this.getSummaryID(rowID, this.grid.groupingExpressions);\n           summaryIds.forEach(id => {\n               this.deleteSummaryCache(id, columnName);\n           });\n        }\n    }\n\n    public removeSummariesCachePerColumn(columnName) {\n        this.summaryCacheMap.forEach((cache) => {\n            if (cache.get(columnName)) {\n                cache.delete(columnName);\n            }\n        });\n        if (this.grid.rootSummariesEnabled) {  this.retriggerRootPipe++; }\n    }\n\n    public calcMaxSummaryHeight() {\n        if (this.summaryHeight) {\n            return this.summaryHeight;\n        }\n        if (!this.grid.data) {return this.summaryHeight = 0; }\n        let maxSummaryLength = 0;\n        this.grid.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            const getCurrentSummaryColumn = column.summaries.operate([], [], column.field).length;\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn) {\n                    maxSummaryLength = getCurrentSummaryColumn;\n                }\n            }\n        });\n        this.maxSummariesLenght = maxSummaryLength;\n        this.summaryHeight =  maxSummaryLength * this.grid.defaultSummaryHeight;\n        return this.summaryHeight;\n    }\n\n    public calculateSummaries(rowID, data) {\n        let rowSummaries = this.summaryCacheMap.get(rowID);\n        if (!rowSummaries) {\n            rowSummaries = new Map<string, IgxSummaryResult[]>();\n            this.summaryCacheMap.set(rowID, rowSummaries);\n        }\n        if (!this.hasSummarizedColumns || !data) {return rowSummaries; }\n        this.grid.columnList.filter(col => col.hasSummary).forEach((column) => {\n            if (!rowSummaries.get(column.field)) {\n                rowSummaries.set(column.field,\n                    column.summaries.operate(data.map(r => r[column.field]), data, column.field));\n            }\n        });\n        return rowSummaries;\n    }\n\n    public resetSummaryHeight() {\n        this.summaryHeight = 0;\n        (this.grid as any)._summaryPipeTrigger++;\n        if (this.grid.rootSummariesEnabled) {\n            this.retriggerRootPipe++;\n        }\n    }\n\n    public updateSummaryCache(groupingArgs) {\n        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) { return; }\n        if (this.groupingExpressions.length === 0) {\n            this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n            return;\n        }\n        if (groupingArgs.length === 0) {\n            this.groupingExpressions = [];\n            this.clearSummaryCache();\n            return;\n        }\n        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);\n        this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n    }\n\n    public get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.grid.columnList.filter(col => col.hasSummary && !col.hidden);\n        return summarizedColumns.length > 0;\n    }\n\n    private deleteSummaryCache(id, columnName) {\n        if (this.summaryCacheMap.get(id)) {\n            const filteringApplied = columnName && this.grid.filteringExpressionsTree &&\n                    this.grid.filteringExpressionsTree.filteringOperands.map((expr) => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {\n                this.summaryCacheMap.get(id).delete(columnName);\n            } else {\n                this.summaryCacheMap.delete(id);\n            }\n            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n        }\n    }\n\n    private getSummaryID(rowID, groupingExpressions) {\n        if (groupingExpressions.length === 0) { return []; }\n        const summaryIDs = [];\n        let data = this.grid.data;\n        if (this.grid.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(this.grid.data),\n                this.grid.transactions.getAggregatedChanges(true),\n                this.grid.primaryKey\n            );\n        }\n        const rowData = this.grid.primaryKey ? data.find(rec => rec[this.grid.primaryKey] === rowID) : rowID;\n        let id = '{ ';\n        groupingExpressions.forEach(expr => {\n            id += `'${expr.fieldName}': '${rowData[expr.fieldName]}'`;\n                summaryIDs.push(id.concat(' }'));\n                id += ', ';\n        });\n        return summaryIDs;\n    }\n\n    private removeAllTreeGridSummaries(rowID, columnName?) {\n        let row = this.grid.records.get(rowID);\n        if (!row) { return; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowID = row.rowID;\n            this.deleteSummaryCache(rowID, columnName);\n            row = row.parent;\n        }\n    }\n\n    // TODO: remove only deleted rows\n    private removeChildRowSummaries(rowID, columnName?) {\n    }\n\n    private compareGroupingExpressions(current, groupingArgs) {\n        const newExpressions = groupingArgs.expressions.map(record => record.fieldName);\n        const removedCols = groupingArgs.ungroupedColumns;\n        if (current.length <= newExpressions.length) {\n            const newExpr = newExpressions.slice(0, current.length).toString();\n            if (current.toString() !== newExpr) {\n                this.clearSummaryCache();\n            }\n        } else {\n            const currExpr = current.slice(0, newExpressions.length).toString();\n            if (currExpr !== newExpressions.toString()) {\n                this.clearSummaryCache();\n                return;\n            }\n            removedCols.map(col => col.field).forEach(colName => {\n                this.summaryCacheMap.forEach((cache, id) => {\n                   if (id.indexOf(colName) !== -1) {\n                       this.summaryCacheMap.delete(id);\n                   }});\n            });\n        }\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n\n    private get isHierarchicalGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n\n}\n","import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ISelectionNode } from '../selection/selection.service';\nimport { SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-cell',\n    templateUrl: './summary-cell.component.html'\n})\nexport class IgxSummaryCellComponent {\n\n    @Input()\n    public summaryResults: IgxSummaryResult[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public firstCellIndentation = 0;\n\n    @Input()\n    public hasSummary = false;\n\n    @Input()\n    public density;\n\n    constructor(private element: ElementRef) {\n    }\n\n    @Input()\n    @HostBinding('attr.data-rowIndex')\n    public rowIndex: number;\n\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.aria-describedby')\n    public get describeby() {\n        return `Summary_${this.column.field}`;\n    }\n\n    @HostBinding('class.igx-grid-summary--active')\n    public focused: boolean;\n\n    @HostListener('focus')\n    public onFocus() {\n        this.focused = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            isSummaryRow: true\n        };\n    }\n\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        const ctrl = event.ctrlKey;\n        const shift = event.shiftKey;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const args = { targetType: 'summaryCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInCell(key, ctrl)) { return; }\n\n        this.grid.selectionService.keyboardState.shift = shift && !(key === 'tab');\n        const row = this.getRowElementByIndex(this.rowIndex);\n        switch (key) {\n            case 'tab':\n                if (shift) {\n                    this.grid.navigation.performShiftTabKey(row, this.selectionNode);\n                    break;\n                }\n                this.grid.navigation.performTab(row, this.selectionNode);\n                break;\n            case 'arrowleft':\n            case 'home':\n            case 'left':\n                if (ctrl || key === 'home') {\n                    this.grid.navigation.onKeydownHome(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'end':\n            case 'arrowright':\n            case 'right':\n                if (ctrl || key === 'end') {\n                    this.grid.navigation.onKeydownEnd(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                    this.grid.navigation.navigateUp(row, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                    this.grid.navigation.navigateDown(row, this.selectionNode);\n                break;\n        }\n    }\n\n    get width() {\n        return this.column.getCellWidth();\n    }\n\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    get columnDatatype(): DataType {\n        return this.column.dataType;\n    }\n\n    get itemHeight() {\n        return this.column.grid.defaultSummaryHeight;\n    }\n\n    /**\n    * @hidden\n    */\n    public get grid() {\n        return (this.column.grid as any);\n    }\n\n    private getRowElementByIndex(rowIndex) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        return summaryRows.find((sr) => sr.dataRowIndex === rowIndex).nativeElement;\n    }\n\n    private isKeySupportedInCell(key, ctrl) {\n        if (ctrl) {\n           return ['arrowup', 'arrowdown', 'up', 'down', 'end', 'home'].indexOf(key) === -1;\n        }\n        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'tab'].indexOf(key) !== -1;\n    }\n\n    public translateSummary(summary: IgxSummaryResult): string {\n        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;\n    }\n}\n","import {\n    Component,\n    Input,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck\n} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { GridType } from '../common/grid.interface';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-row',\n    templateUrl: './summary-row.component.html',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxSummaryRowComponent implements DoCheck  {\n\n    @Input()\n    public summaries: Map<string, IgxSummaryResult[]>;\n\n    @Input()\n    public gridID;\n\n    @Input()\n    public index: number;\n\n    @Input()\n    public firstCellIndentation = -1;\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    get minHeight() {\n        return this.grid.summaryService.calcMaxSummaryHeight() - 1;\n    }\n\n    @ViewChildren(IgxSummaryCellComponent, { read: IgxSummaryCellComponent })\n    public summaryCells: QueryList<IgxSummaryCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n                public element: ElementRef,\n                public cdr: ChangeDetectorRef) {}\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    public get grid() {\n        return this.gridAPI.grid;\n    }\n\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    public getColumnSummaries(columnName) {\n        if (!this.summaries.get(columnName)) {\n            return [];\n        }\n        return this.summaries.get(columnName);\n\n    }\n\n    /**\n     * @hidden\n     */\n    public get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\n\n/**\n * @hidden\n * @internal\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget,\n    None\n}\n\n\n/**\n * @hidden\n * @internal\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public isColumnMoving: boolean;\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    Inject,\n    Input,\n    NgZone,\n    Output,\n    OnInit,\n    OnDestroy,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle } from 'rxjs/operators';\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n\n            const left = this._left + pos;\n\n            const min = this._left - this.restrictHResizeMin;\n            const max = this._left + this.restrictHResizeMax;\n\n            this.left = left < min ? min : left;\n\n            if (left > max) {\n                this.left = max;\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val + 'px');\n    }\n\n    public set top(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.top = val + 'px');\n    }\n\n    onMouseup(event) {\n        this.resizeEnd.next(event);\n        this.resizeEnd.complete();\n    }\n\n    onMousedown(event) {\n        event.preventDefault();\n        const parent = this.element.nativeElement.parentElement.parentElement;\n\n        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;\n        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;\n\n        this.resizeStart.next(event);\n    }\n\n    onMousemove(event) {\n        event.preventDefault();\n        this.resize.next(event);\n    }\n}\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { IgxColumnResizingService } from './resizing.service';\nimport { IgxColumnResizerDirective } from './resizer.directive';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-column-resizer',\n    templateUrl: './resizer.component.html'\n})\nexport class IgxGridColumnResizerComponent {\n    constructor(public colResizingService: IgxColumnResizingService) { }\n\n    @ViewChild(IgxColumnResizerDirective, { static: true })\n    public resizer: IgxColumnResizerDirective;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    ChangeDetectionStrategy,\n    ViewRef\n} from '@angular/core';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../../drop-down/index';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../../services/overlay/position/connected-positioning-strategy';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../../chips';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from '../grid-filtering.service';\nimport { KEYS, isEdge } from '../../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../../services/overlay/scroll';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    templateUrl: './grid-filtering-row.component.html'\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private _column = null;\n    private isKeyPressed = false;\n    private isComposing = false;\n    private _cancelChipClick = false;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (this._column) {\n            this.expressionsList.forEach(exp => exp.isSelected = false);\n        }\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n            this.showHideArrowButtons();\n        } else {\n            this.expression.searchVal = DataUtil.parseValue(this.column.dataType, val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n\n        this.filter();\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef, static: true })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef, static: true })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent, static: true })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent, static: true })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroup', { read: ElementRef })\n    protected inputGroup: ElementRef;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container', { static: true })\n    protected container: ElementRef;\n\n    @ViewChild('operand')\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton', { static: true })\n    public closeButton: ElementRef;\n\n    @HostBinding('class.igx-grid__filtering-row')\n    public cssClass = 'igx-grid__filtering-row';\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;\n\n        const selectedItem = this.expressionsList.find(expr => expr.isSelected === true);\n        if (selectedItem) {\n            this.expression = selectedItem.expression;\n        }\n\n        this.input.nativeElement.focus();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeydown(event) {\n        event.stopPropagation();\n        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {\n            this.filteringService.grid.navigation.navigateFirstCellIfPossible(event);\n        }\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    public onEscKeydown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.close();\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else if (this.column.dataType === DataType.Date) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;\n        } else if (this.column.dataType === DataType.Boolean) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;\n        } else {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) && this.dropDownConditions.collapsed) {\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB) {\n            if (event.shiftKey) {\n                event.preventDefault();\n                event.stopPropagation();\n            } else if (!this.dropDownConditions.collapsed) {\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            }\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        this.isKeyPressed = true;\n\n        if (this.column.dataType === DataType.Boolean) {\n            if (event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) {\n                this.inputGroupPrefix.nativeElement.focus();\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n                event.stopPropagation();\n                return;\n            }\n        }\n\n        if (event.key === KEYS.ENTER) {\n            if (this.isComposing) {\n                return;\n            }\n            this.commitInput();\n        } else if (event.altKey && (event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE)) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ESCAPE_IE) {\n            event.preventDefault();\n            this.close();\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * Event handler for keyup on the input.\n     */\n    public onInputKeyUp(eventArgs) {\n        this.isKeyPressed = false;\n    }\n\n    /**\n     * Event handler for input on the input.\n     */\n    public onInput(eventArgs) {\n        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,\n        // when you have a japanese character as a placeholder, on init the value here is empty string .\n        if (isEdge() || this.isKeyPressed || eventArgs.target.value) {\n            this.value = eventArgs.target.value;\n        }\n    }\n\n    /**\n     * Event handler for compositionstart on the input.\n     */\n    public onCompositionStart() {\n        this.isComposing = true;\n    }\n\n    /**\n     * Event handler for compositionend on the input.\n     */\n    public onCompositionEnd() {\n        this.isComposing = false;\n    }\n\n    /**\n     * Event handler for input click event.\n     */\n    public onInputClick() {\n        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.filteringService.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Commits the value of the input.\n     */\n    public commitInput() {\n        const selectedItem = this.expressionsList.filter(ex => ex.isSelected === true);\n        selectedItem.forEach(e => e.isSelected = false);\n\n        let indexToDeselect = -1;\n        for (let index = 0; index < this.expressionsList.length; index++) {\n            const expression = this.expressionsList[index].expression;\n            if (expression.searchVal === null && !expression.condition.isUnary) {\n                indexToDeselect = index;\n            }\n        }\n        if (indexToDeselect !== -1) {\n            this.removeExpression(indexToDeselect, this.expression);\n        }\n        this.resetExpression();\n        this.scrollChipsWhenAddingExpression();\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.clearInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on clear button.\n     */\n    public onClearClick() {\n        this.clearInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for keydown on commit button.\n     */\n    public onCommitKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.commitInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on commit button.\n     */\n    public onCommitClick() {\n        this.commitInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for focusout on the input group.\n     */\n    public onInputGroupFocusout() {\n        if (!this.value && this.value !== 0 &&\n            this.expression.condition && !this.expression.condition.isUnary) {\n            return;\n        }\n        requestAnimationFrame(() => {\n            const focusedElement = document.activeElement;\n            if (focusedElement.className === 'igx-chip__remove') {\n                return;\n            }\n            if (!(focusedElement && this.inputGroup.nativeElement.contains(focusedElement))\n                && this.dropDownConditions.collapsed) {\n                this.commitInput();\n            }\n        });\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.getExpressions(this.column.field).pop();\n        } else {\n            this.expressionsList.forEach((item) => {\n                if (item.expression.searchVal === null && !item.expression.condition.isUnary) {\n                    this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(item));\n                }\n            });\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n\n        this.filteringService.updateFilteringCell(this.column);\n        this.filteringService.focusFilterCellChip(this.column, true);\n\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /*\n    * noop\n    */\n    public noop() { }\n\n    /**\n     *  Event handler for date picker's selection.\n     */\n    public onDateSelected(value: Date) {\n        this.value = value;\n        this.commitInput();\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.positionStrategy.settings.target = target;\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.unaryConditionChangedCallback());\n        } else {\n            requestAnimationFrame(() => this.conditionChangedCallback());\n        }\n\n        if (this.input) {\n            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,\n            // if it has been focused and then set to readonly.\n            requestAnimationFrame(() => this.input.nativeElement.focus());\n        }\n    }\n\n\n    public onChipPointerdown(args, chip: IgxChipComponent) {\n        const activeElement = document.activeElement;\n        this._cancelChipClick = chip.selected && activeElement &&\n            this.inputGroup.nativeElement.contains(activeElement);\n    }\n\n    public onChipClick(args, item: ExpressionUI) {\n        if (this._cancelChipClick) {\n            return;\n        }\n\n        this._cancelChipClick = false;\n\n        this.expressionsList.forEach(ex => ex.isSelected = false);\n\n        this.toggleChip(item);\n    }\n\n    public toggleChip(item: ExpressionUI) {\n        item.isSelected = !item.isSelected;\n        if (item.isSelected) {\n            this.expression = item.expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, item: ExpressionUI) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n\n            this.toggleChip(item);\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.filter());\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            if (this.filteringService.isFilterRowVisible) {\n                const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n                this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n                this.showArrows = this.chipsAreaWidth >= containerWidth && this.isColumnFiltered;\n\n                // TODO: revise the cdr.detectChanges() usage here\n                if (!(this.cdr as ViewRef).destroyed) {\n                this.cdr.detectChanges(); }\n            }\n        });\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * @hidden\n     * Resets the chips area\n     * @memberof IgxGridFilteringRowComponent\n     */\n    public resetChipsArea() {\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n        this.showHideArrowButtons();\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private get isColumnFiltered() {\n        return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { ISelectionNode } from './selection/selection.service';\n\n\nexport interface IStartNavigationCell {\n    rowStart: number;\n    colStart: number;\n    direction: NavigationDirection;\n}\n\nexport enum NavigationDirection {\n    horizontal = 'horizontal',\n    vertical = 'vertical'\n}\n\n\n/** @hidden */\n@Injectable()\nexport class IgxGridMRLNavigationService extends IgxGridNavigationService {\n\n    private startNavigationCell: IStartNavigationCell;\n\n    public grid: IgxGridBaseDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public setStartNavigationCell(colStart: number, rowStart: number, dir: NavigationDirection) {\n        this.startNavigationCell = {\n            colStart: colStart,\n            rowStart: rowStart,\n            direction: dir\n        };\n    }\n\n    private applyNavigationCell(colStart: number, rowStart: number, navDirection: NavigationDirection): number {\n        const oppositeDir = navDirection === NavigationDirection.vertical ?\n            NavigationDirection.horizontal : NavigationDirection.vertical;\n        if (this.startNavigationCell && this.startNavigationCell.direction !== navDirection) {\n            this.startNavigationCell.direction = oppositeDir;\n        } else {\n            this.setStartNavigationCell(colStart, rowStart, oppositeDir);\n        }\n\n        return navDirection === NavigationDirection.vertical ?\n            this.startNavigationCell.colStart : this.startNavigationCell.rowStart;\n    }\n\n    public navigateUp(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellUpFromLayout(rowElement, selectedNode);\n    }\n\n    public navigateDown(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellDownFromLayout(rowElement, selectedNode);\n    }\n\n    public isColumnRightEdgeVisible(visibleColumnIndex: number): boolean {\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        const forOfDir =  this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        if (!horizontalScroll.clientWidth || (column && column.pinned)) {\n            return true;\n        } else if (column) {\n            if (this.isParentColumnFullyVisible(column)) { return true; }\n            const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n            return this.displayContainerWidth >= scrollPos.rightScroll - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= scrollPos.leftScroll;\n        }\n        return false;\n    }\n    private isParentColumnFullyVisible(parent: IgxColumnComponent): boolean {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        if (!horizontalScroll.clientWidth || parent.pinned) { return true; }\n        const index = forOfDir.igxForOf.indexOf(parent);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    public isColumnLeftEdgeVisible(visibleColumnIndex: number): boolean {\n        const forOfDir = this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        if (!horizontalScroll.clientWidth || column.pinned) {\n            return true;\n        }\n        if (this.isParentColumnFullyVisible(column)) { return true; }\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        return this.displayContainerScrollLeft <= scrollPos.leftScroll;\n    }\n\n    public onKeydownArrowRight(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusNextCellFromLayout(element, selectedNode);\n    }\n\n    public onKeydownArrowLeft(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusPrevCellFromLayout(element, selectedNode);\n    }\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup)\n        .sort((a, b) => a.visibleIndex - b.visibleIndex);\n    }\n\n    public performTab(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const nextElementColumn = this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex + 1);\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        this._moveFocusToCell(currentRowEl, nextElementColumn, row, selectedNode, 'next');\n        if (nextElementColumn) {\n            this.setStartNavigationCell(nextElementColumn.colStart, nextElementColumn.rowStart, null);\n        }\n    }\n\n    protected _moveFocusToCell(currentRowEl: HTMLElement, nextElementColumn, row, selectedNode, dir) {\n        if (nextElementColumn && row.cells) {\n            let nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n            const isVisible = this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex);\n            if (!nextCell || !isVisible) {\n                this.grid.nativeElement.focus({ preventScroll: true });\n                const cb = () => {\n                    nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n                    if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                        if (dir === 'next') {\n                            this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        } else {\n                            this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        }\n                        return;\n                    }\n                    this._focusCell(nextCell.nativeElement);\n                };\n                this.performHorizontalScrollToCell(row.index, nextElementColumn.visibleIndex, false, cb);\n            } else {\n                if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                    if (dir === 'next') {\n                        this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    } else {\n                        this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    }\n                    return;\n                }\n                this._focusCell(nextCell.nativeElement);\n            }\n        } else {\n            // end of layout reached\n            if (this.isRowInEditMode(row.index)) {\n                //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                if (dir === 'next') {\n                    this.grid.rowEditTabs.first.element.nativeElement.focus();\n                } else {\n                    this.grid.rowEditTabs.last.element.nativeElement.focus();\n                }\n                return;\n            }\n            if (dir === 'next') {\n                super.navigateDown(currentRowEl, {row: row.index, column: 0});\n            } else {\n                 let lastVisibleIndex = 0;\n                this.grid.unpinnedColumns.forEach((col) => {\n                    lastVisibleIndex = Math.max(lastVisibleIndex, col.visibleIndex);\n                });\n                super.navigateUp(currentRowEl, {row: row.index, column: lastVisibleIndex});\n            }\n        }\n    }\n\n    public performShiftTabKey(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        const prevElementColumn =\n         this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex - 1 && !x.hidden);\n         this._moveFocusToCell(currentRowEl, prevElementColumn, row, selectedNode, 'prev');\n        if (prevElementColumn) {\n            this.setStartNavigationCell(prevElementColumn.colStart, prevElementColumn.rowStart, null);\n        }\n    }\n\n    private focusCellUpFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isNonDataRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row' || this._isDetailRecordAt(selectedNode.row);\n        const currentRowStart = selectedNode.layout ?  selectedNode.layout.rowStart : 1;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            currentRowStart,\n            NavigationDirection.vertical);\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        let movePrev;\n        // check if element up is from the same layout\n        let upperElementColumn = columnLayout.children.find(c =>\n            (c.rowEnd === currentRowStart || c.rowStart + c.gridRowSpan === currentRowStart)  &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isNonDataRow || !upperElementColumn) {\n            // no prev row in current row layout, go to next row last rowstart\n            const layoutRowEnd = this.grid.multiRowLayoutRowSize + 1;\n            upperElementColumn = columnLayout.children.find(c =>\n                (c.rowEnd === layoutRowEnd || c.rowStart + c.gridRowSpan === layoutRowEnd) &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            movePrev = true;\n        }\n        const rowIndex = movePrev ? selectedNode.row - 1 : selectedNode.row;\n        if (rowIndex < 0) {\n            // end of rows reached.\n            return;\n        }\n        let prevRow;\n        const cb = () => {\n            prevRow = this.grid.getRowByIndex(rowIndex);\n            if (prevRow && prevRow.cells) {\n                this._focusCell(upperElementColumn.cells.find((c) => c.rowIndex === prevRow.index).nativeElement);\n            } else if (prevRow) {\n                prevRow.nativeElement.focus({ preventScroll: true });\n            } else {\n                const prevElem = this.getRowByIndex(rowIndex, '') as any;\n                prevElem.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, upperElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, upperElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusCellDownFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isNonDataRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row' || this._isDetailRecordAt(selectedNode.row);\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentRowEnd = selectedNode.layout ? selectedNode.layout.rowEnd || selectedNode.layout.rowStart + 1 : 2;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            selectedNode.layout ? selectedNode.layout.rowStart : 1,\n            NavigationDirection.vertical);\n        let moveNext;\n        // check if element down is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.rowStart === currentRowEnd &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isNonDataRow || !nextElementColumn) {\n            // no next row in current row layout, go to next row first rowstart\n            nextElementColumn = columnLayout.children.find(c => c.rowStart === 1 &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            moveNext = true;\n        }\n        const rowIndex = moveNext ? selectedNode.row + 1 : selectedNode.row;\n        if (rowIndex > this.grid.dataView.length - 1) {\n            // end of rows reached.\n            return;\n        }\n        let nextRow;\n        const cb = () => {\n            nextRow = this.grid.getRowByIndex(rowIndex);\n            if (nextRow && nextRow.cells) {\n                this._focusCell(nextElementColumn.cells.find((c) => c.rowIndex === nextRow.index).nativeElement);\n            } else if (nextRow) {\n                nextRow.nativeElement.focus({ preventScroll: true });\n            } else {\n                const nextElem = this.getRowByIndex(rowIndex, '') as any;\n                nextElem.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, nextElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusNextCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColEnd = selectedNode.layout.colEnd || selectedNode.layout.colStart + 1;\n        const currentRowStart = this.applyNavigationCell(selectedNode.layout.colStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n        // check if next element is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.colStart === currentColEnd &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!nextElementColumn) {\n            // no next column in current layout, search for next layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex + 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            // next element is from the next layout\n            nextElementColumn = columnLayout.children.find(c => c.colStart === 1 &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n        const cb = () => {\n            const nextElement = nextElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n           this._focusCell(nextElement);\n        };\n        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusPrevCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColStart = selectedNode.layout.colStart;\n        const currentRowStart = this.applyNavigationCell(currentColStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n\n        // check previous element is from the same layout\n        let prevElementColumn = columnLayout.children\n        .find(c => (c.colEnd === currentColStart || c.colStart + c.gridColumnSpan === currentColStart ) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!prevElementColumn) {\n            // no prev column in current layout, seacrh for prev layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex - 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            const layoutSize = columnLayout.getInitialChildColumnSizes(columnLayout.children).length;\n            // first element is from the next layout\n            prevElementColumn = columnLayout.children\n            .find(c => (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n\n        const cb = () => {\n            const prevElement = prevElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n            this._focusCell(prevElement);\n        };\n        if (!this.isColumnLeftEdgeVisible(prevElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, prevElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    public onKeydownEnd(rowIndex: number, isSummary: boolean = false, cellRowStart?: number) {\n        const layouts = this.grid.columns.filter(c => c.columnLayout && !c.hidden).sort((a, b) => a.visibleIndex - b.visibleIndex);\n        const lastLayout = layouts[layouts.length - 1];\n        const lastLayoutChildren = lastLayout.children;\n        const layoutSize =  lastLayout.getInitialChildColumnSizes(lastLayoutChildren).length;\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart || this.grid.multiRowLayoutRowSize,\n            NavigationDirection.horizontal);\n        const nextElementColumn = lastLayout.children.find(c =>\n            (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.toArray().indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[allBlocks.length - 1].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[allBlocks.length - 1].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    public onKeydownHome(rowIndex: number, isSummary: boolean = false, cellRowStart: number = 1) {\n        const firstLayout = this.grid.columns.filter(c => c.columnLayout && !c.hidden)[0];\n        const lastLayoutChildren = firstLayout.children.toArray();\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart,\n            NavigationDirection.horizontal);\n        const nextElementColumn = firstLayout.children.find(c =>\n            c.colStart === 1 &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnLeftEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n           const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[0].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[0].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    protected getColumnLayoutSelector(): string {\n        return '.igx-grid__mrl-block';\n    }\n\n    protected getChildColumnScrollPositions(visibleColIndex: number): { leftScroll: number, rightScroll: number } {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const parent = targetCol.parent;\n        const parentVIndex = forOfDir.igxForOf.indexOf(parent);\n        let leftScroll = forOfDir.getColumnScrollLeft(parentVIndex), rightScroll = 0;\n        // caculate offset from parent based on target column colStart and colEnd and the resolved child column sizes.\n        const childSizes = parent.getFilledChildColumnSizes(parent.children);\n        const colStart = targetCol.colStart || 1;\n        const colEnd = targetCol.colEnd || colStart + 1;\n        for (let i = 1; i < colStart; i++) {\n            leftScroll += parseInt(childSizes[i - 1], 10);\n        }\n        rightScroll += leftScroll;\n        for (let j = colStart; j < colEnd; j++) {\n            rightScroll +=  parseInt(childSizes[j - 1], 10);\n        }\n        return {leftScroll, rightScroll};\n    }\n\n    protected getColunmByVisibleIndex(visibleColIndex: number): IgxColumnComponent {\n        visibleColIndex = visibleColIndex < 0 ? 0 : visibleColIndex;\n        return this.grid.columnList.find((col) => !col.columnLayout && col.visibleIndex === visibleColIndex);\n    }\n\n    public shouldPerformVerticalScroll(rowIndex: number, visibleColumnIndex: number): boolean {\n        if (this._isGroupRecordAt(rowIndex) || this._isDetailRecordAt(rowIndex)) {\n            return super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex);\n       }\n        if (!super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex)) {return false; }\n       const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n           .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n       const scrollTop =  Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);\n       const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n       const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n       if (!targetRow || targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset)\n           || containerHeight && containerHeight < scrollPos.rowBottom - scrollTop) {\n           return true;\n       } else {\n           return false;\n       }\n   }\n\n   get verticalDCTopOffset(): number {\n        return parseInt(this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n    }\n\n    private _isGroupRecordAt(rowIndex: number) {\n        const record = this.grid.dataView[rowIndex];\n        return record.records && record.records.length;\n    }\n    private _isDetailRecordAt(rowIndex: number) {\n        const record = this.grid.dataView[rowIndex];\n        return this.grid.isDetailRecord(record);\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColumnIndex: number, cb?: () => void) {\n        if (this._isGroupRecordAt(rowIndex) || this._isDetailRecordAt(rowIndex)) {\n            return super.performVerticalScrollToCell(rowIndex, visibleColumnIndex, cb);\n        }\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const scrollTop = Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);\n        const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n        const isPrevious =  (scrollTop > scrollPos.rowTop) && (!targetRow ||\n                targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset));\n        const scrollAmount = isPrevious ? scrollPos.rowTop : Math.abs(scrollTop + containerHeight - scrollPos.rowBottom);\n\n        this.grid.verticalScrollContainer.onChunkLoad\n        .pipe(first()).subscribe(() => {\n            cb();\n        });\n\n        if (isPrevious) {\n            this.grid.verticalScrollContainer.scrollPosition = scrollAmount;\n        } else {\n            this.grid.verticalScrollContainer.addScrollTop(scrollAmount);\n        }\n    }\n\n    public getVerticalScrollPositions(rowIndex: number, visibleColIndex: number): { rowTop: number, rowBottom: number, topOffset: number } {\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const topOffset = (targetCol.rowStart - 1)  * this.grid.defaultRowHeight;\n        const rowTop = this.grid.verticalScrollContainer.sizesCache[rowIndex] + topOffset;\n        const rowBottom = rowTop + (this.grid.defaultRowHeight * targetCol.gridRowSpan);\n        return { rowTop, rowBottom, topOffset };\n    }\n\n    public performHorizontalScrollToCell(\n        rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        const hScroll = this.horizontalScroll(rowIndex);\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    this._focusCell(this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary));\n                }\n        });\n        const isPrevItem =  hScroll.getScroll().scrollLeft > scrollPos.leftScroll;\n        const containerSize = parseInt(hScroll.igxForContainerSize, 10);\n        const nextScroll = isPrevItem ? scrollPos.leftScroll : scrollPos.rightScroll - containerSize;\n        hScroll.scrollPosition = nextScroll;\n    }\n\n    protected _focusCell(cellElem: HTMLElement) {\n        // in case of variable row heights in mrl grid make sure cell is really in view after it has been rendered.\n        const gridBoundingClientRect = this.grid.tbody.nativeElement.getBoundingClientRect();\n        const diffTop = cellElem.getBoundingClientRect().top - gridBoundingClientRect.top;\n        const diffBottom = cellElem.getBoundingClientRect().bottom - gridBoundingClientRect.bottom;\n\n        if (diffTop < 0) {\n            // cell is above grid top - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffTop);\n        } else if (diffBottom > 0) {\n            // cell is below grid bottom - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffBottom);\n        }  else {\n            // cell is visible\n            cellElem.focus({ preventScroll: true });\n        }\n    }\n\n    public goToFirstCell() {\n        this.startNavigationCell = null;\n        super.goToFirstCell();\n    }\n\n    public goToLastCell() {\n        this.startNavigationCell = null;\n        super.goToLastCell();\n    }\n}\n","import { Directive, OnDestroy, Input, ElementRef, ViewContainerRef, NgZone, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { IgxDragDirective } from '../../directives/drag-drop/drag-drop.directive';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { KEYS } from '../../core/utils';\nimport { IgxColumnMovingService } from './moving.service';\n\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]',\n\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrag')\n    set data(val) {\n        this._column = val;\n    }\n\n    get column() {\n        return this._column;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private subscription$: Subscription;\n    private _column: IgxColumnComponent;\n    private _ghostClass = 'igx-grid__drag-ghost-image';\n    private ghostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private ghostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n\n    constructor(\n        public element: ElementRef<HTMLElement>,\n        public viewContainer: ViewContainerRef,\n        public zone: NgZone,\n        public renderer: Renderer2,\n        public cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(cdr, element, viewContainer, zone, renderer);\n    }\n\n    public ngOnDestroy() {\n        this._unsubscribe();\n    }\n\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    public onPointerDown(event) {\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostClass = this._ghostClass;\n\n        super.onPointerDown(event);\n\n        this.cms.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n\n        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n            if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                this.onEscape(ev);\n            }\n        });\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this.ghostElement && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.cms.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.cms.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n\n        this._unsubscribe();\n    }\n\n    protected createGhost(pageX, pageY) {\n        super.createGhost(pageX, pageY);\n\n        this.ghostElement.style.height = null;\n        this.ghostElement.style.minWidth = null;\n        this.ghostElement.style.flexBasis = null;\n        this.ghostElement.style.position = null;\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this.ghostImgIconClass);\n\n            this.ghostElement.insertBefore(icon, this.ghostElement.firstElementChild);\n\n            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);\n            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);\n        } else {\n            this.ghostElement.insertBefore(icon, this.ghostElement.childNodes[0]);\n\n            this.renderer.addClass(icon, this.ghostImgIconGroupClass);\n            this.ghostElement.children[0].style.paddingLeft = '0px';\n\n            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);\n            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$) {\n            this.subscription$.unsubscribe();\n            this.subscription$ = null;\n        }\n    }\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\nimport { IgxColumnMovingDragDirective } from '../moving/moving.drag.directive';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGridDetail]'\n})\nexport class IgxGridDetailTemplateDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowExpandedIndicator]'\n})\nexport class IgxRowExpandedIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowCollapsedIndicator]'\n})\nexport class IgxRowCollapsedIndicatorDirective {\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeaderExpandedIndicator]'\n})\nexport class IgxHeaderExpandIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeaderCollapsedIndicator]'\n})\nexport class IgxHeaderCollapseIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            if (!this.columnBelongsToGrid(column)) {\n                return;\n            }\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });\n            }\n        }\n    }\n\n    private closestParentByAttr(elem, attr) {\n        return elem.hasAttribute(attr) ?\n            elem :\n            this.closestParentByAttr(elem.parentElement, attr);\n    }\n\n    private columnBelongsToGrid(column) {\n        const elem = this.elementRef.nativeElement;\n        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');\n        if (!column) {\n            return false;\n        } else {\n            const grid = <IgxGridComponent>column.grid;\n            if (!grid || grid.id !== closestGridID) {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n","import {\n    Component, Input, ViewChild, ChangeDetectorRef, ViewChildren, QueryList, ElementRef, AfterViewInit, OnDestroy, HostBinding\n} from '@angular/core';\nimport { VerticalAlignment, HorizontalAlignment, Point, OverlaySettings } from '../../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../../services/overlay/position/connected-positioning-strategy';\nimport { IgxOverlayService } from '../../../services/overlay/overlay';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { IgxChipComponent } from '../../../chips/chip.component';\nimport { IgxSelectComponent } from '../../../select/select.component';\nimport { IDragStartEventArgs, IDragBaseEventArgs } from '../../../directives/drag-drop/drag-drop.directive';\nimport { CloseScrollStrategy } from '../../../services/overlay/scroll/close-scroll-strategy';\nimport { IgxToggleDirective, IgxOverlayOutletDirective } from '../../../directives/toggle/toggle.directive';\nimport { IButtonGroupEventArgs } from '../../../buttonGroup/buttonGroup.component';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { Subject, Subscription } from 'rxjs';\nimport { KEYS } from '../../../core/utils';\nimport { AbsoluteScrollStrategy, AutoPositionStrategy } from '../../../services/index';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { GridType } from '../../common/grid.interface';\nimport { DataUtil } from './../../../data-operations/data-util';\n\n/**\n *@hidden\n */\nclass ExpressionItem {\n    constructor(parent?: ExpressionGroupItem) {\n        this.parent = parent;\n    }\n    parent: ExpressionGroupItem;\n    selected: boolean;\n}\n\n/**\n *@hidden\n */\nclass ExpressionGroupItem extends ExpressionItem {\n    constructor(operator: FilteringLogic, parent?: ExpressionGroupItem) {\n        super(parent);\n        this.operator = operator;\n        this.children = [];\n    }\n    operator: FilteringLogic;\n    children: ExpressionItem[];\n}\n\n/**\n *@hidden\n */\nclass ExpressionOperandItem extends ExpressionItem {\n    constructor(expression: IFilteringExpression, parent: ExpressionGroupItem) {\n        super(parent);\n        this.expression = expression;\n    }\n    expression: IFilteringExpression;\n    inEditMode: boolean;\n    inAddMode: boolean;\n    hovered: boolean;\n    columnHeader: string;\n}\n\n/**\n * A component used for presenting advanced filtering UI for a Grid.\n * It is used internally in the Grid, but could also be hosted in a container outside of it.\n *\n * Example:\n * ```html\n * <igx-advanced-filtering-dialog\n *     [grid]=\"grid1\">\n * </igx-advanced-filtering-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-advanced-filtering-dialog',\n    templateUrl: './advanced-filtering-dialog.component.html'\n})\nexport class IgxAdvancedFilteringDialogComponent implements AfterViewInit, OnDestroy {\n    /**\n     * @hidden @internal\n     */\n    public inline = true;\n    /**\n     * @hidden @internal\n     */\n    public rootGroup: ExpressionGroupItem;\n\n    /**\n     * @hidden @internal\n     */\n    public selectedExpressions: ExpressionOperandItem[] = [];\n\n    /**\n     * @hidden @internal\n     */\n    public selectedGroups: ExpressionGroupItem[] = [];\n\n    /**\n     * @hidden @internal\n     */\n    public currentGroup: ExpressionGroupItem;\n\n    /**\n     * @hidden @internal\n     */\n    public editedExpression: ExpressionOperandItem;\n\n    /**\n     * @hidden @internal\n     */\n    public addModeExpression: ExpressionOperandItem;\n\n    /**\n     * @hidden @internal\n     */\n    public contextualGroup: ExpressionGroupItem;\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogics;\n\n    /**\n     * @hidden @internal\n     */\n    public selectedCondition: string;\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue: any;\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalStartPoint: VerticalAlignment.Top\n    };\n    private _overlaySettings: OverlaySettings = {\n        closeOnOutsideClick: false,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    /**\n     * @hidden @internal\n     */\n    public columnSelectOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        excludePositionTarget: true\n    };\n\n    /**\n     * @hidden @internal\n     */\n    public conditionSelectOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        excludePositionTarget: true\n    };\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('columnSelect', { read: IgxSelectComponent })\n    public columnSelect: IgxSelectComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('conditionSelect', { read: IgxSelectComponent })\n    public conditionSelect: IgxSelectComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchValueInput', { read: ElementRef })\n    public searchValueInput: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('addRootAndGroupButton', { read: ElementRef })\n    public addRootAndGroupButton: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('addConditionButton', { read: ElementRef })\n    public addConditionButton: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('editingInputsContainer', { read: ElementRef })\n    public set editingInputsContainer(value: ElementRef) {\n        if ((value && !this._editingInputsContainer) ||\n            (value && this._editingInputsContainer && this._editingInputsContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._editingInputsContainer = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get editingInputsContainer(): ElementRef {\n        return this._editingInputsContainer;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('addModeContainer', { read: ElementRef })\n    public set addModeContainer(value: ElementRef) {\n        if ((value && !this._addModeContainer) ||\n            (value && this._addModeContainer && this._addModeContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._addModeContainer = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get addModeContainer(): ElementRef {\n        return this._addModeContainer;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('currentGroupButtonsContainer', { read: ElementRef })\n    public set currentGroupButtonsContainer(value: ElementRef) {\n        if ((value && !this._currentGroupButtonsContainer) ||\n            (value && this._currentGroupButtonsContainer && this._currentGroupButtonsContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._currentGroupButtonsContainer = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get currentGroupButtonsContainer(): ElementRef {\n        return this._currentGroupButtonsContainer;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxToggleDirective)\n    public contextMenuToggle: IgxToggleDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChildren(IgxChipComponent)\n    public chips: QueryList<IgxChipComponent>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('expressionsContainer')\n    protected expressionsContainer: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('overlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public overlayOutlet: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('style.display')\n    display = 'block';\n\n    private destroy$ = new Subject<any>();\n    private _overlayComponentId: string;\n    private _overlayService: IgxOverlayService;\n    private _selectedColumn: IgxColumnComponent;\n    private _clickTimer;\n    private _dblClickDelay = 200;\n    private _preventChipClick = false;\n    private _editingInputsContainer: ElementRef;\n    private _addModeContainer: ElementRef;\n    private _currentGroupButtonsContainer: ElementRef;\n    private _grid: GridType;\n    private _filteringChange: Subscription;\n\n    constructor(public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit(): void {\n        this._overlaySettings.outlet = this.overlayOutlet;\n        this.columnSelectOverlaySettings.outlet = this.overlayOutlet;\n        this.conditionSelectOverlaySettings.outlet = this.overlayOutlet;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get displayDensity() {\n        return this.grid.displayDensity;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get selectedColumn(): IgxColumnComponent {\n        return this._selectedColumn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set selectedColumn(value: IgxColumnComponent) {\n        const oldValue = this._selectedColumn;\n\n        if (this._selectedColumn !== value) {\n            this._selectedColumn = value;\n            if (oldValue && this._selectedColumn && this._selectedColumn.dataType !== oldValue.dataType) {\n                this.selectedCondition = null;\n                this.searchValue = null;\n                this.cdr.detectChanges();\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the grid.\n     */\n    @Input()\n    set grid(grid: GridType) {\n        this._grid = grid;\n\n        if (this._filteringChange) {\n            this._filteringChange.unsubscribe();\n        }\n\n        if (this._grid) {\n            this._grid.filteringService.registerSVGIcons();\n\n            this._filteringChange = this._grid.advancedFilteringExpressionsTreeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.init();\n            });\n\n            this.init();\n        }\n    }\n\n    /**\n     * Returns the grid.\n     */\n    get grid(): GridType {\n        return this._grid;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get filterableColumns(): IgxColumnComponent[] {\n        return this.grid.columns.filter((col) => !col.columnGroup && col.filterable);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dragStart(dragArgs: IDragStartEventArgs) {\n        if (!this._overlayComponentId) {\n            dragArgs.cancel = true;\n            return;\n        }\n\n        if (!this.contextMenuToggle.collapsed) {\n            this.contextMenuToggle.element.style.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dragEnd(dragArgs: IDragBaseEventArgs) {\n        if (!this.contextMenuToggle.collapsed) {\n            this.calculateContextMenuTarget();\n            this.contextMenuToggle.reposition();\n            this.contextMenuToggle.element.style.display = '';\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onDragMove(e) {\n        const deltaX = e.nextPageX - e.pageX;\n        const deltaY = e.nextPageY - e.pageY;\n        e.cancel = true;\n        this._overlayService.setOffset(this._overlayComponentId, deltaX, deltaY);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addCondition(parent: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.cancelOperandAdd();\n\n        const operandItem = new ExpressionOperandItem({\n            fieldName: null,\n            condition: null,\n            ignoreCase: true,\n            searchVal: null\n        }, parent);\n\n        if (afterExpression) {\n            const index = parent.children.indexOf(afterExpression);\n            parent.children.splice(index + 1, 0, operandItem);\n        } else {\n            parent.children.push(operandItem);\n        }\n\n        this.enterExpressionEdit(operandItem);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addAndGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.addGroup(FilteringLogic.And, parent, afterExpression);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addOrGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.addGroup(FilteringLogic.Or, parent, afterExpression);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public endGroup(groupItem: ExpressionGroupItem) {\n        this.currentGroup = groupItem.parent;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public commitOperandEdit() {\n        if (this.editedExpression) {\n            this.editedExpression.expression.fieldName = this.selectedColumn.field;\n            this.editedExpression.expression.condition = this.selectedColumn.filters.condition(this.selectedCondition);\n            this.editedExpression.expression.searchVal = DataUtil.parseValue(this.selectedColumn.dataType, this.searchValue);\n            this.editedExpression.columnHeader = this.selectedColumn.header;\n\n            this.editedExpression.inEditMode = false;\n            this.editedExpression = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public cancelOperandAdd() {\n        if (this.addModeExpression) {\n            this.addModeExpression.inAddMode = false;\n            this.addModeExpression = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public cancelOperandEdit() {\n        if (this.editedExpression) {\n            this.editedExpression.inEditMode = false;\n\n            if (!this.editedExpression.expression.fieldName) {\n                this.deleteItem(this.editedExpression);\n            }\n\n            this.editedExpression = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public operandCanBeCommitted(): boolean {\n        return this.selectedColumn && this.selectedCondition &&\n            (!!this.searchValue || this.selectedColumn.filters.condition(this.selectedCondition).isUnary);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public exitOperandEdit() {\n        if (!this.editedExpression) {\n            return;\n        }\n\n        if (this.operandCanBeCommitted()) {\n            this.commitOperandEdit();\n        } else {\n            this.cancelOperandEdit();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isExpressionGroup(expression: ExpressionItem): boolean {\n        return expression instanceof ExpressionGroupItem;\n    }\n\n    private addGroup(operator: FilteringLogic, parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.cancelOperandAdd();\n\n        const groupItem = new ExpressionGroupItem(operator, parent);\n\n        if (parent) {\n            if (afterExpression) {\n                const index = parent.children.indexOf(afterExpression);\n                parent.children.splice(index + 1, 0, groupItem);\n            } else {\n                parent.children.push(groupItem);\n            }\n        } else {\n            this.rootGroup = groupItem;\n        }\n\n        this.addCondition(groupItem);\n        this.currentGroup = groupItem;\n    }\n\n    private createExpressionGroupItem(expressionTree: IFilteringExpressionsTree, parent?: ExpressionGroupItem): ExpressionGroupItem {\n        let groupItem: ExpressionGroupItem;\n        if (expressionTree) {\n            groupItem = new ExpressionGroupItem(expressionTree.operator, parent);\n\n            for (const expr of expressionTree.filteringOperands) {\n                if (expr instanceof FilteringExpressionsTree) {\n                    groupItem.children.push(this.createExpressionGroupItem(expr, groupItem));\n                } else {\n                    const filteringExpr = expr as IFilteringExpression;\n                    const exprCopy: IFilteringExpression = {\n                        fieldName: filteringExpr.fieldName,\n                        condition: filteringExpr.condition,\n                        searchVal: filteringExpr.searchVal,\n                        ignoreCase: filteringExpr.ignoreCase\n                    };\n                    const operandItem = new ExpressionOperandItem(exprCopy, groupItem);\n                    const column = this.grid.getColumnByName(filteringExpr.fieldName);\n                    operandItem.columnHeader = column.header;\n                    groupItem.children.push(operandItem);\n                }\n            }\n        }\n\n        return groupItem;\n    }\n\n    private createExpressionsTreeFromGroupItem(groupItem: ExpressionGroupItem): FilteringExpressionsTree {\n        if (!groupItem) {\n            return null;\n        }\n\n        const expressionsTree = new FilteringExpressionsTree(groupItem.operator);\n\n        for (const item of groupItem.children) {\n            if (item instanceof ExpressionGroupItem) {\n                const subTree = this.createExpressionsTreeFromGroupItem((item as ExpressionGroupItem));\n                expressionsTree.filteringOperands.push(subTree);\n            } else {\n                expressionsTree.filteringOperands.push((item as ExpressionOperandItem).expression);\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipRemove(expressionItem: ExpressionItem) {\n        this.deleteItem(expressionItem);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipClick(expressionItem: ExpressionOperandItem) {\n        this._clickTimer = setTimeout(() => {\n            if (!this._preventChipClick) {\n                this.onToggleExpression(expressionItem);\n            }\n            this._preventChipClick = false;\n        }, this._dblClickDelay);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipDblClick(expressionItem: ExpressionOperandItem) {\n        clearTimeout(this._clickTimer);\n        this._preventChipClick = true;\n        this.enterExpressionEdit(expressionItem);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public enterExpressionEdit(expressionItem: ExpressionOperandItem) {\n        this.clearSelection();\n        this.exitOperandEdit();\n        this.cancelOperandAdd();\n\n        if (this.editedExpression) {\n            this.editedExpression.inEditMode = false;\n        }\n\n        expressionItem.hovered = false;\n\n        this.selectedColumn = expressionItem.expression.fieldName ?\n            this.grid.getColumnByName(expressionItem.expression.fieldName) : null;\n        this.selectedCondition = expressionItem.expression.condition ?\n            expressionItem.expression.condition.name : null;\n        this.searchValue = expressionItem.expression.searchVal;\n\n        expressionItem.inEditMode = true;\n        this.editedExpression = expressionItem;\n\n        this.cdr.detectChanges();\n\n        this.columnSelectOverlaySettings.positionStrategy = new AutoPositionStrategy({ target: this.columnSelect.element });\n        this.conditionSelectOverlaySettings.positionStrategy = new AutoPositionStrategy({ target: this.conditionSelect.element });\n\n        if (!this.selectedColumn) {\n            this.columnSelect.input.nativeElement.focus();\n        } else if (this.selectedColumn.filters.condition(this.selectedCondition).isUnary) {\n            this.conditionSelect.input.nativeElement.focus();\n        } else {\n            this.searchValueInput.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public clearSelection() {\n        for (const group of this.selectedGroups) {\n            group.selected = false;\n        }\n        this.selectedGroups = [];\n\n        for (const expr of this.selectedExpressions) {\n            expr.selected = false;\n        }\n        this.selectedExpressions = [];\n\n        this.toggleContextMenu();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public enterExpressionAdd(expressionItem: ExpressionOperandItem) {\n        this.clearSelection();\n        this.exitOperandEdit();\n\n        if (this.addModeExpression) {\n            this.addModeExpression.inAddMode = false;\n        }\n\n        expressionItem.inAddMode = true;\n        this.addModeExpression = expressionItem;\n        if (expressionItem.selected) {\n            this.toggleExpression(expressionItem);\n        }\n    }\n\n    private onToggleExpression(expressionItem: ExpressionOperandItem) {\n        this.exitOperandEdit();\n        this.toggleExpression(expressionItem);\n\n        this.toggleContextMenu();\n    }\n\n    private toggleExpression(expressionItem: ExpressionOperandItem) {\n        expressionItem.selected = !expressionItem.selected;\n\n        if (expressionItem.selected) {\n            this.selectedExpressions.push(expressionItem);\n        } else {\n            const index = this.selectedExpressions.indexOf(expressionItem);\n            this.selectedExpressions.splice(index, 1);\n            this.deselectParentRecursive(expressionItem);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public contextMenuClosed() {\n        this.contextualGroup = null;\n    }\n\n    private toggleContextMenu() {\n        const contextualGroup = this.findSingleSelectedGroup();\n\n        if (contextualGroup || this.selectedExpressions.length > 1) {\n            this.contextualGroup = contextualGroup;\n\n            if (contextualGroup) {\n                this.filteringLogics = [\n                    {\n                        label: this.grid.resourceStrings.igx_grid_filter_operator_and,\n                        selected: contextualGroup.operator === FilteringLogic.And\n                    },\n                    {\n                        label: this.grid.resourceStrings.igx_grid_filter_operator_or,\n                        selected: contextualGroup.operator === FilteringLogic.Or\n                    }\n                ];\n            }\n        } else if (this.contextMenuToggle) {\n            this.contextMenuToggle.close();\n        }\n    }\n\n    private findSingleSelectedGroup(): ExpressionGroupItem {\n        for (const group of this.selectedGroups) {\n            const containsAllSelectedExpressions = this.selectedExpressions.every(op => this.isInsideGroup(op, group));\n\n            if (containsAllSelectedExpressions) {\n                return group;\n            }\n        }\n\n        return null;\n    }\n\n    private isInsideGroup(item: ExpressionItem, group: ExpressionGroupItem): boolean {\n        if (!item) {\n            return false;\n        }\n\n        if (item.parent === group) {\n            return true;\n        }\n\n        return this.isInsideGroup(item.parent, group);\n    }\n\n    private deleteItem(expressionItem: ExpressionItem) {\n        if (!expressionItem.parent) {\n            this.rootGroup = null;\n            this.currentGroup = null;\n            return;\n        }\n\n        if (expressionItem === this.currentGroup) {\n            this.currentGroup = this.currentGroup.parent;\n        }\n\n        const children = expressionItem.parent.children;\n        const index = children.indexOf(expressionItem);\n        children.splice(index, 1);\n\n        if (!children.length) {\n            this.deleteItem(expressionItem.parent);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onKeyDown(eventArgs: KeyboardEvent) {\n        eventArgs.stopPropagation();\n        if (!this.contextMenuToggle.collapsed &&\n            (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE)) {\n            this.clearSelection();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public createAndGroup() {\n        this.createGroup(FilteringLogic.And);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public createOrGroup() {\n        this.createGroup(FilteringLogic.Or);\n    }\n\n    private createGroup(operator: FilteringLogic) {\n        const chips = this.chips.toArray();\n        const minIndex = this.selectedExpressions.reduce((i, e) => Math.min(i, chips.findIndex(c => c.data === e)), Number.MAX_VALUE);\n        const firstExpression = chips[minIndex].data;\n\n        const parent = firstExpression.parent;\n        const groupItem = new ExpressionGroupItem(operator, parent);\n\n        const index = parent.children.indexOf(firstExpression);\n        parent.children.splice(index, 0, groupItem);\n\n        for (const expr of this.selectedExpressions) {\n            this.deleteItem(expr);\n            groupItem.children.push(expr);\n            expr.parent = groupItem;\n        }\n\n        this.clearSelection();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public deleteFilters() {\n        for (const expr of this.selectedExpressions) {\n            this.deleteItem(expr);\n        }\n\n        this.clearSelection();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onGroupClick(groupItem: ExpressionGroupItem) {\n        this.toggleGroup(groupItem);\n    }\n\n    private toggleGroup(groupItem: ExpressionGroupItem) {\n        this.exitOperandEdit();\n        if (groupItem.children && groupItem.children.length) {\n            this.toggleGroupRecursive(groupItem, !groupItem.selected);\n            if (!groupItem.selected) {\n                this.deselectParentRecursive(groupItem);\n            }\n            this.toggleContextMenu();\n        }\n    }\n\n    private toggleGroupRecursive(groupItem: ExpressionGroupItem, selected: boolean) {\n        if (groupItem.selected !== selected) {\n            groupItem.selected = selected;\n\n            if (groupItem.selected) {\n                this.selectedGroups.push(groupItem);\n            } else {\n                const index = this.selectedGroups.indexOf(groupItem);\n                this.selectedGroups.splice(index, 1);\n            }\n        }\n\n        for (const expr of groupItem.children) {\n            if (expr instanceof ExpressionGroupItem) {\n                this.toggleGroupRecursive(expr, selected);\n            } else {\n                const operandExpression = expr as ExpressionOperandItem;\n                if (operandExpression.selected !== selected) {\n                    this.toggleExpression(operandExpression);\n                }\n            }\n        }\n    }\n\n    private deselectParentRecursive(expressionItem: ExpressionItem) {\n        const parent = expressionItem.parent;\n        if (parent) {\n            if (parent.selected) {\n                parent.selected = false;\n                const index = this.selectedGroups.indexOf(parent);\n                this.selectedGroups.splice(index, 1);\n            }\n            this.deselectParentRecursive(parent);\n        }\n    }\n\n    private calculateContextMenuTarget() {\n        const containerRect = this.expressionsContainer.nativeElement.getBoundingClientRect();\n        const chips = this.chips.filter(c => this.selectedExpressions.indexOf(c.data) !== -1);\n        let minTop = chips.reduce((t, c) =>\n            Math.min(t, c.elementRef.nativeElement.getBoundingClientRect().top), Number.MAX_VALUE);\n        minTop = Math.max(containerRect.top, minTop);\n        minTop = Math.min(containerRect.bottom, minTop);\n        let maxRight = chips.reduce((r, c) =>\n            Math.max(r, c.elementRef.nativeElement.getBoundingClientRect().right), 0);\n        maxRight = Math.max(maxRight, containerRect.left);\n        maxRight = Math.min(maxRight, containerRect.right);\n        this._overlaySettings.positionStrategy.settings.target = new Point(maxRight, minTop);\n    }\n\n    private scrollElementIntoView(target: HTMLElement) {\n        const container = this.expressionsContainer.nativeElement;\n        const targetOffset = target.offsetTop - container.offsetTop;\n        const delta = 10;\n\n        if (container.scrollTop + delta > targetOffset) {\n            container.scrollTop = targetOffset - delta;\n        } else if (container.scrollTop + container.clientHeight < targetOffset + target.offsetHeight + delta) {\n            container.scrollTop = targetOffset + target.offsetHeight + delta - container.clientHeight;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ungroup() {\n        const selectedGroup = this.contextualGroup;\n        const parent = selectedGroup.parent;\n        if (parent) {\n            const index = parent.children.indexOf(selectedGroup);\n            parent.children.splice(index, 1, ...selectedGroup.children);\n\n            for (const expr of selectedGroup.children) {\n                expr.parent = parent;\n            }\n        }\n\n        this.clearSelection();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public deleteGroup() {\n        const selectedGroup = this.contextualGroup;\n        const parent = selectedGroup.parent;\n        if (parent) {\n            const index = parent.children.indexOf(selectedGroup);\n            parent.children.splice(index, 1);\n        } else {\n            this.rootGroup = null;\n        }\n\n        this.clearSelection();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectFilteringLogic(event: IButtonGroupEventArgs) {\n        this.contextualGroup.operator = event.index as FilteringLogic;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getConditionFriendlyName(name: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${name}`] || name;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isDate(value: any) {\n        return value instanceof Date;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onExpressionsScrolled() {\n        if (!this.contextMenuToggle.collapsed) {\n            this.calculateContextMenuTarget();\n            this.contextMenuToggle.reposition();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public invokeClick(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            (eventArgs.currentTarget as HTMLElement).click();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onOutletPointerDown(event) {\n        // This prevents closing the select's dropdown when clicking the scroll\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getConditionList(): string[] {\n        return this.selectedColumn ? this.selectedColumn.filters.conditionList() : [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public initialize(grid: GridType, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.inline = false;\n        this.grid = grid;\n        this._overlayService = overlayService;\n        this._overlayComponentId = overlayComponentId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public setAddButtonFocus() {\n        if (this.addRootAndGroupButton) {\n            this.addRootAndGroupButton.nativeElement.focus();\n        } else if (this.addConditionButton) {\n            this.addConditionButton.nativeElement.focus();\n        }\n    }\n\n    private init() {\n        this.clearSelection();\n        this.cancelOperandAdd();\n        this.cancelOperandEdit();\n        this.rootGroup = this.createExpressionGroupItem(this.grid.advancedFilteringExpressionsTree);\n        this.currentGroup = this.rootGroup;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public context(expression: ExpressionItem, afterExpression?: ExpressionItem) {\n        return {\n            $implicit: expression,\n            afterExpression\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onClearButtonClick() {\n        this.grid.advancedFilteringExpressionsTree = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public closeDialog() {\n        if (this._overlayComponentId) {\n            this._overlayService.hide(this._overlayComponentId);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public applyChanges() {\n        this.exitOperandEdit();\n        this.grid.advancedFilteringExpressionsTree = this.createExpressionsTreeFromGroupItem(this.rootGroup);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public cancelChanges() {\n        if (!this._overlayComponentId) {\n            this.init();\n        }\n        this.closeDialog();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onApplyButtonClick() {\n        this.applyChanges();\n        this.closeDialog();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipSelectionEnd() {\n        const contextualGroup = this.findSingleSelectedGroup();\n        if (contextualGroup || this.selectedExpressions.length > 1) {\n            this.contextualGroup = contextualGroup;\n            this.calculateContextMenuTarget();\n            if (this.contextMenuToggle.collapsed) {\n                this.contextMenuToggle.open(this._overlaySettings);\n            } else {\n                this.contextMenuToggle.reposition();\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxRowSelector]'\n})\nexport class IgxRowSelectorDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxHeadSelector]'\n})\nexport class IgxHeadSelectorDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/**\n * The IgxGridToolbarCustomContentDirective directive is used to mark an 'ng-template' (with\n * the 'igxToolbarCustomContent' selector) defined in the IgxGrid which is used to provide\n * custom content for cener part of the IgxGridToolbar.\n */\n@Directive({\n    selector: '[igxToolbarCustomContent]'\n})\nexport class IgxGridToolbarCustomContentDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChildren,\n    ChangeDetectionStrategy,\n    Input,\n    forwardRef,\n    QueryList,\n    TemplateRef,\n    Output,\n    EventEmitter\n} from '@angular/core';\n\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { flatten } from '../../core/utils';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit {\n\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n\n    /**\n     * Set if the column group is collapsible.\n     * Default value is `false`\n     * ```html\n     *  <igx-column-group [collapsible] = \"true\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public set collapsible(value: boolean) {\n        this._collapsible = value;\n        this.collapsibleChange.emit(this._collapsible);\n        if (this.children && !this.hidden) {\n            if (this._collapsible) {\n                this.setExpandCollapseState();\n            } else {\n                this.children.forEach(child => child.hidden = false);\n            }\n        }\n    }\n    public get collapsible() {\n        return this._collapsible && this.checkCollapsibleState();\n    }\n\n    /**\n     * Set whether the group is expanded or collapsed initially.\n     * Applied only if the collapsible property is set to `true`\n     * Default value is `true`\n     * ```html\n     *  const state = false\n     *  <igx-column-group [(expand)] = \"state\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public set expanded(value: boolean) {\n        this._expanded = value;\n        this.expandedChange.emit(this._expanded);\n        if (!this.collapsible) { return; }\n        if (!this.hidden && this.children) {\n            this.setExpandCollapseState();\n        }\n    }\n    public get expanded() {\n        return this._expanded;\n    }\n\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n\n    /**\n     * Allows you to define a custom template for expand/collapse indicator\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get collapsibleIndicatorTemplate(): TemplateRef<any> {\n        return this._collapseIndicatorTemplate;\n    }\n    set collapsibleIndicatorTemplate(template: TemplateRef<any>) {\n        this._collapseIndicatorTemplate = template;\n    }\n\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```html\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding\n     * ```html\n     * <igx-column [(hidden)] = \"model.columns[0].isHidden\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.hiddenChange.emit(this._hidden);\n        if (this._hidden || !this.collapsible) {\n            this.children.forEach(child => child.hidden = this._hidden);\n        } else {\n            this.children.forEach(c =>  {\n                if (c.visibleWhenCollapsed === undefined) {c.hidden = false; return; }\n                c.hidden = this.expanded ? c.visibleWhenCollapsed : !c.visibleWhenCollapsed;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hiddenChange = new EventEmitter<boolean>();\n\n    /**\n     *@hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        if (this.collapseIndicatorTemplate) {\n            this._collapseIndicatorTemplate = this.collapseIndicatorTemplate.template;\n        }\n        // currently only ivy fixes the issue, we have to slice only if the first child is group\n        if (this.children.first === this) {\n            this.children.reset(this.children.toArray().slice(1));\n        }\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n        if (this.collapsible) {\n            this.setExpandCollapseState();\n        }\n    }\n\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let isChildrenWidthInPercent = false, width;\n        width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n            if (typeof val.width === 'string' && val.width.indexOf('%') !== -1) {\n                isChildrenWidthInPercent = true;\n                return acc + parseInt(val.width, 10);\n            }\n            return acc + parseInt(val.calcWidth, 10);\n        }, 0)}`;\n        return isChildrenWidthInPercent ? width + '%' : width + 'px';\n    }\n\n    set width(val) { }\n\n    // constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & IGridDataBindable>, public cdr: ChangeDetectorRef) {\n    //     // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n    //     super(gridAPI, cdr);\n    // }\n}\n","import { Directive, Input, OnDestroy, NgModule, TemplateRef } from '@angular/core';\nimport { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { KEYS } from '../core/utils';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { IgxRowDirective, IgxGridBaseDirective } from './grid';\nimport { IRowDragStartEventArgs, IRowDragEndEventArgs } from './common/events';\nimport { GridType } from './common/grid.interface';\nimport { IgxHierarchicalRowComponent } from './hierarchical-grid/hierarchical-row.component';\n\n\nconst ghostBackgroundClass = 'igx-grid__tr--ghost';\nconst gridCellClass = 'igx-grid__td';\nconst rowSelectedClass = 'igx-grid__tr--selected';\nconst cellSelectedClass = 'igx-grid__td--selected';\nconst cellActiveClass = 'igx-grid__td--active';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDrag]'\n})\nexport class IgxRowDragDirective extends IgxDragDirective implements OnDestroy {\n    private row: IgxRowDirective<IgxGridBaseDirective & GridType>;\n    private subscription$: Subscription;\n    private _rowDragStarted = false;\n\n    @Input('igxRowDrag')\n    set data(val) {\n        this.row = val;\n    }\n\n    get data() {\n        return this.row;\n    }\n\n    public onPointerDown(event) {\n        event.preventDefault();\n        this._rowDragStarted = false;\n        this._removeOnDestroy = false;\n        super.onPointerDown(event);\n    }\n\n    public onPointerMove(event) {\n        super.onPointerMove(event);\n        if (this._dragStarted && !this._rowDragStarted) {\n            this._rowDragStarted = true;\n            const args: IRowDragStartEventArgs = {\n                dragDirective: this,\n                dragData: this.row,\n                cancel: false,\n                owner: this.row.grid\n            };\n\n            this.row.grid.onRowDragStart.emit(args);\n            if (args.cancel) {\n                this.ghostElement.parentNode.removeChild(this.ghostElement);\n                this.ghostElement = null;\n                this._dragStarted = false;\n                this._clicked = false;\n                return;\n            }\n            this.row.dragging = true;\n            this.row.grid.rowDragging = true;\n            this.row.grid.markForCheck();\n\n            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n                if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                    this._lastDropArea = false;\n                    this.onPointerUp(event);\n                }\n            });\n        }\n    }\n\n    public onPointerUp(event) {\n\n        if (!this._clicked) {\n            return;\n        }\n\n        const args: IRowDragEndEventArgs = {\n            dragDirective: this,\n            dragData: this.row,\n            animation: false,\n            owner: this.row.grid\n        };\n        this.zone.run(() => {\n            this.row.grid.onRowDragEnd.emit(args);\n        });\n\n        const dropArea = this._lastDropArea;\n        super.onPointerUp(event);\n        if (!dropArea && this.ghostElement) {\n            this.ghostElement.addEventListener('transitionend', this.transitionEndEvent, false);\n        }   else {\n            this.endDragging();\n        }\n    }\n\n    protected createGhost(pageX, pageY) {\n        this.row.grid.endEdit(true);\n        this.row.grid.markForCheck();\n        this.ghostContext = {\n            $implicit: this.row.rowData,\n            data: this.row.rowData,\n            grid: this.row.grid\n        };\n        super.createGhost(pageX, pageY, this.row.nativeElement);\n\n        // check if there is an expander icon and create the ghost at the corresponding position\n        if (this.isHierarchicalGrid) {\n            const row = this.row as IgxHierarchicalRowComponent;\n            if (row.expander) {\n                const expanderWidth = row.expander.nativeElement.getBoundingClientRect().width;\n                this._ghostHostX += expanderWidth;\n            }\n        }\n\n        const ghost = this.ghostElement;\n\n        const gridRect = this.row.grid.nativeElement.getBoundingClientRect();\n        const rowRect = this.row.nativeElement.getBoundingClientRect();\n        ghost.style.overflow = 'hidden';\n        ghost.style.width = gridRect.width + 'px';\n        ghost.style.height = rowRect.height + 'px';\n\n        this.renderer.addClass(ghost, ghostBackgroundClass);\n        this.renderer.removeClass(ghost, rowSelectedClass);\n\n        const ghostCells = ghost.getElementsByClassName(gridCellClass);\n        for (let index = 0; index < ghostCells.length; index++) {\n            this.renderer.removeClass(ghostCells[index], cellSelectedClass);\n            this.renderer.removeClass(ghostCells[index], cellActiveClass);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$ && !this.subscription$.closed) {\n            this.subscription$.unsubscribe();\n        }\n    }\n\n    private endDragging() {\n        this.onTransitionEnd(null);\n        this.row.dragging = false;\n        this.row.grid.rowDragging = false;\n        this.row.grid.markForCheck();\n        this._unsubscribe();\n    }\n\n    private transitionEndEvent = (evt?) => {\n        if (this.ghostElement) {\n            this.ghostElement.removeEventListener('transitionend', this.transitionEndEvent, false);\n        }\n        this.endDragging();\n    }\n\n    private get isHierarchicalGrid() {\n        return this.row.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxDragIndicatorIcon]'\n})\n\nexport class IgxDragIndicatorIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDragGhost]'\n})\n\nexport class IgxRowDragGhostDirective  {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n@NgModule({\n    declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],\n    entryComponents: [],\n    exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],\n    imports: []\n})\n\nexport class IgxRowDragModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewContainerRef,\n    InjectionToken,\n    Optional,\n    DoCheck,\n    Directive\n} from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Subject, combineLatest, pipe } from 'rxjs';\nimport { takeUntil, first, filter, throttleTime, map } from 'rxjs/operators';\nimport { cloneArray, isEdge, isNavigationKey, flatten, mergeObjects, isIE } from '../core/utils';\nimport { DataType } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport {\n    AbsoluteScrollStrategy,\n    HorizontalAlignment,\n    VerticalAlignment,\n    IgxOverlayService,\n    OverlaySettings,\n    PositionSettings,\n    ConnectedPositioningStrategy,\n    ContainerPositionStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './hiding/column-hiding-item.directive';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { RowEditPositionStrategy } from './grid.common';\nimport { IgxGridToolbarComponent } from './toolbar/grid-toolbar.component';\nimport { IgxRowDirective } from './row.directive';\nimport { IgxGridHeaderComponent } from './headers/grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport {\n    FilteringExpressionsTree, IFilteringExpressionsTree, FilteringExpressionsTreeType\n} from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/index';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/base/grid-filtering-cell.component';\nimport { WatchChanges } from './watch-changes';\nimport { IgxGridHeaderGroupComponent } from './headers/grid-header-group.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport {\n    IgxGridSelectionService,\n    GridSelectionRange,\n    IgxGridCRUDService,\n    IgxRow,\n    IgxCell,\n    isChromium\n} from './selection/selection.service';\nimport { DragScrollDirection } from './selection/drag-select.directive';\nimport { ICachedViewLoadedEventArgs, IgxTemplateOutletDirective } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './filtering/excel-style/excel-style-search.component';\nimport {\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective\n} from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxGridColumnResizerComponent } from './resizing/resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/base/grid-filtering-row.component';\nimport { CharSeparatedValueData } from '../services/csv/char-separated-value-data';\nimport { IgxColumnResizingService } from './resizing/resizing.service';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { IFilteringStrategy } from '../data-operations/filtering-strategy';\nimport { IgxRowExpandedIndicatorDirective, IgxRowCollapsedIndicatorDirective,\n     IgxHeaderExpandIndicatorDirective, IgxHeaderCollapseIndicatorDirective } from './grid/grid.directives';\nimport { GridKeydownTargetType, GridSelectionMode, GridSummaryPosition, GridSummaryCalculationMode, FilterMode } from './common/enums';\nimport {\n    IGridCellEventArgs,\n    IRowSelectionEventArgs,\n    IPinColumnEventArgs,\n    IGridEditEventArgs,\n    IPageEventArgs,\n    IRowDataEventArgs,\n    IColumnResizeEventArgs,\n    IColumnMovingStartEventArgs,\n    IColumnMovingEventArgs,\n    IColumnMovingEndEventArgs,\n    IGridKeydownEventArgs,\n    IRowDragStartEventArgs,\n    IRowDragEndEventArgs,\n    IGridClipboardEvent,\n    IGridToolbarExportEventArgs,\n    ISearchInfo,\n    ICellPosition,\n    IRowToggleEventArgs\n} from './common/events';\nimport { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';\nimport { GridType } from './common/grid.interface';\nimport { IgxDecimalPipeComponent, IgxDatePipeComponent } from './common/pipes';\nimport { DropPosition } from './moving/moving.service';\nimport { IgxHeadSelectorDirective, IgxRowSelectorDirective } from './selection/row-selectors';\nimport { IgxGridToolbarCustomContentDirective } from './toolbar/toolbar.directive';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IgxColumnGroupComponent } from './columns/column-group.component';\nimport { IGridSortingStrategy } from '../data-operations/sorting-strategy';\nimport { IgxRowDragGhostDirective, IgxDragIndicatorIconDirective  } from './row-drag.directive';\n\nconst MINIMUM_COLUMN_WIDTH = 136;\nconst FILTER_ROW_HEIGHT = 50;\n\n// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.\n// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.\n// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.\n// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,\n// but in the same time we need to set row editing overlay outlet before opening the overlay itself.\nconst MIN_ROW_EDITING_COUNT_THRESHOLD = 2;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\n\n\n@Directive({\n    selector: '[igxGridBaseComponent]'\n})\nexport class IgxGridBaseDirective extends DisplayDensityBase implements\n    OnInit, DoCheck, OnDestroy, AfterContentInit, AfterViewInit {\n    private _scrollWidth: number;\n    private _customDragIndicatorIconTemplate: TemplateRef<any>;\n    protected _init = true;\n    private _cdrRequests = false;\n    protected _cdrRequestRepaint = false;\n\n    public get scrollWidth() {\n        return this._scrollWidth;\n    }\n\n    private _resourceStrings = CurrentResourceStrings.GridResStrings;\n    private _emptyGridMessage = null;\n    private _emptyFilteredGridMessage = null;\n    private _isLoading = false;\n    private _locale = null;\n    public _destroyed = false;\n    private overlayIDs = [];\n    private _filteringStrategy: IFilteringStrategy;\n    private _sortingStrategy: IGridSortingStrategy;\n\n    private _hostWidth;\n    private _advancedFilteringOverlayId: string;\n    private _advancedFilteringPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _advancedFilteringOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: false,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._advancedFilteringPositionSettings),\n    };\n\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n    protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n    protected defaultCollapsedTemplate: TemplateRef<any>;\n\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: IGridResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): IGridResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that autogenerates the `IgxGridComponent` columns.\n     * The default value is false.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    public autoGenerate = false;\n\n    public id: string;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is empty.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is loading.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    public loadingGridTemplate: TemplateRef<any>;\n\n    @WatchChanges()\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    /**\n     * Sets the filtering logic of the `IgxGridComponent`.\n     * The default is AND.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Returns the filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    /**\n     * Sets the filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And, \"ID\");\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     }\n     * ];\n     * this.grid.filteringExpressionsTree = (logic);\n     * ```\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(filteringExpressionsTree)]=\"model.filteringExpressions\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            value.type = FilteringExpressionsTreeType.Regular;\n            this._filteringExpressionsTree = value;\n            this._filteringPipeTrigger++;\n            this.filteringExpressionsTreeChange.emit(this._filteringExpressionsTree);\n\n            if (this.filteringService.isFilteringExpressionsTreeEmpty(this._filteringExpressionsTree) &&\n                !this.advancedFilteringExpressionsTree) {\n                this.filteredData = null;\n            }\n\n            this.filteringService.refreshExpressions();\n            this.selectionService.clearHeaderCBState();\n            this.summaryService.clearSummaryCache();\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Emitted after filtering is performed.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringExprTreeChange(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *              (filteringExpressionsTreeChange)=\"filteringExprTreeChange($event)\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public filteringExpressionsTreeChange = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted after advanced filtering is performed.\n     * Returns the advanced filtering expressions tree.\n     * ```typescript\n     * advancedFilteringExprTreeChange(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *           (advancedFilteringExpressionsTreeChange)=\"advancedFilteringExprTreeChange($event)\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public advancedFilteringExpressionsTreeChange = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Returns the advanced filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let advancedFilteringExpressionsTree = this.grid.advancedFilteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    get advancedFilteringExpressionsTree() {\n        return this._advancedFilteringExpressionsTree;\n    }\n\n    /**\n     * Sets the advanced filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And);\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     },\n     *     {\n     *          condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *          fieldName: 'CompanyName',\n     *          searchVal: 'a'\n     *     }\n     * ];\n     * this.grid.advancedFilteringExpressionsTree = logic;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set advancedFilteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            value.type = FilteringExpressionsTreeType.Advanced;\n            this._advancedFilteringExpressionsTree = value;\n            this._filteringPipeTrigger++;\n        } else {\n            this._advancedFilteringExpressionsTree = null;\n        }\n        this.advancedFilteringExpressionsTreeChange.emit(this._advancedFilteringExpressionsTree);\n\n        if (this.filteringService.isFilteringExpressionsTreeEmpty(this._advancedFilteringExpressionsTree) &&\n            !this.advancedFilteringExpressionsTree) {\n            this.filteredData = null;\n        }\n\n        this.selectionService.clearHeaderCBState();\n        this.summaryService.clearSummaryCache();\n        this.notifyChanges();\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.onFilteringDone.emit(this._advancedFilteringExpressionsTree));\n    }\n\n    /**\n     * Returns the locale of the grid.\n     * If not set, returns browser's language.\n     */\n    @Input()\n    get locale(): string {\n        if (this._locale) {\n            return this._locale;\n        } else {\n            return 'en';\n        }\n    }\n\n    /**\n     * Sets the locale of the grid.\n     */\n    set locale(value) {\n        this._locale = value;\n    }\n\n    /**\n     * Returns whether the paging feature is enabled/disabled.\n     * The default state is disabled (false).\n     * ```\n     * const paging = this.grid.paging;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    /**\n     * Enables/Disables the paging feature.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns the current page index.\n     * ```html\n     * let gridPage = this.grid.page;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    /**\n     * Sets the current page index.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [page]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     *```\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(page)]=\"model.page\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set page(val: number) {\n        if (val === this._page || val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.selectionService.clear(true);\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.pageChange.emit(this._page);\n        this.navigateTo(0);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    /**\n     * Returns the number of visible items per page of the `IgxGridComponent`.\n     * The default is 15.\n     * ```html\n     * let itemsPerPage = this.grid.perPage;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    /**\n     * Sets the number of visible items per page of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [perPage]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(perPage)]=\"model.perPage\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n        this.selectionService.clear(true);\n        this._perPage = val;\n        this.perPageChange.emit(this._perPage);\n        this.page = 0;\n        this.endEdit(true);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n\n    /**\n     * You can provide a custom `ng-template` for the pagination UI of the grid.\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * By default it is disabled (false).\n     * ```typescript\n     * let gridColHiding = this.grid.columnHiding;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    /**\n     * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    @DeprecateProperty('rowSelectable property is deprecated. Use rowSelection property instead.')\n    @WatchChanges()\n    @Input()\n    get rowSelectable(): boolean {\n        return this.isRowSelectable;\n    }\n\n    set rowSelectable(val: boolean) {\n        this.rowSelection = val ? GridSelectionMode.multiple : GridSelectionMode.none;\n    }\n\n    /**\n     * Returns if the row selectors are hidden\n     * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    get hideRowSelectors() {\n        return this._hideRowSelectors;\n    }\n\n    /**\n     * Allows you to change the visibility of the row selectors\n     * By default row selectors are shown\n     * @memberof IgxGridBaseDirective\n     */\n    set hideRowSelectors(value: boolean) {\n        this._hideRowSelectors = value;\n        this.notifyChanges(true);\n    }\n\n    @Input()\n    get rowDraggable(): boolean {\n        return this._rowDrag && this.hasVisibleColumns;\n    }\n\n    /**\n     * Sets whether rows can be moved.\n     * ```html\n     * <igx-grid #grid [rowDraggable]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set rowDraggable(val: boolean) {\n        this._rowDrag = val;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public rowDragging = false;\n\n\n    /**\n * Sets whether the `IgxGridRowComponent` is editable.\n * By default it is set to false.\n * ```typescript\n * let rowEditable = this.grid.rowEditable;\n * ```\n * @memberof IgxGridBaseDirective\n */\n    @WatchChanges()\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n    /**\n    * Sets whether rows can be edited.\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [primaryKey]=\"'ProductID'\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    * @memberof IgxGridBaseDirective\n    */\n    set rowEditable(val: boolean) {\n        if (!this._init) {\n            this.refreshGridState();\n        }\n        this._rowEditable = val;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns the height of the `IgxGridComponent`.\n     * ```typescript\n     * let gridHeight = this.grid.height;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    /**\n     * Sets the height of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            this.nativeElement.style.height = value;\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    @HostBinding('style.width')\n    get hostWidth() {\n        return this._width || this._hostWidth;\n    }\n    /**\n     * Returns the width of the `IgxGridComponent`.\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    get width() {\n        return this._width;\n    }\n    set width(value) {\n        if (this._width !== value) {\n            this._width = value;\n            this.nativeElement.style.width = value;\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns the width of the header of the `IgxGridComponent`.\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get headerWidth() {\n        return parseInt(this.width, 10) - 17;\n    }\n\n    /**\n     * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Returns the row height.\n     * ```typescript\n     * const rowHeight = this.grid.rowHeight;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    /**\n     * Sets the row height.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * An @Input property that sets the default width of the `IgxGridComponent`'s columns.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this.columnWidthSetByUser = true;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * An @Input property that sets the primary key of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    public primaryKey;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    set emptyGridMessage(value: string) {\n        this._emptyGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records.\n    */\n    get emptyGridMessage(): string {\n        return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;\n    }\n\n    /**\n     * An @Input property that sets whether the grid is going to show loading indicator.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    set isLoading(value: boolean) {\n        if (this._isLoading !== value) {\n            this._isLoading = value;\n            this.evaluateLoadingState();\n        }\n        Promise.resolve().then(() => {\n            // wait for the current detection cycle to end before triggering a new one.\n            this.notifyChanges();\n        });\n    }\n\n    /**\n     * An accessor that returns whether the grid is showing loading indicator.\n     */\n    get isLoading(): boolean {\n        return this._isLoading;\n    }\n\n    /**\n     * A property that allows the columns to be auto-generated once again after the initialization of the grid.\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     *  this.remoteData = this.remoteService.remoteData;\n     * ```\n     */\n    public shouldGenerate: boolean;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records and the grid is filtered.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    set emptyFilteredGridMessage(value: string) {\n        this._emptyFilteredGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records and the grid is filtered.\n    */\n    get emptyFilteredGridMessage(): string {\n        return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the built-in column hiding UI.\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Returns if the built-in column pinning UI should be shown in the toolbar.\n     * ```typescript\n     *  let colPinning = this.grid.columnPinning;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n\n    /**\n     * Sets if the built-in column pinning UI should be shown in the toolbar.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the UI of the column pinning.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Returns if the filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowFiltering;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    /**\n     * Sets if the filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            this.filteringService.registerSVGIcons();\n\n            if (!this._init) {\n                this.calcGridHeadRow();\n            }\n\n            this.filteringService.isFilterRowVisible = false;\n            this.filteringService.filteredColumn = null;\n\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the advanced filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowAdvancedFiltering;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    get allowAdvancedFiltering() {\n        return this._allowAdvancedFiltering;\n    }\n\n    /**\n     * Sets a value indicating whether the advanced filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowAdvancedFiltering]=\"true\" [showToolbar]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set allowAdvancedFiltering(value) {\n        if (this._allowAdvancedFiltering !== value) {\n            this._allowAdvancedFiltering = value;\n            this.filteringService.registerSVGIcons();\n\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the filter mode.\n     * ```typescript\n     *  let filtering = this.grid.filterMode;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    get filterMode() {\n        return this._filterMode;\n    }\n\n    /**\n     * Sets filter mode.\n     * By default it's set to FilterMode.quickFilter.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set filterMode(value) {\n        this._filterMode = value;\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.close();\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns the summary position.\n     * ```typescript\n     *  let summaryPosition = this.grid.summaryPosition;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    get summaryPosition() {\n        return this._summaryPosition;\n    }\n\n    /**\n     * Sets summary position.\n     * By default it is bottom.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set summaryPosition(value) {\n        this._summaryPosition = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns the summary calculation mode.\n     * ```typescript\n     *  let summaryCalculationMode = this.grid.summaryCalculationMode;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    get summaryCalculationMode() {\n        return this._summaryCalculationMode;\n    }\n\n    /**\n     * Sets summary calculation mode.\n     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set summaryCalculationMode(value) {\n        this._summaryCalculationMode = value;\n        if (!this._init) {\n            this.endEdit(true);\n            this.summaryService.resetSummaryHeight();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Gets the filtering strategy of the grid.\n     * ```typescript\n     *  let filterStrategy = this.grid.filterStrategy\n     * ```\n     */\n    @Input()\n    get filterStrategy(): IFilteringStrategy {\n        return this._filteringStrategy;\n    }\n\n    /**\n     * Sets the filtering strategy of the grid.\n     * ```html\n     *  <igx-grid #grid [data]=\"localData\" [filterStrategy]=\"filterStrategy\"></igx-grid>\n     * ```\n     */\n    set filterStrategy(classRef: IFilteringStrategy) {\n        this._filteringStrategy = classRef;\n    }\n\n    /**\n     * Gets the sorting strategy of the grid.\n     * ```typescript\n     *  let sortStrategy = this.grid.sortStrategy\n     * ```\n     */\n    @Input()\n    get sortStrategy(): IGridSortingStrategy {\n        return this._sortingStrategy;\n    }\n\n    /**\n     * Sets the sorting strategy of the grid.\n     * ```html\n     *  <igx-grid #grid [data]=\"localData\" [sortStrategy]=\"sortStrategy\"></igx-grid>\n     * ```\n     */\n    set sortStrategy(value: IGridSortingStrategy) {\n        this._sortingStrategy = value;\n    }\n\n    /**\n     * An @Input property that provides a callback for loading unique column values on demand.\n     * If this property is provided, the unique values it generates will be used by the Excel Style Filtering.\n     * ```html\n     * <igx-grid [data]=\"localData\" [filterMode]=\"'excelStyleFilter'\" [uniqueColumnValuesStrategy]=\"columnValuesStrategy\"></igx-grid>\n     * ```\n     *\n     * ```typescript\n     * public columnValuesStrategy = (column: IgxColumnComponent,\n     *                               filteringExpressionsTree: IFilteringExpressionsTree,\n     *                               done: (uniqueValues: any[]) => void) => {\n     *     this.dataService.getColumnData(column, filteringExpressionsTree, uniqueValues => done(uniqueValues));\n     * }\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Input()\n    public uniqueColumnValuesStrategy: (column: IgxColumnComponent,\n                                        filteringExpressionsTree: IFilteringExpressionsTree,\n                                        done: (values: any[]) => void) => void;\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClick(e){\n     *     alert(\"The cell has been clicked!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellSelect(e){\n     *     alert(\"The cell has been selected!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onCellClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClickChange(e){\n     *     alert(\"The selected row has been changed!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent`\n     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editCancel(event: IGridEditEventArgs){\n     *    const rowID: IgxColumnComponent = event.rowID;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editStart(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editDone(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onCellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" a row enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editStart(event: IGridEditEventArgs) {\n     *          const editedRowObj = event.oldValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onRowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting  `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     *\n     * ```typescript\n     *      editDone(event: IGridEditEventArgs) {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onRowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onRowEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a grid column is initialized. Returns the column object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * initColumns(event: IgxColumnComponent) {\n     * const column: IgxColumnComponent = event;\n     *       column.filterable = true;\n     *       column.sortable = true;\n     *       column.editable = true;\n     * }\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI. Returns the sorting expression.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingDone(event: SortingDirection){\n     *     const sortingDirection = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression | Array<ISortingExpression>>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringDone(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     *}\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.\n     * ```typescript\n     * pagingDone(event: IPageEventArgs){\n     *     const paging = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * ```typescript\n     * rowAdded(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.\n     * Returns an `IRowDataEventArgs` object.\n     * ```typescript\n     * rowDeleted(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is resized.\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * ```typescript\n     * resizing(event: IColumnResizeEventArgs){\n     *     const grouping = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * contextMenu(event: IGridCellEventArgs){\n     *     const resizing = event;\n     *     console.log(resizing);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * dblClick(event: IGridCellEventArgs){\n     *     const dblClick = event;\n     *     console.log(dblClick);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }\n     * ```typescript\n     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){\n     *    const visiblity = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.\n     * ```typescript\n     * movingStart(event: IColumnMovingStartEventArgs){\n     *     const movingStarts = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted throughout the `IgxColumnComponent` moving operation.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * moving(event: IColumnMovingEventArgs){\n     *     const moving = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving ends.\n     * Returns the source and target `IgxColumnComponent` objects.\n     * ```typescript\n     * movingEnds(event: IColumnMovingEndEventArgs){\n     *     const movingEnds = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * ```typescript\n     * customKeydown(args: IGridKeydownEventArgs) {\n     *  const keydownEvent = args.event;\n     * }\n     * ```\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onGridKeydown = new EventEmitter<IGridKeydownEventArgs>();\n\n    /**\n     * Emitted when start dragging a row.\n     * Return the dragged row.\n     */\n    @Output()\n    public onRowDragStart = new EventEmitter<IRowDragStartEventArgs>();\n\n    /**\n     * Emitted when dropping a row.\n     * Return the dropped row.\n     */\n    @Output()\n    public onRowDragEnd = new EventEmitter<IRowDragEndEventArgs>();\n\n    /**\n     * Emitted when a copy operation is executed.\n     * Fired only if copy behavior is enabled through the [`clipboardOptions`]{@link IgxGridBaseDirective#clipboardOptions}.\n     */\n    @Output()\n    onGridCopy = new EventEmitter<IGridClipboardEvent>();\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public expansionStatesChange = new EventEmitter<Map<any, boolean>>();\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * ```typescript\n     * rowToggle(event: IRowToggleEventArgs){\n     *  // the id of the row\n     *  const rowID = event.rowID;\n     *  // the new expansion state\n     *  const newExpandedState = event.expanded;\n     *  // the original event that triggered onRowToggle\n     *  const originalEvent = event.event;\n     *  // whether the event should be cancelled\n     *  event.cancel = true;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridColumnResizerComponent)\n    public resizeLine: IgxGridColumnResizerComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('loadingOverlay', { static: true })\n    public loadingOverlay: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxLoadingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public loadingOutlet: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent> = new QueryList<IgxColumnComponent>();\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective })\n    public excelStyleSortingTemplateDirective: IgxExcelStyleSortingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective })\n    public excelStyleMovingTemplateDirective: IgxExcelStyleMovingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective })\n    public excelStyleHidingTemplateDirective: IgxExcelStyleHidingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective })\n    public excelStylePinningTemplateDirective: IgxExcelStylePinningTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleLoadingValuesTemplateDirective, { read: IgxExcelStyleLoadingValuesTemplateDirective, static: true })\n    public excelStyleLoadingValuesTemplateDirective: IgxExcelStyleLoadingValuesTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent })\n    public headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get headerGroupsList(): IgxGridHeaderGroupComponent[] {\n        return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];\n    }\n\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get headerCellList(): IgxGridHeaderComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.headerCell).filter((headerCell) => headerCell);\n    }\n\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get filterCellList(): IgxGridFilteringCellComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.filterCell).filter((filterCell) => filterCell);\n    }\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    @ViewChildren('summaryRow', { read: IgxSummaryRowComponent })\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n\n    public get summariesRowList() {\n        const res = new QueryList<any>();\n        if (!this._summaryRowList) {\n            return res;\n        }\n        const sumList = this._summaryRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(sumList);\n        return res;\n    }\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList\n            .filter((item) => {\n                return item.element.nativeElement.parentElement !== null;\n            })\n            .sort((a, b) => {\n                return a.index - b.index;\n            });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowDirective, { read: IgxRowDirective })\n    private _dataRowList: QueryList<IgxRowDirective<IgxGridBaseDirective>>;\n\n    /**\n     * A list of `IgxGridRowComponent`, currently rendered.\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public get dataRowList(): QueryList<IgxRowDirective<IgxGridBaseDirective>> {\n        const res = new QueryList<IgxRowDirective<IgxGridBaseDirective>>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((a, b) => {\n            return a.index - b.index;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef, static: true })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef, static: true })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultLoadingGrid', { read: TemplateRef, static: true })\n    public loadingGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective, static: true })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * Returns the template which will be used by the toolbar to show custom content.\n     * ```typescript\n     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;\n     * ```\n     * @memberof IgxGridBaseDirective\n     */\n    public get toolbarCustomContentTemplate(): IgxGridToolbarCustomContentDirective {\n        return this.toolbarCustomContentTemplates.first;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false })\n    public toolbarCustomContentTemplates: QueryList<IgxGridToolbarCustomContentDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get headSelectorTemplate(): TemplateRef<IgxHeadSelectorDirective> {\n        if (this.headSelectorsTemplates && this.headSelectorsTemplates.first) {\n            return this.headSelectorsTemplates.first.templateRef;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxHeadSelectorDirective, { read: IgxHeadSelectorDirective, descendants: false })\n    public headSelectorsTemplates: QueryList<IgxHeadSelectorDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get rowSelectorTemplate(): TemplateRef<IgxRowSelectorDirective> {\n        if (this.rowSelectorsTemplates && this.rowSelectorsTemplates.first) {\n            return this.rowSelectorsTemplates.first.templateRef;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxRowSelectorDirective, { read: IgxRowSelectorDirective, descendants: false })\n    public rowSelectorsTemplates: QueryList<IgxRowSelectorDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxRowDragGhostDirective, { read: TemplateRef, descendants: false })\n    public dragGhostCustomTemplates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective, static: true })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollHolder', { read: IgxGridForOfDirective, static: true })\n    public verticalScroll: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scr', { read: ElementRef, static: true })\n    public scr: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('footer', { read: ElementRef })\n    public footer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hContainer', { read: IgxGridForOfDirective, static: true })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerSelectorContainer')\n    public headerSelectorContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerDragContainer')\n    public headerDragContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerGroupContainer')\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('filteringRow', { read: IgxGridFilteringRowComponent })\n    public filteringRow: IgxGridFilteringRowComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('theadRow', { static: true })\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tbody', { static: true })\n    public tbody: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tfoot', { static: true })\n    public tfoot: ElementRef;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    protected _outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    public get outletDirective() {\n        return this._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n    */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public tmpOutlets: QueryList<any> = new QueryList<any>();\n\n\n    /**\n     * @hidden\n     */\n    public get rowOutletDirective() {\n        return this.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef, static: true })\n    private defaultRowEditTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef })\n    public rowEditCustom: TemplateRef<any>;\n\n    /** @hidden */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /** @hidden */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef })\n    public rowEditText: TemplateRef<any>;\n\n    /** @hidden */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef })\n    public rowEditActions: TemplateRef<any>;\n\n\n    /**\n    * The custom template, if any, that should be used when rendering a row expand indicator.\n    */\n   @ContentChild(IgxRowExpandedIndicatorDirective, { read: TemplateRef })\n   public rowExpandedIndicatorTemplate: TemplateRef<any> = null;\n\n   /**\n   * The custom template, if any, that should be used when rendering a row collapse indicator.\n   */\n   @ContentChild(IgxRowCollapsedIndicatorDirective, { read: TemplateRef })\n   public rowCollapsedIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n    * The custom template, if any, that should be used when rendering a header expand indicator.\n    */\n   @ContentChild(IgxHeaderExpandIndicatorDirective, { read: TemplateRef })\n   public headerExpandIndicatorTemplate: TemplateRef<any> = null;\n\n   /**\n   * The custom template, if any, that should be used when rendering a header collapse indicator.\n   */\n   @ContentChild(IgxHeaderCollapseIndicatorDirective, { read: TemplateRef })\n   public headerCollapseIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxDragIndicatorIconDirective, { read: TemplateRef, descendants: false })\n    public dragIndicatorIconTemplates: QueryList<TemplateRef<any>>;\n\n    /**\n    * The custom template, if any, that should be used when rendering the row drag indicator icon\n    */\n    public get dragIndicatorIconTemplate(): TemplateRef<any> {\n        return this._customDragIndicatorIconTemplate || this.dragIndicatorIconTemplates.first;\n    }\n\n    public set dragIndicatorIconTemplate(val: TemplateRef<any>) {\n        this._customDragIndicatorIconTemplate = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowInEditMode(): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        const editRowState = this.crudService.row;\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.id) : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = this.navigation.gridOrderedColumns.findIndex(e => e.editable);\n        return index !== -1 ? index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get lastEditableColumnIndex(): number {\n        const orderedColumns = this.navigation.gridOrderedColumns;\n        const index = orderedColumns.reverse().findIndex(e => e.editable);\n        return index !== -1 ? orderedColumns.length - 1 - index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective)\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid');\n    }\n\n    get bannerClass(): string {\n        const position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';\n        return `${this.getComponentDensityClass('igx-banner')} ${position}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    get filteringPipeTrigger(): number {\n        return this._filteringPipeTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    get summaryPipeTrigger(): number {\n        return this._summaryPipeTrigger;\n    }\n\n    /**\n     * Returns the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * const sortingState = this.grid.sortingExpressions;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * Sets the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.sortingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Desc,\n     *     ignoreCase: true\n     * }];\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(sortingExpressions)]=\"model.sortingExpressions\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = cloneArray(value);\n        this.sortingExpressionsChange.emit(this._sortingExpressions);\n        this.notifyChanges();\n    }\n\n    /**\n     * Emitted before sorting is performed. Returns the sorting expressions.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (sortingExpressionsChange)=\"sortingExprChange($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingExprChange(event: ISortingExpression[]){\n     *     const sortingExpressions = event;\n     * }\n     * ```\n     * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public sortingExpressionsChange = new EventEmitter<ISortingExpression[]>();\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.hasColumnLayouts ?\n                this.columnList.reduce((acc, col) => Math.max(acc, col.rowStart), 0) :\n                this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Returns the number of hidden `IgxColumnComponent`.\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const hiddenColText = this.grid.hiddenColumnsText;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const pinnedText = this.grid.pinnedColumnsText;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden\n    */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    private _filteredSortedData = null;\n    /**\n     * @hidden\n    */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef })\n    private toolbarHtml: ElementRef = null;\n\n    /**\n     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.\n     * ```typescript\n     * const toolbarGrid = this.grid.showToolbar;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n\n    /**\n     * Shows or hides the `IgxGridComponent`'s toolbar.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the toolbar's title.\n     * ```typescript\n     * const toolbarTitle  = this.grid.toolbarTitle;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    /**\n     * Sets the toolbar's title.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to MS Excel is enabled or disabled.\n     * ```typescript\n     * cosnt excelExporter = this.grid.exportExcel;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    /**\n     * Enable or disable the option for exporting to MS Excel.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to CSV is enabled or disabled.\n     * ```typescript\n     * const exportCsv = this.grid.exportCsv;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n\n    /**\n     * Enable or disable the option for exporting to CSV.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the main export button.\n     * ```typescript\n     * const exportText = this.grid.exportText;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    /**\n     * Sets the textual content for the main export button.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the MS Excel export button.\n     * ```typescript\n     * const excelText = this.grid.exportExcelText;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n\n    /**\n     * Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the CSV export button.\n     * ```typescript\n     * const csvText = this.grid.exportCsvText;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n\n    /**\n     * Sets the textual content for the CSV export button.\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Controls the copy behavior of the grid.\n     */\n    @Input()\n    clipboardOptions = {\n        /**\n         * Enables/disables the copy behavior\n         */\n        enabled: true,\n        /**\n         * Include the columns headers in the clipboard output.\n         */\n        copyHeaders: true,\n        /**\n         * Apply the columns formatters (if any) on the data in the clipboard output.\n         */\n        copyFormatters: true,\n        /**\n         * The separator used for formatting the copy output. Defaults to `\\t`.\n         */\n        separator: '\\t'\n    };\n\n    /**\n     * Returns the current cell selection state, which can be none, single or multiple\n     * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    get cellSelection() {\n        return this._cellSelectionMode;\n    }\n\n    /**\n     * Allows you to set cell selection mode\n     * By default the cell selection mode is multiple\n     * @param selectionMode: GridSelectionMode\n     * @memberof IgxGridBaseDirective\n     */\n    set cellSelection(selectionMode:  GridSelectionMode) {\n        this._cellSelectionMode = selectionMode;\n        if (this.gridAPI.grid) {\n            this.selectionService.clear(true);\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Returns the current row selection state, which can be none, single or multiple\n     * @memberof IgxGridBaseDirective\n     */\n    @WatchChanges()\n    @Input()\n    get rowSelection() {\n        return this._rowSelectionMode;\n    }\n\n    /**\n     * Allows you to set row selection mode\n     * By default the row selection mode is none\n     * @param selectionMode: GridSelectionMode\n     * @memberof IgxGridBaseDirective\n     */\n    set rowSelection(selectionMode:  GridSelectionMode) {\n        this._rowSelectionMode = selectionMode;\n        if (this.gridAPI.grid && this.columnList) {\n            this.selectionService.clearAllSelectedRows();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public rowEditMessage;\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    /**\n     * Emitted when making a range selection either through\n     * drag selection or through keyboard selection.\n     */\n    @Output()\n    onRangeSelection = new EventEmitter<GridSelectionRange>();\n\n    /**\n     * @hidden\n     */\n    public pagingState;\n    /**\n     * @hidden\n     */\n    public calcWidth: number;\n    /**\n     * @hidden\n     */\n    public calcHeight = 0;\n    /**\n     * @hidden\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden\n     */\n    public draggedColumn: IgxColumnComponent;\n\n\n    /**\n     * @hidden\n     */\n    public disableTransitions = false;\n\n    /**\n     * @hidden\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    /**\n     * @hidden\n     */\n    public columnWidthSetByUser = false;\n\n    data: any[];\n    filteredData: any[];\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _hideRowSelectors = false;\n    /**\n     * @hidden\n     */\n    protected _rowDrag = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _filteringPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _advancedFilteringExpressionsTree: IFilteringExpressionsTree;\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n\n\n    /**\n     * @hidden\n     */\n    protected _hasVisibleColumns;\n    protected _allowFiltering = false;\n    protected _allowAdvancedFiltering = false;\n    protected _filterMode = FilterMode.quickFilter;\n\n    protected observer: ResizeObserver = new ResizeObserver(() => {});\n\n    protected resizeNotify = new Subject();\n\n\n    private columnListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    private _rowHeight;\n    protected _baseFontSize: number;\n    private _horizontalForOfs: Array<IgxGridForOfDirective<any>> = [];\n    private _multiRowLayoutRowSize = 1;\n    protected _loadingId;\n    protected _expansionStates: Map<any, boolean> = new Map<any, boolean>();\n    protected _defaultExpandState = false;\n    // Caches\n    private _totalWidth = NaN;\n    private _pinnedVisible = [];\n    private _unpinnedVisible = [];\n    private _pinnedWidth = NaN;\n    private _unpinnedWidth = NaN;\n    private _visibleColumns = [];\n    private _columnGroups = false;\n    protected _headerFeaturesWidth = NaN;\n\n    private _columnWidth: string;\n\n    protected _defaultTargetRecordNumber = 10;\n\n    private _summaryPosition = GridSummaryPosition.bottom;\n    private _summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;\n    private _cellSelectionMode = GridSelectionMode.multiple;\n    private _rowSelectionMode = GridSelectionMode.none;\n\n    private rowEditPositioningStrategy = new RowEditPositionStrategy({\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    private verticalScrollHandler = (event) => {\n        this.verticalScrollContainer.onScroll(event);\n        if (isEdge()) { this.wheelHandler(false); }\n        this.disableTransitions = true;\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n            });\n\n            if (this.rowEditable) {\n                this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n            }\n        });\n        this.disableTransitions = false;\n\n        this.hideOverlays();\n    }\n\n    private horizontalScrollHandler = (event) => {\n        const scrollLeft = event.target.scrollLeft;\n        if (isEdge()) { this.wheelHandler(true); }\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        this.cdr.markForCheck();\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n            });\n        });\n\n        this.hideOverlays();\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public isDetailRecord(rec) {\n        return false;\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public isGroupByRecord(rec) {\n        return false;\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public get hasDetails() {\n        return false;\n    }\n\n    /**\n     * Returns the state of the grid virtualization, including the start index and how many records are rendered.\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public hideOverlays() {\n        this.overlayIDs.forEach(overlayID => {\n            this.overlayService.hide(overlayID);\n            this.overlayService.onClosed.pipe(\n                filter(o => o.id === overlayID),\n                takeUntil(this.destroy$)).subscribe(() => {\n                    this.nativeElement.focus();\n                });\n        });\n    }\n\n    private keydownHandler = (event) => {\n        const key = event.key.toLowerCase();\n        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {\n            event.preventDefault();\n            if (key === 'pagedown') {\n                this.verticalScrollContainer.scrollNextPage();\n                this.nativeElement.focus();\n            } else if (key === 'pageup') {\n                this.verticalScrollContainer.scrollPrevPage();\n                this.nativeElement.focus();\n            }\n        }\n    }\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        public crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        protected gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        protected resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        protected viewRef: ViewContainerRef,\n        public navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n            this.cdr.detach();\n    }\n\n    _setupServices() {\n        this.gridAPI.grid = this;\n        this.crudService.grid = this;\n        this.selectionService.grid = this;\n        this.navigation.grid = this;\n        this.filteringService.grid = this;\n        this.summaryService.grid = this;\n    }\n\n    _setupListeners() {\n        const destructor = takeUntil<any>(this.destroy$);\n\n        this.onRowAdded.pipe(destructor).subscribe(args => this.refreshGridState(args));\n        this.onRowDeleted.pipe(destructor).subscribe(args => {\n            this.summaryService.deleteOperation = true;\n            this.summaryService.clearSummaryCache(args);\n        });\n\n        this.transactions.onStateUpdate.pipe(destructor).subscribe(() => {\n            this.selectionService.clearHeaderCBState();\n            this.summaryService.clearSummaryCache();\n            this._pipeTrigger++;\n            this.notifyChanges();\n            if (this.transactions.getAggregatedChanges(false).length === 0) {\n                // Needs better check, calling 'transactions.clear()' will also trigger this\n                if (this.gridAPI.atInexistingPage()) {\n                    this.page--;\n                }\n            }\n        });\n\n        this.resizeNotify.pipe(destructor, filter(() => !this._init), throttleTime(100))\n            .subscribe(() => {\n                this.zone.run(() => {\n                    this.notifyChanges(true);\n                });\n            });\n\n        this.onPagingDone.pipe(destructor).subscribe(() => {\n            this.endEdit(true);\n            this.selectionService.clear(true);\n        });\n\n        this.onColumnMoving.pipe(destructor).subscribe(() => this.endEdit(true));\n        this.onColumnResized.pipe(destructor).subscribe(() => this.endEdit(true));\n\n        this.overlayService.onOpening.pipe(destructor).subscribe((event) => {\n            if (this._advancedFilteringOverlayId === event.id) {\n                const instance = event.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n                if (instance) {\n                    instance.initialize(this, this.overlayService, event.id);\n                }\n            }\n        });\n\n        this.overlayService.onOpened.pipe(destructor).subscribe((event) => {\n            // do not hide the advanced filtering overlay on scroll\n            if (this._advancedFilteringOverlayId === event.id) {\n                const instance = event.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n                if (instance) {\n                    instance.setAddButtonFocus();\n                }\n                return;\n            }\n\n            if (this.overlayService.getOverlayById(event.id).settings.outlet === this.outletDirective &&\n                this.overlayIDs.indexOf(event.id) < 0) {\n                this.overlayIDs.push(event.id);\n            }\n        });\n\n        this.overlayService.onClosed.pipe(destructor, filter(() => !this._init)).subscribe((event) => {\n            if (this._advancedFilteringOverlayId === event.id) {\n                this._advancedFilteringOverlayId = null;\n                return;\n            }\n\n            const ind = this.overlayIDs.indexOf(event.id);\n            if (ind !== -1) {\n                this.overlayIDs.splice(ind, 1);\n            }\n        });\n\n        this.verticalScrollContainer.onDataChanging.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {\n            const shouldRecalcSize = this.isPercentHeight &&\n             ( !this.calcHeight || this.calcHeight === this.getDataBasedBodyHeight() ||\n              this.calcHeight === this.renderedRowHeight * this._defaultTargetRecordNumber);\n            if (shouldRecalcSize) {\n                this.calculateGridHeight();\n                $event.containerSize = this.calcHeight;\n            }\n            this.evaluateLoadingState();\n        });\n\n        this.verticalScrollContainer.onScrollbarVisibilityChanged.pipe(destructor, filter(() => !this._init)).subscribe(() => {\n            // called to recalc all widths that may have changes as a result of\n            // the vert. scrollbar showing/hiding\n            this.notifyChanges(true);\n        });\n\n        this.verticalScrollContainer.onContentSizeChange.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {\n            this.calculateGridSizes(false);\n        });\n\n        this.onDensityChanged.pipe(destructor).subscribe(() => {\n            this._headerFeaturesWidth = NaN;\n            this.summaryService.summaryHeight = 0;\n            this.endEdit(true);\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n        this._setupServices();\n        this._setupListeners();\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this.width && this.width.indexOf('%') === -1 ? parseInt(this.width, 10) : 0;\n        this.shouldGenerate = this.autoGenerate;\n        this._scrollWidth = this.getScrollWidth();\n    }\n\n    protected setupColumns() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n        this.columnListDiffer.diff(this.columnList);\n\n        this.columnList.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxColumnComponent>) => { this.onColumnsChanged(change); });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnsCaches() {\n        this.columnList.forEach(column => column.resetCaches());\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetForOfCache() {\n        const firstVirtRow = this.dataRowList.first;\n        if (firstVirtRow) {\n            if (this._cdrRequests) {\n                firstVirtRow.virtDirRow.cdr.detectChanges();\n            }\n            firstVirtRow.virtDirRow.assumeMaster();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnCollections() {\n        this._visibleColumns.length = 0;\n        this._pinnedVisible.length = 0;\n        this._unpinnedVisible.length = 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCachedWidths() {\n        this._unpinnedWidth = NaN;\n        this._pinnedWidth = NaN;\n        this._totalWidth = NaN;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches(recalcFeatureWidth = true) {\n        if (recalcFeatureWidth) {\n            this._headerFeaturesWidth = NaN;\n        }\n        this.resetForOfCache();\n        this.resetColumnsCaches();\n        this.resetColumnCollections();\n        this.resetCachedWidths();\n        this.hasVisibleColumns = undefined;\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.setupColumns();\n    }\n\n    public _setupRowObservers() {\n        const elementFilter = (item: IgxRowDirective<any> | IgxSummaryRowComponent) => this.isDefined(item.nativeElement.parentElement);\n        const extractForOfs = pipe(map((collection: any[]) => collection.filter(elementFilter).map(item => item.virtDirRow)));\n        const rowListObserver = extractForOfs(this._dataRowList.changes);\n        const summaryRowObserver = extractForOfs(this._summaryRowList.changes);\n\n        combineLatest([rowListObserver, summaryRowObserver]).pipe(takeUntil(this.destroy$))\n            .subscribe(([row, summary]) => this._horizontalForOfs = [...row, ...summary]);\n\n        this._horizontalForOfs = [\n            ...this._dataRowList.filter(elementFilter).map(item => item.virtDirRow),\n            ...this._summaryRowList.filter(elementFilter).map(item => item.virtDirRow)\n        ];\n    }\n\n    public _zoneBegoneListeners() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('keydown', this.keydownHandler);\n            this.verticalScrollContainer.getScroll().addEventListener('scroll', this.verticalScrollHandler);\n            this.headerContainer.getScroll().addEventListener('scroll', this.horizontalScrollHandler);\n\n            this.observer = new ResizeObserver(() => this.resizeNotify.next());\n            this.observer.observe(this.nativeElement);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.initPinning();\n        this.calculateGridSizes();\n        this._init = false;\n        this.cdr.reattach();\n        this._setupRowObservers();\n        this._zoneBegoneListeners();\n\n        const vertScrDC = this.verticalScrollContainer.displayContainer;\n        vertScrDC.addEventListener('scroll', this.scrollHandler);\n        vertScrDC.addEventListener('wheel', () => this.wheelHandler());\n\n    }\n\n    public notifyChanges(repaint = false) {\n        this._cdrRequests = true;\n        this._cdrRequestRepaint = repaint;\n        this.cdr.markForCheck();\n    }\n\n    protected resetNotifyChanges() {\n        this._cdrRequestRepaint = false;\n        this._cdrRequests = false;\n    }\n\n    public ngDoCheck() {\n        super.ngDoCheck();\n        if (this._init) {\n            return;\n        }\n\n        if (this._cdrRequestRepaint) {\n            this.resetNotifyChanges();\n            this.calculateGridSizes();\n            this.refreshSearch(true);\n            return;\n        }\n\n        if (this._cdrRequests) {\n            this.resetNotifyChanges();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n    */\n    public getDragGhostCustomTemplate() {\n        if (this.dragGhostCustomTemplates && this.dragGhostCustomTemplates.first) {\n            return this.dragGhostCustomTemplates.first;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.tmpOutlets.forEach((tmplOutlet) => {\n            tmplOutlet.cleanCache();\n        });\n\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n\n        if (this._advancedFilteringOverlayId) {\n            this.overlayService.hide(this._advancedFilteringOverlayId);\n        }\n\n        this.zone.runOutsideAngular(() => {\n            this.observer.disconnect();\n            this.nativeElement.removeEventListener('keydown', this.keydownHandler);\n            this.verticalScrollContainer.getScroll().removeEventListener('scroll', this.verticalScrollHandler);\n            this.headerContainer.getScroll().removeEventListener('scroll', this.horizontalScrollHandler);\n            const vertScrDC = this.verticalScrollContainer.displayContainer;\n            vertScrDC.removeEventListener('scroll', this.scrollHandler);\n            vertScrDC.removeEventListener('wheel', () => this.wheelHandler());\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = args.column ? this.columnList.find((c) => c === args.column) : undefined;\n\n        if (!col) {\n            return;\n        }\n\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     * Returns a list of key-value pairs [row ID, expansion state]. Includes only states that differ from the default one.\n     * ```typescript\n     * const expansionStates = this.grid.expansionStates;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n     /**\n     * Sets a list of key-value pairs [row ID, expansion state].\n     * ```typescript\n     * const states = new Map<any, boolean>();\n     * states.set(1, true);\n     * this.grid.expansionStates = states;\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"data\" [(expansionStates)]=\"model.expansionStates\">\n     * <ng-template igxGridDetail let-dataItem>\n     * <div *ngIf=\"dataItem.Category\">\n     *  <header>{{dataItem.Category?.CategoryName}}</header>\n     * <span>{{dataItem.Category?.Description}}</span>\n     * </div>\n     * </ng-template>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public set expansionStates(value) {\n        this._expansionStates = new Map<any, boolean>(value);\n        this.expansionStatesChange.emit(this._expansionStates);\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n    }\n\n   /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxGridBaseDirective\n    */\n    public expandAll() {\n        this._defaultExpandState = true;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n   /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxGridBaseDirective\n    */\n    public collapseAll() {\n        this._defaultExpandState = false;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Expands the row by its id. ID is either the primaryKey value or the data record instance.\n     * ```typescript\n     * this.grid.expandRow(rowID);\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public expandRow(rowID: any) {\n        this.gridAPI.set_row_expansion_state(rowID, true);\n    }\n\n    /**\n     * Collapses the row by its id. ID is either the primaryKey value or the data record instance.\n     * ```typescript\n     * this.grid.collapseRow(rowID);\n     * ```\n\t * @memberof IgxGridBaseDirective\n    */\n    public collapseRow(rowID: any) {\n        this.gridAPI.set_row_expansion_state(rowID, false);\n    }\n\n\n    /**\n     * Toggles the row by its id. ID is either the primaryKey value or the data record instance.\n     * ```typescript\n     * this.grid.toggleRow(rowID);\n     * ```\n\t * @memberof IgxGridBaseDirective\n    */\n    public toggleRow(rowID: any) {\n        const rec = this.gridAPI.get_rec_by_id(rowID);\n        const state = this.gridAPI.get_row_expansion_state(rec);\n        this.gridAPI.set_row_expansion_state(rowID, !state);\n    }\n\n    public getDefaultExpandState(rec: any) {\n        return this._defaultExpandState;\n    }\n\n    /**\n     * Returns the native element of the `IgxGridComponent`.\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.outletDirective;\n    }\n\n    /**\n     * Returns the `IgxGridComponent`'s rows height.\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get defaultRowHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.compact:\n                return 32;\n            default:\n                return 50;\n        }\n    }\n\n    get defaultSummaryHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 30;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 36;\n        }\n    }\n\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n\t * @memberof IgxGridBaseDirective\n     */\n    get defaultHeaderGroupMinWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 32;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 48;\n        }\n    }\n\n    public paginatorClassName(): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-paginator--cosy';\n            case DisplayDensity.compact:\n                return 'igx-paginator--compact';\n            default:\n                return 'igx-paginator';\n        }\n    }\n\n    /**\n     * Returns the current width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get pinnedWidth() {\n        if (!isNaN(this._pinnedWidth)) { return this._pinnedWidth; }\n        this._pinnedWidth = this.getPinnedWidth();\n        return this._pinnedWidth;\n    }\n\n    /**\n     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get unpinnedWidth() {\n        if (!isNaN(this._unpinnedWidth)) { return this._unpinnedWidth; }\n        this._unpinnedWidth = this.getUnpinnedWidth();\n        return this._unpinnedWidth;\n    }\n\n    get isHorizontalScrollHidden() {\n        const diff = this.unpinnedWidth - this.totalWidth;\n        return this.width === null || diff >= 0;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     */\n    public featureColumnsWidth(expander?: ElementRef) {\n        if (Number.isNaN(this._headerFeaturesWidth)) {\n            const rowSelectArea = this.headerSelectorContainer ?\n                this.headerSelectorContainer.nativeElement.getBoundingClientRect().width : 0;\n            const rowDragArea = this.rowDraggable && this.headerDragContainer ?\n                this.headerDragContainer.nativeElement.getBoundingClientRect().width : 0;\n            const groupableArea = this.headerGroupContainer ?\n                this.headerGroupContainer.nativeElement.getBoundingClientRect().width : 0;\n            const expanderWidth = expander ? expander.nativeElement.getBoundingClientRect().width : 0;\n            this._headerFeaturesWidth = rowSelectArea + rowDragArea + groupableArea + expanderWidth;\n        }\n        return this._headerFeaturesWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    get summariesMargin() {\n        return this.featureColumnsWidth();\n    }\n\n    /**\n     * Returns an array of `IgxColumnComponent`s.\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Returns an array of the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        if (this._pinnedVisible.length) {\n            return this._pinnedVisible;\n        }\n        this._pinnedVisible = this._pinnedColumns.filter(col => !col.hidden);\n        return this._pinnedVisible;\n    }\n\n    /**\n     * Returns an array of unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        if (this._unpinnedVisible.length) {\n            return this._unpinnedVisible;\n        }\n        this._unpinnedVisible = this._unpinnedColumns.filter((col) => !col.hidden);\n        return this._unpinnedVisible;\n    }\n\n    /**\n     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.\n\t * @memberof IgxGridBaseDirective\n     */\n    public getHeaderGroupWidth(column: IgxColumnComponent): string {\n        if (this.hasColumnLayouts) {\n            return '';\n        }\n        const colWidth = column.width;\n        const minWidth = this.defaultHeaderGroupMinWidth;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (!isPercentageWidth && parseInt(colWidth, 10) < minWidth) {\n            return minWidth + 'px';\n        }\n\n        return colWidth;\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     * @memberof IgxGridBaseDirective\n     */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    /**\n     * Returns the `IgxRowDirective` by index.\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     * @memberof IgxGridBaseDirective\n     */\n    public getRowByIndex(index: number): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        return this.gridAPI.get_row_by_index(index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     * @memberof IgxGridBaseDirective\n     */\n    public getRowByKey(keyValue: any): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        return this.gridAPI.get_row_by_key(keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        if (this._visibleColumns.length) {\n            return this._visibleColumns;\n        }\n        this._visibleColumns = this.columnList.filter(c => !c.hidden);\n        return this._visibleColumns;\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     * @memberof IgxGridBaseDirective\n     */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(rowIndex, columnId);\n        }\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * Requires that the primaryKey property is set.\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     * @memberof IgxGridBaseDirective\n     */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(rowSelector, columnField);\n    }\n\n    /**\n     * Returns the total number of pages.\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return -1;\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Returns the total number of records.\n     * Only functions when paging is enabled.\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get totalRecords(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countRecords;\n        }\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get totalWidth(): number {\n        if (!isNaN(this._totalWidth)) { return this._totalWidth; }\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].calcWidth, 10) || 0;\n        }\n        this._totalWidth = totalWidth;\n        return totalWidth;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showRowSelectors(): boolean {\n        return this.isRowSelectable  && this.hasVisibleColumns && !this.hideRowSelectors;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showDragIcons(): boolean {\n        return this.rowDraggable && this.columns.length > this.hiddenColumnsCount;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        const fromIndex = list.indexOf(from);\n        let toIndex = list.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n            if (toIndex < 0) {\n                toIndex = 0;\n            }\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _reorderColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition, columnCollection: any[]) {\n        let dropIndex = columnCollection.indexOf(to);\n\n        if (to.columnGroup) {\n            dropIndex += to.allChildren.length;\n        }\n\n        if (position === DropPosition.BeforeDropTarget) {\n            dropIndex--;\n        }\n\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n        }\n\n        columnCollection.splice(dropIndex, 0, ...columnCollection.splice(columnCollection.indexOf(from), 1));\n    }\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        const fromIndex = buffer.indexOf(from);\n        let toIndex = buffer.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));\n        parent.children.reset(buffer);\n    }\n    /**\n     * Moves a column to the specified drop target.\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n\t  * @memberof IgxGridBaseDirective\n\t  */\n    public moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos: DropPosition = DropPosition.None) {\n\n        let position = pos;\n        const fromIndex = column.visibleIndex;\n        const toIndex = dropTarget.visibleIndex;\n\n        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {\n            position = DropPosition.BeforeDropTarget;\n        } else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {\n            position = DropPosition.AfterDropTarget;\n        } else {\n            position = DropPosition.None;\n        }\n\n\n        if ((column.level !== dropTarget.level) ||\n            (column.topLevelParent !== dropTarget.topLevelParent)) {\n            return;\n        }\n\n        this.endEdit(true);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && column.pinned) {\n            this._reorderColumns(column, dropTarget, position, this._pinnedColumns);\n        }\n\n        if (dropTarget.pinned && !column.pinned) {\n            column.pin();\n            this._reorderColumns(column, dropTarget, position, this._pinnedColumns);\n\n        }\n\n        if (!dropTarget.pinned && column.pinned) {\n            column.unpin();\n            let list = [];\n\n            if (this.pinnedColumns.indexOf(column) === -1 && this.pinnedColumns.indexOf(dropTarget) === -1) {\n                list = this._unpinnedColumns;\n            } else {\n                list = this._pinnedColumns;\n            }\n\n            const fi = list.indexOf(column);\n            const ti = list.indexOf(dropTarget);\n\n            if (pos === DropPosition.BeforeDropTarget && fi < ti) {\n                position = DropPosition.BeforeDropTarget;\n            } else if (pos === DropPosition.AfterDropTarget && fi > ti) {\n                position = DropPosition.AfterDropTarget;\n            } else {\n                position = DropPosition.None;\n            }\n        }\n\n        if (!dropTarget.pinned) {\n            this._reorderColumns(column, dropTarget, position, this._unpinnedColumns);\n        }\n\n        this._moveColumns(column, dropTarget, position);\n        this.notifyChanges();\n        if (this.hasColumnLayouts) {\n            this.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n\n        const args = {\n            source: column,\n            target: dropTarget\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxGridBaseDirective\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public markForCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     * @memberof IgxGridBaseDirective\n     */\n    public addRow(data: any): void {\n        // commit pending states prior to adding a row\n        this.endEdit(true);\n        this.gridAPI.addRowToData(data);\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.notifyChanges();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     * @memberof IgxGridBaseDirective\n     */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        this.gridAPI.deleteRowById(rowId);\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     * @memberof IgxGridBaseDirective\n     */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.isDefined(this.primaryKey)) {\n            const col = this.columnList.toArray().find(c => c.field === column);\n            if (col) {\n                // Simplify\n                const rowData = this.gridAPI.getRowData(rowSelector);\n                const index = this.gridAPI.get_row_index_in_data(rowSelector);\n                // If row passed is invalid\n                if (index < 0) {\n                    return;\n                }\n                const id = {\n                    rowID: rowSelector,\n                    columnID: col.index,\n                    rowIndex: index\n                };\n\n                const cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);\n                const args = this.gridAPI.update_cell(cell, value);\n\n                if (this.crudService.cell && this.crudService.sameCell(cell)) {\n                    if (args.cancel) {\n                        return;\n                    }\n                    this.gridAPI.escape_editMode();\n                }\n                this.cdr.detectChanges();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`, which is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     * @memberof IgxGridBaseDirective\n     */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.isDefined(this.primaryKey)) {\n            const editableCell = this.crudService.cell;\n            if (editableCell && editableCell.id.rowID === rowSelector) {\n                this.gridAPI.escape_editMode();\n            }\n            const row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));\n            this.gridAPI.update_row(row, value);\n\n            // TODO: fix for #5934 and probably break for #5763\n            // consider adding of third optional boolean parameter in updateRow.\n            // If developer set this parameter to true we should call notifyChanges(true), and\n            // vise-versa if developer set it to false we should call notifyChanges(false).\n            // The parameter should default to false\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void {\n        this.endEdit(false);\n        if (expression instanceof Array) {\n            this.gridAPI.sort_multiple(expression);\n        } else {\n            this.gridAPI.sort(expression);\n        }\n        this.onSortingDone.emit(expression);\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     * @memberof IgxGridBaseDirective\n     */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     * @memberof IgxGridBaseDirective\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.filteringService.filterGlobal(value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     * @memberof IgxGridBaseDirective\n     */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *\n     * Disable summaries for the listed columns.\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseDirective\n     */\n    public clearFilter(name?: string) {\n        this.filteringService.clearFilter(name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseDirective\n     */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(name);\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshGridState(args?) {\n        this.endEdit(true);\n        this.selectionService.clearHeaderCBState();\n        this.summaryService.clearSummaryCache(args);\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseDirective\n     */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseDirective\n     */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n\n    /**\n     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     * @memberof IgxGridBaseDirective\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     * @memberof IgxGridBaseDirective\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * Returns how many times the grid contains the last search.\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     * @memberof IgxGridBaseDirective\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.column &&\n                        match.row === activeInfo.row &&\n                        match.index === activeInfo.index) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get hasSummarizedColumns(): boolean {\n        return this.summaryService.hasSummarizedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get rootSummariesEnabled(): boolean {\n        return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasVisibleColumns(): boolean {\n        if (this._hasVisibleColumns === undefined) {\n            return this.columnList ? this.columnList.some(c => !c.hidden) : false;\n        }\n        return this._hasVisibleColumns;\n    }\n\n    set hasVisibleColumns(value) {\n        this._hasVisibleColumns = value;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get hasColumnGroups(): boolean {\n        return this._columnGroups;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.\n     * ```typescript\n     * const layoutGrid = this.grid.hasColumnLayouts;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public get hasColumnLayouts() {\n        return !!this.columnList.some(col => col.columnLayout);\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    get multiRowLayoutRowSize() {\n        return this._multiRowLayoutRowSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        return this.dataLength * this.rowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentWidth() {\n        return this.width && this.width.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isPercentHeight() {\n        return this._height && this._height.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth() {\n        if (!this.columnWidthSetByUser) {\n            this._columnWidth = this.width !== null ? this.getPossibleColumnWidth() : MINIMUM_COLUMN_WIDTH + 'px';\n        }\n        this.columnList.forEach((column: IgxColumnComponent) => {\n            if (this.hasColumnLayouts && parseInt(this._columnWidth, 10)) {\n                const columnWidthCombined = parseInt(this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);\n                column.defaultWidth = columnWidthCombined + 'px';\n            } else {\n                column.defaultWidth = this._columnWidth;\n                column.resetCaches();\n            }\n        });\n        this.resetCachedWidths();\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden @internal\n     * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases\n     */\n    public get renderedRowHeight(): number {\n        return this.rowHeight + 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected calcGridHeadRow() {\n        if (this.maxLevelHeaderDepth) {\n            this._baseFontSize = parseFloat(getComputedStyle(this.document.documentElement).getPropertyValue('font-size'));\n            let minSize = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight / this._baseFontSize;\n            if (this._allowFiltering && this._filterMode === FilterMode.quickFilter) {\n                minSize += (FILTER_ROW_HEIGHT + 1) / this._baseFontSize;\n            }\n            this.theadRow.nativeElement.style.minHeight = `${minSize}rem`;\n        }\n    }\n\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight() {\n        this.calcGridHeadRow();\n        this.summariesHeight = 0;\n        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n        }\n\n        this.calcHeight = this._calculateGridBodyHeight();\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number {\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                this.toolbarHtml.nativeElement.offsetHeight : 0;\n        }\n        return toolbarHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPagingHeight(): number {\n        let pagingHeight = 0;\n        if (this.paging && this.footer) {\n            pagingHeight = this.footer.nativeElement.firstElementChild ?\n                this.footer.nativeElement.offsetHeight : 0;\n        }\n        return pagingHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getFilterCellHeight(): number {\n        const headerGroupNativeEl = (this.headerGroupsList.length !== 0) ?\n                                        this.headerGroupsList[0].element.nativeElement : null;\n        const filterCellNativeEl = (headerGroupNativeEl) ?\n                                    headerGroupNativeEl.querySelector('igx-grid-filtering-cell') : null;\n        return (filterCellNativeEl) ? filterCellNativeEl.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(): number {\n        if (!this._height) {\n            return null;\n        }\n\n        const actualTheadRow = (!this.allowFiltering || (this.allowFiltering && this.filterMode !== FilterMode.quickFilter)) ?\n                                 this.theadRow.nativeElement.offsetHeight - this.getFilterCellHeight() :\n                                 this.theadRow.nativeElement.offsetHeight;\n        const footerHeight = this.summariesHeight || this.tfoot.nativeElement.offsetHeight - this.tfoot.nativeElement.clientHeight;\n        const toolbarHeight = this.getToolbarHeight();\n        const pagingHeight = this.getPagingHeight();\n        const groupAreaHeight = this.getGroupAreaHeight();\n        const renderedHeight = toolbarHeight + actualTheadRow +\n            footerHeight + pagingHeight + groupAreaHeight +\n            this.scr.nativeElement.clientHeight;\n\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('height');\n        let gridHeight = 0;\n\n        if (this.isPercentHeight) {\n            const autoSize = this._shouldAutoSize(renderedHeight);\n            if (autoSize || computed.indexOf('%') !== -1) {\n                const bodyHeight = this.getDataBasedBodyHeight();\n                return bodyHeight > 0 ? bodyHeight : null;\n            }\n            gridHeight = parseInt(computed, 10);\n        } else {\n            gridHeight = parseInt(this._height, 10);\n        }\n        const height = Math.abs(gridHeight - renderedHeight);\n\n        if (height === 0 || isNaN(gridHeight)) {\n            const bodyHeight = this.defaultTargetBodyHeight;\n            return bodyHeight > 0 ? bodyHeight : null;\n        }\n        return height;\n    }\n\n    protected checkContainerSizeChange() {\n        const origHeight = this.nativeElement.parentElement.offsetHeight;\n        this.nativeElement.style.display = 'none';\n        const height = this.nativeElement.parentElement.offsetHeight;\n        this.nativeElement.style.display = '';\n        return origHeight !== height;\n    }\n\n    protected _shouldAutoSize(renderedHeight) {\n        this.tbody.nativeElement.style.display = 'none';\n        let res = !this.nativeElement.parentElement ||\n        this.nativeElement.parentElement.clientHeight === 0 ||\n        this.nativeElement.parentElement.clientHeight === renderedHeight;\n        if (!isChromium()) {\n            // If grid causes the parent container to extend (for example when container is flex)\n            // we should always auto-size since the actual size of the container will continuously change as the grid renders elements.\n           res = this.checkContainerSizeChange();\n        }\n        this.tbody.nativeElement.style.display = '';\n        return res;\n    }\n\n    public get outerWidth() {\n        return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    public getVisibleContentHeight() {\n        let height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n        if (this.hasSummarizedColumns) {\n            height += this.tfoot.nativeElement.clientHeight;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth(baseWidth: number = null) {\n        let computedWidth;\n        if (baseWidth !== null) {\n            computedWidth = baseWidth;\n        } else {\n            computedWidth = this.calcWidth ||\n                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        }\n\n        computedWidth -= this.featureColumnsWidth();\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n\n        // Column layouts related\n        let visibleCols = [];\n        const columnBlocks = this.visibleColumns.filter(c => c.columnGroup);\n        const colsPerBlock = columnBlocks.map(block => block.getInitialChildColumnSizes(block.children));\n        const combinedBlocksSize = colsPerBlock.reduce((acc, item) => acc + item.length, 0);\n        colsPerBlock.forEach(blockCols => visibleCols = visibleCols.concat(blockCols));\n        //\n\n        const columnsWithSetWidths = this.hasColumnLayouts ?\n            visibleCols.filter(c => c.widthSetByUser) :\n            visibleChildColumns.filter(c => c.widthSetByUser);\n\n        const columnsToSize = this.hasColumnLayouts ?\n            combinedBlocksSize - columnsWithSetWidths.length :\n            visibleChildColumns.length - columnsWithSetWidths.length;\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => {\n                const colWidth = curr.width;\n                const widthValue = parseInt(colWidth, 10);\n                const currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?\n                    widthValue / 100 * computedWidth :\n                    widthValue;\n                return prev + currWidth;\n            }, 0);\n\n        // When all columns are hidden, return 0px width\n        if (!sumExistingWidths && !columnsToSize) {\n            return '0px';\n        }\n\n        const columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));\n\n            return columnWidth + 'px';\n        }\n\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth() {\n        let width;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width');\n\n        if (this.isPercentWidth) {\n            /* width in %*/\n            width = computed.indexOf('%') === -1 ? parseInt(computed, 10) : null;\n        } else {\n            width = parseInt(this.width, 10);\n        }\n\n        if (!width && this.nativeElement) {\n            width = this.nativeElement.offsetWidth;\n        }\n\n\n        if (this.width === null || !width) {\n            width = this.getColumnWidthSum();\n        }\n\n        if (this.hasVerticalSroll() && this.width !== null) {\n            width -= this.scrollWidth;\n        }\n        if ((Number.isFinite(width) || width === null) && width !== this.calcWidth) {\n            this.calcWidth = width;\n        }\n        this._derivePossibleWidth();\n    }\n\n    private getColumnWidthSum(): number {\n        let colSum = 0;\n        const  cols = this.hasColumnLayouts ?\n         this.visibleColumns.filter(x => x.columnLayout) : this.visibleColumns.filter(x => !x.columnGroup);\n        cols.forEach((item) => {\n            const isWidthInPercent = item.width && typeof item.width === 'string' && item.width.indexOf('%') !== -1;\n            if (isWidthInPercent) {\n                item.width = item.calcWidth || MINIMUM_COLUMN_WIDTH + 'px';\n            }\n            colSum +=  parseInt((item.width || item.defaultWidth), 10) || MINIMUM_COLUMN_WIDTH;\n        });\n        if (!colSum) {\n            return null;\n        }\n        this.cdr.detectChanges();\n        colSum += this.featureColumnsWidth();\n        return colSum;\n    }\n\n    public hasVerticalSroll() {\n        if (this._init) { return false; }\n        const isScrollable = this.verticalScrollContainer ? this.verticalScrollContainer.isScrollable() : false;\n        return !!(this.calcWidth && this.dataView &&\n            this.dataView.length > 0 &&\n            isScrollable);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.data || (this.data.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        const diff = this.columnListDiffer.diff(change);\n        if (diff) {\n            let added = false;\n            let removed = false;\n\n            this.initColumns(this.columnList);\n\n\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                this.onColumnInit.emit(record.item);\n                added = true;\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent | IgxColumnGroupComponent>) => {\n                const isColumnGroup = record.item instanceof IgxColumnGroupComponent;\n                if (!isColumnGroup) {\n                    // Clear Grouping\n                    this.gridAPI.clear_groupby(record.item.field);\n\n                    // Clear Filtering\n                    this.gridAPI.clear_filter(record.item.field);\n\n                    // Close filter row\n                    if ( this.filteringService.isFilterRowVisible\n                        && this.filteringService.filteredColumn\n                        && this.filteringService.filteredColumn.field === record.item.field) {\n                        this.filteringRow.close();\n                    }\n\n                    // Clear Sorting\n                    this.gridAPI.clear_sort(record.item.field);\n                }\n                removed = true;\n            });\n\n            this.resetCaches();\n\n            if (added || removed) {\n                this.summaryService.clearSummaryCache();\n                Promise.resolve().then(() => {\n                    // `onColumnsChanged` can be executed midway a current detectChange cycle and markForCheck will be ignored then.\n                    // This ensures that we will wait for the current cycle to end so we can trigger a new one and ngDoCheck to fire.\n                    this.notifyChanges(true);\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes(recalcFeatureWidth = true) {\n        /*\n            TODO: (R.K.) This layered lasagne should be refactored\n            ASAP. The reason I have to reset the caches so many times is because\n            after teach `detectChanges` call they are filled with invalid\n            state. Of course all of this happens midway through the grid\n            sizing process which of course, uses values from the caches, thus resulting\n            in a broken layout.\n        */\n        this.resetCaches(recalcFeatureWidth);\n        this.cdr.detectChanges();\n        const hasScroll = this.hasVerticalSroll();\n        this.calculateGridWidth();\n        this.resetCaches(recalcFeatureWidth);\n        this.cdr.detectChanges();\n        this.calculateGridHeight();\n\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.resetChipsArea();\n        }\n\n        this.cdr.detectChanges();\n        // in case scrollbar has appeared recalc to size correctly.\n        if (hasScroll !== this.hasVerticalSroll()) {\n            this.calculateGridWidth();\n            this.cdr.detectChanges();\n        }\n        if (this.zone.isStable) {\n            this.zone.run(() => {\n                this._applyWidthHostBinding();\n                this.cdr.detectChanges();\n            });\n        } else {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.zone.run(() => {\n                    this._applyWidthHostBinding();\n                });\n            });\n        }\n        this.resetCaches(recalcFeatureWidth);\n    }\n\n    private _applyWidthHostBinding() {\n        let width = this._width;\n        if (width === null) {\n            let currentWidth = this.calcWidth;\n            if (this.hasVerticalSroll()) {\n                currentWidth += this.scrollWidth;\n            }\n            width = currentWidth + 'px';\n            this.resetCaches();\n        }\n        this._hostWidth = width;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseDirective\n     */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.calcWidth, 10);\n            }\n        }\n        sum += this.featureColumnsWidth();\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseDirective\n     */\n    protected getUnpinnedWidth(takeHidden = false) {\n        let width = this.isPercentWidth ?\n            this.calcWidth :\n            parseInt(this.width, 10) ||  parseInt(this.hostWidth, 10) || this.calcWidth;\n        if (this.hasVerticalSroll() && !this.isPercentWidth) {\n            width -= this.scrollWidth;\n        }\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(fieldName);\n        if (column) {\n            column.hasSummary = hasSummary;\n            if (summaryOperand) {\n                if (this.rootSummariesEnabled) { this.summaryService.retriggerRootPipe++; }\n                column.summaries = summaryOperand;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions) {\n        expressions.forEach((column) => {\n            const columnName = column && column.fieldName ? column.fieldName : column;\n            this._summaries(columnName, false);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    private getScrollWidth() {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.width = '100px';\n        style.height = '100px';\n        style.position = 'absolute';\n        style.top = '-10000px';\n        style.top = '-10000px';\n        style.overflow = 'scroll';\n        document.body.appendChild(div);\n        const scrollWidth = div.offsetWidth - div.clientWidth;\n        document.body.removeChild(div);\n        return scrollWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const data = this.gridAPI.get_data();\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = this.generateDataFields(data);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = factory.create(this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n\n        this.columnList.reset(columns);\n        if (data && data.length > 0) {\n            this.shouldGenerate = false;\n        }\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return Object.keys(data && data.length !== 0 ? data[0] : []);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n        if (this.hasColumnLayouts) {\n            // Set overall row layout size\n            this.columnList.forEach((col) => {\n                if (col.columnLayout) {\n                    const layoutSize = col.children ?\n                        col.children.reduce((acc, val) => Math.max(val.rowStart + val.gridRowSpan - 1, acc), 1) :\n                        1;\n                    this._multiRowLayoutRowSize = Math.max(layoutSize, this._multiRowLayoutRowSize);\n                }\n            });\n        }\n        if (this.hasColumnLayouts && this.hasColumnGroups) {\n            // invalid configuration - multi-row and column groups\n            // remove column groups\n            const columnLayoutColumns = this.columnList.filter((col) => col.columnLayout || col.columnLayoutChild);\n            this.columnList.reset(columnLayoutColumns);\n        }\n        this._maxLevelHeaderDepth = null;\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.defaultWidth = this.columnWidthSetByUser ? this._columnWidth : column.defaultWidth ? column.defaultWidth : '';\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this.reinitPinStates();\n\n        if (this.hasColumnLayouts) {\n            collection.forEach((column: IgxColumnComponent) => {\n                column.populateVisibleIndexes();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        this._pinnedColumns = (this.hasColumnGroups) ? this.columnList.filter((c) => c.pinned) :\n            this.columnList.filter((c) => c.pinned).sort((a, b) => this._pinnedColumns.indexOf(a) - this._pinnedColumns.indexOf(b));\n        this._unpinnedColumns = this.hasColumnGroups ? this.columnList.filter((c) => !c.pinned) :\n        this.columnList.filter((c) => !c.pinned)\n        .sort((a, b) => this._unpinnedColumns.indexOf(a) - this._unpinnedColumns.indexOf(b));\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public onHeaderSelectorClick(event) {\n        if (!this.isMultiRowSelectionEnabled) { return; }\n        this.selectionService.areAllRowSelected() ?\n            this.selectionService.clearRowSelection(event) : this.selectionService.selectAllRows(event);\n    }\n\n    /**\n     * @hidden\n     */\n    get headSelectorBaseAriaLabel() {\n        if (this._filteringExpressionsTree.filteringOperands.length > 0) {\n            return this.selectionService.areAllRowSelected() ? 'Deselect all filtered' : 'Select all filtered';\n        }\n\n        return this.selectionService.areAllRowSelected() ? 'Deselect all' : 'Select all';\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get totalRowsCountAfterFilter() {\n        if (this.data) {\n            return this.selectionService.allData.length;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Returns the currently transformed paged/filtered/sorted/grouped data, displayed in the grid.\n     * ```typescript\n     *      const dataView = this.grid.dataView;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    get dataView(): any[] {\n        return this.verticalScrollContainer.igxForOf;\n    }\n\n    /**\n     * Get current selection state.\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public selectedRows(): any[] {\n        return this.selectionService.getSelectedRows();\n    }\n\n    /**\n     * Select specified rows by ID.\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     * @memberof IgxGridBaseDirective\n     */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        this.selectionService.selectRowsWithNoEvent(rowIDs, clearCurrentSelection);\n        this.notifyChanges();\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     * @memberof IgxGridBaseDirective\n     */\n    public deselectRows(rowIDs: any[]) {\n        this.selectionService.deselectRowsWithNoEvent(rowIDs);\n        this.notifyChanges();\n    }\n\n    /**\n     * Selects all rows\n     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * ```typescript\n     * this.grid.selectAllRows();\n     * this.grid.selectAllRows(false);\n     * ```\n     * @param onlyFilterData\n\t * @memberof IgxGridBaseDirective\n     */\n    public selectAllRows(onlyFilterData = true) {\n        const data = onlyFilterData && this.filteredData ? this.filteredData : this.gridAPI.get_all_data(true);\n        const rowIDs = this.selectionService.getRowIDs(data).filter(rID => !this.gridAPI.row_deleted_transaction(rID));\n        this.selectRows(rowIDs);\n    }\n\n    /**\n     * Deselects all rows\n     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * @param onlyFilterData\n\t * @memberof IgxGridBaseDirective\n     */\n    public deselectAllRows(onlyFilterData = true) {\n        if (onlyFilterData && this.filteredData && this.filteredData.length > 0) {\n            this.deselectRows(this.selectionService.getRowIDs(this.filteredData));\n        } else {\n            this.selectionService.clearAllSelectedRows();\n            this.notifyChanges();\n        }\n    }\n\n    clearCellSelection(): void {\n        this.selectionService.clear(true);\n        this.notifyChanges();\n    }\n\n    dragScroll(dir: DragScrollDirection): void {\n        const scrollDelta = 48;\n        const horizontal = this.headerContainer.getScroll();\n        const vertical = this.verticalScrollContainer.getScroll();\n        switch (dir) {\n            case DragScrollDirection.LEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                break;\n            case DragScrollDirection.RIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                break;\n            case DragScrollDirection.TOP:\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOM:\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.TOPLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.TOPRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            default:\n                return;\n        }\n        this.wheelHandler();\n    }\n\n    isDefined(arg: any): boolean {\n        return arg !== undefined && arg !== null;\n    }\n\n    selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void {\n        if (!this.isDefined(arg)) {\n            this.clearCellSelection();\n            return;\n        }\n        if (arg instanceof Array) {\n            arg.forEach(range => this.setSelection(range));\n        } else {\n            this.setSelection(arg);\n        }\n        this.notifyChanges();\n    }\n\n    columnToVisibleIndex(field: string | number): number {\n        const visibleColumns = this.visibleColumns;\n        if (typeof field === 'number') {\n            return field;\n        }\n        return visibleColumns.find(column => column.field === field).visibleIndex;\n    }\n\n\n    setSelection(range: GridSelectionRange): void {\n        const startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };\n        const endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };\n\n        this.selectionService.pointerState.node = startNode;\n        this.selectionService.selectRange(endNode, this.selectionService.pointerState);\n        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);\n        this.selectionService.initPointerState();\n    }\n\n    getSelectedRanges(): GridSelectionRange[] {\n        return this.selectionService.ranges;\n    }\n\n\n    protected extractDataFromSelection(source: any[], formatters = false, headers = false): any[] {\n        let columnsArray: IgxColumnComponent[];\n        let record = {};\n        const selectedData = [];\n        const activeEl = this.selectionService.activeElement;\n\n        const selectionMap = Array.from(this.selectionService.selection)\n            .filter((tuple) => tuple[0] < source.length);\n\n        if (this.cellSelection === GridSelectionMode.single && activeEl) {\n            selectionMap.push([activeEl.row, new Set<number>().add(activeEl.column)]);\n        }\n\n        for (const [row, set] of selectionMap) {\n            if (!source[row] || source[row].detailsData !== undefined) {\n                continue;\n            }\n            const temp = Array.from(set);\n            for (const each of temp) {\n                columnsArray = this.getSelectableColumnsAt(each);\n                columnsArray.forEach((col) => {\n                    if (col) {\n                        const key = headers ? col.header || col.field : col.field;\n                        record[key] = formatters && col.formatter ? col.formatter(source[row][col.field])\n                            : source[row][col.field];\n                    }\n                });\n            }\n            if (Object.keys(record).length) {\n                selectedData.push(record);\n            }\n            record = {};\n        }\n        return selectedData;\n    }\n\n    protected getSelectableColumnsAt(index) {\n        if (this.hasColumnLayouts) {\n            const visibleLayoutColumns = this.visibleColumns\n                .filter(col => col.columnLayout)\n                .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            const colLayout = visibleLayoutColumns[index];\n            return colLayout ? colLayout.children.toArray() : [];\n        } else {\n            const visibleColumns = this.visibleColumns\n                .filter(col => !col.columnGroup)\n                .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            return [visibleColumns[index]];\n        }\n    }\n\n    /**\n     *\n     * Returns an array of the current cell selection in the form of `[{ column.field: cell.value }, ...]`.\n     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).\n     * If `headers` is enabled, it will use the column header (if any) instead of the column field.\n     */\n    getSelectedData(formatters = false, headers = false) {\n        const source = this.dataView;\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollHandler = (event) => {\n        this.headerContainer.scrollPosition += event.target.scrollLeft;\n        this.verticalScrollContainer.scrollPosition += event.target.scrollTop;\n        event.target.scrollLeft = 0;\n        event.target.scrollTop = 0;\n    }\n\n    copyHandlerIE() {\n        if (isIE()) {\n            this.copyHandler(null, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public copyHandler(event, ie11 = false) {\n        if (!this.clipboardOptions.enabled || this.crudService.inEditMode) {\n            return;\n        }\n\n        const data = this.getSelectedData(this.clipboardOptions.copyFormatters, this.clipboardOptions.copyHeaders);\n        const ev = { data, cancel: false } as IGridClipboardEvent;\n        this.onGridCopy.emit(ev);\n\n        if (ev.cancel) {\n            return;\n        }\n\n        const transformer = new CharSeparatedValueData(ev.data, this.clipboardOptions.separator);\n        let result = transformer.prepareData();\n\n        if (!this.clipboardOptions.copyHeaders) {\n            result = result.substring(result.indexOf('\\n') + 1);\n        }\n\n        if (ie11) {\n            (window as any).clipboardData.setData('Text', result);\n            return;\n        }\n\n        event.preventDefault();\n\n        /* Necessary for the hiearachical case but will probably have to\n           change how getSelectedData is propagated in the hiearachical grid\n        */\n        event.stopPropagation();\n        event.clipboardData.setData('text/plain', result);\n    }\n\n    /**\n     * This method allows you to navigate to a position\n     * in the grid based on provided `rowindex` and `visibleColumnIndex`,\n     * also to execute a custom logic over the target element,\n     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }\n     * ```typescript\n     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });\n     * ```\n\t * @memberof IgxGridBaseDirective\n     */\n    public navigateTo(rowIndex: number, visibleColIndex = -1, cb: Function = null) {\n        if (rowIndex < 0 || rowIndex > this.dataView.length - 1\n            || (visibleColIndex !== -1 && this.columnList.map(col => col.visibleIndex).indexOf(visibleColIndex) === -1)) {\n            return;\n        }\n        this.wheelHandler();\n        if (this.dataView.slice(rowIndex, rowIndex + 1).find(rec => rec.expression || rec.childGridsData)) {\n            visibleColIndex = -1;\n        }\n        const shouldScrollVertically = this.navigation.shouldPerformVerticalScroll(rowIndex, visibleColIndex);\n        const shouldScrollHorizontally = visibleColIndex !== -1 && !this.navigation.isColumnFullyVisible(visibleColIndex);\n        if (shouldScrollVertically) {\n            this.navigation.performVerticalScrollToCell(rowIndex, visibleColIndex,\n                () => { this.navigateTo(rowIndex, visibleColIndex, cb); });\n        } else if (shouldScrollHorizontally) {\n            this.navigation.performHorizontalScrollToCell(rowIndex, visibleColIndex, false,\n                     () => { this.navigateTo(rowIndex, visibleColIndex, cb); });\n        } else {\n            this.executeCallback(rowIndex, visibleColIndex, cb);\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the next cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseDirective\n    */\n    public getNextCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => a - b) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => a - b);\n        const nextCellIndex = colIndexes.find(index => index > curVisibleColIndex);\n        if (this.dataView.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && nextCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the previous cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseDirective\n    */\n    public getPreviousCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => b - a) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => b - a);\n        const prevCellIndex = colIndexes.find(index => index < curVisibleColIndex);\n        if (this.dataView.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && prevCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    private executeCallback(rowIndex, visibleColIndex = -1, cb: Function = null) {\n        if (!cb) { return; }\n        let targetType, target;\n        const row = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);\n        if (!row) { return; }\n        switch (row.nativeElement.tagName.toLowerCase()) {\n            case 'igx-grid-groupby-row':\n                targetType = GridKeydownTargetType.groupRow;\n                target = row;\n                break;\n            case 'igx-grid-summary-row':\n                targetType = GridKeydownTargetType.summaryCell;\n                target = visibleColIndex !== -1 ?\n                    row.summaryCells.find(c => c.visibleColumnIndex === visibleColIndex) : row.summaryCells.first;\n                break;\n            case 'igx-child-grid-row':\n                targetType = GridKeydownTargetType.hierarchicalRow;\n                target = row;\n                break;\n            default:\n                targetType = GridKeydownTargetType.dataCell;\n                target = visibleColIndex !== -1 ? row.cells.find(c => c.visibleColumnIndex === visibleColIndex) : row.cells.first;\n                break;\n        }\n        const args = { targetType: targetType, target: target };\n        cb(args);\n    }\n\n    private getPrevDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex <= 0) { return currentRowIndex; }\n\n        const prevRow = this.dataView.slice(0, currentRowIndex).reverse()\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return prevRow ? this.dataView.indexOf(prevRow) : currentRowIndex;\n    }\n\n    private getNextDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex === this.dataView.length) { return currentRowIndex; }\n\n        const nextRow = this.dataView.slice(currentRowIndex + 1, this.dataView.length)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return nextRow ? this.dataView.indexOf(nextRow) : currentRowIndex;\n    }\n\n    private isValidPosition(rowIndex, colIndex): boolean {\n        const rows = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).length;\n        const cols = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0).length;\n        if (rows < 1 || cols < 1) { return false; }\n        if (rowIndex > -1 && rowIndex < this.dataView.length &&\n            colIndex > - 1 && colIndex <= this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public wheelHandler = (isScroll = false) => {\n        if (this.document.activeElement &&\n            // tslint:disable-next-line:no-bitwise\n            (this.document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||\n            // tslint:disable-next-line:no-bitwise\n            (this.document.activeElement.\n                compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {\n            (this.document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col._calcWidth;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        this.endEdit(false);\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            this.lastSearchInfo = { ...this.lastSearchInfo };\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column);\n            }\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                column: matchInfo.column,\n                row: matchInfo.row,\n                index: matchInfo.index,\n            });\n\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered sorted data.\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n     * @memberof IgxGridBaseDirective\n     */\n    get filteredSortedData(): any[] {\n        return this._filteredSortedData;\n    }\n    set filteredSortedData(value: any[]) {\n        this._filteredSortedData = value;\n        this.refreshSearch(true);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n\n        this.calculateGridWidth();\n        this.resetCaches();\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                currentPinnedWidth += colWidth;\n                pinnedColumns.push(this._columns[i]);\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number, inCollection = this.filteredSortedData): void {\n        let delayScrolling = false;\n\n        if (this.paging && typeof (row) !== 'number') {\n            const rowIndex = inCollection.indexOf(row);\n            const page = Math.floor(rowIndex / this.perPage);\n\n            if (this.page !== page) {\n                delayScrolling = true;\n                this.page = page;\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof (row) === 'number' ? row : this.dataView.indexOf(row));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof (row) === 'number' ? row : this.dataView.indexOf(row));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number) {\n        let columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n        if (this.pinnedColumns.length) {\n            if (columnIndex >= this.pinnedColumns.length) {\n                columnIndex -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, columnIndex);\n            }\n        } else {\n            this.scrollDirective(virtDir, columnIndex);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        directive.scrollTo(goal);\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n\n        const numberPipe = new IgxDecimalPipeComponent(this.locale);\n        const datePipe = new IgxDatePipeComponent(this.locale);\n        data.forEach((dataRow) => {\n            columnItems.forEach((c) => {\n                const value = c.formatter ? c.formatter(dataRow[c.field]) :\n                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], this.locale) :\n                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], this.locale)\n                            : dataRow[c.field];\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: 0,\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: occurenceIndex++,\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(_group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowDirective<IgxGridBaseDirective & GridType>) {\n        if (!this.rowEditable || !this.rowEditingOverlay || this.rowEditingOverlay.collapsed) {\n            return;\n        }\n        if (!row) {\n            this.toggleRowEditingOverlay(false);\n        } else {\n            this.repositionRowEditingOverlay(row);\n        }\n    }\n\n    /**\n     * Should be called when data and/or isLoading input changes so that the overlay can be\n     * hidden/shown based on the current value of shouldOverlayLoading\n     */\n    protected evaluateLoadingState() {\n        if (this.shouldOverlayLoading) {\n            // a new overlay should be shown\n            const overlaySettings: OverlaySettings = {\n                outlet: this.loadingOutlet,\n                closeOnOutsideClick: false,\n                positionStrategy: new ContainerPositionStrategy()\n            };\n            if (!this._loadingId) {\n                this._loadingId = this.overlayService.attach(this.loadingOverlay, overlaySettings);\n                this.overlayService.show(this._loadingId, overlaySettings);\n            }\n        } else {\n            if (this._loadingId) {\n                this.overlayService.hide(this._loadingId);\n                this._loadingId = null;\n            }\n        }\n    }\n\n    openRowOverlay(id) {\n        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);\n\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;\n        this.rowEditingOverlay.element.addEventListener('wheel', this.rowEditingWheelHandler);\n    }\n\n    /**\n     * @hidden\n     */\n    public closeRowEditingOverlay() {\n        this.rowEditingOverlay.element.removeEventListener('wheel', this.rowEditingWheelHandler);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public repositionRowEditingOverlay(row: IgxRowDirective<IgxGridBaseDirective & GridType>) {\n        if (row && !this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any, useOuter = false) {\n        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        const targetRow = this.gridAPI.get_row_by_key(rowID);\n        if (!targetRow) {\n            return;\n        }\n        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowChangesCount() {\n        if (!this.crudService.row) {\n            return 0;\n        }\n        const rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);\n        return rowChanges ? Object.keys(rowChanges).length : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);\n    }\n\n    endRowTransaction(commit: boolean, row: IgxRow) {\n        row.newData = this.transactions.getAggregatedValue(row.id, true);\n\n        let args = row.createEditEventArgs();\n\n        if (!commit) {\n            this.onRowEditCancel.emit(args);\n            this.transactions.endPending(false);\n        } else {\n            args = this.gridAPI.update_row(row, row.newData);\n        }\n        if (args.cancel) {\n            this.transactions.startPending();\n            return;\n        }\n        this.crudService.endRowEdit();\n        this.closeRowEditingOverlay();\n    }\n\n    /**\n    * @hidden\n    */\n    public gridOutletKeyboardHandler(event) {\n        // TODO: This should be removed after grid keyboard refactoring\n        // call stopPropagation for keydown event for the outlet not to propagate event to the grid\n        event.stopPropagation();\n    }\n\n    // TODO: Refactor\n    /**\n     * Finishes the row transactions on the current row.\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     *\n     * Binding to the event\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.crudService.row;\n        const cell = this.crudService.cell;\n\n        // TODO: Merge the crudService with wht BaseAPI service\n        if (!row && !cell) { return; }\n\n        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();\n\n        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {\n            return;\n        }\n\n        this.endRowTransaction(commit, row);\n\n        const activeCell = this.selectionService.activeElement;\n        if (event && activeCell) {\n            const rowIndex = activeCell.row;\n            const visibleColIndex = activeCell.layout ? activeCell.layout.columnVisibleIndex : activeCell.column;\n            this.navigateTo(rowIndex, visibleColIndex, (c) => {\n                if (c.targetType === GridKeydownTargetType.dataCell && c.target) {\n                    c.target.nativeElement.focus();\n                }\n            });\n        }\n    }\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler = (event: WheelEvent) => {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data());\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    public get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;\n    }\n\n    public hasHorizontalScroll() {\n        return this.totalWidth - this.unpinnedWidth > 0;\n    }\n\n    protected _restoreVirtState(row) {\n        // check virtualization state of data record added from cache\n        // in case state is no longer valid - update it.\n        const rowForOf = row.virtDirRow;\n        const gridScrLeft = rowForOf.getScroll().scrollLeft;\n        const left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);\n        const actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);\n        if (gridScrLeft !== actualScrollLeft) {\n            rowForOf.onHScroll(gridScrLeft);\n            rowForOf.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n\n    /**\n     * @hidden\n     */\n    get shouldOverlayLoading(): boolean {\n        return this.isLoading && this.data && this.data.length > 0;\n    }\n\n    /**\n    * @hidden\n    */\n    public isSummaryRow(rowData): boolean {\n        return rowData.summaries && (rowData.summaries instanceof Map);\n    }\n\n    /** @hidden */\n    public get isMultiRowSelectionEnabled(): boolean {\n        return this.rowSelection === GridSelectionMode.multiple;\n    }\n\n    /** @hidden */\n    public get isRowSelectable(): boolean {\n        return this.rowSelection !== GridSelectionMode.none;\n    }\n\n    /** @hidden */\n    public get isCellSelectable() {\n        return this.cellSelection !== GridSelectionMode.none;\n    }\n\n    public viewDetachHandler(args: ICachedViewLoadedEventArgs) {\n        const context = args.view.context;\n        if (context['templateID'] === 'dataRow') {\n            // some browsers (like FireFox and Edge) do not trigger onBlur when the focused element is detached from DOM\n            // hence we need to trigger it manually when cell is detached.\n            const row = this.getRowByIndex(context.index);\n            const focusedCell = row && row.cells ? row.cells.find(x => x.focused) : false;\n            if (focusedCell) {\n                focusedCell.onBlur();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public cachedViewLoaded(args: ICachedViewLoadedEventArgs) {\n        if (this.hasHorizontalScroll()) {\n            const tmplId = args.context.templateID;\n            const index = args.context.index;\n            args.view.detectChanges();\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                const row = tmplId === 'dataRow' ? this.getRowByIndex(index) : null;\n                const summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.find((sr) => sr.dataRowIndex === index) : null;\n                if (row && row instanceof IgxRowDirective) {\n                    this._restoreVirtState(row);\n                } else if (summaryRow) {\n                    this._restoreVirtState(summaryRow);\n                }\n            });\n        }\n    }\n\n    /**\n     * Opens the advanced filtering dialog.\n     */\n    public openAdvancedFilteringDialog() {\n        if (!this._advancedFilteringOverlayId) {\n            this._advancedFilteringOverlaySettings.positionStrategy.settings.target =\n                (this as any).rootGrid ? (this as any).rootGrid.nativeElement : this.nativeElement;\n            this._advancedFilteringOverlaySettings.outlet = this.outletDirective;\n\n            this._advancedFilteringOverlayId = this.overlayService.attach(\n                IgxAdvancedFilteringDialogComponent,\n                this._advancedFilteringOverlaySettings,\n                {\n                    injector: this.viewRef.injector,\n                    componentFactoryResolver: this.resolver\n                });\n            this.overlayService.show(this._advancedFilteringOverlayId, this._advancedFilteringOverlaySettings);\n        }\n    }\n\n    /**\n     * Closes the advanced filtering dialog.\n     * @param applyChanges indicates whether the changes should be applied\n     */\n    public closeAdvancedFilteringDialog(applyChanges: boolean) {\n        if (this._advancedFilteringOverlayId) {\n            const advancedFilteringOverlay = this.overlayService.getOverlayById(this._advancedFilteringOverlayId);\n            const advancedFilteringDialog = advancedFilteringOverlay.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n\n            if (applyChanges) {\n                advancedFilteringDialog.applyChanges();\n            }\n            advancedFilteringDialog.closeDialog();\n        }\n    }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(expression: IGroupingExpression): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState, groupingState], expression);\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public groupBy_multiple(expressions: IGroupingExpression[]): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.grid.groupingExpressions = groupedCols;\n            this.grid.sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.grid.groupingExpansionState;\n                /* remove expansion states related to the cleared group\n                and all with deeper hierarchy than the cleared group */\n                this.grid.groupingExpansionState = grpExpandState\n                    .filter((val) => {\n                        return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                    });\n            });\n        } else {\n            // clear all\n            this.grid.groupingExpressions = [];\n            this.grid.groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.grid.groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.grid;\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(groupRow: IGroupByRecord) {\n        const grid = this.grid;\n        if (grid.crudService.isInEditMode) {\n            grid.endEdit(true);\n        }\n\n        const expansionState = grid.groupingExpansionState;\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n        }\n        this.grid.groupingExpansionState = [...expansionState];\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    public groupBy_fully_expand_group(groupRow: IGroupByRecord) {\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        const expanded = state ? state.expanded : this.grid.groupsExpanded;\n        if (!expanded) {\n            this.groupBy_toggle_group(groupRow);\n        }\n        if (groupRow.groupParent) {\n            this.groupBy_fully_expand_group(groupRow.groupParent);\n        }\n    }\n\n    protected remove_grouping_expression(fieldName) {\n        const groupingExpressions = this.grid.groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions() {\n        const groupingState = this.grid.groupingExpressions;\n        this.grid.sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    public get_groupBy_record_id(gRow: IGroupByRecord): string {\n        let recordId = '{ ';\n        const hierrarchy = DataUtil.getHierarchy(gRow);\n\n        for (let i = 0; i < hierrarchy.length; i++) {\n            const groupByKey = hierrarchy[i];\n            recordId += `'${groupByKey.fieldName}': '${groupByKey.value}'`;\n\n            if (i < hierrarchy.length - 1) {\n                recordId += ', ';\n            }\n        }\n        recordId += ' }';\n\n        return recordId;\n    }\n\n}\n","import {\n    Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, AfterContentInit, HostBinding, forwardRef, OnInit, AfterViewInit, HostListener\n} from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray, IBaseEventArgs } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective, IgxGridDetailTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\nimport { IgxGridMRLNavigationService } from '../grid-mrl-navigation.service';\nimport { IgxRowIslandAPIService } from '../hierarchical-grid/row-island-api.service';\nimport { FilterMode } from '../common/enums';\nimport { GridType } from '../common/grid.interface';\nimport { DeprecateMethod } from '../../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\nexport interface IGroupingDoneEventArgs extends IBaseEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * **Ignite UI for Angular Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *\n * Example:\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [\n        IgxGridNavigationService,\n        IgxGridSummaryService,\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService,\n        IgxColumnResizingService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ],\n    selector: 'igx-grid',\n    templateUrl: './grid.component.html'\n})\nexport class IgxGridComponent extends IgxGridBaseDirective implements GridType, OnInit, DoCheck, AfterContentInit, AfterViewInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden @internal\n     */\n    public groupingResult: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingMetadata: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingFlatResult: any[];\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _data;\n    private _hideGroupedColumns = false;\n    private _dropAreaMessage = null;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxGridComponent` with an array of data.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n    */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n    }\n\n    /**\n     * Sets the total number of records in the data source.\n     * This property is required for remote grid virtualization to function when it is bound to remote data.\n     * ```typescript\n     * this.grid1.totalItemCount = 55;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the total number of records in the data source.\n     * Works only with remote grid virtualization.\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    private get _gridAPI(): IgxGridAPIService {\n        return this.gridAPI as IgxGridAPIService;\n    }\n    private _filteredData = null;\n\n    private childDetailTemplates: Map<any, any> = new Map();\n\n    /**\n     * Returns the group by state of the `IgxGridComponent`.\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpressions(): IGroupingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    /**\n     * Sets the group by state of the `IgxGridComponent` and emits the `onGroupingDone`\n     * event with the appropriate arguments.\n     * ```typescript\n     * this.grid.groupingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Asc,\n     *     ignoreCase: false\n     * }];\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpressions)]=\"model.groupingExpressions\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpressions(value: IGroupingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: IGroupingExpression[] = this.groupingExpressions;\n        const newExpressions: IGroupingExpression[] = value;\n        this._groupingExpressions = cloneArray(value);\n        this.groupingExpressionsChange.emit(this._groupingExpressions);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.grid) {\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this._gridAPI.arrange_sorting_expressions();\n            this.notifyChanges();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (!this._init && JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: IgxColumnComponent[] = [];\n            const ungroupedCols: IgxColumnComponent[] = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            this.notifyChanges();\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public groupingExpressionsChange = new EventEmitter<IGroupingExpression[]>();\n\n    /**\n     * Returns a list of expansion states for group rows.\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * ```typescript\n     * const groupExpState = this.grid.groupingExpansionState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    /**\n     * Sets a list of expansion states for group rows.\n     * ```typescript\n     *      this.grid.groupingExpansionState = [{\n     *      expanded: false,\n     *      hierarchy: [{ fieldName: 'ID', value: 1 }]\n     *   }];\n     * // You can use DataUtil.getHierarchy(groupRow) to get the group `IgxGridRowComponent` hierarchy.\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpansionState)]=\"model.groupingExpansionState\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpansionState(value) {\n        if (value !== this._groupingExpandState) {\n            this.groupingExpansionStateChange.emit(value);\n        }\n        this._groupingExpandState = value;\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n   *@hidden\n   */\n    @Output()\n    public groupingExpansionStateChange = new EventEmitter<IGroupByExpandState[]>();\n\n    /**\n     * An @Input property that determines whether created groups are rendered expanded or collapsed.\n     * The default rendered state is expanded.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * A hierarchical representation of the group by records.\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * An @Input property that sets whether the grouped columns should be hidden as well.\n     * The default value is \"false\"\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * An @Input property that sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    set dropAreaMessage(value: string) {\n        this._dropAreaMessage = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * An accessor that returns the message displayed inside the GroupBy drop area where columns can be dragged on.\n    */\n    get dropAreaMessage(): string {\n        return this._dropAreaMessage || this.resourceStrings.igx_grid_groupByArea_message;\n    }\n\n    /**\n     * An @Input property that sets the template that will be rendered as a GroupBy drop area.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     * ```ts\n     * @ViewChild('myDropArea', { read: TemplateRef })\n     * public dropAreaRef: TemplateRef<any>;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when a new `IgxColumnComponent` gets grouped/ungrouped, or multiple columns get\n     * grouped/ungrouped at once by using the Group By API.\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * ```typescript\n     * groupingDone(event: IGroupingDoneEventArgs){\n     *     const expressions = event.expressions;\n     *     //the newly grouped columns\n     *     const groupedColumns = event.groupedColumns;\n     *     //the newly ungrouped columns\n     *     const ungroupedColumns = event.ungroupedColumns;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxGridDetailTemplateDirective, { read: IgxGridDetailTemplateDirective, static: false })\n    protected gridDetailsTemplate: IgxGridDetailTemplateDirective;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef, static: true })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * A list of all group rows.\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((item1, item2) => item1.index - item2.index);\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('groupArea')\n    public groupArea: ElementRef;\n\n    @ViewChild('record_template', { read: TemplateRef, static: true })\n    protected recordTemplate: TemplateRef<any>;\n\n    @ViewChild('detail_template_container', { read: TemplateRef, static: true })\n    protected detailTemplateContainer: TemplateRef<any>;\n\n    @ContentChild(IgxGridDetailTemplateDirective, { read: TemplateRef, static: false })\n    public detailTemplate: TemplateRef<any> = null;\n\n    @ViewChild('group_template', { read: TemplateRef, static: true })\n    protected defaultGroupTemplate: TemplateRef<any>;\n\n    @ViewChild('summary_template', { read: TemplateRef, static: true })\n    protected summaryTemplate: TemplateRef<any>;\n\n\n\n\n    /**\n     *@hidden\n     */\n    @Output()\n    private _focusIn = new  EventEmitter<any>();\n    @HostListener('focusin') onFocusIn() {\n        this._focusIn.emit();\n    }\n\n    public getDetailsContext(rowData, index) {\n        return {\n            $implicit: rowData,\n            index: index\n        };\n    }\n\n    public preventContainerScroll(evt) {\n        if (evt.target.scrollTop !== 0 && this.hasDetails) {\n            const activeElem = document.activeElement;\n            this.verticalScrollContainer.addScrollTop(evt.target.scrollTop);\n            evt.target.scrollTop = 0;\n            this.verticalScrollContainer.onChunkLoad.pipe(first()).subscribe(() => {\n                const active = this.selectionService.activeElement;\n                const currRow = (this.navigation as any).getRowByIndex(active.row, '');\n                // check if the focused element was a child of the details view\n                if (this.isDetailRecord(active.row) && currRow && currRow.contains(activeElem)) {\n                    // Some browsers (like Edge/IE) lose focus after scrolling even when the element was in the DOM.\n                    (activeElem as any).focus({ preventScroll: true });\n                    return;\n                }\n                const nextCellTarget = this.navigation.getCellElementByVisibleIndex(active.row, active.column);\n                const nextRowTarget = (this.navigation as any).getRowByIndex(active.row + 1, '');\n                if (nextCellTarget) {\n                    nextCellTarget.focus({ preventScroll: true });\n                } else if (nextRowTarget) {\n                    nextRowTarget.focus({ preventScroll: true });\n                }\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public trackChanges(index, rec) {\n        if (rec.detailsData !== undefined) {\n            return rec.detailsData;\n        }\n        return rec;\n    }\n\n    public detailsViewFocused(container, rowIndex) {\n        this.selectionService.activeElement = {\n            row: rowIndex,\n            column: this.selectionService.activeElement ? this.selectionService.activeElement.column : 0\n        };\n    }\n\n    public detailsKeyboardHandler(event, rowIndex, container) {\n        const colIndex = this.selectionService.activeElement ? this.selectionService.activeElement.column : 0;\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const key = event.key.toLowerCase();\n        const target = event.target;\n        if (key === 'tab') {\n            event.stopPropagation();\n            const lastColIndex = this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex;\n            if (shift && target === container) {\n                // shift + tab from details to data row\n                event.preventDefault();\n                this.navigateTo(rowIndex - 1, lastColIndex,\n                    (args) => args.target.nativeElement.focus());\n            } else if (!shift) {\n                // when the next element is focused via tab check if it is an element outside the details view\n                // if so we have exited the details view and focus should move to the first cell in the next row\n                this._focusIn.pipe(first()).subscribe(() => {\n                    if (!container.contains(document.activeElement)) {\n                      this.navigation.performTab(container, {row: rowIndex, column: lastColIndex});\n                    }\n                });\n            }\n        } else if (key === 'arrowup' && !ctrl && target === container) {\n            this.navigation.navigateUp(container, {row: rowIndex, column: colIndex});\n        } else if (key === 'arrowup' && ctrl && target === container) {\n            this.navigation.navigateTop(colIndex);\n        } else if (key === 'arrowdown' && !ctrl && target === container) {\n            this.navigation.navigateDown(container, {row: rowIndex, column: colIndex});\n        } else if (key === 'arrowdown' && ctrl && target === container) {\n            this.navigation.navigateBottom(colIndex);\n        }\n    }\n\n\n    public get hasDetails() {\n        return !!this.gridDetailsTemplate;\n    }\n\n    /**\n    * @hidden\n    */\n   public getRowTemplate(rowData) {\n        if (this.isGroupByRecord(rowData)) {\n            return this.defaultGroupTemplate;\n        } else if (this.isSummaryRow(rowData)) {\n            return this.summaryTemplate;\n        }  else if (this.hasDetails && this.isDetailRecord(rowData)) {\n                return this.detailTemplateContainer;\n        } else {\n            return this.recordTemplate;\n        }\n   }\n\n   public isDetailRecord(record) {\n    return record.detailsData !== undefined;\n   }\n    /**\n     * @hidden\n     */\n    get groupAreaHostClass(): string {\n        return this.getComponentDensityClass('igx-drop-area');\n    }\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group row.\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group `IgxGridRowComponent`.\n     * ```typescript\n     * this.grid.groupRowTemplate = myRowTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.notifyChanges();\n    }\n\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.notifyChanges();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void {\n        if (this.checkIfNoColumnField(expression)) {\n            return;\n        }\n        this.endEdit(true);\n        if (expression instanceof Array) {\n            this._gridAPI.groupBy_multiple(expression);\n        } else {\n            this._gridAPI.groupBy(expression);\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(name);\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n        this.notifyChanges();\n    }\n\n    /**\n     * Expands the specified group and all of its parent groups.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * this.grid.fullyExpandGroup(this.groupRow);\n     * ```\n     * @memberof IgxGridComponent\n     */\n    public fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._fullyExpandGroup(groupRow);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable && !col.columnGroup);\n    }\n\n    private _setGroupColsVisibility(value) {\n        if (this.columnList.length > 0 && !this.hasColumnLayouts) {\n            this.groupingExpressions.forEach((expr) => {\n                const col = this.getColumnByName(expr.fieldName);\n                col.hidden = value;\n            });\n        }\n    }\n\n    /**\n     * Returns if the grid's group by drop area is visible.\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_fully_expand_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this._groupingExpressions);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return this.groupingExpressions.find(exp => exp.fieldName === fieldName) ? true : false;\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        if (this.isDetailRecord(rowData)) {\n            const cachedData = this.childDetailTemplates.get(rowData.detailsData);\n            const rowID = this.primaryKey ? rowData.detailsData[this.primaryKey] : this.data.indexOf(rowData.detailsData);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData.detailsData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.dataView.indexOf(rowData),\n                    templateID: 'detailRow-' + rowID\n                };\n            } else {\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData.detailsData,\n                    templateID: 'detailRow-' + rowID,\n                    index: this.dataView.indexOf(rowData)\n                };\n            }\n        }\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n     /**\n     * @hidden\n     */\n    public viewCreatedHandler(args) {\n        if (args.context.templateID.indexOf('detailRow') !== -1) {\n            this.childDetailTemplates.set(args.context.$implicit, args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public viewMovedHandler(args) {\n        if (args.context.templateID.indexOf('detailRow') !== -1) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit;\n            const cachedData = this.childDetailTemplates.get(key);\n            cachedData.owner = args.owner;\n        }\n    }\n\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.groupArea.nativeElement.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        if (this.groupingExpressions && this.groupingExpressions.length\n            && typeof(row) !== 'number') {\n            const rowIndex = this.groupingResult.indexOf(row);\n            const groupByRecord = this.groupingMetadata[rowIndex];\n            if (groupByRecord) {\n                this._fullyExpandGroup(groupByRecord);\n            }\n        }\n\n        super.scrollTo(row, column, this.groupingFlatResult);\n    }\n\n    /**\n    * @hidden\n    */\n    public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getGroupByChipTitle(expression: IGroupingExpression): string {\n        const column = this.getColumnByName(expression.fieldName);\n        return (column && column.header) || expression.fieldName;\n    }\n    /**\n     * @hidden\n     */\n    public get iconTemplate() {\n        if (this.groupsExpanded) {\n            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnGroupable(fieldName: string): boolean {\n        const column = this.getColumnByName(fieldName);\n        return column && column.groupable;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (this.allowFiltering && this.hasColumnLayouts) {\n            this.filterMode = FilterMode.excelStyleFilter;\n        }\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n        this._setupNavigationService();\n    }\n    public ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isDetailRecord(rowData)) {\n                const cachedData = this.childDetailTemplates.get(rowData.detailsData);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n    }\n\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.endEdit(true);\n            this.summaryService.updateSummaryCache(args);\n            this._headerFeaturesWidth = NaN;\n        });\n    }\n\n    public ngDoCheck(): void {\n        if (this.groupingDiffer && this.columnList && !this.hasColumnLayouts) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList.length > 0) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        if (this.groupingExpressions.length) {\n            const source = [];\n\n            const process = (record) => {\n                if (record.expression || record.summaries) {\n                    source.push(null);\n                    return;\n                }\n                source.push(record);\n\n            };\n\n            this.dataView.forEach(process);\n            return this.extractDataFromSelection(source, formatters, headers);\n        } else {\n            return super.getSelectedData(formatters, headers);\n        }\n    }\n\n    private _setupNavigationService() {\n        if (this.hasColumnLayouts) {\n            this.navigation = new IgxGridMRLNavigationService();\n            this.navigation.grid = this;\n        }\n    }\n\n    private checkIfNoColumnField(expression: IGroupingExpression | Array<IGroupingExpression> | any): boolean {\n        if (expression instanceof Array) {\n            for (const singleExpression of expression) {\n                if (!singleExpression.fieldName) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return !expression.fieldName;\n    }\n\n}\n","import { Directive, Optional, Input, NgModule, Host, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IGroupingExpression } from '../data-operations/grouping-expression.interface';\nimport { IPagingState } from '../data-operations/paging-state.interface';\nimport { DataType } from '../data-operations/data-util';\nimport { IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand,\n    IgxStringFilteringOperand, IFilteringOperation} from '../data-operations/filtering-condition';\nimport { GridSelectionRange } from './selection/selection.service';\nimport { IGroupByExpandState } from '../data-operations/groupby-expand-state.interface';\nimport { IGroupingState } from '../data-operations/groupby-state.interface';\nimport { IgxGridComponent } from './grid/grid.component';\n\nexport interface IGridState {\n    columns?: IColumnState[];\n    filtering?: IFilteringExpressionsTree;\n    advancedFiltering?: IFilteringExpressionsTree;\n    paging?: IPagingState;\n    sorting?: ISortingExpression[];\n    groupBy?: IGroupingState;\n    cellSelection?: GridSelectionRange[];\n    rowSelection?: any[];\n}\n\nexport interface IGridStateOptions {\n    columns?: boolean;\n    filtering?: boolean;\n    advancedFiltering?: boolean;\n    sorting?: boolean;\n    groupBy?: boolean;\n    paging?: boolean;\n    cellSelection?: boolean;\n    rowSelection?: boolean;\n}\n\nexport interface IColumnState {\n    pinned: boolean;\n    sortable: boolean;\n    filterable: boolean;\n    editable: boolean;\n    sortingIgnoreCase: boolean;\n    filteringIgnoreCase: boolean;\n    headerClasses: string;\n    headerGroupClasses: string;\n    maxWidth: string;\n    groupable: boolean;\n    movable: boolean;\n    hidden: boolean;\n    dataType: DataType;\n    hasSummary: boolean;\n    field: string;\n    width: any;\n    header: string;\n    resizable: boolean;\n    searchable: boolean;\n}\n\nconst COLUMNS = 'columns';\nconst FILTERING = 'filtering';\nconst ADVANCED_FILTERING = 'advancedFiltering';\nconst SORTING = 'sorting';\nconst GROUPBY = 'groupBy';\nconst PAGING = 'paging';\nconst ROW_SELECTION = 'rowSelection';\nconst CELL_SELECTION = 'cellSelection';\n\n@Directive({\n    selector: '[igxGridState]'\n})\nexport class IgxGridStateDirective {\n\n    private _options: IGridStateOptions = {\n        columns: true,\n        filtering: true,\n        advancedFiltering: true,\n        sorting: true,\n        groupBy: true,\n        paging: true,\n        cellSelection: true,\n        rowSelection: true\n    };\n\n    private state: IGridState;\n\n    /**\n     *  An object with options determining if a certain feature state should be saved.\n     *\n     * ```html\n     * <igx-grid [igxGridState]=\"options\"></igx-grid>\n     * ```\n     * ```typescript\n     * public options = {selection: false, advancedFiltering: false};\n     * ```\n     */\n    @Input('igxGridState')\n    public get options(): IGridStateOptions {\n       return this._options;\n    }\n\n    public set options(value: IGridStateOptions) {\n        Object.assign(this._options, value);\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        @Host() @Optional() private grid: IgxGridComponent,\n        private resolver: ComponentFactoryResolver,\n        protected viewRef: ViewContainerRef) { }\n\n    /**\n     * Gets the state of a feature or states of all grid features, unless a certain feature is disabled through the `options` property.\n     * @param `serialize` determines whether the returned object will be serialized to JSON string. Default value is false.\n     * @param `feature` string or array of strings determining the features which state to retrieve. If skipped, returns all.\n     * @returns Returns the serialized to JSON string IGridState object, or the non-serialized IGridState object.\n     * ```html\n     * <igx-grid [igxGridState]=\"options\"></igx-grid>\n     * ```\n     * ```typescript\n     * @ViewChild(IgxGridStateDirective, { static: true }) public state;\n     * let state =  this.state.getState();\n     * ```\n     */\n    public getState(serialize = true, feature?: string | string[]): IGridState | string  {\n        let state: IGridState | string;\n        if (feature) {\n            state = {};\n            if (Array.isArray(feature)) {\n                feature.forEach(f => {\n                    state = Object.assign(state, this.getGridFeature(f));\n                });\n            } else {\n                state = this.getGridFeature(feature);\n            }\n        } else {\n            state = this.getAllGridFeatures();\n        }\n        if (serialize) {\n            state = JSON.stringify(state, this.stringifyCallback);\n            return state as string;\n        } else {\n            return state as IGridState;\n        }\n    }\n\n    /**\n     * Restores grid features' state based on the IGridState object passed as an argument.\n     * @param IGridState object to restore state from.\n     * @returns\n     * ```html\n     * <igx-grid [igxGridState]=\"options\"></igx-grid>\n     * ```\n     * ```typescript\n     * @ViewChild(IgxGridStateDirective, { static: true }) public state;\n     * this.state.setState(gridState);\n     * ```\n     */\n    public setState(state: IGridState | string) {\n        if (typeof state === 'string') {\n            state = JSON.parse(state);\n        }\n        this.state = state as IGridState;\n        this.restoreGridState();\n        this.grid.cdr.detectChanges();\n    }\n\n    /**\n     * The method that calls corresponding methods to restore feature from this.state object.\n     */\n    private restoreGridState() {\n        for (const key of Object.keys(this.state)) {\n            if (this.state[key]) {\n                this.restoreFeature(key, this.state[key]);\n            }\n        }\n    }\n\n    /**\n     * Restores the state of a feature.\n     */\n    private restoreFeature(feature: string, state: IColumnState[] | IPagingState | ISortingExpression[] |\n        IGroupingState | FilteringExpressionsTree | GridSelectionRange[] | any[]) {\n        switch (feature) {\n            case COLUMNS: {\n               this.restoreColumns(state as IColumnState[]);\n               break;\n            }\n            case FILTERING: {\n                this.restoreFiltering(state as FilteringExpressionsTree);\n                break;\n            }\n            case ADVANCED_FILTERING: {\n                this.restoreAdvancedFiltering(state as FilteringExpressionsTree);\n                break;\n            }\n            case SORTING: {\n                this.restoreSorting(state as ISortingExpression[]);\n                break;\n             }\n             case GROUPBY: {\n                this.restoreGroupBy(state as IGroupingState);\n                break;\n             }\n             case PAGING: {\n                this.restorePaging(state as IPagingState);\n                break;\n              }\n              case ROW_SELECTION: {\n                this.restoreRowSelection(state as any[]);\n                break;\n              }\n              case CELL_SELECTION: {\n                this.restoreCellSelection(state as GridSelectionRange[]);\n                break;\n              }\n         }\n    }\n\n    /**\n     * Returns an object containing all grid features state.\n     */\n    private getAllGridFeatures(): IGridState {\n        let gridState: IGridState = {};\n\n        for (const key of Object.keys(this.options)) {\n            if (this.options[key]) {\n                const feature = this.getGridFeature(key);\n                gridState =  Object.assign(gridState, feature);\n            }\n        }\n\n        gridState = Object.assign({}, gridState);\n        return gridState;\n    }\n\n    /**\n     * Restores an object containing the state for a grid feature.\n     * `serialize` param determines whether the returned object will be serialized to a JSON string. Default value is false.,\n     */\n    private getGridFeature(feature: string): IGridState {\n        const state: IGridState = {};\n        switch (feature) {\n            case COLUMNS: {\n               Object.assign(state, this.getColumns());\n               break;\n            }\n            case FILTERING: {\n                Object.assign(state, this.getFiltering());\n                break;\n            }\n            case ADVANCED_FILTERING: {\n                Object.assign(state, this.getAdvancedFiltering());\n                break;\n            }\n            case SORTING: {\n                Object.assign(state, this.getSorting());\n                break;\n             }\n             case GROUPBY: {\n                Object.assign(state, this.getGroupBy());\n                break;\n             }\n             case PAGING: {\n                Object.assign(state, this.getPaging());\n                break;\n              }\n              case ROW_SELECTION: {\n                Object.assign(state, this.getRowSelection());\n                break;\n              }\n              case CELL_SELECTION: {\n                Object.assign(state, this.getCellSelection());\n                break;\n              }\n         }\n         return state;\n    }\n\n    /**\n     * Helper method that creates a new array with the current grid columns.\n     */\n    private getColumns(): IGridState {\n        const gridColumns: IColumnState[] = this.grid.columns.sort(this.sortByVisibleIndex).map((c) => {\n            return {\n                pinned: c.pinned,\n                sortable: c.sortable,\n                filterable: c.filterable,\n                editable: c.editable,\n                sortingIgnoreCase: c.sortingIgnoreCase,\n                filteringIgnoreCase: c.filteringIgnoreCase,\n                headerClasses: c.headerClasses,\n                headerGroupClasses: c.headerGroupClasses,\n                maxWidth: c.maxWidth,\n                groupable: c.groupable,\n                movable: c.movable,\n                hidden: c.hidden,\n                dataType: c.dataType,\n                hasSummary: c.hasSummary,\n                field: c.field,\n                width: c.width,\n                header: c.header,\n                resizable: c.resizable,\n                searchable: c.searchable\n            };\n        });\n        return { columns: gridColumns };\n    }\n\n    private getFiltering(): IGridState {\n        const filteringState = this.grid.filteringExpressionsTree;\n        return { filtering: filteringState };\n    }\n\n    private getAdvancedFiltering(): IGridState {\n        const advancedFiltering = this.grid.advancedFilteringExpressionsTree;\n        return { advancedFiltering: advancedFiltering };\n    }\n\n    private getPaging(): IGridState {\n        const pagingState = this.grid.pagingState;\n        return { paging: pagingState };\n    }\n\n    private getSorting(): IGridState {\n        const sortingState = this.grid.sortingExpressions;\n        sortingState.forEach(s => {\n            delete s.strategy;\n        });\n        return { sorting: sortingState };\n    }\n\n    private getGroupBy(): IGridState {\n        const groupingExpressions = this.grid.groupingExpressions;\n        groupingExpressions.forEach(expr => {\n            delete expr.strategy;\n        });\n        const expansionState = this.grid.groupingExpansionState;\n        const groupsExpanded = this.grid.groupsExpanded;\n\n        return { groupBy: { expressions: groupingExpressions, expansion: expansionState, defaultExpanded: groupsExpanded}  };\n    }\n\n    private getRowSelection(): IGridState {\n        const selection = this.grid.selectedRows();\n        return { rowSelection: selection };\n    }\n\n    private getCellSelection(): IGridState {\n        const selection = this.grid.getSelectedRanges().map(range => {\n            return { rowStart: range.rowStart, rowEnd: range.rowEnd, columnStart: range.columnStart, columnEnd: range.columnEnd };\n        });\n        return { cellSelection: selection };\n    }\n\n    /**\n     * Restores the grid columns by modifying the `columnList` collection of the grid.\n     */\n    private restoreColumns(columnsState: IColumnState[]): void {\n        const newColumns = [];\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        columnsState.forEach((colState) => {\n            const ref = factory.create(this.viewRef.injector);\n            Object.assign(ref.instance, colState);\n            ref.changeDetectorRef.detectChanges();\n            newColumns.push(ref.instance);\n        });\n\n        this.grid.columnList.reset(newColumns);\n        this.grid.columnList.notifyOnChanges();\n    }\n\n    private sortByVisibleIndex(colA: IgxColumnComponent, colB: IgxColumnComponent) {\n          const a = colA.visibleIndex, b = colB.visibleIndex;\n          return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    /**\n     * Restores the grid filtering state, i.e. sets the `filteringExpressionsTree` property value.\n     */\n    private restoreFiltering(state: FilteringExpressionsTree) {\n        const filterTree = this.createExpressionsTreeFromObject(state);\n        this.grid.filteringExpressionsTree = filterTree as FilteringExpressionsTree;\n    }\n\n    /**\n     * Restores the grid advanced filtering state, i.e. sets the `advancedFilteringExpressionsTree` property value.\n     */\n    private restoreAdvancedFiltering(state: FilteringExpressionsTree) {\n        const advFilterTree = this.createExpressionsTreeFromObject(state);\n        this.grid.advancedFilteringExpressionsTree = advFilterTree as FilteringExpressionsTree;\n    }\n\n    /**\n     * Restores the grid sorting state, i.e. sets the `sortingExpressions` property value.\n     */\n    private restoreSorting(state: ISortingExpression[]) {\n        this.grid.sortingExpressions = state;\n    }\n\n    /**\n     * Restores the grid grouping state, i.e. sets the `groupbyExpressions` property value.\n     */\n    private restoreGroupBy(state: IGroupingState) {\n        (this.grid as IgxGridComponent).groupingExpressions = state.expressions as IGroupingExpression[];\n        if ((this.grid as IgxGridComponent).groupsExpanded !== state.defaultExpanded) {\n            this.grid.toggleAllGroupRows();\n        } else {\n            (this.grid as IgxGridComponent).groupingExpansionState = state.expansion as IGroupByExpandState[];\n        }\n    }\n\n    /**\n     * Restores the grid paging state, i.e. sets the `perPage` property value and paginate to index.\n     */\n    private restorePaging(state: IPagingState) {\n        if (this.grid.perPage !== state.recordsPerPage) {\n            this.grid.perPage = state.recordsPerPage;\n            this.grid.cdr.detectChanges();\n        }\n        this.grid.page = state.index;\n    }\n\n    private restoreRowSelection(state: any[]) {\n        this.grid.selectRows(state);\n    }\n\n    private restoreCellSelection(state: GridSelectionRange[]) {\n        state.forEach(r => {\n            const range = { rowStart: r.rowStart, rowEnd: r.rowEnd, columnStart: r.columnStart, columnEnd: r.columnEnd};\n            this.grid.selectRange(range);\n        });\n    }\n\n    /**\n     * This method builds a FilteringExpressionsTree from a provided object.\n     */\n    private createExpressionsTreeFromObject(exprTreeObject: FilteringExpressionsTree): FilteringExpressionsTree {\n        if (!exprTreeObject || !exprTreeObject.filteringOperands) {\n            return null;\n        }\n\n        const expressionsTree = new FilteringExpressionsTree(exprTreeObject.operator, exprTreeObject.fieldName);\n\n        for (const item of exprTreeObject.filteringOperands) {\n            // Check if item is an expressions tree or a single expression.\n            if ((item as FilteringExpressionsTree).filteringOperands) {\n                const subTree = this.createExpressionsTreeFromObject((item as FilteringExpressionsTree));\n                expressionsTree.filteringOperands.push(subTree);\n            } else {\n                const expr = item as IFilteringExpression;\n                let dataType: string;\n                if (this.grid.columnList.length > 0) {\n                    dataType = this.grid.columnList.find(c => c.field === expr.fieldName).dataType;\n                } else {\n                    dataType = this.state[COLUMNS].find(c => c.field === expr.fieldName).dataType;\n                }\n                // when ESF, values are stored in Set.\n                // First those values are converted to an array before returning string in the stringifyCallback\n                // now we need to convert those back to Set\n                if (Array.isArray(expr.searchVal)) {\n                    expr.searchVal = new Set(expr.searchVal);\n                } else {\n                    expr.searchVal = (dataType === 'date') ? new Date(Date.parse(expr.searchVal)) : expr.searchVal;\n                }\n                expr.condition = this.generateFilteringCondition(dataType, expr.condition.name);\n                expressionsTree.filteringOperands.push(expr);\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns the filtering logic function for a given dataType and condition (contains, greaterThan, etc.)\n     */\n    private generateFilteringCondition(dataType: string, name: string): IFilteringOperation {\n        let filters;\n        switch (dataType) {\n            case DataType.Boolean:\n                filters = IgxBooleanFilteringOperand.instance();\n                break;\n            case DataType.Number:\n                filters = IgxNumberFilteringOperand.instance();\n                break;\n            case DataType.Date:\n                filters = IgxDateFilteringOperand.instance();\n                break;\n            case DataType.String:\n            default:\n                filters = IgxStringFilteringOperand.instance();\n                break;\n        }\n        return filters.condition(name);\n    }\n\n    private stringifyCallback(key: string, val: any) {\n        if (key === 'searchVal' && val instanceof Set) {\n            return Array.from(val);\n        }\n        return val;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxGridStateDirective],\n    exports: [IgxGridStateDirective]\n})\nexport class IgxGridStateModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IgxButtonModule } from '../../directives/button/button.directive';\nimport { IgxDatePickerModule } from '../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../icon/index';\nimport { IgxRippleModule } from '../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../input-group/index';\nimport { IgxFocusModule } from '../../directives/focus/focus.directive';\nimport { IgxToggleModule } from '../../directives/toggle/toggle.directive';\nimport { IgxForOfModule } from '../../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxTextHighlightModule } from '../../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../../directives/text-selection/text-selection.directive';\nimport { IgxCheckboxModule } from '../../checkbox/checkbox.component';\nimport { IgxBadgeModule } from '../../badge/badge.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxDragDropModule } from '../../directives/drag-drop/drag-drop.directive';\nimport { IgxButtonGroupModule } from '../../buttonGroup/buttonGroup.component';\nimport { IgxProgressBarModule } from '../../progressbar/progressbar.component';\nimport { IgxSelectModule } from '../../select/select.module';\nimport { IgxDropDownModule } from '../../drop-down/index';\nimport { IgxGridStateModule } from '../state.directive';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxFocusModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxProgressBarModule,\n        IgxSelectModule,\n        IgxGridStateModule\n    ],\n    exports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxFocusModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxTextHighlightModule,\n        IgxGridStateModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxProgressBarModule,\n        IgxSelectModule\n    ]\n})\nexport class IgxGridSharedModules {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\n\n\n@NgModule({\n    declarations: [\n        IgxColumnHidingComponent,\n        IgxColumnHidingItemDirective\n    ],\n    imports: [\n        IgxGridSharedModules\n    ],\n    exports: [\n        IgxColumnHidingComponent\n    ],\n})\nexport class IgxColumnHidingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'igx-grid-footer',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxGridFooterComponent {\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Component, Input, Output, NgModule, Optional, Inject, EventEmitter, HostBinding } from '@angular/core';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxSelectModule } from '../select/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\n@Component({\n    selector: 'igx-paginator',\n    templateUrl: 'paginator.component.html',\n})\nexport class IgxPaginatorComponent extends DisplayDensityBase {\n\n    /**\n     * Total pages calculated from totalRecords and perPage\n     */\n    public totalPages: number;\n    protected _page = 0;\n    protected _totalRecords: number;\n    protected _selectOptions;\n    private defaultSelectValues = [5, 10, 15, 25, 50, 100, 500];\n    protected _perPage = 15;\n\n    /**\n     * Sets the class of the IgxPaginatorComponent based\n     * on the provided displayDensity.\n     */\n    @HostBinding('class.igx-paginator--cosy')\n    public get classCosy(): boolean {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    @HostBinding('class.igx-paginator--compact')\n    public get classCompact(): boolean {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    @HostBinding('class.igx-paginator')\n    public get classComfortable(): boolean {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n   * An @Input property, sets current page of the `IgxPaginatorComponent`.\n   * The default is 0.\n   * ```typescript\n   * let page = this.paginator.page;\n   * ```\n   * @memberof IgxPaginatorComponent\n   */\n    @Input()\n    public get page() {\n        return this._page;\n    }\n\n    public set page(value: number) {\n        this._page = value;\n        this.pageChange.emit(this._page);\n    }\n\n    /**\n   * An @Input property, sets number of visible items per page in the `IgxPaginatorComponent`.\n   * The default is 15.\n   * ```typescript\n   * let itemsPerPage = this.paginator.perPage;\n   * ```\n   * @memberof IgxPaginatorComponent\n   */\n    @Input()\n    public get perPage() {\n        return this._perPage;\n    }\n\n    public set perPage(value: number) {\n        this._perPage = Number(value);\n        this.perPageChange.emit(this._perPage);\n        this._selectOptions = this.sortUniqueOptions(this.defaultSelectValues, this._perPage);\n        this.totalPages = Math.ceil(this.totalRecords / this._perPage);\n    }\n\n    /**\n    * An @Input property that sets the total records.\n    * ```typescript\n    * let totalRecords = this.paginator.totalRecords;\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public get totalRecords() {\n        return this._totalRecords;\n    }\n\n    public set totalRecords(value: number) {\n        this._totalRecords = value;\n        this.totalPages = Math.ceil(this.totalRecords / this.perPage);\n    }\n\n    /**\n    * An @Input property that sets custom options in the select of the paginator\n    * ```typescript\n    * let options = this.paginator.selectOptions;\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public get selectOptions() {\n        return this._selectOptions;\n    }\n\n    public set selectOptions(value: Array<number>) {\n        this._selectOptions = this.sortUniqueOptions(value, this._perPage);\n        this.defaultSelectValues = [...this._selectOptions];\n    }\n    /**\n    * An @Input property that sets if the pager in the paginator should be enabled.\n    * ```html\n    * <igx-paginator [pagerEnabled]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public pagerEnabled = true;\n\n    /**\n    * An @Input property that sets if the pager in the paginator should be hidden.\n    * ```html\n    * <igx-paginator [pagerHidden]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public pagerHidden = false;\n\n    /**\n    * An @Input property that sets if the dropdown in the paginator should be enabled.\n    * ```html\n    * <igx-paginator [dropdownEnabled]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public dropdownEnabled = true;\n\n    /**\n    * An @Input property that sets if the dropdown in the paginator should be hidden.\n    * ```html\n    * <igx-paginator [dropdownHidden]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public dropdownHidden = false;\n\n    /**\n    * An @Input property, sets number of label of the select.\n    * The default is 'Items per page' localized string.\n    * ```html\n    * <igx-paginator label=\"My custom label\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public selectLabel = CurrentResourceStrings.PaginatorResStrings.igx_paginator_label;\n\n    /**\n     *An event that is emitted when the select in the `IgxPaginatorComponent` changes its value.\n    */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n    /**\n     *An event that is emitted when the paginating is used.\n    */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions\n    ) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.paginator.isLastPage;\n     * ```\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const lastPage = this.paginator.isFirstPage;\n     * ```\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    private sortUniqueOptions(values: Array<number>, newOption: number): number[] {\n        return Array.from(new Set([...values, newOption])).sort((a, b) => a - b);\n    }\n\n    /**\n     * Sets DisplayDensity for the <select> inside the paginator\n     * @hidden\n     */\n    public paginatorSelectDisplayDensity(): string {\n        if (this.displayDensity === DisplayDensity.comfortable) {\n            return DisplayDensity.cosy;\n        }\n        return DisplayDensity.compact;\n    }\n    /**\n     * Goes to the next page of the `IgxPaginatorComponent`, if the paginator is not already at the last page.\n     * ```typescript\n     * this.paginator.nextPage();\n     * ```\n\t * @memberof IgxPaginatorComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n    /**\n     * Goes to the previous page of the `IgxPaginatorComponent`, if the paginator is not already at the first page.\n     * ```typescript\n     * this.paginator.previousPage();\n     * ```\n\t * @memberof IgxPaginatorComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.pagiantor.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxPaginatorComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.page = val;\n    }\n}\n\n@NgModule({\n    declarations: [IgxPaginatorComponent],\n    exports: [IgxPaginatorComponent],\n    imports: [CommonModule, IgxSelectModule, FormsModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxPaginatorModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe,\n    IgxGridNotGroupedPipe,\n    IgxGridTopLevelColumns,\n    IgxGridCellStylesPipe,\n    IgxGridCellStyleClassesPipe,\n    IgxGridPaginatorOptionsPipe,\n    IgxHasVisibleColumnsPipe,\n    IgxDatePipeComponent,\n    IgxDecimalPipeComponent\n} from './pipes';\n\n@NgModule({\n    declarations: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridCellStyleClassesPipe,\n        IgxGridPaginatorOptionsPipe,\n        IgxHasVisibleColumnsPipe\n    ],\n    exports: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridCellStyleClassesPipe,\n        IgxGridPaginatorOptionsPipe,\n        IgxHasVisibleColumnsPipe\n    ],\n    imports: [\n        CommonModule\n    ]\n  })\nexport class IgxGridPipesModule { }\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxGridBaseDirective } from '../../grid-base.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxColumnGroupComponent } from '../../columns/column-group.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-column-moving',\n    templateUrl: './excel-style-column-moving.component.html'\n})\nexport class IgxExcelStyleColumnMovingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: IgxGridBaseDirective;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Input()\n    public isColumnPinnable: boolean;\n\n    constructor() {}\n\n    private get visibleColumns() {\n        return this.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));\n    }\n\n    get canNotMoveLeft() {\n        return this.column.visibleIndex === 0 ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && !this.isColumnPinnable) ||\n            (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));\n    }\n\n    get canNotMoveRight() {\n        return this.column.visibleIndex === this.visibleColumns.length - 1 ||\n            (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));\n    }\n\n    public onMoveButtonClicked(moveDirection) {\n        let targetColumn;\n        if (this.column.pinned) {\n            if (this.column.isLastPinned && moveDirection === 1) {\n                targetColumn = this.grid.unpinnedColumns[0];\n                moveDirection = 0;\n            } else {\n                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);\n            }\n        } else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0) {\n            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];\n            if (targetColumn.parent) {\n                targetColumn = targetColumn.topLevelParent;\n            }\n            moveDirection = 1;\n        } else {\n            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);\n        }\n        this.grid.moveColumn(this.column, targetColumn, moveDirection);\n    }\n\n    private findColumn(moveDirection: number, columns: IgxColumnComponent[]) {\n        let index = columns.indexOf(this.column);\n        if (moveDirection === 0) {\n            while (index > 0) {\n                index--;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        } else {\n            while (index < columns.length - 1) {\n                index++;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { FilterListItem, IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\nimport { cloneArray } from '../../../core/utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'excelStyleSearchFilter'\n})\nexport class IgxExcelStyleSearchFilterPipe implements PipeTransform {\n    transform(items: FilterListItem[], searchText: string): any[] {\n        if (!items || !items.length) {\n            return [];\n        }\n\n        if (!searchText) {\n            return items;\n        }\n\n        searchText = searchText.toLowerCase();\n        const result = items.filter((it, i) => (i === 0 && it.isSpecial) ||\n            (it.value !== null && it.value !== undefined) &&\n            it.value.toString().toLowerCase().indexOf(searchText) > -1);\n\n        // If 'result' contains the 'Select All' item and at least one more - we use it, otherwise we use an empty array.\n        return result.length > 1 ? result : [];\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './excel-style-search.component';\nimport {\n    IgxGridExcelStyleFilteringComponent,\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective\n} from './grid.excel-style-filtering.component';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { IgxExcelStyleColumnMovingComponent } from './excel-style-column-moving.component';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { IgxSelectionAPIService } from '../../../core/selection';\nimport { FormsModule } from '@angular/forms';\nimport { IgxGridPipesModule } from '../../common/grid-pipes.module';\nimport { IgxButtonModule } from '../../../directives/button/button.directive';\nimport { IgxButtonGroupModule } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDatePickerModule } from '../../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../../icon/index';\nimport { IgxRippleModule } from '../../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../../input-group/input-group.component';\nimport { IgxDropDownModule } from '../../../drop-down/index';\nimport { IgxForOfModule } from '../../../directives/for-of/for_of.directive';\nimport { IgxCheckboxModule } from '../../../checkbox/checkbox.component';\nimport { IgxFilterModule } from '../../../directives/filter/filter.directive';\nimport { IgxToggleModule } from '../../../directives/toggle/toggle.directive';\nimport { IgxListModule } from '../../../list/list.component';\nimport { IgxExcelStyleSearchFilterPipe } from './excel-style-search.pipe';\nimport { IgxProgressBarModule } from '../../../progressbar/progressbar.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingComponent,\n        IgxExcelStyleColumnMovingComponent,\n        IgxExcelStyleSearchComponent,\n        IgxExcelStyleCustomDialogComponent,\n        IgxExcelStyleDefaultExpressionComponent,\n        IgxExcelStyleDateExpressionComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleLoadingValuesTemplateDirective,\n        IgxExcelStyleSearchFilterPipe\n    ],\n    exports: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleLoadingValuesTemplateDirective,\n        IgxExcelStyleDateExpressionComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxGridPipesModule,\n        IgxButtonModule,\n        IgxButtonGroupModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxDropDownModule,\n        IgxForOfModule,\n        IgxCheckboxModule,\n        IgxFilterModule,\n        IgxToggleModule,\n        IgxListModule,\n        IgxProgressBarModule\n    ],\n    entryComponents: [\n        IgxGridExcelStyleFilteringComponent\n    ],\n    providers: [\n        IgxSelectionAPIService\n    ]\n})\nexport class IgxGridExcelStyleFilteringModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { IgxRowSelectorDirective, IgxHeadSelectorDirective } from './row-selectors';\nimport { IgxGridDragSelectDirective } from './drag-select.directive';\n\n\n@NgModule({\n    declarations: [\n        IgxRowSelectorDirective,\n        IgxHeadSelectorDirective,\n        IgxGridDragSelectDirective\n    ],\n    exports: [\n        IgxRowSelectorDirective,\n        IgxHeadSelectorDirective,\n        IgxGridDragSelectDirective\n    ]\n})\nexport class IgxGridSelectionModule {}\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone,\n    HostListener,\n    OnDestroy\n} from '@angular/core';\nimport { Subject, fromEvent } from 'rxjs';\nimport { debounceTime, takeUntil} from 'rxjs/operators';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxColumnResizingService } from './resizing.service';\n\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxResizeHandle]'\n})\nexport class IgxResizeHandleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input('igxResizeHandle')\n    public column: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    private _dblClick = false;\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    private readonly DEBOUNCE_TIME = 200;\n\n    constructor(private zone: NgZone,\n               private element: ElementRef,\n               public colResizingService: IgxColumnResizingService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (!this.column.columnGroup && this.column.resizable) {\n            this.zone.runOutsideAngular(() => {\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(\n                    debounceTime(this.DEBOUNCE_TIME),\n                    takeUntil(this.destroy$)\n                ).subscribe((event: MouseEvent) => {\n\n                    if (this._dblClick) {\n                        this._dblClick = false;\n                        return;\n                    }\n\n                    if (event.button === 0) {\n                        this._onResizeAreaMouseDown(event);\n                        this.column.grid.resizeLine.resizer.onMousedown(event);\n                    }\n                });\n            });\n\n            fromEvent(this.element.nativeElement, 'mouseup').pipe(\n                debounceTime(this.DEBOUNCE_TIME),\n                takeUntil(this.destroy$)\n            ).subscribe(() => {\n                this.colResizingService.isColumnResizing = false;\n                this.colResizingService.showResizer = false;\n                this.column.grid.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onMouseOver() {\n        this.colResizingService.resizeCursor = 'col-resize';\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('dblclick')\n    public onDoubleClick() {\n        this._dblClick = true;\n        this.colResizingService.column = this.column;\n        this.colResizingService.autosizeColumnOnDblClick();\n    }\n\n    /**\n     * @hidden\n     */\n    private _onResizeAreaMouseDown(event) {\n        this.colResizingService.column = this.column;\n        this.colResizingService.isColumnResizing = true;\n        this.colResizingService.startResizePos = event.clientX;\n\n        this.colResizingService.showResizer = true;\n        this.column.grid.cdr.detectChanges();\n    }\n}\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxColumnResizingService } from './resizing.service';\nimport { IgxGridColumnResizerComponent } from './resizer.component';\nimport { IgxResizeHandleDirective } from './resize-handle.directive';\nimport { IgxColumnResizerDirective } from './resizer.directive';\n\n\n@NgModule({\n    declarations: [\n        IgxGridColumnResizerComponent,\n        IgxResizeHandleDirective,\n        IgxColumnResizerDirective\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        IgxGridColumnResizerComponent,\n        IgxResizeHandleDirective,\n        IgxColumnResizerDirective\n    ],\n    providers: [\n        IgxColumnResizingService\n    ]\n})\nexport class IgxGridResizingModule {}\n","import { Directive, Input, OnDestroy, ElementRef, Renderer2, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { DropPosition, IgxColumnMovingService } from './moving.service';\nimport { Subject, interval } from 'rxjs';\nimport { IgxColumnMovingDragDirective } from './moving.drag.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\n\n\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable &&\n            ((!this._column.pinned && this.cms.column.disablePinning) || !this.cms.column.disablePinning);\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const clientRect = this.elementRef.nativeElement.getBoundingClientRect();\n            const pos = clientRect.left + clientRect.width / 2;\n\n            const parent = this.elementRef.nativeElement.parentElement;\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {\n            this.cms.icon.innerText = 'block';\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                this.cms.icon.innerText = 'lock';\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe(() => {\n                    this.cms.column.grid.wheelHandler();\n                    event.target.id === 'right' ? this.horizontalScroll.scrollPosition += 15 :\n                        this.horizontalScroll.scrollPosition -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxColumnMovingDragDirective } from './moving.drag.directive';\nimport { IgxColumnMovingDropDirective } from './moving.drop.directive';\n\n\n@NgModule({\n    declarations: [\n        IgxColumnMovingDropDirective,\n        IgxColumnMovingDragDirective\n    ],\n    exports: [\n        IgxColumnMovingDropDirective,\n        IgxColumnMovingDragDirective\n    ]\n})\nexport class IgxColumnMovingModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridType } from '../common/grid.interface';\n\n@Pipe({\n    name: 'igxGridSummaryDataPipe',\n    pure: true\n})\nexport class IgxSummaryDataPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    transform(id: string, trigger: number = 0) {\n        const summaryService = this.gridAPI.grid.summaryService;\n        return summaryService.calculateSummaries(\n            summaryService.rootSummaryID,\n            this.gridAPI.get_summary_data()\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxSummaryRowComponent } from './summary-row.component';\nimport { IgxSummaryDataPipe } from './grid-root-summary.pipe';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxGridPipesModule } from '../common/grid-pipes.module';\n\n\n@NgModule({\n    declarations: [\n        IgxSummaryCellComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryDataPipe\n    ],\n    imports: [\n        IgxGridPipesModule,\n        IgxGridSharedModules\n    ],\n    exports: [\n        IgxSummaryCellComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryDataPipe\n    ]\n})\nexport class IgxGridSummaryModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxColumnPinningItemDirective } from './pinning.directive';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { IgxGridSharedModules } from '../common/shared.module';\n\n\n@NgModule({\n    declarations: [\n        IgxColumnPinningItemDirective,\n        IgxColumnPinningComponent\n    ],\n    imports: [\n        IgxGridSharedModules\n    ],\n    exports: [\n        IgxColumnPinningComponent\n    ]\n})\nexport class IgxColumnPinningModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridToolbarCustomContentDirective } from './toolbar.directive';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxColumnHidingModule } from '../hiding/hiding.module';\nimport { IgxColumnPinningModule } from '../pinning/pinning.module';\n\n\n@NgModule({\n    declarations: [\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective\n    ],\n    imports: [\n        IgxGridSharedModules,\n        IgxColumnHidingModule,\n        IgxColumnPinningModule\n    ],\n    exports: [\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective\n    ]\n})\nexport class IgxGridToolbarModule {}\n","import {\n    AfterContentInit,\n    Component,\n    ChangeDetectionStrategy,\n    forwardRef,\n    Input\n} from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxColumnGroupComponent } from './column-group.component';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnLayoutComponent) }],\n    selector: 'igx-column-layout',\n    template: ``\n})\nexport class IgxColumnLayoutComponent extends IgxColumnGroupComponent implements AfterContentInit {\n    public childrenVisibleIndexes = [];\n    /**\n     * Gets the width of the column layout.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width(): any {\n        const width = this.getFilledChildColumnSizes(this.children).reduce((acc, val) => acc + parseInt(val, 10), 0);\n        return width;\n    }\n\n    set width(val: any) { }\n\n    get columnLayout() {\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        let borderWidth = 0;\n\n        if (this.headerGroup && this.headerGroup.hasLastPinnedChildColumn) {\n            const headerStyles = this.grid.document.defaultView.getComputedStyle(this.headerGroup.element.nativeElement.children[0]);\n            borderWidth = parseInt(headerStyles.borderRightWidth, 10);\n        }\n\n        return super.getCalcWidth() + borderWidth;\n    }\n\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        let vIndex = -1;\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(this);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(this);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n\n    /*\n     * Gets whether the column layout is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this._hidden;\n    }\n\n    /**\n     * Sets the column layout hidden property.\n     * ```typescript\n     * <igx-column-layout [hidden] = \"true\"></igx-column->\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n        if (this.grid && this.grid.columns && this.grid.columns.length > 0) {\n            // reset indexes in case columns are hidden/shown runtime\n            this.grid.columns.filter(x => x.columnGroup).forEach(x => x.populateVisibleIndexes());\n        }\n    }\n\n    /**\n     *@hidden\n    */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (!this.hidden) {\n            this.hidden = this.allChildren.some(x => x.hidden);\n        } else {\n            this.children.forEach(child => child.hidden = this.hidden);\n        }\n\n        this.children.forEach(child => {\n            child.movable = false;\n        });\n    }\n\n    /*\n     * Gets whether the group contains the last pinned child column of the column layout.\n     * ```typescript\n     * let columsHasLastPinned = this.columnLayout.hasLastPinnedChildColumn;\n     * ```\n     * @memberof IgxColumnLayoutComponent\n     */\n    get hasLastPinnedChildColumn() {\n        return this.children.some(child => child.isLastPinned);\n    }\n\n    /**\n     *@hidden\n    */\n    public populateVisibleIndexes() {\n        this.childrenVisibleIndexes = [];\n        const grid = this.gridAPI.grid;\n        const columns = grid && grid.pinnedColumns && grid.unpinnedColumns ? grid.pinnedColumns.concat(grid.unpinnedColumns) : [];\n        const orderedCols = columns\n            .filter(x => !x.columnGroup && !x.hidden)\n            .sort((a, b) => a.rowStart - b.rowStart || columns.indexOf(a.parent) - columns.indexOf(b.parent) || a.colStart - b.colStart);\n        this.children.forEach(child => {\n            const rs = child.rowStart || 1;\n            let vIndex = 0;\n            // filter out all cols with larger rowStart\n            const cols = orderedCols.filter(c =>\n                !c.columnGroup && (c.rowStart || 1) <= rs);\n            vIndex = cols.indexOf(child);\n            this.childrenVisibleIndexes.push({ column: child, index: vIndex });\n        });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxColumnGroupComponent } from './column-group.component';\nimport { IgxColumnLayoutComponent } from './column-layout.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxCollapsibleIndicatorTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './templates.directive';\n\n\n@NgModule({\n    declarations: [\n        IgxFilterCellTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCollapsibleIndicatorTemplateDirective,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ],\n    exports: [\n        IgxFilterCellTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCollapsibleIndicatorTemplateDirective,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ]\n})\nexport class IgxGridColumnModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridFilteringCellComponent } from './grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './grid-filtering-row.component';\nimport { IgxGridSharedModules } from '../../common/shared.module';\nimport { IgxGridPipesModule } from '../../common/grid-pipes.module';\n\n\n@NgModule({\n    declarations: [\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent\n    ],\n    imports: [\n        IgxGridSharedModules,\n        IgxGridPipesModule\n    ],\n    exports: [\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent\n    ]\n})\nexport class IgxGridFilteringModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxColumnMovingModule } from '../moving/moving.module';\nimport { IgxGridFilteringModule } from '../filtering/base/filtering.module';\nimport { IgxGridResizingModule } from '../resizing/resize.module';\n\n\n@NgModule({\n    declarations: [\n        IgxGridHeaderComponent,\n        IgxGridHeaderGroupComponent\n    ],\n    imports: [\n        IgxGridSharedModules,\n        IgxGridFilteringModule,\n        IgxColumnMovingModule,\n        IgxGridResizingModule\n    ],\n    exports: [\n        IgxGridHeaderComponent,\n        IgxGridHeaderGroupComponent\n    ]\n})\nexport class IgxGridHeadersModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxGridFooterComponent } from './grid-footer/grid-footer.component';\nimport {\n    IgxGridBodyDirective\n} from './grid.common';\nimport { IgxGridTransaction, IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxPaginatorModule } from '../paginator/paginator.component';\nimport { IgxGridPipesModule } from './common/grid-pipes.module';\nimport { IgxGridExcelStyleFilteringModule } from './filtering/excel-style/grid.excel-style-filtering.module';\nimport { IgxRowDragModule } from './row-drag.directive';\nimport { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';\nimport { IgxGridSelectionModule } from './selection/selection.module';\nimport { IgxGridResizingModule } from './resizing/resize.module';\nimport { IgxColumnMovingModule } from './moving/moving.module';\nimport { IgxGridSharedModules } from './common/shared.module';\nimport { IgxGridSummaryModule } from './summaries/summary.module';\nimport { IgxGridToolbarModule } from './toolbar/toolbar.module';\nimport { IgxColumnHidingModule } from './hiding/hiding.module';\nimport { IgxColumnPinningModule } from './pinning/pinning.module';\nimport { IgxGridColumnModule } from './columns/column.module';\nimport { IgxGridHeadersModule } from './headers/headers.module';\nimport { IgxGridFilteringModule } from './filtering/base/filtering.module';\nimport { IgxRowDirective } from './row.directive';\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridBaseDirective,\n        IgxRowDirective,\n        IgxGridCellComponent,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxGridBodyDirective,\n        IgxGridFooterComponent,\n        IgxAdvancedFilteringDialogComponent\n    ],\n    entryComponents: [\n        IgxAdvancedFilteringDialogComponent\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxGridBodyDirective,\n        IgxColumnHidingModule,\n        IgxColumnPinningModule,\n        IgxGridColumnModule,\n        IgxGridHeadersModule,\n        IgxGridPipesModule,\n        IgxGridFilteringModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule,\n        IgxPaginatorModule,\n        IgxGridFooterComponent,\n        IgxGridResizingModule,\n        IgxColumnMovingModule,\n        IgxGridSelectionModule,\n        IgxGridSummaryModule,\n        IgxGridToolbarModule,\n        IgxAdvancedFilteringDialogComponent,\n        IgxGridSharedModules\n    ],\n    imports: [\n        IgxGridColumnModule,\n        IgxGridHeadersModule,\n        IgxColumnMovingModule,\n        IgxGridResizingModule,\n        IgxColumnPinningModule,\n        IgxGridSelectionModule,\n        IgxGridSummaryModule,\n        IgxGridToolbarModule,\n        IgxColumnHidingModule,\n        IgxGridPipesModule,\n        IgxGridFilteringModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule,\n        IgxPaginatorModule,\n        IgxGridSharedModules\n    ],\n    providers: [\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridType } from '../common/grid.interface';\nimport { IFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IGridSortingStrategy } from '../../data-operations/sorting-strategy';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expressions: ISortingExpression[], sorting: IGridSortingStrategy,\n                     id: string, pipeTrigger: number): any[] {\n        const grid = this.gridAPI.grid;\n        let result: any[];\n\n        if (!expressions.length) {\n            result = collection;\n        } else {\n            result = DataUtil.sort(cloneArray(collection), expressions, sorting);\n        }\n        grid.filteredSortedData = result;\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridGroupBy',\n    pure: true\n})\nexport class IgxGridGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n        let result: IGroupByResult;\n        const fullResult: IGroupByResult = { data: [], metadata: [] };\n\n        if (!state.expressions.length) {\n            // empty the array without changing reference\n            groupsRecords.splice(0, groupsRecords.length);\n            result = {\n                data: collection,\n                metadata: collection\n            };\n        } else {\n            state.expansion = grid.groupingExpansionState;\n            state.defaultExpanded = grid.groupsExpanded;\n            result = DataUtil.group(cloneArray(collection), state, grid, groupsRecords, fullResult);\n        }\n        grid.groupingFlatResult = result.data;\n        grid.groupingResult = fullResult.data;\n        grid.groupingMetadata = fullResult.metadata;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n        DataUtil.correctPagingState(state, collection.data.length);\n\n        const result = {\n            data: DataUtil.page(cloneArray(collection.data), state),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state)\n        };\n        if (this.gridAPI.grid.page !== state.index) {\n            this.gridAPI.grid.page = state.index;\n        }\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        filterStrategy: IFilteringStrategy,\n        advancedExpressionsTree: IFilteringExpressionsTree, id: string, pipeTrigger: number, filteringPipeTrigger: number) {\n        const grid = this.gridAPI.grid;\n        const state = {\n            expressionsTree: expressionsTree,\n            strategy: filterStrategy,\n            advancedExpressionsTree: advancedExpressionsTree\n        };\n\n        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        grid.filteredData = result;\n        return result;\n    }\n}\n","import { Component, forwardRef, ChangeDetectionStrategy,\n     ElementRef, ChangeDetectorRef, HostBinding, ViewChildren, QueryList } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowDirective } from '../row.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    templateUrl: './grid-row.component.html',\n    providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxGridRowComponent) }]\n})\nexport class IgxGridRowComponent extends IgxRowDirective<IgxGridComponent> {\n\n    // R.K. TODO: Remove\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n            super(gridAPI, crudService, selectionService, element, cdr);\n        }\n\n    @ViewChildren('cell')\n    private _cells: QueryList<any>;\n\n    public get cells() {\n        const res = new QueryList<any>();\n        if (!this._cells) {\n            return res;\n        }\n        const cList = this._cells.toArray().sort((item1, item2) => item1.column.visibleIndex - item2.column.visibleIndex);\n        res.reset(cList);\n        return res;\n    }\n\n    public set cells(cells) {\n\n    }\n\n    @HostBinding('class.igx-grid__tr--mrl')\n    get hasColumnLayouts(): boolean {\n        return this.grid.hasColumnLayouts;\n    }\n\n    getContext(col, row) {\n        return {\n            $implicit: col,\n            row: row\n        };\n    }\n\n    get expanded() {\n        return this.gridAPI.get_row_expansion_state(this.rowData);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridComponent } from './grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';\nimport { GridType } from '../common/grid.interface';\n\n/** @hidden */\ninterface ISkipRecord {\n    skip?: boolean;\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridSummary',\n    pure: true\n})\nexport class IgxGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult,\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n\n        if (!collection.data || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return collection.data;\n        }\n\n        return this.addSummaryRows(id, collection, summaryPosition);\n    }\n\n    private addSummaryRows(gridId: string, collection: IGroupByResult, summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const lastChildMap = new Map<any, IGroupByRecord[]>();\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        if (collection.metadata.length && !grid.isGroupByRecord(collection.data[0]) &&\n            grid.isGroupByRecord(collection.metadata[0]) && summaryPosition === GridSummaryPosition.bottom) {\n            const groups: Array<IGroupByRecord & ISkipRecord> = [];\n            groups.push(collection.metadata[0]);\n            while (groups[groups.length - 1].groupParent) {\n                groups.push(groups[groups.length - 1].groupParent);\n            }\n            groups.reverse();\n            groups.forEach(g => g.skip = true);\n            collection.data.splice(0, 0, ...groups);\n        }\n        for (let i = 0; i < collection.data.length; i++) {\n            const record = collection.data[i];\n            let skipAdd = false;\n            let recordId;\n            let groupByRecord: IGroupByRecord = null;\n            if (grid.isGroupByRecord(record)) {\n                skipAdd = !!record.skip;\n                record.skip = null;\n                groupByRecord = record as IGroupByRecord;\n                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);\n            } else {\n                recordId = this.gridAPI.get_row_id(record);\n            }\n            if (!skipAdd) {\n                recordsWithSummary.push(record);\n            }\n\n            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {\n                const groupRecords = lastChildMap.get(recordId);\n\n                for (let j = 0; j < groupRecords.length; j++) {\n                    const groupRecord = groupRecords[j];\n                    const groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);\n                    const records = this.removeDeletedRecord(grid, groupRecord.records.slice());\n                    const summaries = grid.summaryService.calculateSummaries(groupRecordId, records);\n                    const summaryRecord: ISummaryRecord = {\n                        summaries: summaries,\n                        max: maxSummaryHeight\n                    };\n                    recordsWithSummary.push(summaryRecord);\n                }\n            }\n\n            if (groupByRecord === null || !grid.isExpandedGroup(groupByRecord)) {\n                continue;\n            }\n\n            if (summaryPosition === GridSummaryPosition.top) {\n                const records = this.removeDeletedRecord(grid, groupByRecord.records.slice());\n                const summaries = grid.summaryService.calculateSummaries(recordId, records);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight\n                };\n                recordsWithSummary.push(summaryRecord);\n            } else if (summaryPosition === GridSummaryPosition.bottom) {\n                let lastChild = groupByRecord;\n\n                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {\n                    lastChild = lastChild.groups[lastChild.groups.length - 1];\n                }\n\n                let lastChildId;\n                if (grid.isExpandedGroup(lastChild)) {\n                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);\n                } else {\n                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);\n                }\n\n                let groupRecords = lastChildMap.get(lastChildId);\n                if (!groupRecords) {\n                    groupRecords = [];\n                    lastChildMap.set(lastChildId, groupRecords);\n                }\n                groupRecords.unshift(groupByRecord);\n            }\n        }\n\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, data) {\n        if (!grid.transactions.enabled) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { PipeTransform, Pipe } from '@angular/core';\nimport { GridType } from '../common/grid.interface';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridAPIService } from './grid-api.service';\n\n/** @hidden */\n@Pipe({\n    name: 'gridDetails',\n    pure: true\n})\nexport class IgxGridDetailsPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n    public transform(collection: any[], hasDetails: boolean, expansionStates:  Map<any, boolean>, pipeTrigger: number) {\n        if (!hasDetails) {\n            return collection;\n        }\n        const res = this.addDetailRows(collection, expansionStates);\n        return res;\n    }\n\n    protected addDetailRows(collection: any[], expansionStates: Map<any, boolean>) {\n        const result = [];\n        collection.forEach((v) => {\n            result.push(v);\n            if (!this.gridAPI.grid.isGroupByRecord(v) && !this.gridAPI.grid.isSummaryRow(v) &&\n                this.gridAPI.get_row_expansion_state(v)) {\n                const detailsObj = { detailsData: v };\n                result.push(detailsObj);\n            }\n        });\n        return result;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject,\n     ChangeDetectionStrategy, NgZone, OnInit, Input, TemplateRef } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { getNodeSizeViaRange, PlatformUtil } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseDirective } from '.';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { HammerGesturesManager } from '../../core/touch';\nimport { GridType } from '../common/grid.interface';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-expandable-grid-cell',\n    templateUrl: 'expandable-cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxGridExpandableCellComponent extends IgxGridCellComponent implements OnInit {\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                touchManager: HammerGesturesManager,\n                @Inject(DOCUMENT) public document,\n                protected platformUtil: PlatformUtil) {\n        super(selectionService, crudService, gridAPI, cdr, element, zone, touchManager, platformUtil);\n    }\n\n    /**\n     * @hidden\n    */\n    @Input()\n    expanded = false;\n\n    @ViewChild('indicator', { read: ElementRef })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef })\n    public indentationDiv: ElementRef;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n   protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n   protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        const expansionState = this.gridAPI.get_row_expansion_state(this.row.rowData);\n        this.gridAPI.set_row_expansion_state(this.row.rowID, !expansionState, event);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus() {\n        this.gridAPI.submit_value();\n        this.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n\n    /**\n     * @hidden\n    */\n    public get iconTemplate() {\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGridDetailTemplateDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxGridSummaryPipe } from './grid.summary.pipe';\nimport { IgxGridDetailsPipe } from './grid.details.pipe';\nimport { IgxGridExpandableCellComponent } from './expandable-cell.component';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGridDetailTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe,\n    IgxGridDetailsPipe,\n    IgxGridExpandableCellComponent\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridExpandableCellComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGridDetailTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe,\n    IgxGridDetailsPipe,\n    IgxGridCommonModule\n  ],\n  imports: [\n    IgxGridCommonModule,\n  ]\n})\nexport class IgxGridModule {}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from '../common/events';\nimport { HierarchicalTransaction, TransactionType, State } from '../../services';\nimport { mergeObjects } from '../../core/utils';\nimport { Injectable } from '@angular/core';\nimport { ColumnType } from '../common/column.interface';\n\n@Injectable()\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n    public get_all_data(transactions?: boolean): any[] {\n        const grid = this.grid;\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        const data = grid.processedRootRecords.filter(row => row.isFilteredOutParent === undefined || row.isFilteredOutParent === false)\n            .map(rec => rec.data);\n        if (grid.transactions.enabled) {\n            const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n            deletedRows.forEach(rowID => {\n                const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                const index = tempData.indexOf(rowID);\n                if (index !== -1) {\n                    data.splice(index, 1);\n                }\n            });\n        }\n        return data;\n    }\n\n    public allow_expansion_state_change(rowID, expanded): boolean {\n        const grid = this.grid;\n        const row = grid.records.get(rowID);\n        if (row.expanded === expanded ||\n            ((!row.children || !row.children.length) && (!grid.loadChildrenOnDemand ||\n            (grid.hasChildrenKey && !row.data[grid.hasChildrenKey])))) {\n            return false;\n        }\n        return true;\n    }\n\n    public expand_path_to_record(record: ITreeGridRecord) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        while (record.parent) {\n            record = record.parent;\n            const expanded = this.get_row_expansion_state(record);\n\n            if (!expanded) {\n                expandedStates.set(record.rowID, true);\n            }\n        }\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(record: ITreeGridRecord): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const expanded = states.get(record.rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return record.children && record.children.length && record.level < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: ColumnType): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n\n    public deleteRowById(rowID: any) {\n        const treeGrid = this.grid;\n        const flatDataWithCascadeOnDeleteAndTransactions =\n        treeGrid.primaryKey &&\n        treeGrid.foreignKey &&\n        treeGrid.cascadeOnDelete &&\n        treeGrid.transactions.enabled;\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.startPending();\n        }\n\n        super.deleteRowById(rowID);\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.endPending(true);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        const treeGrid = this.grid;\n        const record = treeGrid.records.get(rowID);\n\n        if (treeGrid.primaryKey && treeGrid.foreignKey) {\n            index = treeGrid.primaryKey ?\n                treeGrid.data.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                treeGrid.data.indexOf(rowID);\n            super.deleteRowFromData(rowID, index);\n\n            if (treeGrid.cascadeOnDelete) {\n                if (record && record.children && record.children.length > 0) {\n                    for (let i = 0; i < record.children.length; i++) {\n                        const child = record.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n        } else {\n            const collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;\n            index = treeGrid.primaryKey ?\n                collection.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                collection.indexOf(rowID);\n\n            const selectedChildren = [];\n            this.get_selected_children(record, selectedChildren);\n            if (selectedChildren.length > 0) {\n                treeGrid.deselectRows(selectedChildren);\n            }\n\n            if (treeGrid.transactions.enabled) {\n                const path = treeGrid.generateRowPath(rowID);\n                treeGrid.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    path: path\n                },\n                    collection[index]\n                );\n            } else {\n                collection.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(\n        grid: IgxTreeGridComponent,\n        rowID: any,\n        rowValueInDataSource: any,\n        rowCurrentValue: any,\n        rowNewValue: { [x: string]: any }) {\n        if (grid.transactions.enabled) {\n            const path = grid.generateRowPath(rowID);\n            const transaction: HierarchicalTransaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue,\n                path: path\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    public get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]) {\n        const grid = this.grid;\n        if (!record.children || record.children.length === 0) {\n            return;\n        }\n        for (const child of record.children) {\n            if (grid.selectionService.isRowSelected(child.rowID)) {\n                selectedRowIDs.push(child.rowID);\n            }\n            this.get_selected_children(child, selectedRowIDs);\n        }\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        return this.row_deleted_parent(rowID) || super.row_deleted_transaction(rowID);\n    }\n\n    public get_rec_by_id(rowID) {\n        return this.grid.records.get(rowID);\n    }\n\n    private row_deleted_parent(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {\n            let node = grid.records.get(rowID);\n            while (node) {\n                const state: State = grid.transactions.getState(node.rowID);\n                if (state && state.type === TransactionType.DELETE) {\n                    return true;\n                }\n                node = node.parent;\n            }\n        }\n        return false;\n    }\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxTreeGridNavigationService extends IgxGridNavigationService {\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        if (isSummary) {\n            return 'igx-grid-summary-cell';\n        }\n        if (visibleIndex === 0) {\n            return 'igx-tree-grid-cell';\n        }\n        return 'igx-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-tree-grid-row';\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowLoadingIndicator]'\n})\nexport class IgxRowLoadingIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    forwardRef,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    ContentChild,\n    AfterContentInit,\n    ViewChild,\n    DoCheck\n} from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from '../common/events';\nimport { HierarchicalTransaction, HierarchicalState, TransactionType } from '../../services/transaction/transaction';\nimport { IgxHierarchicalTransactionService } from '../../services/index';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxTreeGridNavigationService } from './tree-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { mergeObjects } from '../../core/utils';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxRowIslandAPIService } from '../hierarchical-grid/row-island-api.service';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    templateUrl: 'tree-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        IgxGridSummaryService,\n        { provide: IgxGridNavigationService, useClass: IgxTreeGridNavigationService },\n        { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxTreeGridComponent) },\n        IgxFilteringService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseDirective implements GridType, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n    private _data;\n    private _rowLoadingIndicatorTemplate: TemplateRef<any>;\n    protected _transactions: IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.\n     * ```html\n     * <igx-tree-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /**\n    * @hidden\n    */\n    public flatData: any[];\n\n    /**\n    * @hidden\n    */\n    public processedExpandedFlatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property that sets the key indicating whether a row has children.\n     * This property is only used for load on demand scenarios.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [hasChildrenKey]=\"'hasEmployees'\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public hasChildrenKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" cascadeOnDelete=\"false\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowLoadingIndicatorTemplateDirective, { read: IgxRowLoadingIndicatorTemplateDirective })\n    protected rowLoadingTemplate: IgxRowLoadingIndicatorTemplateDirective;\n\n    /**\n     * An @Input property that provides a template for the row loading indicator when load on demand is enabled.\n     * ```html\n     * <ng-template #rowLoadingTemplate>\n     *     <igx-icon fontSet=\"material\">loop</igx-icon>\n     * </ng-template>\n     *\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'ID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [rowLoadingIndicatorTemplate]=\"rowLoadingTemplate\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get rowLoadingIndicatorTemplate(): TemplateRef<any> {\n        return this._rowLoadingIndicatorTemplate;\n    }\n\n    public set rowLoadingIndicatorTemplate(value: TemplateRef<any>) {\n        this._rowLoadingIndicatorTemplate = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * An @Input property that provides a callback for loading child rows on demand.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [loadChildrenOnDemand]=\"loadChildren\">\n     * </igx-tree-grid>\n     * ```\n     * ```typescript\n     * public loadChildren = (parentID: any, done: (children: any[]) => void) => {\n     *     this.dataService.getData(parentID, children => done(children));\n     * }\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public loadChildrenOnDemand: (parentID: any, done: (children: any[]) => void) => void;\n\n    /**\n     * @hidden\n     */\n    public loadingRows = new Set<any>();\n\n    // Kind of stupid\n    private get _gridAPI(): IgxTreeGridAPIService {\n        return this.gridAPI as IgxTreeGridAPIService;\n    }\n    private _filteredData = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        this.onRowToggle.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.loadChildrenOnRowExpansion(args);\n        });\n    }\n\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.rowLoadingTemplate) {\n            this._rowLoadingIndicatorTemplate = this.rowLoadingTemplate.template;\n        }\n        super.ngAfterContentInit();\n    }\n\n    private loadChildrenOnRowExpansion(args: IRowToggleEventArgs) {\n        if (this.loadChildrenOnDemand) {\n            const parentID = args.rowID;\n\n            if (args.expanded && !this._expansionStates.has(parentID)) {\n                this.loadingRows.add(parentID);\n\n                this.loadChildrenOnDemand(parentID, children => {\n                    this.loadingRows.delete(parentID);\n                    this.addChildRows(children, parentID);\n                    this.notifyChanges();\n\n                    requestAnimationFrame(() => {\n                        const cellID = this.selectionService.activeElement;\n                        if (cellID) {\n                            const cell = this._gridAPI.get_cell_by_index(cellID.row, cellID.column);\n                            if (cell) {\n                                cell.nativeElement.focus();\n                            }\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n    private addChildRows(children: any[], parentID: any) {\n        if (this.primaryKey && this.foreignKey) {\n            for (const child of children) {\n                child[this.foreignKey] = parentID;\n            }\n            this.data.push(...children);\n        } else if (this.childDataKey) {\n            let parent = this.records.get(parentID);\n            let parentData = parent.data;\n\n            if (this.transactions.enabled && this.transactions.getAggregatedChanges(true).length) {\n                const path = [];\n                while (parent) {\n                    path.push(parent.rowID);\n                    parent = parent.parent;\n                }\n\n                let collection = this.data;\n                let record: any;\n                for (let i = path.length - 1; i >= 0; i--) {\n                    const pid = path[i];\n                    record = collection.find(r => r[this.primaryKey] === pid);\n\n                    if (!record) {\n                        break;\n                    }\n                    collection = record[this.childDataKey];\n                }\n                if (record) {\n                    parentData = record;\n                }\n            }\n\n            parentData[this.childDataKey] = children;\n        }\n        this.selectionService.clearHeaderCBState();\n        this._pipeTrigger++;\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>): Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n            mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    public getDefaultExpandState(record: ITreeGridRecord) {\n        return record.children && record.children.length && record.level < this.expansionDepth;\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        if (parentRowID !== undefined && parentRowID !== null) {\n            super.endEdit(true);\n\n            const state = this.transactions.getState(parentRowID);\n            // we should not allow adding of rows as child of deleted row\n            if (state && state.type === TransactionType.DELETE) {\n                throw Error(`Cannot add child row to deleted parent row`);\n            }\n\n            const parentRecord = this.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n            this.summaryService.clearSummaryCache({rowID: parentRecord.rowID});\n            if (this.primaryKey && this.foreignKey) {\n                data[this.foreignKey] = parentRowID;\n                super.addRow(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.childDataKey;\n                if (this.transactions.enabled) {\n                    const rowId = this.primaryKey ? data[this.primaryKey] : data;\n                    const path: any[] = [];\n                    path.push(...this.generateRowPath(parentRowID));\n                    path.push(parentRowID);\n                    this.transactions.add({\n                        id: rowId,\n                        path: path,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n                this.onRowAdded.emit({ data });\n                this._pipeTrigger++;\n                this.notifyChanges();\n            }\n        } else {\n            if (this.primaryKey && this.foreignKey) {\n                const rowID = data[this.foreignKey];\n                this.summaryService.clearSummaryCache({rowID: rowID});\n            }\n            super.addRow(data);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        //  if this is flat self-referencing data, and CascadeOnDelete is set to true\n        //  and if we have transactions we should start pending transaction. This allows\n        //  us in case of delete action to delete all child rows as single undo action\n        this._gridAPI.deleteRowById(rowId);\n\n    }\n\n    /** @hidden */\n    public generateRowPath(rowId: any): any[] {\n        const path: any[] = [];\n        let record = this.records.get(rowId);\n\n        while (record.parent) {\n            path.push(record.parent.rowID);\n            record = record.parent;\n        }\n\n        return path.reverse();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.flatData || (this.flatData.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n        let record: ITreeGridRecord;\n\n        if (typeof(row) !== 'number') {\n            const rowData = row;\n            const rowID = this._gridAPI.get_row_id(rowData);\n            record = this.processedRecords.get(rowID);\n            this._gridAPI.expand_path_to_record(record);\n\n            if (this.paging) {\n                const rowIndex = this.processedExpandedFlatData.indexOf(rowData);\n                const page = Math.floor(rowIndex / this.perPage);\n\n                if (this.page !== page) {\n                    delayScrolling = true;\n                    this.page = page;\n                }\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.dataView.indexOf(record));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.dataView.indexOf(record));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData: any, rowIndex: Number): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        const source = [];\n\n        const process = (record) => {\n            if (record.summaries) {\n                source.push(null);\n                return;\n            }\n            source.push(record.data);\n        };\n\n        this.dataView.forEach(process);\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n\n    /**\n     * @hidden\n    */\n   protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - tree grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding, DoCheck, ChangeDetectionStrategy } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowDirective } from '../row.directive';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-row',\n    templateUrl: 'tree-grid-row.component.html',\n    providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowDirective<IgxTreeGridComponent> implements DoCheck {\n    private _treeRow: ITreeGridRecord;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1);\n     * const cells = row.cells;\n     * ```\n     */\n    @ViewChildren('treeCell')\n    public cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).set_row_expansion_state(this._treeRow.rowID, value);\n    }\n\n    /**\n     * @hidden\n     */\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number {\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showIndicator() {\n        return this.grid.loadChildrenOnDemand ?\n            this.grid.expansionStates.has(this.rowID) ?\n                this.treeRow.children && this.treeRow.children.length :\n                this.grid.hasChildrenKey ?\n                    this.rowData[this.grid.hasChildrenKey] :\n                    true :\n            this.treeRow.children && this.treeRow.children.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isLoading = this.grid.loadChildrenOnDemand ? this.grid.loadingRows.has(this.rowID) : false;\n        super.ngDoCheck();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseDirective } from '../grid';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { GridType } from '../common/grid.interface';\nimport { IGridSortingStrategy } from '../../data-operations/sorting-strategy';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n        const flatData: any[] = [];\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);\n        } else if (childDataKey) {\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n        }\n\n        grid.flatData = flatData;\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string,\n        map: Map<any, ITreeGridRecord>, flatData: any[]):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0, flatData);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number, flatData: any[]) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(record.data);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel\n            };\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        grid.processedExpandedFlatData = data.map(r => r.data);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);\n\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        sorting: IGridSortingStrategy,\n        id: string,\n        pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n\n        let result: ITreeGridRecord[];\n        if (!expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.treeGridSort(hierarchicalData, expressions, sorting);\n        }\n        const filteredSortedData = [];\n        this.flattenTreeGridRecords(result, filteredSortedData);\n        grid.filteredSortedData = filteredSortedData;\n\n        return result;\n    }\n\n    private flattenTreeGridRecords(records: ITreeGridRecord[], flatData: any[]) {\n        if (records && records.length) {\n            for (const record of records) {\n                flatData.push(record.data);\n                this.flattenTreeGridRecords(record.children, flatData);\n            }\n        }\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        if (!grid.paging) {\n            return collection;\n        }\n\n        const len = collection.length;\n        const totalPages = Math.ceil(len / perPage);\n\n        const state = {\n            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state);\n        grid.pagingState = state;\n        (grid as any)._page = state.index;\n\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (grid.transactions.enabled) {\n            const aggregatedChanges = grid.transactions.getAggregatedChanges(true);\n            if (aggregatedChanges.length > 0) {\n                const primaryKey = grid.primaryKey;\n                if (!primaryKey) {\n                    return collection;\n                }\n\n                const foreignKey = grid.foreignKey;\n                const childDataKey = grid.childDataKey;\n\n                if (foreignKey) {\n                    const flatDataClone = cloneArray(collection);\n                    return DataUtil.mergeTransactions(\n                        flatDataClone,\n                        aggregatedChanges,\n                        grid.primaryKey);\n                } else if (childDataKey) {\n                    const hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);\n                    return DataUtil.mergeHierarchicalTransactions(\n                        hierarchicalDataClone,\n                        aggregatedChanges,\n                        childDataKey,\n                        grid.primaryKey);\n                }\n            }\n        }\n        return collection;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject,\n     ChangeDetectionStrategy, NgZone, OnInit, Input, TemplateRef } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { getNodeSizeViaRange, PlatformUtil } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseDirective } from '../grid';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { HammerGesturesManager } from '../../core/touch';\nimport { GridType } from '../common/grid.interface';\nimport { IgxGridExpandableCellComponent } from '../grid/expandable-cell.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-cell',\n    templateUrl: 'tree-cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxTreeGridCellComponent extends IgxGridExpandableCellComponent {\n    private treeGridAPI: IgxTreeGridAPIService;\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                touchManager: HammerGesturesManager,\n                @Inject(DOCUMENT) public document,\n                protected platformUtil: PlatformUtil) {\n        super(selectionService, crudService, gridAPI, cdr, element, zone, touchManager, document, platformUtil);\n        this.treeGridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    level = 0;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    showIndicator = false;\n\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.set_row_expansion_state(this.row.rowID, !this.row.expanded, event);\n    }\n\n    /**\n     * @hidden\n     */\n    public onLoadingDblClick(event: Event) {\n        event.stopPropagation();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';\nimport { GridType } from '../common/grid.interface';\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSummary',\n    pure: true\n})\nexport class IgxTreeGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(flatData: ITreeGridRecord[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(grid, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(grid: IgxTreeGridComponent, collection: ITreeGridRecord[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            const isExpanded = record.children && record.children.length > 0 && record.expanded;\n\n            if (summaryPosition === GridSummaryPosition.bottom && !isExpanded) {\n                let childRecord = record;\n                let parent = record.parent;\n\n                while (parent) {\n                    const children = parent.children;\n\n                    if (children[children.length - 1] === childRecord ) {\n                        let childData = children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                        childData = this.removeDeletedRecord(grid, parent.rowID, childData);\n                        const summaries = grid.summaryService.calculateSummaries(parent.rowID, childData);\n                        const summaryRecord: ISummaryRecord = {\n                            summaries: summaries,\n                            max: maxSummaryHeight,\n                            cellIndentation: parent.level + 1\n                        };\n                        recordsWithSummary.push(summaryRecord);\n\n                        childRecord = parent;\n                        parent = childRecord.parent;\n                    } else {\n                        break;\n                    }\n                }\n            } else if (summaryPosition === GridSummaryPosition.top && isExpanded) {\n                let childData = record.children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                childData = this.removeDeletedRecord(grid, record.rowID, childData);\n                const summaries = grid.summaryService.calculateSummaries(record.rowID, childData);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight,\n                    cellIndentation: record.level + 1\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n        }\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, rowId, data) {\n        if (!grid.transactions.enabled || !grid.cascadeOnDelete) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        let row = grid.records.get(rowId);\n        if (!row && deletedRows.lenght === 0) { return []; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowId = row.rowID;\n            if (deletedRows.indexOf(rowId) !== -1) {\n                return [];\n            }\n            row = row.parent;\n        }\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\nimport { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe,\n    IgxTreeGridSummaryPipe,\n    IgxRowLoadingIndicatorTemplateDirective\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxRowLoadingIndicatorTemplateDirective,\n    IgxGridCommonModule\n  ],\n  imports: [\n    IgxGridCommonModule,\n  ]\n})\nexport class IgxTreeGridModule {\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { first } from 'rxjs/operators';\nimport { ISelectionNode } from '../selection/selection.service';\nimport { isIE } from '../../core/utils';\nimport { FilterMode } from '../common/enums';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxHierarchicalGridNavigationService extends IgxGridNavigationService {\n    public grid: IgxHierarchicalGridComponent;\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false) {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-hierarchical-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-hierarchical-grid-row';\n    }\n\n    protected getRowByIndex(index) {\n        const row = super.getRowByIndex(index) as any;\n        return row;\n    }\n\n    private getChildContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode.parentNode;\n    }\n\n    private getChildGridRowContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode;\n    }\n\n    private getChildGrid(childGridID, grid) {\n        const cgrid = grid.hgridAPI.getChildGrids(true).filter((g) => g.id === childGridID)[0];\n        return cgrid;\n    }\n\n    private _isScrolledToBottom(grid) {\n        const scrollTop = grid.verticalScrollContainer.scrollPosition;\n        const scrollHeight = grid.verticalScrollContainer.getScroll().scrollHeight;\n        return scrollHeight === 0 || Math.round(scrollTop + grid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n    private getIsChildAtIndex(index) {\n        return this.grid.isChildGridRecord(this.grid.dataView[index]);\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (isSummary) {\n            const summaryRow = this.grid.summariesRowList.toArray()[0].nativeElement;\n            return summaryRow.querySelector(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        }\n        const row = this.getRowByIndex(rowIndex);\n        return row.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        if (selectedNode.isSummaryRow) { return; }\n        const prevElem = rowElement.previousElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (prevElem) {\n            const nodeName = prevElem.children[0].nodeName.toLowerCase();\n            const isElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isElemChildGrid) {\n                this.focusPrevChild(prevElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateUp(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== 0) {\n            // handle scenario when prev item is child grid but is not yet in view\n            const isPrevChildGrid = this.getIsChildAtIndex(currentRowIndex - 1);\n            if (!isPrevChildGrid) {\n                super.navigateUp(rowElement, selectedNode);\n            } else {\n                this.scrollGrid(this.grid, -rowElement.offsetHeight,\n                    () => {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                        this.navigateUp(rowElement, selectedNode);\n                    });\n            }\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === 0) {\n            // move to prev row in sibling layout or parent\n            this.focusPrev(visibleColumnIndex);\n        }\n    }\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        if (selectedNode.isSummaryRow) { return; }\n        const nextElem = rowElement.nextElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (nextElem) {\n            // next elem is in DOM\n            const nodeName = nextElem.children[0].nodeName.toLowerCase();\n            const isNextElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isNextElemChildGrid) {\n                this.focusNextChild(nextElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateDown(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== this.grid.dataView.length - 1) {\n            // scroll next in view\n            super.navigateDown(rowElement, selectedNode);\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === this.grid.dataView.length - 1) {\n            // move to next row in sibling layout or in parent\n            this.focusNext(visibleColumnIndex);\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        if (this.grid.parent !== null) {\n            // navigating in child\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().top - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top;\n            const topIsVisible = diff >= 0;\n            const scrollable = this.getNextScrollable(this.grid);\n            if (!topIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateTop(visibleColumnIndex));\n            } else {\n                super.navigateTop(visibleColumnIndex);\n            }\n        } else {\n            super.navigateTop(visibleColumnIndex);\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        // handle scenario where last index is child grid\n        // in that case focus cell in last data row\n        const lastIndex = this.grid.dataView.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n            if (verticalScrollTop === scrTopPosition) {\n                const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                    `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cells[cells.length - 1].focus();\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                    () => {\n                        const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                            `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                        if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                    });\n            }\n        } else  if (this.grid.parent !== null) {\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const endIsVisible = diff < 0;\n            const scrollable = this.getNextScrollableDown(this.grid);\n            if (!endIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateBottom(visibleColumnIndex));\n            } else {\n                super.navigateBottom(visibleColumnIndex);\n            }\n        } else {\n            super.navigateBottom(visibleColumnIndex);\n        }\n    }\n    public goToLastCell() {\n        // handle scenario where last index is child grid\n        // in that case focus last cell in last data row\n        const lastIndex = this.grid.dataView.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n            if (verticalScrollTop === scrTopPosition) {\n                this.onKeydownEnd(targetIndex);\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                    () => {\n                        this.onKeydownEnd(targetIndex);\n                    });\n            }\n        } else {\n            super.goToLastCell();\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        if (this.grid.parent && !isSummary) {\n            // handle scenario where last child row might not be in view\n            // parent should scroll to child grid end\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diffBottom =\n                childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n            const row = this.grid.getRowByIndex(rowIndex).element.nativeElement;\n            const rowBottom = row.getBoundingClientRect().bottom;\n            const rowIsVisible = rowBottom <= this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridTop = this._getMaxTop(this.grid);\n            const diffTop = row.getBoundingClientRect().bottom -\n                row.offsetHeight - gridTop;\n            const endIsVisible = diffBottom <= 0;\n            const topVisible = diffTop >= 0;\n            if (!endIsVisible && !rowIsVisible) {\n                this.scrollGrid(this.grid.parent, diffBottom, () => super.onKeydownEnd(rowIndex));\n            } else if (!topVisible) {\n                const scrGrid = this.grid.verticalScrollContainer.scrollPosition !== 0 ? this.grid :\n                    this.getNextScrollable(this.grid).grid;\n                const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                    this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : this.grid.rootGrid;\n                this.scrollGrid(topGrid, diffTop, () => super.onKeydownEnd(rowIndex));\n            } else {\n                super.onKeydownEnd(rowIndex, isSummary);\n            }\n        } else {\n            super.onKeydownEnd(rowIndex, isSummary);\n        }\n\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getScroll();\n        if (verticalScroll.scrollTop === 0 && this.grid.parent) {\n            // scroll parent so that current child is in view\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        } else {\n            super.goToFirstCell();\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        if (this.grid.rowInEditMode) {\n            super.performTab(currentRowEl, selectedNode);\n            return;\n        }\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        const summaryRows = this.grid.summariesRowList.toArray();\n        const hasSummaries = summaryRows.length > 0;\n        const isLastDataRow = rowIndex === this.grid.dataView.length - 1;\n        const nextIsDataRow = this.grid.dataRowList.find(row => row.index === rowIndex + 1);\n        const isLastColumn = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;\n        const isLastSummaryRow = hasSummaries && isSummaryRow;\n        const nextIndex = rowIndex + 1;\n        const virt = this.grid.verticalScrollContainer;\n        const isNextChild = nextIndex <= virt.igxForOf.length - 1 &&\n            this.grid.isChildGridRecord(virt.igxForOf[nextIndex]);\n        if (!nextIsDataRow && !(isLastDataRow && hasSummaries) && isLastColumn && !isSummaryRow) {\n            // navigating in child, next is not summary\n            const childContainer = this.getChildGridRowContainer();\n            const nextIsSiblingChild = this.grid.parent ? !!childContainer.nextElementSibling : false;\n            if (nextIsSiblingChild) {\n                this.focusNextChildDOMElem(childContainer, this.grid.parent);\n            } else if (isNextChild) {\n                const isInView = virt.state.startIndex + virt.state.chunkSize > nextIndex;\n                if (!isInView) {\n                    this.scrollGrid(this.grid, 'next', () => {\n                        this.focusNextChildDOMElem(currentRowEl, this.grid);\n                    });\n                } else {\n                    this.focusNextChildDOMElem(currentRowEl, this.grid);\n                }\n            } else if (this.grid.parent && this.grid.parent.summariesRowList.length > 0) {\n               this._navigateToNextParentRow(currentRowEl);\n            } else {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else if (isLastSummaryRow && isLastColumn && this.grid.parent) {\n            this._navigateToNextParentRow(currentRowEl);\n        } else  if (isLastDataRow && hasSummaries && isLastColumn && this.grid.parent) {\n            // navigating in child rows, next is child grid's summary row\n           this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid.parent, true);\n        } else {\n            super.performTab(currentRowEl, selectedNode);\n        }\n    }\n\n    private _navigateToNextParentRow(currentRowEl: any): void {\n         // next is parent summary or next parent row\n         const parent = this.grid.parent;\n         const parentHasSummary = parent.summariesRowList.length > 0;\n         const parentRowIndex = parseInt(\n            this.getClosestElemByTag(currentRowEl, 'igx-child-grid-row').parentNode.getAttribute('data-rowindex'), 10);\n         const isLastRowInParent = parent.dataView.length - 1 === parentRowIndex;\n         // check if next is sibling\n         const childRowContainer = this.getChildGridRowContainer(this.grid);\n         const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n         if (isLastRowInParent && parentHasSummary && !nextIsSiblingChild) {\n             // next is parent summary\n             const parentSummary = parent.summariesRowList.first.nativeElement;\n             parent.navigation.focusNextRow(parentSummary, 0, parent, true);\n         } else {\n             // next is sibling or parent\n             this.focusNext(0);\n         }\n    }\n\n    private focusNextChildDOMElem(currentRowEl, grid) {\n        const gridElem = currentRowEl.nextElementSibling.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n        if (childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n            childGrid.navigation.moveFocusToFilterCell(true);\n            return;\n        }\n        this.focusNextChild(currentRowEl.nextElementSibling, 0, grid);\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        if (column.visibleIndex === 0 && this.grid.parent) {\n            eventArgs.preventDefault();\n            let targetGrid = this.grid.parent;\n            const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n            if (prevSiblingChild) {\n                const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                targetGrid = this.getChildGrid(gridElem.getAttribute('id'), this.grid.parent);\n            }\n            this.focusPrev(targetGrid.unpinnedColumns[targetGrid.unpinnedColumns.length - 1].visibleIndex);\n        } else {\n            super.navigatePrevFilterCell(column, eventArgs);\n        }\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            const dataRows = this.grid.rowList.toArray();\n            const hasRows = dataRows.length !== 0;\n            const summaryRows = this.grid.summariesRowList.toArray();\n            const hasSummaries = summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0;\n            if (hasRows) {\n                this.focusNextRow(dataRows[0].nativeElement, 0, this.grid, false);\n            } else if (hasSummaries) {\n                this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid, true);\n            } else {\n                this.focusNext(0);\n            }\n            eventArgs.preventDefault();\n        } else {\n            super.navigateNextFilterCell(column, eventArgs);\n        }\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        if (this.grid.rowInEditMode) {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n            return;\n        }\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0 && rowIndex === 0 && this.grid.parent && !isSummary) {\n            if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n                if (prevSiblingChild) {\n                    const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                    this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n                } else {\n                    const selNode = {\n                        row: rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            }\n        } else if (visibleColumnIndex === 0 && currentRowEl.previousElementSibling &&\n            currentRowEl.previousElementSibling.children[0].tagName.toLowerCase() === 'igx-child-grid-row') {\n            const gridElem = this.getLastGridElem(currentRowEl.previousElementSibling);\n            this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n        } else if (visibleColumnIndex === 0 && isSummary) {\n            const lastRowIndex = this.grid.dataView.length - 1;\n            if (lastRowIndex === -1) {\n                // no child data\n                if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                    this.moveFocusToFilterCell();\n                } else {\n                    const selNode = {\n                        row: rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            } else if (!this.getIsChildAtIndex(lastRowIndex)) {\n                super.goToLastCell();\n            } else {\n                const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(lastRowIndex, true);\n                const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n                if (verticalScrollTop === scrTopPosition || isNaN(scrTopPosition)) {\n                    const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                    this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                } else {\n                    this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                        () => {\n                            const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                            this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                        });\n                }\n            }\n        } else {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n        }\n    }\n\n    public getFocusableGrid() {\n        return (isIE() && this.grid.rootGrid) ? this.grid.rootGrid : this.grid;\n    }\n\n    private getLastGridElem(trContainer) {\n        const children = trContainer.children;\n        const closestChild = children[children.length - 1].children[0].children[0];\n        return closestChild;\n    }\n\n    private performShiftTabIntoChild(gridElem, currentRowEl, rowIndex) {\n        const childGridID = gridElem.getAttribute('id');\n            const childGrid = this.getChildGrid(childGridID, this.grid) || this.getChildGrid(childGridID, this.grid.parent);\n            const lastIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n            const summaryRows = childGrid.summariesRowList.toArray();\n            if (summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0) {\n                // move focus to last summary row cell\n                const summaryRow = summaryRows[0].nativeElement;\n                this.focusPrevRow(summaryRow, lastIndex, childGrid, true, true);\n            } else if (childGrid.rowList.length === 0 &&\n             childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n                 // move to filter cell\n                childGrid.navigation.moveFocusToFilterCell();\n            } else if (childGrid.rowList.length === 0) {\n                // move to prev child or parent row\n                const prevChild = this.getSibling(childGrid);\n                if (prevChild) {\n                    this.performShiftTabIntoChild(prevChild, currentRowEl, rowIndex);\n                } else {\n                    const selNode = {\n                        row:  rowIndex,\n                        column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            } else {\n                // move to prev cell\n                childGrid.navigation.goToLastCell();\n            }\n    }\n\n    private getSibling(childGrid) {\n        const prevChildRow = childGrid.childRow.nativeElement.previousElementSibling;\n        if (prevChildRow) {\n            return prevChildRow.children[0].children[0];\n        }\n        return null;\n    }\n\n    private focusNextChild(elem, visibleColumnIndex, grid) {\n        const gridElem = elem.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.length === 0) {\n            this.focusNext(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the next child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        if (childGrid.verticalScrollContainer.state.startIndex !== 0) {\n            // scroll to top\n            this.scrollGrid(childGrid, 'top', () => this.focusNextRow(elem, visibleColumnIndex, childGrid));\n        } else {\n            this.focusNextRow(elem, visibleColumnIndex, childGrid);\n        }\n    }\n    private focusPrevChild(elem, visibleColumnIndex, grid) {\n        const grids = [];\n        const gridElems = Array.from(elem.querySelectorAll('igx-hierarchical-grid'));\n        const childLevel = grid.childLayoutList.first.level;\n        gridElems.forEach((hg) => {\n            const parentRow = this.getClosestElemByTag(hg, 'igx-child-grid-row');\n            if (parentRow && parseInt(parentRow.getAttribute('data-level'), 10) === childLevel) {\n                grids.push(hg);\n            }\n        });\n        const gridElem = grids[grids.length - 1];\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.length === 0) {\n            this.focusPrev(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the previous child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        const isScrolledToBottom = this._isScrolledToBottom(childGrid);\n        const lastIndex = childGrid.dataView.length - 1;\n        if (!isScrolledToBottom) {\n            // scroll to end\n            this.scrollGrid(childGrid, 'bottom', () => this.focusPrevChild(elem, visibleColumnIndex, grid));\n        } else {\n            const lastRowInChild = childGrid.getRowByIndex(lastIndex);\n            const isChildGrid = lastRowInChild.nativeElement.nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isChildGrid) {\n                this.focusPrevChild(lastRowInChild.nativeElement.parentNode, visibleColumnIndex, childGrid);\n            } else {\n                this.focusPrevRow(lastRowInChild.nativeElement, visibleColumnIndex, childGrid, true);\n            }\n        }\n    }\n    private focusPrev(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        let parentContainer = this.getChildContainer(currGrid);\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const prevIsSiblingChild = !!childRowContainer.previousElementSibling;\n        let prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n        if (prev) {\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n        } else {\n            this.scrollGrid(currGrid.parent, 'prev',\n                () => {\n                    parentContainer = this.getChildContainer(grid);\n                    childRowContainer = this.getChildGridRowContainer(grid);\n                    prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n                    if (prevIsSiblingChild) {\n                        this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n                    } else {\n                        this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n                    }\n                });\n        }\n    }\n\n    private getNextParentInfo(grid) {\n        // find next parent that is not at bottom\n        let currGrid = grid.parent;\n        let nextElem = this.getChildContainer(grid).nextElementSibling;\n        while (!nextElem && currGrid.parent !== null) {\n            nextElem = this.getChildContainer(currGrid).nextElementSibling;\n            currGrid = currGrid.parent;\n        }\n\n        return { grid: currGrid, nextElement: nextElem };\n    }\n    private getNextScrollable(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    private focusNext(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        const parentInfo = this.getNextParentInfo(currGrid);\n        const nextParentGrid = parentInfo.grid;\n        let nextParentElem = parentInfo.nextElement;\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n        let next = childRowContainer.nextElementSibling || nextParentElem;\n        const verticalScroll = nextParentGrid.verticalScrollContainer.getScroll();\n        const parentState = nextParentGrid.verticalScrollContainer.state;\n        const atLastChunk = parentState.startIndex + parentState.chunkSize ===\n         nextParentGrid.dataView.length;\n        if (next) {\n            if (nextIsSiblingChild) {\n                this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n            } else {\n                this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n            }\n        } else if (verticalScroll.scrollTop !==\n            verticalScroll.scrollHeight - nextParentGrid.verticalScrollContainer.igxForContainerSize && !atLastChunk) {\n            this.scrollGrid(nextParentGrid, 'next',\n                () => {\n                    nextParentElem = parentInfo.nextElement;\n                    childRowContainer = this.getChildGridRowContainer();\n                    next = childRowContainer.nextElementSibling || nextParentElem;\n                    if (next && nextIsSiblingChild) {\n                        this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n                    } else if (next) {\n                        this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n                    }\n                });\n        }\n    }\n    private getNextScrollableDown(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let scrollTop = currGrid.verticalScrollContainer.scrollPosition;\n        let scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;\n        let nonScrollable = scrollHeight === 0 ||\n            Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            scrollTop = currGrid.verticalScrollContainer.scrollPosition;\n            scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;\n            nonScrollable = scrollHeight === 0 ||\n                Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    private _getMinBottom(grid) {\n        let currGrid = grid;\n        let bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom);\n        }\n        return bottom;\n    }\n\n    private _getMaxTop(grid) {\n        let currGrid = grid;\n        let top = currGrid.tbody.nativeElement.getBoundingClientRect().top;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top);\n        }\n        return top;\n    }\n\n    private focusNextRow(elem, visibleColumnIndex, grid, isSummary?) {\n        const lastCellIndex = grid.unpinnedColumns[grid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) || grid.rowList.length === 0) {\n            const cell =\n                elem.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            const closestScrollableGrid = this.getNextScrollableDown(grid).grid;\n            // const diff = cell.getBoundingClientRect().bottom - grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridBottom = this._getMinBottom(grid);\n            const diff = cell.getBoundingClientRect().bottom - gridBottom;\n            const inView = diff <= 0;\n            const scrollTop = closestScrollableGrid.verticalScrollContainer.scrollPosition;\n            const scrollHeight = closestScrollableGrid.verticalScrollContainer.getScroll().scrollHeight;\n            const canScroll = !(scrollHeight === 0 ||\n                Math.round(scrollTop + closestScrollableGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight);\n            if (!inView && canScroll) {\n                this.scrollGrid(closestScrollableGrid, diff, () => cell.focus({ preventScroll: true }));\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusNextRow(elem, visibleColumnIndex, grid, isSummary);\n            });\n        }\n    }\n    public getColumnUnpinnedIndex(visibleColumnIndex: number, grid?: IgxHierarchicalGridComponent) {\n        const currGrid = grid || this.grid;\n        const column = currGrid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return currGrid.pinnedColumns.length ? currGrid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    private focusPrevRow(elem, visibleColumnIndex, grid, inChild?, isSummary?) {\n        const lastCellIndex = grid.unpinnedColumns[grid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex)) {\n            const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n            const cells = elem.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            let cell = cells[cells.length - 1];\n            const rIndex = parseInt(elem.getAttribute('data-rowindex'), 10);\n            const scrGrid = grid.verticalScrollContainer.scrollPosition !== 0 ? grid :\n                this.getNextScrollable(grid).grid;\n            const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : grid.rootGrid;\n            const gridTop = this._getMaxTop(grid);\n            const scrTop = scrGrid.verticalScrollContainer.scrollPosition;\n            const diff = cell.getBoundingClientRect().bottom -\n                cell.offsetHeight - gridTop;\n            if (scrTop !== 0 && diff < 0 && !inChild) {\n                this.scrollGrid(scrGrid, diff, () => {\n                    const el = !isSummary ? grid.navigation.getRowByIndex(rIndex) : elem;\n                    cell = el.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`)[0];\n                    cell.focus({ preventScroll: true });\n                });\n            } else if (diff < 0 && inChild) {\n                this.scrollGrid(topGrid, diff, () => {\n                    cell.focus({ preventScroll: true });\n                });\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusPrevRow(elem, visibleColumnIndex, grid, inChild, isSummary);\n            });\n        }\n    }\n\n    private horizontalScrollGridToIndex(grid, visibleColumnIndex, callBackFunc) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex, grid);\n        grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(callBackFunc);\n        if (grid.dataRowList.length > 0) {\n            grid.dataRowList.first.virtDirRow.scrollTo(unpinnedIndex);\n        } else {\n            grid.headerContainer.scrollTo(unpinnedIndex);\n        }\n\n    }\n    private scrollGrid(grid, target, callBackFunc) {\n        this.getFocusableGrid().nativeElement.focus({preventScroll: true});\n        requestAnimationFrame(() => {\n            if (typeof target === 'number') {\n                grid.verticalScrollContainer.addScrollTop(target);\n            } else {\n                switch (target) {\n                    case 'top': grid.verticalScrollContainer.scrollTo(0); break;\n                    case 'bottom': grid.verticalScrollContainer.scrollTo(grid.dataView.length - 1); break;\n                    case 'next': grid.verticalScrollContainer.scrollNext(); break;\n                    case 'prev': grid.verticalScrollContainer.scrollPrev(); break;\n                }\n            }\n            grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(callBackFunc);\n        });\n    }\n\n    private _navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        const scrollable = this.getNextScrollable(this.grid);\n        const grid = scrollable.grid;\n        const scrTop = grid.verticalScrollContainer.scrollPosition;\n        const containerTop = scrollable.prev.nativeElement.parentNode.parentNode.parentNode.parentNode;\n        const top = parseInt(containerTop.style.top, 10);\n        if (scrTop !== 0 && top < 0) {\n            this.scrollGrid(grid, -prevElem.offsetHeight,\n                () => super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex }));\n        } else {\n            super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex });\n        }\n    }\n\n    private _navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n        const endIsVisible = diff < 0;\n        const scrollable = this.getNextScrollableDown(this.grid);\n        const grid = scrollable.grid;\n        if (!endIsVisible) {\n            this.scrollGrid(grid, nextElem.offsetHeight,\n                () => super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex }));\n        } else {\n            super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex });\n        }\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.dataRowList.find(element => element.index === nextIndex).element.nativeElement;\n   }\n}\n","import {\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    Optional,\n    Input,\n    ViewChild,\n    TemplateRef,\n    Directive\n} from '@angular/core';\nimport { IgxGridBaseDirective, IgxGridTransaction } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IgxSummaryOperand } from '../summaries/grid-summary';\nimport { IgxOverlayService, IgxTransactionService, Transaction, TransactionService, State } from '../../services/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxColumnGroupComponent } from '../columns/column-group.component';\nimport { IgxColumnComponent } from '../columns/column.component';\n\nexport const IgxHierarchicalTransactionServiceFactory = {\n    provide: IgxGridTransaction,\n    useFactory: hierarchicalTransactionServiceFactory\n};\n\nexport function hierarchicalTransactionServiceFactory() {\n    return new IgxTransactionService();\n}\n\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\n\n@Directive({\n    selector: '[igxHierarchicalGridBase]'\n})\nexport class IgxHierarchicalGridBaseDirective extends IgxGridBaseDirective {\n    public rootGrid;\n\n    @Input()\n    public expandChildren: boolean;\n\n    @Input()\n    public hasChildrenKey: string;\n\n    @Input()\n    public showExpandAll = false;\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n     /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public hgridAPI: IgxHierarchicalGridAPIService;\n\n    /**\n     * @hidden\n     */\n    public parentIsland: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n    */\n    public childRow: IgxChildGridRowComponent;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        @Inject(IgxGridTransaction) protected transactionFactory: TransactionService<Transaction, State>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public createColumnsList(cols: Array<any>) {\n        const columns = [];\n        const topLevelCols = this.onlyTopLevel(cols);\n        topLevelCols.forEach((col) => {\n            const ref = this._createColumn(col);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        const result = flatten(columns);\n        this.columnList.reset(result);\n        this.columnList.notifyOnChanges();\n        this.initPinning();\n    }\n\n    protected _createColumn(col) {\n        let ref;\n        if (col instanceof IgxColumnGroupComponent) {\n            ref = this._createColGroupComponent(col);\n        } else {\n            ref = this._createColComponent(col);\n        }\n        return ref;\n    }\n\n    protected _createColGroupComponent(col: IgxColumnGroupComponent) {\n        const factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);\n        const ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);\n        ref.changeDetectorRef.detectChanges();\n        factoryGroup.inputs.forEach((input) => {\n            const propName = input.propName;\n            (<any>ref.instance)[propName] = (<any>col)[propName];\n        });\n        if (col.children.length > 0) {\n            const newChildren = [];\n            col.children.forEach(child => {\n                const newCol = this._createColumn(child).instance;\n                newCol.parent = ref.instance;\n                newChildren.push(newCol);\n            });\n            (<IgxColumnGroupComponent>ref.instance).children.reset(newChildren);\n            (<IgxColumnGroupComponent>ref.instance).children.notifyOnChanges();\n        }\n        return ref;\n    }\n\n    protected _createColComponent(col) {\n        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);\n        factoryColumn.inputs.forEach((input) => {\n            const propName = input.propName;\n            if (!((<any>col)[propName] instanceof IgxSummaryOperand)) {\n                (<any>ref.instance)[propName] = (<any>col)[propName];\n            } else {\n                (<any>ref.instance)[propName] = col[propName].constructor;\n            }\n        });\n        return ref;\n    }\n\n    protected getGridsForIsland(rowIslandID: string) {\n        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);\n    }\n\n    protected getChildGrid(path: Array<IPathSegment>) {\n        if (!path) {\n            return;\n        }\n        return this.hgridAPI.getChildGrid(path);\n    }\n}\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import { Directive } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\n\n/**\n * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}\n *\n *```html\n * <igx-slider>\n *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbFrom]'\n})\nexport class IgxThumbFromTemplateDirective {}\n\n/**\n * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}\n *\n * ```html\n * <igx-slider>\n *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbTo]'\n})\nexport class IgxThumbToTemplateDirective {}\n\n/**\n * Template directive that allows you to set a custom template, represeting primary/secondary tick labels of the {@link IgxSliderComponent}\n *\n * @context {@link IgxTicksComponent.context}\n */\n@Directive({\n    selector: '[igxSliderTickLabel]'\n})\nexport class IgxTickLabelTemplateDirective {}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n\nexport enum IgxSliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nexport enum SliderHandle {\n    FROM,\n    TO\n}\n\n/**\n * Slider Tick labels Orientation\n */\nexport enum TickLabelsOrientation {\n    Horizontal,\n    TopToBottom,\n    BottomToTop\n}\n\n/**\n * Slider Ticks orientation\n */\nexport enum TicksOrientation {\n    Top,\n    Bottom,\n    Mirror\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { IPathSegment } from './hierarchical-grid-base.directive';\nimport { IgxGridBaseDirective, GridBaseAPIService } from '../grid';\nimport { GridType } from '../common/grid.interface';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxHierarchicalGridAPIService extends GridBaseAPIService<IgxGridBaseDirective & GridType> {\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<string, Map<any, IgxHierarchicalGridComponent>> =\n        new Map<string, Map<any, IgxHierarchicalGridComponent>>();\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childGrids.delete(rowIsland.key);\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(key: string) {\n        return this.childRowIslands.get(key);\n    }\n\n    getChildGrid(path: Array<IPathSegment>) {\n        const currPath = path;\n        let grid;\n        const pathElem = currPath.shift();\n        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);\n        if (childrenForLayout) {\n            const childGrid = childrenForLayout.get(pathElem.rowID);\n            if (currPath.length === 0) {\n                grid = childGrid;\n            } else {\n                grid = childGrid.hgridAPI.getChildGrid(currPath);\n            }\n        }\n        return grid;\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        const allChildren = [];\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid) => {\n                allChildren.push(grid);\n                if (inDepth) {\n                    const children = grid.hgridAPI.getChildGrids(inDepth);\n                    children.forEach((item) => {\n                        allChildren.push(item);\n                    });\n                }\n            });\n        });\n\n        return allChildren;\n    }\n\n    getParentRowId(childGrid: IgxHierarchicalGridComponent) {\n        let rowID;\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid, key) => {\n                if (grid === childGrid) {\n                    rowID = key;\n                    return;\n                }\n            });\n        });\n        return rowID;\n    }\n\n    registerChildGrid(parentRowID: string|object, rowIslandKey: string, grid: IgxHierarchicalGridComponent) {\n        let childrenForLayout = this.childGrids.get(rowIslandKey);\n        if (!childrenForLayout) {\n            this.childGrids.set(rowIslandKey, new Map<any, IgxHierarchicalGridComponent>());\n            childrenForLayout = this.childGrids.get(rowIslandKey);\n        }\n        childrenForLayout.set(parentRowID, grid);\n    }\n\n    getChildGridsForRowIsland(rowIslandKey): IgxHierarchicalGridComponent[] {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        const children = [];\n        if (childrenForLayout) {\n            childrenForLayout.forEach((child) => {\n                children.push(child);\n            });\n        }\n        return children;\n    }\n\n    getChildGridByID(rowIslandKey, rowID) {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        return childrenForLayout.get(rowID);\n    }\n\n    public get_row_expansion_state(record: any): boolean {\n        let inState;\n        if (record.childGridsData !== undefined) {\n            const ri = record.rowID;\n            const rec = this.grid.primaryKey ? this.get_rec_by_id(ri) : ri;\n            inState = !!super.get_row_expansion_state(rec);\n        } else {\n            inState = !!super.get_row_expansion_state(record);\n        }\n        return inState && (this.grid as any).childLayoutList.length !== 0;\n    }\n\n    public allow_expansion_state_change(rowID, expanded): boolean {\n        const rec = this.get_rec_by_id(rowID);\n        return !!rec && this.grid.expansionStates.get(rowID) !== expanded;\n    }\n\n    public get_rec_by_id(rowID): any {\n        const data = this.get_all_data(false);\n        const index = this.get_row_index_in_data(rowID);\n        return data[index];\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    Input,\n    QueryList,\n    OnInit,\n    Inject,\n    ElementRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    IterableDiffers,\n    ViewContainerRef,\n    NgZone,\n    AfterViewInit,\n    OnChanges,\n    Output,\n    EventEmitter,\n    Optional,\n    OnDestroy,\n    DoCheck\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridTransaction, IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { TransactionService, Transaction, State } from '../../services';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\n\nimport { IgxOverlayService } from '../../services/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { GridType } from '../common/grid.interface';\nexport interface IGridCreatedEventArgs extends IBaseEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-row-island',\n    template: ``,\n    providers: [IgxRowIslandAPIService]\n})\nexport class IgxRowIslandComponent extends IgxHierarchicalGridBaseDirective\n            implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy, DoCheck {\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    public key: string;\n\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._defaultExpandState  = value;\n        this.rowIslandAPI.getChildGrids().forEach((grid) => {\n            if (document.body.contains(grid.nativeElement)) {\n                // Detect changes right away if the grid is visible\n                grid.expandChildren = value;\n                grid.markForCheck();\n            } else {\n                // Else defer the detection on changes when the grid gets into view for performance.\n                grid.updateOnRender = true;\n            }\n        });\n    }\n\n    /**\n     * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n     * ```typescript\n     * const expanded = this.rowIsland.expandChildren;\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    get expandChildren(): boolean {\n        return this._defaultExpandState;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public children = new QueryList<IgxRowIslandComponent>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: false })\n    public childColumns = new QueryList<IgxColumnComponent>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onLayoutChange = new EventEmitter<any>();\n\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Output()\n    public onGridCreated = new EventEmitter<IGridCreatedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    get id() {\n        const pId = this.parentId ? this.parentId.substring(this.parentId.indexOf(this.layout_id) + this.layout_id.length) + '-' : '';\n        return this.layout_id + pId +  this.key;\n    }\n\n    /**\n     * @hidden\n     */\n    get parentId() {\n       return this.parentIsland ? this.parentIsland.id : null;\n    }\n\n    /**\n     * @hidden\n     */\n    get level() {\n        let ptr = this.parentIsland;\n        let lvl = 0;\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parentIsland;\n        }\n        return lvl + 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public initialChanges = [];\n\n    /**\n     * @hidden\n     */\n    public rootGrid = null;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private layout_id = `igx-row-island-`;\n    private isInit = false;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions\n        );\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.rootGrid = this.hgridAPI.grid;\n        this.rowIslandAPI.rowIsland = this;\n    }\n\n    /**\n     * @hidden\n     */\n    ngDoCheck() {\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateChildren();\n        this.children.notifyOnChanges();\n        this.children.changes.pipe(takeUntil(this.destroy$))\n        .subscribe((change) => {\n            this.updateChildren();\n            // update existing grids since their child ri have been changed.\n            this.getGridsForIsland(this.key).forEach(grid => {\n                (grid as any).onRowIslandChange(this.children);\n            });\n        });\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            return colsArray.indexOf(item) === -1;\n        });\n        this.childColumns.reset(topCols);\n        this.columnList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => { this.updateColumnList(); });\n    }\n\n    protected updateChildren() {\n        if (this.children.first === this) {\n            this.children.reset(this.children.toArray().slice(1));\n        }\n        this.children.forEach(child => {\n            child.parentIsland = this;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.rowIslandAPI.register(this);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.registerChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.registerChildRowIsland(this);\n        }\n        this._init = false;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        this.onLayoutChange.emit(changes);\n        if (!this.isInit) {\n            this.initialChanges.push(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        // Override the base destroy because we don't have rendered anything to use removeEventListener on\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n        this.rowIslandAPI.unset(this.id);\n        if (this.parentIsland) {\n            this.getGridsForIsland(this.key).forEach(grid => {\n                this.cleanGridState(grid);\n                grid.hgridAPI.unsetChildRowIsland(this);\n            });\n            this.parentIsland.rowIslandAPI.unsetChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.unsetChildRowIsland(this);\n            this.cleanGridState(this.rootGrid);\n        }\n    }\n\n    private cleanGridState(grid) {\n        grid.childGridTemplates.forEach((tmpl) => {\n            tmpl.owner.cleanView(tmpl.context.templateID);\n        });\n        grid.childGridTemplates.clear();\n        grid.onRowIslandChange();\n    }\n\n    /**\n     * @hidden\n     */\n    reflow() {}\n\n    /**\n     * @hidden\n     */\n    calculateGridHeight() {}\n\n    protected updateColumnList() {\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            if (colsArray.indexOf(item) === -1) {\n                /* Reset the default width of the columns that come into this row island,\n                because the root catches them first during the detectChanges() and sets their defaultWidth. */\n                item.defaultWidth = undefined;\n                return true;\n            }\n            return false;\n        });\n        this.childColumns.reset(topCols);\n\n        if (this.parentIsland) {\n            this.parentIsland.columnList.notifyOnChanges();\n        } else {\n            this.rootGrid.columnList.notifyOnChanges();\n        }\n\n        this.rowIslandAPI.getChildGrids().forEach((grid: IgxHierarchicalGridComponent) => {\n            grid.createColumnsList(this.childColumns.toArray());\n            if (!document.body.contains(grid.nativeElement)) {\n                grid.updateOnRender = true;\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnInit,\n    ViewChild,\n    AfterViewInit,\n    SimpleChanges,\n    ComponentFactoryResolver\n} from '@angular/core';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxGridComponent } from '../grid/grid.component';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-child-grid-row',\n    templateUrl: './child-grid-row.component.html'\n})\nexport class IgxChildGridRowComponent implements AfterViewInit, OnInit {\nprivate resolver;\n\n    /**\n * Returns whether the row is expanded.\n * ```typescript\n * const RowExpanded = this.grid1.rowList.first.expanded;\n * ```\n */\n    public expanded = false;\n\n    @Input()\n    layout: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n     */\n    public get parentHasScroll() {\n        return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;\n    }\n\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public parentGridID: string;\n\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public rowData: any = [];\n\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    @ViewChild('hgrid', { static: true })\n    private hGrid: any/* TODO: IgxHierarchicalGridComponent*/;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    // TODO: Refactor\n    get parentGrid(): any/* TODO: IgxHierarchicalGridComponent*/ {\n        return this.gridAPI.grid;\n    }\n\n    @HostBinding('attr.data-level')\n    get level() {\n        return this.layout.level;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<any/* TODO: IgxHierarchicalGridComponent*/>,\n        public element: ElementRef,\n        resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef) {\n            this.resolver = resolver;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.layout.onLayoutChange.subscribe((ch) => {\n            this._handleLayoutChanges(ch);\n        });\n        const changes = this.layout.initialChanges;\n        changes.forEach(change => {\n            this._handleLayoutChanges(change);\n        });\n        this.hGrid.parent = this.parentGrid;\n        this.hGrid.parentIsland = this.layout;\n        this.hGrid.childRow =  this;\n        // handler logic that re-emits hgrid events on the row island\n        this.setupEventEmitters();\n        this.layout.onGridCreated.emit({\n            owner: this.layout,\n            parentID: this.rowData.rowID,\n            grid: this.hGrid\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.hGrid.childLayoutList = this.layout.children;\n        if (this.layout.childColumns.length > 0 && !this.hGrid.autoGenerate) {\n            this.hGrid.createColumnsList(this.layout.childColumns.toArray());\n        }\n        const layouts = this.hGrid.childLayoutList.toArray();\n        layouts.forEach((l) => this.hGrid.hgridAPI.registerChildRowIsland(l));\n        this.parentGrid.hgridAPI.registerChildGrid(this.rowData.rowID, this.layout.key, this.hGrid);\n        this.layout.rowIslandAPI.registerChildGrid(this.rowData.rowID, this.hGrid);\n\n        this.hGrid.cdr.detectChanges();\n    }\n\n    private setupEventEmitters() {\n        const destructor = takeUntil(this.hGrid.destroy$);\n\n        const factory = this.resolver.resolveComponentFactory(IgxGridComponent);\n        // exclude outputs related to two-way binding functionality\n        const inputNames = factory.inputs.map(input => input.propName);\n        const outputs = factory.outputs.filter(o => {\n            const matchingInputPropName = o.propName.slice(0, o.propName.indexOf('Change'));\n            return inputNames.indexOf(matchingInputPropName) === -1;\n        });\n        outputs.forEach(output => {\n            if (this.hGrid[output.propName]) {\n                this.hGrid[output.propName].pipe(destructor).subscribe((args) => {\n                    if (!args) {\n                        args = {};\n                    }\n                    args.owner = this.hGrid;\n                    this.layout[output.propName].emit(args);\n                });\n            }\n        });\n    }\n\n\n    private _handleLayoutChanges(changes: SimpleChanges) {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                this.hGrid[change] = changes[change].currentValue;\n            }\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    AfterViewInit,\n    AfterContentInit,\n    OnInit,\n    OnDestroy,\n    DoCheck,\n    EventEmitter,\n    Output\n} from '@angular/core';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { DisplayDensity } from '../../core/displayDensity';\nimport { IgxColumnComponent, } from '../columns/column.component';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { IgxTransactionService } from '../../services/index';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid',\n    templateUrl: 'hierarchical-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxHierarchicalGridAPIService },\n        { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxHierarchicalGridComponent) },\n        IgxGridSummaryService,\n        IgxFilteringService,\n        IgxHierarchicalGridNavigationService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ]\n})\nexport class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseDirective\n    implements GridType, AfterViewInit, AfterContentInit, OnInit, OnDestroy, DoCheck {\n\n    /**\n     * Sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this.h_id;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n        if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {\n            // If the height will change based on how much data there is, recalculate sizes in igxForOf.\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get data(): any[] {\n        return this._data;\n    }\n\n    /**\n     *@hidden\n     *@deprecated\n     * Sets the state of the `IgxHierarchicalGridComponent` containing which rows are expanded.\n    */\n    @Input()\n    @DeprecateProperty(`'hierarchicalState' property is deprecated. Use 'expansionStates' instead.`)\n    public get hierarchicalState() {\n        const res = Array.from(this.expansionStates.entries()).filter(({1: v}) => v === true).map(([k]) => k);\n        return res;\n    }\n    public set hierarchicalState(val) {\n        if (this.hasChildrenKey) {\n            val = val.filter(item => {\n                const rec = this.primaryKey ? this.data.find(x => x[this.primaryKey] === item.rowID) : item.rowID;\n                return rec[this.hasChildrenKey];\n            });\n        }\n        const expansionStates = new Map<any, boolean>();\n        val.forEach(item => {\n            const rec = this.primaryKey ? this.data.find(x => x[this.primaryKey] === item.rowID) : item.rowID;\n            expansionStates.set(rec, true);\n        });\n        this.expansionStates = expansionStates;\n        if (this.parent) {\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     *@hidden\n     *@deprecated\n     */\n    @Output()\n    @DeprecateProperty(`'hierarchicalStateChange' @Output property is deprecated. Use 'expansionStates' instead.`)\n    public hierarchicalStateChange = new EventEmitter<any>();\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public set filteredData(value) {\n        this._filteredData = value;\n\n\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._defaultExpandState  = value;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n     * ```typescript\n     * const expanded = this.grid.expandChildren;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get expandChildren(): boolean {\n        return this._defaultExpandState ;\n    }\n\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get foreignKey() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.parent.hgridAPI.getParentRowId(this);\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public childLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true })\n    public allLayoutList: QueryList<IgxRowIslandComponent>;\n\n    @ViewChild('hierarchical_record_template', { read: TemplateRef, static: true })\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n\n    @ViewChild('child_record_template', { read: TemplateRef, static: true })\n    protected childTemplate: TemplateRef<any>;\n\n    @ViewChild('headerHierarchyExpander', { read: ElementRef, static: true })\n    protected headerHierarchyExpander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public templateOutlets: QueryList<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxChildGridRowComponent, { read: IgxChildGridRowComponent })\n    public hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n\n    /**\n     * @hidden\n     */\n    get hasExpandableChildren() {\n        return !!this.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    public childLayoutKeys = [];\n\n    /**\n     * @hidden\n     */\n    public highlightedRowID = null;\n\n    /**\n     * @hidden\n     */\n    public updateOnRender = false;\n\n    /**\n     * @hidden\n     */\n    public parent = null;\n\n    private _data;\n    private _filteredData = null;\n    private h_id = `igx-hierarchical-grid-${NEXT_ID++}`;\n    private childGridTemplates: Map<any, any> = new Map();\n    private scrollTop = 0;\n    private scrollLeft = 0;\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        if (this._transactions instanceof IgxTransactionService) {\n            // transaction service cannot be injected in a derived class in a factory manner\n            this._transactions = new IgxTransactionService();\n        }\n        this.expansionStatesChange.pipe(takeUntil(this.destroy$)).subscribe((value: Map<any, boolean>) => {\n            const res = Array.from(value.entries()).filter(({1: v}) => v === true).map(([k]) => k);\n            this.hierarchicalStateChange.emit(res);\n        });\n        super.ngOnInit();\n    }\n\n    public ngDoCheck() {\n        if (this._cdrRequestRepaint && !this._init) {\n            this.updateSizes();\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.getScroll().addEventListener('scroll', this.hg_verticalScrollHandler.bind(this));\n        this.headerContainer.getScroll().addEventListener('scroll', this.hg_horizontalScrollHandler.bind(this));\n\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isChildGridRecord(rowData)) {\n                const cachedData = this.childGridTemplates.get(rowData.rowID);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n\n        if (this.parent) {\n            this._displayDensity = this.rootGrid._displayDensity;\n            this.rootGrid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this._displayDensity = this.rootGrid._displayDensity;\n                this.notifyChanges(true);\n                this.cdr.markForCheck();\n            });\n            this.childLayoutKeys = this.parentIsland.children.map((item) => item.key);\n        }\n\n        this.toolbarCustomContentTemplates = this.parentIsland ?\n            this.parentIsland.toolbarCustomContentTemplates :\n            this.toolbarCustomContentTemplates;\n\n        this.headSelectorsTemplates = this.parentIsland ?\n            this.parentIsland.headSelectorsTemplates :\n            this.headSelectorsTemplates;\n\n        this.rowSelectorsTemplates = this.parentIsland ?\n            this.parentIsland.rowSelectorsTemplates :\n            this.rowSelectorsTemplates;\n        this.dragIndicatorIconTemplate = this.parentIsland ?\n            this.parentIsland.dragIndicatorIconTemplate :\n            this.dragIndicatorIconTemplate;\n        this.rowExpandedIndicatorTemplate  = this.rootGrid.rowExpandedIndicatorTemplate;\n        this.rowCollapsedIndicatorTemplate   = this.rootGrid.rowCollapsedIndicatorTemplate;\n        this.headerCollapseIndicatorTemplate = this.rootGrid.headerCollapseIndicatorTemplate;\n        this.headerExpandIndicatorTemplate = this.rootGrid.headerExpandIndicatorTemplate;\n        this.hasChildrenKey = this.parentIsland ?\n         this.parentIsland.hasChildrenKey || this.rootGrid.hasChildrenKey :\n         this.rootGrid.hasChildrenKey;\n         this.showExpandAll = this.parentIsland ?\n         this.parentIsland.showExpandAll : this.rootGrid.showExpandAll;\n    }\n\n    private updateSizes() {\n        if (document.body.contains(this.nativeElement) && this.isPercentWidth) {\n            this.reflow();\n\n            this.hgridAPI.getChildGrids(false).forEach((grid) => {\n                grid.updateSizes();\n            });\n        }\n    }\n\n    protected _shouldAutoSize(renderedHeight) {\n        if (this.isPercentHeight && this.parent) {\n            return true;\n        }\n        return super._shouldAutoSize(renderedHeight);\n    }\n\n    public get outletDirective() {\n        return this.rootGrid._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateColumnList(false);\n        this.childLayoutKeys = this.parent ?\n            this.parentIsland.children.map((item) => item.key) :\n            this.childLayoutKeys = this.childLayoutList.map((item) => item.key);\n        this.childLayoutList.notifyOnChanges();\n        this.childLayoutList.changes.pipe(takeUntil(this.destroy$)).subscribe(() =>\n            this.onRowIslandChange()\n        );\n        super.ngAfterContentInit();\n    }\n\n    /** @hidden */\n    public featureColumnsWidth() {\n        return super.featureColumnsWidth(this.headerHierarchyExpander);\n    }\n\n    /**\n    * @hidden\n    */\n    public onRowIslandChange() {\n        if (this.parent) {\n            this.childLayoutKeys = this.parentIsland.children.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        } else {\n            this.childLayoutKeys = this.childLayoutList.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        }\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        this.updateColumnList();\n        const cols = change.filter(c => c.gridAPI.grid === this);\n        if (cols.length > 0) {\n            this.columnList.reset(cols);\n            super.onColumnsChanged(this.columnList);\n        }\n    }\n\n    private updateColumnList(recalcColSizes = true) {\n        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;\n        const nestedColumns = childLayouts.map((layout) => {\n            return layout.columnList.toArray();\n        });\n        const colsArray = [].concat.apply([], nestedColumns);\n        const colLength = this.columnList.length;\n        if (colsArray.length > 0) {\n            const topCols = this.columnList.filter((item) => {\n                return colsArray.indexOf(item) === -1;\n            });\n            this.columnList.reset(topCols);\n            if (recalcColSizes && this.columnList.length !== colLength) {\n                this.calculateGridSizes(false);\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.parent) {\n            this.hgridAPI.getChildGrids(true).forEach((grid) => {\n                if (!grid.childRow.cdr.destroyed) {\n                    grid.childRow.cdr.destroy();\n                }\n            });\n        }\n        if (this.parent && this.selectionService.activeElement) {\n            // in case selection is in destroyed child grid, selection should be cleared.\n            this._clearSeletionHighlights();\n        }\n        super.ngOnDestroy();\n    }\n\n    private _clearSeletionHighlights() {\n        [this.rootGrid, ...this.rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isRowHighlighted(rowData) {\n        return this.highlightedRowID === rowData.rowID;\n    }\n\n    /**\n     * @hidden\n     */\n    public isHierarchicalRecord(record: any): boolean {\n        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];\n    }\n\n    /**\n     * @hidden\n     */\n    public isChildGridRecord(record: any): boolean {\n        // Can be null when there is defined layout but no child data was found\n        return record.childGridsData !== undefined;\n    }\n\n    /**\n     * @hidden\n     */\n    public trackChanges(index, rec) {\n        if (rec.childGridsData !== undefined) {\n            // if is child rec\n            return rec.rowID;\n        }\n        return rec;\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(rowData): any {\n        if (this.isChildGridRecord(rowData)) {\n            const cachedData = this.childGridTemplates.get(rowData.rowID);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.dataView.indexOf(rowData)\n                };\n            } else {\n                const rowID = this.primaryKey ? rowData.rowID : this.data.indexOf(rowData.rowID);\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData,\n                    templateID: 'childRow-' + rowID,\n                    index: this.dataView.indexOf(rowData)\n                };\n            }\n        } else {\n            return {\n                $implicit: rowData,\n                templateID: 'dataRow',\n                index: this.dataView.indexOf(rowData)\n            };\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    public get rootGrid() {\n        let currGrid = this;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    /**\n     * @hidden\n    */\n    public get iconTemplate() {\n        const expanded = this.hasExpandedRecords() && this.hasExpandableChildren;\n        if (!expanded && this.showExpandAll) {\n            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;\n        } else {\n            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getDragGhostCustomTemplate(): TemplateRef<any> {\n        if (this.parentIsland) {\n            return this.parentIsland.getDragGhostCustomTemplate();\n        }\n        return super.getDragGhostCustomTemplate();\n    }\n\n    /**\n     * @hidden\n    */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - hierarchical grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    public getVisibleContentHeight() {\n        let height = super.getVisibleContentHeight();\n        if (this.parent) {\n            const rootHeight = this.rootGrid.getVisibleContentHeight();\n            const topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;\n            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n    */\n   toggleAll() {\n    const expanded = this.hasExpandedRecords() && this.hasExpandableChildren;\n    if (!expanded && this.showExpandAll) {\n        this.expandAll();\n    } else {\n        this.collapseAll();\n    }\n   }\n\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public hasExpandedRecords() {\n       if (this.expandChildren) {\n            return true;\n       }\n       let hasExpandedEntry = false;\n       this.expansionStates.forEach((value, key) => {\n           if (value) {\n            hasExpandedEntry = value;\n           }\n        });\n        return hasExpandedEntry;\n    }\n\n    public getDefaultExpandState(record: any) {\n        return this.expandChildren;\n\n    }\n\n    /**\n    * @hidden\n    */\n    public isExpanded(record: any): boolean {\n        return this.gridAPI.get_row_expansion_state(record);\n    }\n\n    /**\n     * @hidden\n     */\n    public viewCreatedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            const key = args.context.$implicit.rowID;\n            this.childGridTemplates.set(key, args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public viewMovedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit.rowID;\n            const cachedData = this.childGridTemplates.get(key);\n            cachedData.owner = args.owner;\n\n            this.childLayoutList.forEach((layout) => {\n                const relatedGrid = this.hgridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);\n                if (relatedGrid && relatedGrid.updateOnRender) {\n                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.\n                    relatedGrid.notifyChanges(true);\n                    relatedGrid.updateOnRender = false;\n                }\n            });\n\n            const childGrids = this.getChildGrids(true);\n            childGrids.forEach((grid) => {\n                if (grid.isPercentWidth) {\n                    grid.notifyChanges(true);\n                }\n                grid.updateScrollPosition();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public updateScrollPosition() {\n        const vScr = this.verticalScrollContainer.getScroll();\n        const hScr = this.headerContainer.getScroll();\n        if (vScr) {\n            vScr.scrollTop = this.scrollTop;\n        }\n        if (hScr) {\n            hScr.scrollLeft = this.scrollLeft;\n        }\n    }\n\n    protected getChildGrids(inDeph?: boolean) {\n        return this.hgridAPI.getChildGrids(inDeph);\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return super.generateDataFields(data).filter((field) => {\n            const layoutsList = this.parentIsland ? this.parentIsland.children : this.childLayoutList;\n            const keys = layoutsList.map((item) => item.key);\n            return keys.indexOf(field) === -1;\n        });\n    }\n\n\n    private hg_verticalScrollHandler(event) {\n        this.scrollTop = event.target.scrollTop;\n    }\n\n    public onContainerScroll() {\n        this.hideOverlays();\n    }\n\n    private hg_horizontalScrollHandler(event) {\n        this.scrollLeft = event.target.scrollLeft;\n    }\n}\n","import { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component,\n     OnInit, HostListener, NgZone } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { HammerGesturesManager } from '../../core/touch';\nimport { PlatformUtil } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-cell',\n    templateUrl: './../cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxHierarchicalGridCellComponent extends IgxGridCellComponent implements OnInit {\n\n    // protected hSelection;\n    protected _rootGrid;\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public cdr: ChangeDetectorRef,\n        private helement: ElementRef,\n        protected zone: NgZone,\n        touchManager: HammerGesturesManager,\n        protected platformUtil: PlatformUtil\n        ) {\n            super(selectionService, crudService, gridAPI, cdr, helement, zone, touchManager, platformUtil);\n         }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this._rootGrid = this._getRootGrid();\n    }\n\n    private _getRootGrid() {\n        let currGrid = this.grid;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    // TODO: Extend the new selection service to avoid complete traversal\n    _clearAllHighlights() {\n        [this._rootGrid, ...this._rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    onFocus(event) {\n        if (this.focused) {\n            return;\n        }\n        this._clearAllHighlights();\n        const currentElement = this.grid.nativeElement;\n        let parentGrid = this.grid;\n        let childGrid;\n        // add highligh to the current grid\n        if (this._rootGrid.id !== currentElement.id) {\n            currentElement.classList.add('igx-grid__tr--highlighted');\n        }\n\n        // add highligh to the current grid\n        while (this._rootGrid.id !== parentGrid.id) {\n            childGrid = parentGrid;\n            parentGrid = parentGrid.parent;\n\n            const parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);\n            parentGrid.highlightedRowID = parentRowID;\n        }\n        super.onFocus(event);\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     * @internal\n     */\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (event.altKey && !this.row.added) {\n            const collapse = this.row.expanded && (key === 'left' || key === 'arrowleft' || key === 'up' || key === 'arrowup');\n            const expand = !this.row.expanded && (key === 'right' || key === 'arrowright' || key === 'down' || key === 'arrowdown');\n            if (collapse) {\n                this.gridAPI.set_row_expansion_state(this.row.rowID, false, event);\n            } else if (expand) {\n                this.gridAPI.set_row_expansion_state(this.row.rowID, true, event);\n            }\n            return;\n        }\n        super.dispatchEvent(event);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    forwardRef,\n    ElementRef,\n    ViewChildren,\n    QueryList,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowDirective } from '../row.directive';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-row',\n    templateUrl: './hierarchical-row.component.html',\n    providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxHierarchicalRowComponent) }]\n})\nexport class IgxHierarchicalRowComponent extends IgxRowDirective<IgxHierarchicalGridComponent> {\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxHierarchicalGridCellComponent), { read: IgxHierarchicalGridCellComponent })\n    public cells: QueryList<IgxHierarchicalGridCellComponent>;\n\n    @ViewChild('expander', { read: ElementRef })\n    public expander: ElementRef<HTMLElement>;\n\n    get viewIndex(): number {\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n   protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultEmptyTemplate', { read: TemplateRef, static: true })\n   protected defaultEmptyTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n   protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n        /**\n     * Returns whether the row is expanded.\n     * ```typescript\n     * const RowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('class.igx-grid__tr--expanded')\n    public get expanded() {\n        return this.gridAPI.get_row_expansion_state(this.rowData);\n    }\n\n    public get hasChildren() {\n        return  !!this.grid.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid__tr--highlighted')\n    public get highlighted() {\n        return this.grid && this.grid.highlightedRowID === this.rowID;\n    }\n\n    /**\n    * @hidden\n    */\n   public expanderClick(event) {\n        event.stopPropagation();\n        this.toggle();\n    }\n\n    /**\n     * Toggles the hierarchical row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        if (this.added) {\n            return;\n        }\n        const grid = this.gridAPI.grid;\n        this.endEdit(grid.rootGrid);\n        this.gridAPI.set_row_expansion_state(this.rowID, !this.expanded);\n        grid.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public select = () => {\n        this.grid.selectRows([this.rowID]);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public deselect = () => {\n        this.grid.deselectRows([this.rowID]);\n    }\n\n    /**\n    * @hidden\n    */\n    public get iconTemplate() {\n        let expandable = true;\n        if (this.grid.hasChildrenKey) {\n            expandable = this.rowData[this.grid.hasChildrenKey];\n        }\n        if (!expandable) {\n            return this.defaultEmptyTemplate;\n        }\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    private endEdit(grid: IgxHierarchicalGridComponent) {\n        if (grid.crudService.inEditMode) {\n            grid.endEdit();\n        }\n        grid.hgridAPI.getChildGrids(true).forEach(g => {\n            if (g.crudService.inEditMode) {\n            g.endEdit();\n        }});\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { DataUtil } from '../../data-operations/data-util';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchical',\n    pure: true\n})\nexport class IgxGridHierarchicalPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(\n        collection: any,\n        state = new Map<any, boolean>(),\n        id: string,\n        primaryKey: any,\n        childKeys: string[],\n        pipeTrigger: number\n        ): any[] {\n        if (childKeys.length === 0) {\n            return collection;\n        }\n        const grid: IgxHierarchicalGridComponent = this.gridAPI.grid;\n        const result = this.addHierarchy(grid, cloneArray(collection), state, primaryKey, childKeys);\n\n        return result;\n    }\n\n    public addHierarchy<T>(grid, data: T[], state, primaryKey, childKeys: string[]): T[] {\n        const result = [];\n\n        data.forEach((v) => {\n            result.push(v);\n            const childGridsData = {};\n            childKeys.forEach((childKey) => {\n                const childData = v[childKey] ? v[childKey] : null;\n                childGridsData[childKey] = childData;\n            });\n            if (grid.gridAPI.get_row_expansion_state(v)) {\n                result.push({ rowID: primaryKey ? v[primaryKey] : v, childGridsData: childGridsData});\n            }\n        });\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchicalPaging',\n    pure: true\n})\nexport class IgxGridHierarchicalPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(collection: any[], page = 0, perPage = 15, id: string, pipeTrigger: number): any[] {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: any[] = DataUtil.page(cloneArray(collection), state);\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxGridModule } from '../grid/grid.module';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalRowComponent } from './hierarchical-row.component';\nimport { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxGridComponent } from '../grid/grid.component';\nimport { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxHierarchicalGridBaseDirective,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxGridHierarchicalPipe,\n    IgxGridHierarchicalPagingPipe\n  ],\n  exports: [\n    IgxGridModule,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent\n  ],\n  imports: [\n    IgxGridModule,\n  ],\n  entryComponents: [\n    IgxGridComponent\n  ]\n})\nexport class IgxHierarchicalGridModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Directive,\n    ContentChild\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/index';\n\n/**\n * IgxActionIcon is a container for the action nav icon of the IgxNavbar.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-action-icon'\n})\nexport class IgxActionIconDirective { }\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    templateUrl: 'navbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `\n    ]\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public navBar: IgxNavbarComponent;\n     *ngAfterViewInit(){\n     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     *}\n     *```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (this.actionIconTemplate || !this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    /**\n     *Sets whether the action button of the `IgxNavbarComponent` is visible.\n     *```html\n     *<igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     *```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     *An @Input property that sets the icon of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     *```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     *An @Input property that sets the title of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input() public title: string;\n\n    /**\n     *The event that will be thrown when the action is executed,\n     *provides reference to the `IgxNavbar` component as argument\n     *```typescript\n     *public actionExc(event){\n     *    alert(\"Action Execute!\");\n     *}\n     * //..\n     *```\n     *```html\n     *<igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     *```html\n     *<igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxActionIconDirective, { read: IgxActionIconDirective })\n    protected actionIconTemplate: IgxActionIconDirective;\n\n    /**\n     *@hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavbarComponent, IgxActionIconDirective],\n    exports: [IgxNavbarComponent, IgxActionIconDirective],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    SimpleChange,\n    ViewChild,\n    Renderer2\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\nimport { PlatformUtil } from '../core/utils';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer.html)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    templateUrl: 'navigation-drawer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            height: 100%;\n        }\n    `]\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n\n    private _isOpen = false;\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-nav-drawer')\n    public cssClass = true;\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [(isOpen)]='model.isOpen'></igx-nav-drawer>\n     * ```\n     */\n    @Input()\n    public get isOpen() {\n        return this._isOpen;\n    }\n    public set isOpen(value) {\n        this._isOpen = value;\n        this.isOpenChange.emit(this._isOpen);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output() public isOpenChange = new EventEmitter<boolean>();\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 68px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '68px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ? '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside', { static: true }) private _drawer: ElementRef;\n    @ViewChild('overlay', { static: true }) private _overlay: ElementRef;\n    @ViewChild('dummy', { static: true }) private _styleDummy: ElementRef;\n\n    /**\n      * @hidden\n      */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        protected renderer: Renderer2,\n        private _touchManager: HammerGesturesManager,\n        private platformUtil: PlatformUtil) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    // force class for width calc. TODO?\n                    this.renderer.addClass(this.styleDummy, this.css.drawer);\n                    this.renderer.addClass(this.styleDummy, this.css.mini);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.removeClass(this.styleDummy, this.css.drawer);\n                    this.renderer.removeClass(this.styleDummy, this.css.mini);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    // force class for width calc. TODO?\n                    this.renderer.addClass(this.styleDummy, this.css.drawer);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.removeClass(this.styleDummy, this.css.drawer);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        if (this.platformUtil.isBrowser) {\n            requestAnimationFrame(() => {\n                if (this.drawer) {\n                    this.renderer.setStyle(this.drawer, 'width', width);\n                }\n            });\n        } else {\n            this.renderer.setStyle(this.drawer, 'width', width);\n        }\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver && this.platformUtil.isBrowser) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        if (!this.platformUtil.isBrowser) {\n            return;\n        }\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.addClass(this.overlay, 'panning');\n            this.renderer.addClass(this.drawer, 'panning');\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.removeClass(this.overlay, 'panning');\n        this.renderer.removeClass(this.drawer, 'panning');\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                this.renderer.setStyle(this.drawer, 'transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n                this.renderer.setStyle(this.drawer, '-webkit-transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n            }\n            if (opacity !== undefined) {\n                this.renderer.setStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import {\n    Component,\n    Input,\n    HostListener,\n    ElementRef,\n    HostBinding,\n    Output,\n    EventEmitter,\n    OnInit,\n    OnDestroy,\n    TemplateRef\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle } from '../slider.common';\nimport { Subject } from 'rxjs';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-thumb',\n    templateUrl: 'thumb-slider.component.html',\n})\nexport class IgxSliderThumbComponent implements OnInit, OnDestroy {\n\n    private _isActive = false;\n    private _isPressed = false;\n    private _destroy$ = new Subject<boolean>();\n\n    private get thumbPositionX() {\n        const thumbBounderies = this.nativeElement.getBoundingClientRect();\n        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;\n        return thumbBounderies.left + thumbCenter;\n    }\n\n    public isActive = false;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public continuous: boolean;\n\n    @Input()\n    public thumbLabelVisibilityDuration;\n\n    @Input()\n    public disabled: boolean;\n\n    @Input()\n    public onPan: Subject<number>;\n\n    @Input()\n    public stepDistance: number;\n\n    @Input()\n    public step: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Input()\n    public deactiveState: boolean;\n\n    @Output()\n    public onThumbValueChange = new EventEmitter<number>();\n\n    @Output()\n    public onChange = new EventEmitter<any>();\n\n    @Output()\n    public onHoverChange = new EventEmitter<boolean>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.z-index')\n    public zIndex = 0;\n\n    @HostBinding('class.igx-slider__thumb-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__thumb-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this._isActive;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this._isActive;\n    }\n\n    @HostBinding('class.igx-slider__thumb--pressed')\n    public get thumbPressedClass() {\n        return this.isActive && this._isPressed;\n    }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get destroy(): Subject<boolean> {\n        return this._destroy$;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.onPan\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(mouseX =>\n                this.updateThumbValue(mouseX)\n            );\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    @HostListener('pointerenter')\n    public onPinterEnter() {\n        this.onHoverChange.emit(true);\n    }\n\n    @HostListener('pointerleave')\n    public onPointerLeave() {\n        this.onHoverChange.emit(false);\n    }\n\n    @HostListener('keydown', ['$event'])\n    public onKeyDown(event: KeyboardEvent) {\n        if (this.disabled) {\n            return;\n        }\n\n        let increment = 0;\n        if (event.key.endsWith('Left')) {\n            increment = this.step * - 1;\n        } else if (event.key.endsWith('Right')) {\n            increment = this.step;\n        } else {\n            return;\n        }\n\n        this.onChange.emit();\n        this.onThumbValueChange.emit(increment);\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n        this.zIndex = 0;\n    }\n\n    @HostListener('focus')\n    public onFocusListener() {\n        this.isActive = true;\n        this.zIndex = 1;\n    }\n\n    /**\n     * Show thumb label and ripple.\n     */\n    public showThumbIndicators() {\n        this.toggleThumbIndicators(true);\n    }\n\n    /**\n     * Hide thumb label and ripple.\n     */\n    public hideThumbIndicators() {\n        this.toggleThumbIndicators(false);\n    }\n\n    private updateThumbValue(mouseX: number) {\n        const updateValue = this.calculateTrackUpdate(mouseX);\n        if (this.isActive && updateValue !== 0) {\n            this.onThumbValueChange.emit(updateValue);\n        }\n    }\n\n    private calculateTrackUpdate(mouseX: number): number {\n        const scaleX = mouseX - this.thumbPositionX;\n        const stepDistanceCenter = this.stepDistance / 2;\n\n        // If the thumb scale range (slider update) is less thÃ n a half step,\n        // the position stays the same.\n        const scaleXPositive = Math.abs(scaleX);\n        if (scaleXPositive < stepDistanceCenter) {\n            return 0;\n        }\n\n        return this.stepToProceed(scaleX, this.stepDistance);\n    }\n\n    private stepToProceed(scaleX, stepDist) {\n        return Math.round(scaleX / stepDist) * this.step;\n    }\n\n    private toggleThumbIndicators(visible: boolean) {\n        this._isPressed = visible;\n\n        if (this.continuous || this.deactiveState) {\n            this._isActive = false;\n        } else {\n            this._isActive = visible;\n        }\n\n    }\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SwitchLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeSwitchEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Switch** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/switch.html)\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * Example:\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    templateUrl: 'switch.component.html'\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.switch.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     * ```typescript\n     * let switchId =  this.switch.id;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelId =  this.switch.labelId;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     * ```html\n     * <igx-switch [value] = \"switchValue\"></igx-switch>\n     * ```\n     * ```typescript\n     * let value =  this.switch.value;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     * ```html\n     * <igx-switch name = \"Switch1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let name =  this.switch.name;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.switch.tabindex;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.switch.labelPosition;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.switch.disableRipple;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRequired = this.switch.required;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.switch.ariaLabelledBy;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.switch.ariaLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     * @memberof IgxSwitchComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     * ```html\n     *  <igx-switch [checked] = \"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isChecked =  this.switch.checked;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-switch [disabled] = \"true\"><igx-switch>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.switch.disabled;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.switch.focused;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { Component, Input, TemplateRef, HostBinding, ElementRef } from '@angular/core';\nimport { SliderHandle } from '../slider.common';\n\n@Component({\n    selector: 'igx-thumb-label',\n    templateUrl: 'thumb-label.component.html'\n})\nexport class IgxThumbLabelComponent {\n    private _active: boolean;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Input()\n    public continuous: boolean;\n\n    @Input()\n    public deactiveState: boolean;\n\n    @HostBinding('class.igx-slider__label-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__label-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__label-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this.active;\n    }\n\n    @HostBinding('class.igx-slider__label-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this.active;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get active() {\n        return this._active;\n    }\n\n    public set active(val: boolean) {\n        if (this.continuous || this.deactiveState) {\n            this._active = false;\n        } else {\n            this._active = val;\n        }\n    }\n}\n","import { Component, Input, TemplateRef, HostBinding } from '@angular/core';\nimport { TicksOrientation, TickLabelsOrientation } from '../slider.common';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-ticks',\n    templateUrl: 'ticks.component.html',\n})\nexport class IgxTicksComponent {\n    @Input()\n    public primaryTicks: number;\n\n    @Input()\n    public secondaryTicks: number;\n\n    @Input()\n    public primaryTickLabels: boolean;\n\n    @Input()\n    public secondaryTickLabels: boolean;\n\n    @Input()\n    public ticksOrientation: TicksOrientation;\n\n    @Input()\n    public tickLabelsOrientation: TickLabelsOrientation;\n\n    @Input()\n    public maxValue: number;\n\n    @Input()\n    public minValue: number;\n\n    @Input()\n    public labelsViewEnabled: boolean;\n\n    @Input()\n    public labels: Array<number | string | boolean | null | undefined>;\n\n    @Input()\n    public tickLabelTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__ticks')\n    public ticksClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__ticks--top')\n    public get ticksTopClass() {\n        return this.ticksOrientation === TicksOrientation.Top;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__ticks--tall')\n    public get hasPrimaryClass() {\n        return this.primaryTicks > 0;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__tick-labels--top-bottom')\n    public get labelsTopToBottomClass() {\n        return this.tickLabelsOrientation === TickLabelsOrientation.TopToBottom;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__tick-labels--bottom-top')\n    public get labelsBottomToTopClass() {\n        return this.tickLabelsOrientation === TickLabelsOrientation.BottomToTop;\n    }\n\n    /**\n     * Returns the template context corresponding to\n     * {@link IgxTickLabelTemplateDirective}\n     *\n     * ```typescript\n     * return {\n     *  $implicit //returns the value per each tick label.\n     *  isPrimery //returns if the tick is primary.\n     *  labels // returns the {@link labels} collection.\n     *  index // returns the index per each tick of the whole sequence.\n     * }\n     * ```\n     *\n     * @param idx the index per each tick label.\n     */\n    public context(idx: number): any {\n        return {\n            $implicit: this.tickLabel(idx),\n            isPrimary: this.isPrimary(idx),\n            labels: this.labels,\n            index: idx\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public get ticksLength() {\n        return this.primaryTicks > 0 ?\n                ((this.primaryTicks - 1) * this.secondaryTicks) + this.primaryTicks :\n                this.secondaryTicks > 0 ? this.secondaryTicks : 0;\n    }\n\n    public hiddenTickLabels(idx: number) {\n        return this.isPrimary(idx) ? this.primaryTickLabels : this.secondaryTickLabels;\n    }\n\n    /**\n     * @hidden\n     */\n    public isPrimary(idx: number) {\n        return this.primaryTicks <= 0 ? false :\n            idx % (this.secondaryTicks + 1) === 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public tickLabel(idx: number) {\n        if (this.labelsViewEnabled) {\n            return this.labels[idx];\n        }\n\n        const labelStep = (Math.max(this.minValue, this.maxValue) - Math.min(this.minValue, this.maxValue)) / (this.ticksLength - 1);\n        const labelVal = labelStep * idx;\n\n        return (this.minValue + labelVal).toFixed(2);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'spreadTickLabels'\n})\nexport class IgxTickLabelsPipe implements PipeTransform {\n\n\n    public transform(labels: Array<string | number | boolean | null | undefined>, secondaryTicks: number) {\n        if (!labels) {\n            return;\n        }\n\n        const result = [];\n        labels.forEach(item => {\n            result.push(item);\n            for (let i = 0; i < secondaryTicks; i++) {\n                result.push('');\n            }\n        });\n\n        return result;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild,\n    TemplateRef,\n    ContentChild,\n    OnDestroy,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ChangeDetectorRef,\n    OnChanges,\n    NgZone\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSliderThumbComponent } from './thumb/thumb-slider.component';\nimport { Subject, merge, Observable, timer, pipe } from 'rxjs';\nimport { takeUntil, throttleTime } from 'rxjs/operators';\nimport { SliderHandle,\n    IgxThumbFromTemplateDirective,\n    IgxThumbToTemplateDirective,\n    IRangeSliderValue,\n    IgxSliderType,\n    ISliderValueChangeEventArgs,\n    TicksOrientation,\n    TickLabelsOrientation,\n    IgxTickLabelTemplateDirective\n} from './slider.common';\nimport { IgxThumbLabelComponent } from './label/thumb-label.component';\nimport { IgxTicksComponent } from './ticks/ticks.component';\nimport { IgxTickLabelsPipe } from './ticks/tick.pipe';\nimport { resizeObservable } from '../core/utils';\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [continuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    templateUrl: 'slider.component.html'\n})\nexport class IgxSliderComponent implements\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    AfterViewInit,\n    OnChanges,\n    OnDestroy {\n\n    // Limit handle travel zone\n    private _pMin = 0;\n    private _pMax = 1;\n\n    // From/upperValue in percent values\n    private _hasViewInit = false;\n    private _minValue = 0;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue?: number;\n    private _upperValue?: number;\n    private _continuous = false;\n    private _disabled = false;\n    private _step = 1;\n\n    // ticks\n    private _primaryTicks = 0;\n    private _secondaryTicks = 0;\n\n    private _labels = new Array<number|string|boolean|null|undefined>();\n    private _type = IgxSliderType.SLIDER;\n\n    private _destroyer$ = new Subject<boolean>();\n    private _indicatorsDestroyer$ = new Subject<boolean>();\n    private _indicatorsTimer: Observable<any>;\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ticks', { static: true })\n    private ticks: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxSliderThumbComponent)\n    private thumbs: QueryList<IgxSliderThumbComponent> = new QueryList<IgxSliderThumbComponent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxThumbLabelComponent)\n    private labelRefs: QueryList<IgxThumbLabelComponent> = new QueryList<IgxThumbLabelComponent>();\n\n    private get thumbFrom(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.FROM);\n    }\n\n    private get thumbTo(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.TO);\n    }\n\n    private get labelFrom(): IgxThumbLabelComponent {\n        return this.labelRefs.find(label => label.type === SliderHandle.FROM);\n    }\n\n    private get labelTo(): IgxThumbLabelComponent {\n        return this.labelRefs.find(label => label.type === SliderHandle.TO);\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('track', { static: true })\n    public trackRef: ElementRef;\n\n    /**\n     * @hidden\n     */\n    public stepDistance = this._step;\n\n    /**\n     * @hidden\n     */\n    public onPan: Subject<number> = new Subject<number>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbFromTemplateDirective, { read: TemplateRef })\n    public thumbFromTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbToTemplateDirective, { read: TemplateRef })\n    public thumbToTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTickLabelTemplateDirective, { read: TemplateRef, static: false })\n    public tickLabelTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.role`)\n    public role = 'slider';\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemin`)\n    public get valuemin() {\n        return this.minValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemax`)\n    public get valuemax() {\n        return this.maxValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-readonly`)\n    public get readonly() {\n        return this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider')\n    public slierClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider--disabled')\n    public get disabledClass() {\n        return this.disabled;\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that gets the type of the `IgxSliderComponent`.\n     * The slider can be IgxSliderType.SLIDER(default) or IgxSliderType.RANGE.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let type = this.slider.type;\n     * }\n     */\n    @Input()\n    public get type() {\n        return this._type;\n    }\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`.\n     * The slider can be IgxSliderType.SLIDER(default) or IgxSliderType.RANGE.\n     * ```typescript\n     * sliderType: IgxSliderType = IgxSliderType.RANGE;\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    public set type(type: IgxSliderType) {\n        this._type = type;\n\n        if (type === IgxSliderType.SLIDER) {\n            this.lowerValue = 0;\n        }\n\n        if (this.labelsViewEnabled && this.upperValue > this.maxValue) {\n            this.upperValue = this.labels.length - 1;\n        }\n\n        if (this._hasViewInit) {\n            this.updateTrack();\n        }\n    }\n\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n\n    /**\n     * Enables `labelView`, by accepting a collection of primitive values with more than one element.\n     * Each element will be equally spread over the slider and it will serve as a thumb label.\n     * Once the property is set, it will precendence over {@link maxValue}, {@link minValue}, {@link step}.\n     * This means that the manipulation for those properties won't be allowed.\n     */\n    @Input()\n    public get labels() {\n        return this._labels;\n    }\n\n    public set labels(labels: Array<number|string|boolean|null|undefined>) {\n        this._labels = labels;\n\n        this._pMax = this.valueToFraction(this.upperBound, 0, 1);\n        this._pMin = this.valueToFraction(this.lowerBound, 0, 1);\n\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlersAndUpdateTrack();\n\n        if (this._hasViewInit) {\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     * Returns the template context corresponding\n     * to {@link IgxThumbFromTemplateDirective} and {@link IgxThumbToTemplateDirective} templates.\n     *\n     * ```typescript\n     * return {\n     *  $implicit // returns the value of the label,\n     *  labels // returns the labels collection the user has passed.\n     * }\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this.value,\n            labels: this.labels\n        };\n    }\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public set step(step: number) {\n        this._step = step;\n\n        this.stepDistance = this.calculateStepDistance();\n        if (this._hasViewInit) {\n            this.normalizeByStep(this.value);\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     * Returns the incremental/decremental dragging step of the {@link IgxSliderComponent}.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let step = this.slider.step;\n     * }\n     * ```\n     */\n    public get step() {\n        return this.labelsViewEnabled ? 1 : this._step;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is disabled.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let isDisabled = this.slider.disabled;\n     * }\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n\n    /**\n     *An @Input property that disables or enables UI interaction.\n     *```html\n     *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     *```\n     */\n    public set disabled(disable: boolean) {\n        this._disabled = disable;\n\n        if (this._hasViewInit) {\n            this.changeThumbFocusableState(disable);\n        }\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    public get continuous(): boolean {\n        return this._continuous;\n    }\n\n    /**\n     * An @Input property that marks the {@link IgxSliderComponent} as continuous.\n     * By default is considered that the {@link IgxSliderComponent} is discrete.\n     * Discrete {@link IgxSliderComponent} does not have ticks and does not show bubble labels for values.\n     * ```html\n     * <igx-slider #slider [continuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    public set continuous(continuous: boolean) {\n        this._continuous = continuous;\n        if (this._hasViewInit) {\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    public get minValue(): number {\n        if (this.labelsViewEnabled) {\n            return 0;\n        }\n\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            return;\n        } else {\n            this._minValue = value;\n        }\n\n        if (value > this.upperBound) {\n            this.updateUpperBoundAndMaxTravelZone();\n            this.lowerBound = value;\n        }\n\n        // Refresh min travel zone limit.\n        this._pMin = 0;\n        // Recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlersAndUpdateTrack();\n        if (this._hasViewInit) {\n            this.setTickInterval();\n        }\n    }\n\n        /**\n     * Returns the maximum value for the {@link IgxSliderComponent}.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    public get maxValue(): number {\n        return this.labelsViewEnabled ?\n            this.labels.length - 1 :\n            this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            return;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (value < this.lowerBound) {\n            this.updateLowerBoundAndMinTravelZone();\n            this.upperBound = value;\n        }\n\n        // refresh max travel zone limits.\n        this._pMax = 1;\n        // recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlersAndUpdateTrack();\n        if (this._hasViewInit) {\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    public get lowerBound(): number {\n        if (!Number.isNaN(this._lowerBound) && this._lowerBound !== undefined) {\n            return this.valueInRange(this._lowerBound, this.minValue, this.maxValue);\n        }\n\n        return this.minValue;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (value >= this.upperBound || (this.labelsViewEnabled && value < 0)) {\n            return;\n        }\n\n        this._lowerBound = this.valueInRange(value, this.minValue, this.maxValue);\n\n        // Refresh min travel zone.\n        this._pMin = this.valueToFraction(this._lowerBound, 0, 1);\n        this.positionHandlersAndUpdateTrack();\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    public get upperBound(): number {\n        if (!Number.isNaN(this._upperBound) && this._upperBound !== undefined) {\n            return this.valueInRange(this._upperBound, this.minValue, this.maxValue);\n        }\n\n        return this.maxValue;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (value <= this.lowerBound || (this.labelsViewEnabled && value > this.labels.length - 1)) {\n            return;\n        }\n\n        this._upperBound = this.valueInRange(value, this.minValue, this.maxValue);\n        // Refresh time travel zone.\n        this._pMax = this.valueToFraction(this._upperBound, 0, 1);\n        this.positionHandlersAndUpdateTrack();\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type {@link IgxSliderType.SLIDER} the returned value is number.\n     * If the slider type is {@link IgxSliderType.RANGE}.\n     * The returned value represents an object of {@link lowerValue} and {@link upperValue}.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.valueInRange(this.lowerValue, this.lowerBound, this.upperBound),\n                upper: this.valueInRange(this.upperValue, this.lowerBound, this.upperBound)\n            };\n        } else {\n            return this.valueInRange(this.upperValue, this.lowerBound, this.upperBound);\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type {@link IgxSliderType.SLIDER}.\n     * The argument is number. By default the {@link value} gets the {@link lowerBound}.\n     * If the slider type is {@link IgxSliderType.RANGE} the argument\n     * represents an object of {@link lowerValue} and {@link upperValue} properties.\n     * By default the object is associated with the {@link lowerBound} and {@link upperBound} property values.\n     * ```typescript\n     *rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     *};\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (!this.isRange) {\n            this.upperValue = value as number - (value as number % this.step);\n        } else {\n            value = this.validateInitialValue(value as IRangeSliderValue);\n            this.upperValue = (value as IRangeSliderValue).upper;\n            this.lowerValue = (value as IRangeSliderValue).lower;\n        }\n\n        this._onChangeCallback(this.value);\n\n        if (this._hasViewInit) {\n            this.positionHandlersAndUpdateTrack();\n        }\n    }\n\n    /**\n     * Returns the number of the presented primary ticks.\n     * ```typescript\n     * const primaryTicks = this.slider.primaryTicks;\n     * ```\n     */\n    @Input()\n    public get primaryTicks() {\n        if (this.labelsViewEnabled) {\n            return this._primaryTicks = this.labels.length;\n        }\n        return this._primaryTicks;\n    }\n\n    /**\n     * Sets the number of primary ticks. If {@link @labels} is enabled, this property won't function.\n     * Insted enable ticks by {@link showTicks} property.\n     * ```typescript\n     * this.slider.primaryTicks = 5;\n     * ```\n     */\n    public set primaryTicks(val: number) {\n        if (val <= 1) {\n            return;\n        }\n\n        this._primaryTicks = val;\n    }\n\n    /**\n     * Returns the number of the presented secondary ticks.\n     * ```typescript\n     * const secondaryTicks = this.slider.secondaryTicks;\n     * ```\n     */\n    @Input()\n    public get secondaryTicks() {\n        return this._secondaryTicks;\n    }\n\n    /**\n     * Sets the number of secondary ticks. The property functions even when {@link labels} is enabled,\n     * but all secondary ticks won't present any tick labels.\n     * ```typescript\n     * this.slider.secondaryTicks = 5;\n     * ```\n     */\n    public set secondaryTicks(val: number) {\n        if (val < 1 ) {\n            return;\n        }\n\n        this._secondaryTicks = val;\n    }\n\n    /**\n     * Show/hide slider ticks\n     * ```html\n     * <igx-slier [showTicks]=\"true\" [primaryTicks]=\"5\"></igx-slier>\n     * ```\n     */\n    @Input()\n    public showTicks = false;\n\n    /**\n     * show/hide primary tick labels\n     * ```html\n     * <igx-slider [primaryTicks]=\"5\" [primaryTickLabels]=\"false\"></igx-slider>\n     * ```\n     */\n    @Input()\n    public primaryTickLabels = true;\n\n    /**\n     * show/hide secondary tick labels\n     * ```html\n     * <igx-slider [secondaryTicks]=\"5\" [secondaryTickLabels]=\"false\"></igx-slider>\n     * ```\n     */\n    @Input()\n    public secondaryTickLabels = true;\n\n    /**\n     * Changes ticks orientation:\n     * bottom - The default orienation, below the slider track.\n     * top - Above the slider track\n     * mirror - combines top and bottom orientation.\n     * ```html\n     * <igx-slider [primaryTicks]=\"5\" [ticksOrientation]=\"ticksOrientation\"></igx-slider>\n     * ```\n     */\n    @Input()\n    public ticksOrientation: TicksOrientation = TicksOrientation.Bottom;\n\n    /**\n     * Changes tick labels rotation:\n     * horizontal - The default rotation\n     * toptobottom - Rotates tick labels vertically to 90deg\n     * bottomtotop - Rotate tick labels vertically to -90deg\n     * ```html\n     * <igx-slider [primaryTicks]=\"5\" [secondaryTicks]=\"3\" [tickLabelsOrientation]=\"tickLabelsOrientaiton\"></igx-slider>\n     * ```\n     */\n    @Input()\n    public tickLabelsOrientation = TickLabelsOrientation.Horizontal;\n\n    /**\n     * @hidden\n     */\n    public get deactivateThumbLabel() {\n        return ((this.primaryTicks && this.primaryTickLabels) || (this.secondaryTicks && this.secondaryTickLabels)) &&\n            (this.ticksOrientation === TicksOrientation.Top || this.ticksOrientation === TicksOrientation.Mirror);\n    }\n\n    /**\n     * This event is emitted every time the value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n    /**\n     * This event is emitted at the end of every slide interaction.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChanged)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<number | IRangeSliderValue>();\n\n\n    constructor(\n        private renderer: Renderer2,\n        private _el: ElementRef,\n        private _cdr: ChangeDetectorRef,\n        private _ngZone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerdown', ['$event'])\n    public onPointerDown($event: PointerEvent) {\n        this.findClosestThumb($event);\n\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbFrom;\n        activeThumb.nativeElement.setPointerCapture($event.pointerId);\n        this.showSliderIndicators();\n\n        $event.preventDefault();\n    }\n\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerup', ['$event'])\n    public onPointerUp($event: PointerEvent) {\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbTo;\n        activeThumb.nativeElement.releasePointerCapture($event.pointerId);\n\n        this.hideSliderIndicators();\n        this.onValueChanged.emit(this.value);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.toggleSliderIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pan', ['$event'])\n    public onPanListener($event) {\n        this.update($event.srcEvent.clientX);\n    }\n\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    public get isRange(): boolean {\n        return this.type === IgxSliderType.RANGE;\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    public get lowerValue(): number {\n        if (!Number.isNaN(this._lowerValue) && this._lowerValue !== undefined && this._lowerValue >= this.lowerBound) {\n            return this._lowerValue;\n        }\n\n        return this.lowerBound;\n    }\n\n    /**\n     *Sets the lower value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public lowValue(event){\n     *    this.slider.lowerValue = 120;\n     *}\n     *```\n     */\n    public set lowerValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._lowerValue = value;\n\n    }\n\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    public get upperValue() {\n        if (!Number.isNaN(this._upperValue) && this._upperValue !== undefined && this._upperValue <= this.upperBound) {\n            return this._upperValue;\n        }\n\n        return this.upperBound;\n    }\n\n    /**\n     *Sets the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    this.slider.upperValue = 120;\n     *}\n     *```\n     */\n    public set upperValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the value corresponding the lower label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.lowerLabel;\n     *```\n     */\n    public get lowerLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.lowerValue] :\n            this.lowerValue;\n    }\n\n    /**\n     * Returns the value corresponding the upper label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.upperLabel;\n     *```\n     */\n    public get upperLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.upperValue] :\n            this.upperValue;\n    }\n\n    /**\n     * Returns if label view is enabled.\n     * If the {@link labels} is set, the view is automatically activated.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let labelView = this.slider.labelsViewEnabled;\n     *```\n     */\n    public get labelsViewEnabled(): boolean {\n        return !!(this.labels && this.labels.length > 1);\n    }\n\n    /**\n     * @hidden\n     */\n    public get showTopTicks() {\n        return this.ticksOrientation === TicksOrientation.Top ||\n            this.ticksOrientation === TicksOrientation.Mirror;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showBottomTicks() {\n        return this.ticksOrientation === TicksOrientation.Bottom ||\n            this.ticksOrientation === TicksOrientation.Mirror;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.sliderSetup();\n\n        // Set track travel zone\n        this._pMin = this.valueToFraction(this.lowerBound) || 0;\n        this._pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    public ngOnChanges(changes) {\n        if (changes.minValue && changes.maxValue &&\n                changes.minValue.currentValue < changes.maxValue.currentValue) {\n            this._maxValue = changes.maxValue.currentValue;\n            this._minValue = changes.minValue.currentValue;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this._hasViewInit = true;\n        this.positionHandlersAndUpdateTrack();\n        this.setTickInterval();\n        this.changeThumbFocusableState(this.disabled);\n\n        this.subscribeTo(this.thumbFrom, this.thumbChanged.bind(this));\n        this.subscribeTo(this.thumbTo, this.thumbChanged.bind(this));\n\n        this.thumbs.changes.pipe(takeUntil(this._destroyer$)).subscribe(change => {\n            const thumbFrom = change.find((thumb: IgxSliderThumbComponent) => thumb.type === SliderHandle.FROM);\n            this.positionHandler(thumbFrom, null, this.lowerValue);\n            this.subscribeTo(thumbFrom, this.thumbChanged.bind(this));\n            this.changeThumbFocusableState(this.disabled);\n        });\n\n        this.labelRefs.changes.pipe(takeUntil(this._destroyer$)).subscribe(change => {\n            const labelFrom = this.labelRefs.find((label: IgxThumbLabelComponent) => label.type === SliderHandle.FROM);\n            this.positionHandler(null, labelFrom, this.lowerValue);\n        });\n\n        this._ngZone.runOutsideAngular(() => {\n            resizeObservable(this._el.nativeElement).pipe(\n                throttleTime(40),\n                takeUntil(this._destroyer$)).subscribe(() => this._ngZone.run( () => {\n                    this.stepDistance = this.calculateStepDistance();\n                }));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroyer$.next(true);\n        this._destroyer$.complete();\n\n        this._indicatorsDestroyer$.next(true);\n        this._indicatorsDestroyer$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: IRangeSliderValue | number): void {\n        if (!value) {\n            return;\n        }\n\n        this.normalizeByStep(value);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n     public getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public update(mouseX) {\n        if (this.disabled) {\n            return;\n        }\n\n        // Update To/From Values\n        this.onPan.next(mouseX);\n\n        // Finally do positionHandlersAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlersAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public thumbChanged(value: number, thumbType: number) {\n        const oldValue = this.value;\n\n        let newVal: IRangeSliderValue;\n        if (this.isRange) {\n            if (thumbType === SliderHandle.FROM) {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower + value,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + value\n                };\n            }\n\n            // Swap the thumbs if a collision appears.\n            if (newVal.lower >= newVal.upper) {\n                this.value = this.swapThumb(newVal);\n            } else {\n                this.value = newVal;\n            }\n\n        } else {\n            this.value = this.value as number + value;\n        }\n\n        if (this.hasValueChanged(oldValue)) {\n            this.emitValueChanged(oldValue);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onThumbChange() {\n        this.toggleSliderIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    public onHoverChange(state: boolean) {\n        return state ? this.showSliderIndicators() : this.hideSliderIndicators();\n    }\n\n\n\n    private swapThumb(value: IRangeSliderValue) {\n        if (this.thumbFrom.isActive) {\n            value.upper = this.upperValue;\n            value.lower = this.upperValue;\n        } else {\n            value.upper = this.lowerValue;\n            value.lower = this.lowerValue;\n        }\n\n        this.toggleThumb();\n        return value;\n    }\n\n    private findClosestThumb(event: PointerEvent) {\n        if (this.isRange) {\n            this.closestHandle(event);\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n\n        this.update(event.clientX);\n    }\n\n    private updateLowerBoundAndMinTravelZone() {\n        this.lowerBound = this.minValue;\n        this._pMin = 0;\n    }\n\n    private updateUpperBoundAndMaxTravelZone() {\n        this.upperBound = this.maxValue;\n        this._pMax = 1;\n    }\n\n    private sliderSetup() {\n        /**\n         * if {@link SliderType.SLIDER} than the initial value shold be the lowest one.\n         */\n        if (!this.isRange && this._upperValue === undefined) {\n            this._upperValue = this.lowerBound;\n        }\n    }\n\n    private calculateStepDistance() {\n        return this._el.nativeElement.getBoundingClientRect().width / (this.maxValue - this.minValue) * this.step;\n    }\n\n    private toggleThumb() {\n        return this.thumbFrom.isActive ?\n            this.thumbTo.nativeElement.focus() :\n            this.thumbFrom.nativeElement.focus();\n    }\n\n    private valueInRange(value, min = 0, max = 100) {\n        return Math.max(Math.min(value, max), min);\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return interval !== null ? `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )` : interval;\n    }\n\n    private positionHandler(thumbHandle: ElementRef, labelHandle: ElementRef, position: number) {\n        const positionLeft = `${this.valueToFraction(position) * 100}%`;\n\n        if (thumbHandle) {\n            thumbHandle.nativeElement.style.left = positionLeft;\n        }\n\n        if (labelHandle) {\n            labelHandle.nativeElement.style.left = positionLeft;\n        }\n    }\n\n    private positionHandlersAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandler(this.thumbTo, this.labelTo, this.value as number);\n        } else {\n            this.positionHandler(this.thumbTo, this.labelTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandler(this.thumbFrom, this.labelFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        if (this._hasViewInit) {\n            this.updateTrack();\n        }\n    }\n\n    private closestHandle(event: PointerEvent) {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const xPointer = event.clientX - this._el.nativeElement.getBoundingClientRect().left;\n        const match = this.closestTo(xPointer, [fromOffset, toOffset]);\n\n        if (fromOffset === toOffset && toOffset < xPointer) {\n            this.thumbTo.nativeElement.focus();\n        } else if (fromOffset === toOffset && toOffset > xPointer ) {\n            this.thumbFrom.nativeElement.focus();\n        } else if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval() {\n        let interval;\n        const trackProgress = 100;\n        if (this.labelsViewEnabled) {\n            // Calc ticks depending on the labels length;\n            interval = ((trackProgress / (this.labels.length - 1) * 10)) / 10;\n        } else {\n            const trackRange = this.maxValue - this.minValue;\n            interval = this.step > 1 ?\n                (trackProgress / ((trackRange / this.step)) * 10) / 10\n                : null;\n        }\n\n        const renderCallbackExecution = !this.continuous ? this.generateTickMarks('white', interval) : null;\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', renderCallbackExecution);\n    }\n\n    private showSliderIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this._indicatorsTimer) {\n            this._indicatorsDestroyer$.next(true);\n            this._indicatorsTimer = null;\n        }\n\n        this.thumbTo.showThumbIndicators();\n        this.labelTo.active = true;\n        if (this.thumbFrom) {\n            this.thumbFrom.showThumbIndicators();\n        }\n\n        if (this.labelFrom) {\n            this.labelFrom.active = true;\n        }\n\n    }\n\n    private hideSliderIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        this._indicatorsTimer = timer(this.thumbLabelVisibilityDuration);\n        this._indicatorsTimer.pipe(takeUntil(this._indicatorsDestroyer$)).subscribe(() => {\n            this.thumbTo.hideThumbIndicators();\n            this.labelTo.active = false;\n            if (this.thumbFrom) {\n                this.thumbFrom.hideThumbIndicators();\n            }\n\n            if (this.labelFrom) {\n                this.labelFrom.active = false;\n            }\n        });\n    }\n\n    private toggleSliderIndicators() {\n        this.showSliderIndicators();\n        this.hideSliderIndicators();\n    }\n\n    private changeThumbFocusableState(state: boolean) {\n        const value = state ? -1 : 1;\n\n        if (this.isRange) {\n            this.thumbFrom.tabindex = value;\n        }\n\n        this.thumbTo.tabindex = value;\n\n        this._cdr.detectChanges();\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    private valueToFraction(value: number, pMin = this._pMin, pMax = this._pMax) {\n        return this.valueInRange((value - this.minValue) / (this.maxValue - this.minValue), pMin, pMax);\n    }\n\n    /**\n     * @hidden\n     * NormalizÐµ the value when two-way data bind is used and {@link this.step} is set.\n     * @param value\n     */\n    private normalizeByStep(value: IRangeSliderValue | number) {\n        if (this.isRange) {\n            this.value =  {\n                lower: (value as IRangeSliderValue).lower - ((value as IRangeSliderValue).lower % this.step),\n                upper: (value as IRangeSliderValue).upper - ((value as IRangeSliderValue).upper % this.step)\n            };\n        } else {\n            this.value = (value as number) - ((value as number) % this.step);\n        }\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = toPosition - fromPosition;\n\n        let trackLeftIndention = fromPosition;\n        if (this.isRange) {\n            if (positionGap) {\n                trackLeftIndention = Math.round((1 / positionGap * fromPosition) * 100);\n            }\n\n            this.renderer.setStyle(this.trackRef.nativeElement, 'transform', `scaleX(${positionGap}) translateX(${trackLeftIndention}%)`);\n        } else {\n            this.renderer.setStyle(this.trackRef.nativeElement, 'transform', `scaleX(${toPosition})`);\n        }\n    }\n\n    private validateInitialValue(value: IRangeSliderValue) {\n        if (value.lower < this.lowerBound && value.upper < this.lowerBound) {\n            value.upper = this.lowerBound;\n            value.lower = this.lowerBound;\n        }\n\n        if (value.lower > this.upperBound && value.upper > this.upperBound) {\n            value.upper = this.upperBound;\n            value.lower = this.upperBound;\n        }\n\n        if (value.upper < value.lower) {\n            value.upper = this.upperValue;\n            value.lower = this.lowerValue;\n        }\n\n        return value;\n    }\n\n    private subscribeTo(thumb: IgxSliderThumbComponent, callback: (a: number, b: number) => void) {\n        if (!thumb) {\n            return;\n        }\n\n        thumb.onThumbValueChange\n            .pipe(takeUntil(this.unsubscriber(thumb)))\n            .subscribe(value => callback(value, thumb.type));\n    }\n\n    private unsubscriber(thumb: IgxSliderThumbComponent) {\n        return merge(this._destroyer$, thumb.destroy);\n    }\n\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxSliderComponent,\n        IgxThumbFromTemplateDirective,\n        IgxThumbToTemplateDirective,\n        IgxTickLabelTemplateDirective,\n        IgxSliderThumbComponent,\n        IgxThumbLabelComponent,\n        IgxTicksComponent,\n        IgxTickLabelsPipe],\n    exports: [\n        IgxSliderComponent,\n        IgxThumbFromTemplateDirective,\n        IgxThumbToTemplateDirective,\n        IgxTickLabelTemplateDirective,\n        IgxSliderThumbComponent,\n        IgxThumbLabelComponent,\n        IgxTicksComponent],\n    imports: [CommonModule, FormsModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    AnimationEvent,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    templateUrl: 'snackbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @Input() public message: string;\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(): void {\n        clearTimeout(this.timeoutId);\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     *@hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import {\n    Directive,\n    HostBinding,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsBase } from './tabs.common';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getRightButtonStyle(): string {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations.\n        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getLeftButtonStyle(): string {\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        if (offset === 0) {\n            // Fix for IE 11, a difference is accumulated from the widths calculations.\n            if (itemsContainerWidth - headerContainerWidth <= 1) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface ISelectTabEventArgs extends IBaseEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    templateUrl: 'tab-bar-content.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxBottomNavComponent implements AfterViewInit {\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component created based on the provided panels.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.viewTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent))\n    public viewTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component defined as content child.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.contentTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabComponent))\n    public contentTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements for this bottom navigation component.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get tabs(): QueryList<IgxTabComponent> {\n        return this.hasContentTabs ? this.contentTabs : this.viewTabs;\n    }\n\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent))\n    public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${NEXT_ID++}`;\n\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     *@hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        if (this.hasContentTabs) {\n            this.selectedIndex = args.tab.index;\n            this.contentTabs.forEach((t) => {\n                if (t !== args.tab) {\n                    this._deselectTab(t);\n                }\n            });\n        } else {\n            if (args.panel) {\n                this.selectedIndex = args.panel.index;\n                this.panels.forEach((p) => {\n                    if (p.index !== this.selectedIndex) {\n                        this._deselectPanel(p);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n\n    private _deselectTab(aTab: IgxTabComponent) {\n        aTab.isSelected = false;\n        this.onTabDeselected.emit({ tab: aTab, panel: null });\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    templateUrl: 'tab-panel.component.html'\n})\nexport class IgxTabPanelComponent implements AfterContentInit, AfterViewChecked {\n\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n\n    /**\n     *@hidden\n     */\n    private _isSelected = false;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanel.isSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (this._isSelected !== newValue) {\n            if (newValue) {\n                this.select();\n            } else {\n                this._isSelected = newValue;\n            }\n        }\n    }\n\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab/panel.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this.relatedTab ? this.relatedTab.changesCount : 0;\n    }\n\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     *@hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-bottom-nav__panel-${this.index}`);\n    }\n\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this._isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    templateUrl: 'tab.component.html'\n})\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.id')\n    public id = 'igx-tab-' + this.index;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-controls')\n    public ariaControls = 'igx-tab-panel-' + this.index;\n\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public relatedPanel: IgxTabPanelComponent;\n\n    /**\n     *@hidden\n     */\n    private _label: string;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab [label] = \"'Tab label'\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabLabel = this.tab.label;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get label(): string {\n        return this.relatedPanel ? this.relatedPanel.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**\n     *@hidden\n     */\n    private _icon: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab [icon] = \"tab_icon\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabIcon =  this.tab.icon;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get icon(): string {\n        return this.relatedPanel ? this.relatedPanel.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**\n     *@hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    private _disabled = false;\n\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedPanel ? this.relatedPanel.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    public _selected = false;\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    set isSelected(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.isSelected = newValue;\n        } else if (this._selected !== newValue) {\n            this._selected = newValue;\n            if (this._selected) {\n                this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n            }\n        }\n    }\n    get isSelected(): boolean {\n        return this.relatedPanel ? this.relatedPanel.isSelected : this._selected;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item--selected')\n    public get cssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item--disabled')\n    public get cssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item')\n    public get cssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get index(): number {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray().indexOf(this);\n        }\n    }\n\n    /**@hidden*/\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })\n    protected customTabTemplateDir: IgxTabTemplateDirective;\n\n    /**\n     * Returns the `template` for this IgxTabComponent.\n     * ```typescript\n     * let tabItemTemplate = this.tabItem.template;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedPanel && this.relatedPanel.customTabTemplate) {\n            return this.relatedPanel.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * Returns the `context` object for the template of this `IgxTabComponent`.\n     * ```typescript\n     * let tabItemContext = this.tabItem.context;\n     * ```\n     */\n    public get context(): any {\n        return this.relatedPanel ? this.relatedPanel : this;\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        if (this.relatedPanel) {\n            this.relatedPanel.select();\n        } else {\n            this._selected = true;\n            this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        this.select();\n    }\n\n    public elementRef(): ElementRef {\n        return this._element;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import { ElementRef, QueryList, EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport abstract class IgxTabsBase {\n    selectedIndicator: ElementRef<any>;\n    tabs: QueryList<IgxTabItemBase>;\n    groups: QueryList<IgxTabsGroupBase>;\n    offset: number;\n    selectedIndex: number;\n    viewPort: ElementRef;\n    contentsContainer: ElementRef;\n    tabsContainer: ElementRef;\n    itemsContainer: ElementRef;\n    headerContainer: ElementRef;\n    onTabItemSelected: EventEmitter<{}>; // TODO: Define event arg interface!\n    hasContentTabs: boolean;\n    scrollElement(element: any, scrollRight: boolean) {}\n    performSelectionChange(newTab: IgxTabItemBase) {}\n    transformContentAnimation(tab: IgxTabItemBase, duration: number) {}\n    transformIndicatorAnimation(element: HTMLElement, duration?: number) {}\n}\n\n/** @hidden */\nexport abstract class IgxTabItemBase {\n    nativeTabItem: ElementRef;\n    get index(): number { return 0; }\n    select(): void {}\n    setSelectedInternal(newValue: boolean) {}\n}\n\n/** @hidden */\nexport abstract class IgxTabsGroupBase {\n    select(): void {}\n    setSelectedInternal(newValue: boolean) {}\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabItemBase } from './tabs.common';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { PlatformUtil } from '../core/utils';\n\nexport enum IgxTabsType {\n    FIXED = 'fixed',\n    CONTENTFIT = 'contentfit'\n}\n\n@Component({\n    selector: 'igx-tabs',\n    templateUrl: 'tabs.component.html',\n    providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent }]\n})\n\nexport class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {\n    /**\n    * Provides an observable collection of all `IgxTabsGroupComponent`s.\n    * ```typescript\n    * const groupItems = this.myTabComponent.groups;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n    * Provides an observable collection of all `IgxTabItemComponent`s defined in the page.\n    * ```typescript\n    * const tabItems = this.myTabComponent.contentTabs;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabItemComponent))\n    public contentTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n    * An @Input property that sets the value of the `selectedIndex`.\n    * Default value is 0.\n    * ```html\n    * <igx-tabs selectedIndex=\"1\">\n    * ```\n    *\n    * Two-way data binding.\n    * ```html\n    * <igx-tabs [(selectedIndex)]=\"model.selectedIndex\">\n    * ```\n    */\n    @Input()\n    public get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n\n    public set selectedIndex(index: number) {\n        const newIndex = typeof index !== 'number' ? parseInt(index, 10) : index;\n        if (this._selectedIndex !== newIndex) {\n            if (this.tabs && this.tabs.length > 0) {\n                const newTab = this.tabs.toArray()[newIndex];\n                if (newTab) {\n                   this.performSelectionChange(newTab);\n                }\n            } else {\n                this._selectedIndex = newIndex;\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedIndexChange = new EventEmitter<number>();\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs type=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('type')\n    public type: string | IgxTabsType = 'contentfit';\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public class = '';\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output()\n    public onTabItemDeselected = new EventEmitter();\n\n    /**\n    * Emitted when a tab item is selected.\n    * ```html\n    * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n    *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n    *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n    * </igx-tabs>\n    * ```\n    * ```typescript\n    * itemSelected(e){\n    *      const tabGroup = e.group;\n    *      const tabItem = e.tab;\n    * }\n    * ```\n    */\n    @Output()\n    public onTabItemSelected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer', { static: true })\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { static: true })\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer', { static: true })\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator')\n    public selectedIndicator: ElementRef;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('tabsContainer', { static: true })\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort', { static: true })\n    public viewPort: ElementRef;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.viewTabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public viewTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    public get tabs(): QueryList<IgxTabItemComponent> {\n        if (this.hasContentTabs) {\n            return this.contentTabs;\n        }\n        return this.viewTabs;\n    }\n\n    /**\n     *@hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n    private _selectedIndex = -1;\n    private _resizeObserver: ResizeObserver;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get cssClass() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFoundInGroups = this.groups.find((group) => group.icon != null && group.label != null);\n        const iconLabelFoundInTabs = this.contentTabs.find((tab) => tab.icon != null && tab.label != null);\n        let css: string;\n        switch (IgxTabsType[this.type.toUpperCase()]) {\n            case IgxTabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFoundInGroups !== undefined || iconLabelFoundInTabs !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return `${css} ${this.class}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event): void {\n        this.scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event): void {\n        this.scroll(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n        this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef, private _ngZone: NgZone, private platformUtil: PlatformUtil) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (this._selectedIndex === -1) {\n            this.tabs.forEach((t) => {\n                if (t.isSelected) {\n                    this._selectedIndex = t.index;\n                }\n            });\n        }\n\n        if (!this.hasContentTabs && (this.selectedIndex < 0 || this.selectedIndex >= this.groups.length)) {\n            this._selectedIndex = 0;\n        }\n\n        if (this.platformUtil.isBrowser) {\n            requestAnimationFrame(() => {\n                const newTab = this.tabs.toArray()[this._selectedIndex];\n                if (newTab) {\n                    this.performSelection(newTab);\n                } else {\n                    this.hideIndicator();\n                }\n            });\n            this._ngZone.runOutsideAngular(() => {\n                this._resizeObserver = new ResizeObserver(() => {\n                    if (!this.hasContentTabs && this._selectedIndex >= 0 && this._selectedIndex < this.tabs.length) {\n                        const newTab = this.tabs.toArray()[this._selectedIndex];\n                        this.transformContentAnimation(newTab, 0);\n                    }\n                });\n\n                this._resizeObserver.observe(this.tabsContainer.nativeElement);\n            });\n        }\n\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.resetSelectionOnCollectionChanged();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n        if (this._resizeObserver) {\n            this._ngZone.runOutsideAngular(() => {\n                this._resizeObserver.disconnect();\n            });\n        }\n    }\n\n    private resetSelectionOnCollectionChanged(): void {\n        requestAnimationFrame(() => {\n            const currentTab = this.tabs.toArray()[this.selectedIndex];\n            if (currentTab) {\n                this.performSelectionChange(currentTab);\n            } else if (this.selectedIndex >= this.tabs.length) {\n                this.performSelectionChange(this.tabs.last);\n            } else {\n                this.hideIndicator();\n            }\n        });\n    }\n\n    private scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public performSelectionChange(newTab: IgxTabItemBase): void {\n        const oldTab = this.selectedTabItem;\n        if (oldTab) {\n            this.performDeselection(oldTab);\n        }\n        if (newTab) {\n            this.performSelection(newTab);\n        } else {\n            // if there is no new selected tab hide the selection indicator\n            this.hideIndicator();\n        }\n        this.selectedIndexChange.emit(this._selectedIndex);\n    }\n\n    private performDeselection(oldTab: IgxTabItemBase): void {\n        oldTab.setSelectedInternal(false);\n        const oldTabRelatedGroup = this.groups.toArray()[oldTab.index];\n        if (oldTabRelatedGroup) {\n            oldTabRelatedGroup.setSelectedInternal(false);\n        }\n        this._selectedIndex = -1;\n        this.onTabItemDeselected.emit({ tab: oldTab, group: oldTabRelatedGroup });\n    }\n\n    private performSelection(newTab: IgxTabItemBase): void {\n        newTab.setSelectedInternal(true);\n        this._selectedIndex = newTab.index;\n\n        let newTabRelatedGroup = null;\n        if (!this.hasContentTabs && this.groups) {\n            newTabRelatedGroup = this.groups.toArray()[newTab.index];\n            if (newTabRelatedGroup) {\n                newTabRelatedGroup.setSelectedInternal(true);\n            }\n        }\n\n        this.onTabItemSelected.emit({ tab: newTab, group: newTabRelatedGroup });\n\n        requestAnimationFrame(() => {\n            // bring the new selected tab into view if it is not\n            this.bringNewTabIntoView(newTab);\n            // animate the new selection indicator\n            this.transformIndicatorAnimation(newTab.nativeTabItem.nativeElement);\n            // animate the new tab's group content\n            if (!this.hasContentTabs) {\n                this.transformContentAnimation(newTab, 0.2);\n            }\n        });\n    }\n\n    private bringNewTabIntoView(newTab: IgxTabItemBase): void {\n        const tabNativeElement = newTab.nativeTabItem.nativeElement;\n\n        // Scroll left if there is need\n        if (tabNativeElement.offsetLeft < this.offset) {\n            this.scrollElement(tabNativeElement, false);\n        }\n\n        // Scroll right if there is need\n        const viewPortOffsetWidth = this.viewPort.nativeElement.offsetWidth;\n        const delta = (tabNativeElement.offsetLeft + tabNativeElement.offsetWidth) - (viewPortOffsetWidth + this.offset);\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations\n        if (delta > 1) {\n            this.scrollElement(tabNativeElement, true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    // animation for the new panel/group (not needed for tab only mode)\n    public transformContentAnimation(tab: IgxTabItemBase, duration: number): void {\n        const contentOffset = this.tabsContainer.nativeElement.offsetWidth * tab.index;\n        this.contentsContainer.nativeElement.style.transitionDuration = duration > 0 ? `${duration}s` : 'initial';\n        this.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n    }\n\n    /**\n     * @hidden\n     */\n    public transformIndicatorAnimation(element: HTMLElement, duration = 0.3): void {\n        if (this.selectedIndicator) {\n            this.selectedIndicator.nativeElement.style.visibility = 'visible';\n            this.selectedIndicator.nativeElement.style.transitionDuration = duration > 0 ? `${duration}s` : 'initial';\n            this.selectedIndicator.nativeElement.style.width = `${element.offsetWidth}px`;\n            this.selectedIndicator.nativeElement.style.transform = `translate(${element.offsetLeft}px)`;\n        }\n    }\n\n    public hideIndicator(): void {\n        if (this.selectedIndicator) {\n            this.selectedIndicator.nativeElement.style.visibility = 'hidden';\n        }\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","import {\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    AfterViewInit,\n    OnDestroy\n} from '@angular/core';\n\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabItemBase, IgxTabsBase } from './tabs.common';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport ResizeObserver from 'resize-observer-polyfill';\n\n@Component({\n    selector: 'igx-tab-item',\n    templateUrl: 'tab-item.component.html'\n})\n\nexport class IgxTabItemComponent extends IgxTabItemBase implements AfterViewInit, OnDestroy {\n    /**\n    * Gets the group associated with the tab.\n    * ```html\n    * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n    * ```\n    */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    /**@hidden*/\n    private _icon: string;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tab-item label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public get icon(): string {\n        return this.relatedGroup ? this.relatedGroup.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**@hidden*/\n    private _label: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-item label=\"Tab 2\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public get label(): string {\n        return this.relatedGroup ? this.relatedGroup.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**@hidden*/\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })\n    protected customTabTemplateDir: IgxTabItemTemplateDirective;\n\n    private _nativeTabItem: ElementRef;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    private _isSelected = false;\n    private _disabled = false;\n    private _resizeObserver: ResizeObserver;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef, private _ngZone: NgZone) {\n        super();\n        this._nativeTabItem = _element;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--selected')\n    public get provideCssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--disabled')\n    public get provideCssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item')\n    public get provideCssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.id')\n    public id = 'igx-tab-item-' + this.index;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-controls')\n    public ariaControls = 'igx-tab-item-group-' + this.index;\n\n    ngAfterViewInit(): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver = new ResizeObserver(() => {\n                this._tabs.transformIndicatorAnimation(this._nativeTabItem.nativeElement, 0);\n            });\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver.disconnect();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        this.select();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        this.onKeyDown(false);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        this.onKeyDown(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, 0);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, this._tabs.tabs.toArray().length - 1);\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem(): ElementRef {\n        return this._nativeTabItem;\n    }\n\n    /**\n    * \tGets whether the tab is disabled.\n    * ```\n    * const disabledItem = this.myTabComponent.tabs.first.disabled;\n    * ```\n    */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedGroup ? this.relatedGroup.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedGroup) {\n            this.relatedGroup.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    @Input()\n    get isSelected(): boolean {\n        return this.relatedGroup ? this.relatedGroup.isSelected : this._isSelected;\n    }\n    set isSelected(newValue: boolean) {\n        if (!this.disabled && this.isSelected !== newValue) {\n            this._tabs.performSelectionChange(newValue ? this : null);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public select(): void {\n        if (!this.disabled && !this.isSelected) {\n            this._tabs.performSelectionChange(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray().indexOf(this);\n        }\n        return -1;\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedInternal(newValue: boolean) {\n        this._isSelected = newValue;\n        this._ngZone.runOutsideAngular(() => {\n            if (this._resizeObserver) {\n                if (this._isSelected) {\n                    this._resizeObserver.observe(this._element.nativeElement);\n                } else {\n                    this._resizeObserver.disconnect();\n                }\n            }\n        });\n        this.tabindex = newValue ? 0 : -1;\n    }\n\n    private onKeyDown(isLeftArrow: boolean, index = null): void {\n        const tabsArray = this._tabs.tabs.toArray();\n        if (index === null) {\n            index = (isLeftArrow)\n                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1\n                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;\n        }\n        const tab = tabsArray[index];\n        tab.select();\n    }\n\n    /**\n     * @hidden\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedGroup && this.relatedGroup.customTabTemplate) {\n            return this.relatedGroup.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    public get context(): any {\n        return this.relatedGroup ? this.relatedGroup : this;\n    }\n\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    TemplateRef,\n    HostListener\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tabs-group',\n    templateUrl: 'tabs-group.component.html'\n})\n\nexport class IgxTabsGroupComponent extends IgxTabsGroupBase implements AfterContentInit, AfterViewChecked {\n\n    /**\n    * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n    *```html\n    *<igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n    *```\n    */\n    @Input()\n    public disabled = false;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public icon: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public label: string;\n\n    /**\n     * Sets/gets whether a tab group is selected.\n     * ```typescript\n     * this.tabGroup.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected = this.tabGroup.isSelected;\n     * ```\n     * @memberof IgxTabsGroupComponent\n     */\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (!this.disabled && this.isSelected !== newValue) {\n            this._tabs.performSelectionChange(newValue ? this.relatedTab : null);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    private _tabTemplate: TemplateRef<any>;\n    private _isSelected = false;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tabs__group')\n    public styleClass = true;\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index] as IgxTabItemComponent;\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index(): number {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n        return -1;\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     *@hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-item-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-tabs__group-${this.index}`);\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberof {@link IgxTabsGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public tab : IgxTabsGroupComponent;\n     *ngAfterViewInit(){\n     *    this.tab.select();\n     *}\n     *```\n     */\n    public select(): void {\n        if (!this.disabled && !this.isSelected) {\n            this._tabs.performSelectionChange(this.relatedTab);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedInternal(newValue: boolean) {\n        this._isSelected = newValue;\n    }\n\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animate', [\n            state('show', style({\n                opacity: 1\n            })),\n            transition('* => show', animate('.20s ease')),\n            transition('show => *', animate('.40s ease-out'))\n        ])\n    ],\n    selector: 'igx-toast',\n    templateUrl: 'toast.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxToastComponent implements IToggleView, OnInit, OnDestroy {\n    private _isVisible = false;\n    /**\n     * Returns a list of available CSS classes.\n     * ```typescript\n     * let toastClasses =  this.toast.CSS_CLASSES;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public readonly CSS_CLASSES = {\n        IGX_TOAST_BOTTOM: 'igx-toast--bottom',\n        IGX_TOAST_MIDDLE: 'igx-toast--middle',\n        IGX_TOAST_TOP: 'igx-toast--top'\n    };\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown) = \"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding) = \"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden) = \"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible] = \"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-toast [(isVisible)] = \"model.isVisible\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public get isVisible() {\n        return this._isVisible;\n    }\n    public set isVisible(value) {\n        this._isVisible = value;\n        this.isVisibleChange.emit(this._isVisible);\n\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public isVisibleChange = new EventEmitter<boolean>();\n\n    /**\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public message: string;\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position] = \"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = IgxToastPosition.Bottom;\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService) { }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(): void {\n        clearInterval(this.timeoutId);\n        this.onShowing.emit(this);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n\n        this.onShown.emit(this);\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        this.onHiding.emit(this);\n        this.isVisible = false;\n        this.onHidden.emit(this);\n\n        clearInterval(this.timeoutId);\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        this.isVisible ? this.close() : this.open();\n    }\n    /**\n     * Sets/gets the class name of the toast based on the `position` value.\n     * ```typescript\n     * let className =  this.toast.mapPositionToClassName();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public mapPositionToClassName(): any {\n        if (this.position === IgxToastPosition.Top) {\n            return this.CSS_CLASSES.IGX_TOAST_TOP;\n        }\n\n        if (this.position === IgxToastPosition.Middle) {\n            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;\n        }\n\n        if (this.position === IgxToastPosition.Bottom) {\n            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n    }\n}\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport enum IgxToastPosition {\n    Bottom,\n    Middle,\n    Top\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule]\n})\nexport class IgxToastModule { }\n","import { ElementRef } from '@angular/core';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\nexport const IGX_TIME_PICKER_COMPONENT = 'IgxTimePickerComponentToken';\n\n/** @hidden */\nexport interface IgxTimePickerBase {\n    hourList: ElementRef;\n    minuteList: ElementRef;\n    secondsList: ElementRef;\n    ampmList: ElementRef;\n    selectedHour: string;\n    selectedMinute: string;\n    selectedSeconds: string;\n    selectedAmPm: string;\n    format: string;\n    promptChar: string;\n    cleared: boolean;\n    mode: InteractionMode;\n    showHoursList: boolean;\n    showMinutesList: boolean;\n    showSecondsList: boolean;\n    showAmPmList: boolean;\n    nextHour();\n    prevHour();\n    nextMinute();\n    prevMinute();\n    nextSeconds();\n    prevSeconds();\n    nextAmPm();\n    prevAmPm();\n    okButtonClick(): boolean;\n    cancelButtonClick(): void;\n    scrollHourIntoView(item: string): void;\n    scrollMinuteIntoView(item: string): void;\n    scrollSecondsIntoView(item: string): void;\n    scrollAmPmIntoView(item: string): void;\n    close(): void;\n    parseMask(preserveAmPm?: boolean): string;\n}\n\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    TemplateRef\n} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(\n        @Inject(IGX_TIME_PICKER_COMPONENT) public timePicker: IgxTimePickerBase,\n        private elementRef: ElementRef\n    ) { }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__secondsList')\n    get secondsCSS(): boolean {\n        return this.type === 'secondsList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'secondsList': {\n                this.timePicker.nextSeconds();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'secondsList': {\n                this.timePicker.prevSeconds();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.secondsList) {\n            this.timePicker.secondsList.nativeElement.focus();\n        } else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1 ||\n            listName.indexOf('secondsList') !== -1) && this.timePicker.ampmList) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('ampmList') !== -1 && this.timePicker.secondsList) {\n            this.timePicker.secondsList.nativeElement.focus();\n        } else if (listName.indexOf('secondsList') !== -1 && this.timePicker.secondsList\n            && listName.indexOf('minutesList') && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if (listName.indexOf('ampmList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('ampmList') !== -1 || listName.indexOf('secondsList') !== -1 ||\n            listName.indexOf('minuteList') !== -1) && this.timePicker.hourList) {\n            this.timePicker.hourList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.timePicker.mode === InteractionMode.DropDown) {\n            this.timePicker.close();\n            return;\n        }\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxSecondsItem]'\n})\nexport class IgxSecondsItemDirective {\n\n    @Input('igxSecondsItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedSeconds;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedSeconds && this.itemList.isActive;\n    }\n\n    get isSelectedSeconds(): boolean {\n        return this.timePicker.selectedSeconds === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollSecondsIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * This directive can be used to add custom action buttons to the dropdownb/dialog.\n */\n@Directive({\n    selector: '[igxTimePickerActions]'\n})\nexport class IgxTimePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Pipe, PipeTransform, Inject } from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\n\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element loses focus.\n **/\n@Pipe({ name: 'displayFormat' })\nexport class TimeDisplayFormatPipe implements PipeTransform {\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        let hour, minutes, seconds, amPM;\n\n        const maskAmPM = this.timePicker.parseMask();\n        const mask = this.timePicker.parseMask(false);\n        if (!value || value === mask || value === maskAmPM) {\n            return '';\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n        }\n\n        if (this.timePicker.showSecondsList) {\n            seconds = sections[sections.length - (this.timePicker.showAmPmList ? 2 : 1)];\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        const format = this.timePicker.format;\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(this.timePicker.promptChar, 'g');\n\n        if (format.indexOf('hh') !== -1 || format.indexOf('HH') !== -1 && hour.indexOf(prompt) !== -1) {\n            hour = hour === prompt + prompt ? '00' : hour.replace(regExp, '0');\n        }\n\n        if (format.indexOf('mm') !== -1 && minutes.indexOf(prompt) !== -1) {\n            minutes = minutes === prompt + prompt ? '00' : minutes.replace(regExp, '0');\n        }\n\n        if (format.indexOf('ss') !== -1 && seconds.indexOf(prompt) !== -1) {\n            seconds = seconds === prompt + prompt ? '00' : seconds.replace(regExp, '0');\n        }\n\n        if (format.indexOf('hh') === -1 && format.indexOf('HH') === -1 && hour !== undefined) {\n            hour = hour.indexOf(prompt) !== -1 ? hour.replace(regExp, '') : hour;\n            const hourVal = parseInt(hour, 10);\n            hour = !hourVal ? '0' : hourVal < 10 && hourVal !== 0 ? hour.replace('0', '') : hour;\n        }\n\n        if (format.indexOf('mm') === -1 && minutes !== undefined) {\n            minutes = minutes.indexOf(prompt) !== -1 ? minutes.replace(regExp, '') : minutes;\n            const minutesVal = parseInt(minutes, 10);\n            minutes = !minutesVal ? '0' : minutesVal < 10 && minutesVal !== 0 ? minutes.replace('0', '') : minutes;\n        }\n\n        if (format.indexOf('ss') === -1 && seconds !== undefined) {\n            seconds = seconds.indexOf(prompt) !== -1 ? seconds.replace(regExp, '') : seconds;\n            const secondsVal = parseInt(seconds, 10);\n            seconds = !secondsVal ? '0' : secondsVal < 10 && secondsVal !== 0 ? seconds.replace('0', '') : seconds;\n        }\n\n        if (format.indexOf('tt') !== -1 && (amPM !== 'AM' || amPM !== 'PM')) {\n            amPM = amPM.indexOf('p') !== -1 || amPM.indexOf('P') !== -1 ? 'PM' : 'AM';\n        }\n\n        let result = `${hour}:${minutes}:${seconds}`;\n        if (!hour) {\n            // remove the hours\n            result = result.slice(result.indexOf(':') + 1);\n        }\n        if (!minutes) {\n            if (hour) {\n                // get the hours and seconds and concat them\n                result = result.slice(0, result.indexOf(':')) +\n                    result.slice(result.lastIndexOf(':'), result.length);\n            } else {\n                // remove the minutes\n                result = result.slice(result.indexOf(':') + 1);\n            }\n        }\n        if (!seconds) {\n            // remove the seconds\n            result = result.slice(0, result.lastIndexOf(':'));\n        }\n\n        return amPM ? `${result} ${amPM}` : result;\n    }\n}\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element gets focus.\n **/\n@Pipe({ name: 'inputFormat' })\nexport class TimeInputFormatPipe implements PipeTransform {\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(prompt, 'g');\n\n        let mask, hour, minutes, seconds, amPM;\n\n        if (this.timePicker.cleared) {\n            this.timePicker.cleared = false;\n            mask = this.timePicker.parseMask(false);\n        } else {\n            mask = this.timePicker.parseMask();\n        }\n\n        if (!value || value === mask) {\n            return mask;\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n            hour = hour.replace(regExp, '');\n\n            const leadZeroHour = (parseInt(hour, 10) < 10 && !hour.startsWith('0')) || hour === '0';\n            hour = leadZeroHour ? '0' + hour : hour;\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n            minutes = minutes.replace(regExp, '');\n\n            const leadZeroMinutes = (parseInt(minutes, 10) < 10 && !minutes.startsWith('0')) || minutes === '0';\n            minutes = leadZeroMinutes ? '0' + minutes : minutes;\n        }\n\n        if (this.timePicker.showSecondsList) {\n            seconds = sections[sections.length - (this.timePicker.showAmPmList ? 2 : 1)];\n            seconds = seconds.replace(regExp, '');\n\n            const leadZeroSeconds = (parseInt(seconds, 10) < 10 && !seconds.startsWith('0')) || seconds === '0';\n            seconds = leadZeroSeconds ? '0' + seconds : seconds;\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        let result = `${hour}:${minutes}:${seconds}`;\n        if (!hour) {\n            // remove the hours\n            result = result.slice(result.indexOf(':') + 1);\n        }\n        if (!minutes) {\n            if (hour) {\n                // get the hours and seconds and concat them\n                result = result.slice(0, result.indexOf(':')) +\n                    result.slice(result.lastIndexOf(':'), result.length);\n            } else {\n                // remove the minutes\n                result = result.slice(result.indexOf(':') + 1);\n            }\n        }\n        if (!seconds) {\n            // remove the seconds\n            result = result.slice(0, result.lastIndexOf(':'));\n        }\n\n        return amPM ? `${result} ${amPM}` : result;\n    }\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxInputDirective } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxMinuteItemDirective,\n    IgxSecondsItemDirective,\n    IgxItemListDirective,\n    IgxTimePickerTemplateDirective,\n    IgxTimePickerActionsDirective\n} from './time-picker.directives';\nimport { Subject, fromEvent, interval, animationFrameScheduler } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxTimePickerBase, IGX_TIME_PICKER_COMPONENT } from './time-picker.common';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll';\nimport { AutoPositionStrategy } from '../services/overlay/position';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport { IgxOverlayOutletDirective, IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';\nimport { ITimePickerResourceStrings } from '../core/i18n/time-picker-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { KEYS, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { InteractionMode } from '../core/enums';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\nconst ITEMS_COUNT = 7;\n\n@Injectable()\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs extends IBaseEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        },\n        {\n            provide: IGX_TIME_PICKER_COMPONENT,\n            useExisting: IgxTimePickerComponent\n        }\n    ],\n    selector: 'igx-time-picker',\n    templateUrl: 'time-picker.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ]\n})\nexport class IgxTimePickerComponent implements\n    IgxTimePickerBase,\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    OnDestroy,\n    AfterViewInit {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     *public date: Date = new Date(Date.now());\n     *  //...\n     *<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            const oldVal = this._value;\n\n            this._value = value;\n            this._onChangeCallback(value);\n\n            const dispVal = this._formatTime(this.value, this.format);\n            if (this.mode === InteractionMode.DropDown && this._displayValue !== dispVal) {\n                this.displayValue = dispVal;\n            }\n\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue: oldVal,\n                newValue: value\n            };\n            this.onValueChanged.emit(args);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     *@ViewChild(\"MyPick\")\n     *public pick: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: ITimePickerResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): ITimePickerResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set okButtonLabel(value: string) {\n        this._okButtonLabel = value;\n    }\n\n    /**\n     * An accessor that returns the label of ok button.\n    */\n    get okButtonLabel(): string {\n        if (this._okButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_ok;\n        }\n        return this._okButtonLabel;\n    }\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set cancelButtonLabel(value: string) {\n        this._cancelButtonLabel = value;\n    }\n\n    /**\n    * An accessor that returns the label of cancel button.\n    */\n    get cancelButtonLabel(): string {\n        if (this._cancelButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_cancel;\n        }\n        return this._cancelButtonLabel;\n    }\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes: 1, seconds: 1}`\n     * ```html\n     *<igx-time-picker [itemsDelta]=\"{hours:3, minutes:5, seconds:10}\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    set itemsDelta(value) {\n        this._itemsDelta = { hours: 1, minutes: 1, seconds: 1, ...value };\n    }\n\n    get itemsDelta(): { hours: number, minutes: number, seconds: number } {\n        return this._itemsDelta;\n    }\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     *```html\n     *public min: string = \"09:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     *```html\n     *public max: string = \"18:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     * The seconds, minutes and hour spinning will wrap around by default.\n     *```html\n     *<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     *<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `s` : seconds field without leading zero <br>\n     * `ss` : seconds field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     *<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    get format() {\n        return this._format || 'hh:mm tt';\n    }\n\n    set format(formatValue: string) {\n        this._format = formatValue;\n        this.mask = this._format.indexOf('tt') !== -1 ? '00:00:00 LL' : '00:00:00';\n\n        if (!this.showHoursList || !this.showMinutesList) {\n            this.trimMask();\n        }\n\n        if (!this.showSecondsList) {\n            this.trimMask();\n        }\n\n        if (this.displayValue) {\n            this.displayValue = this._formatTime(this.value, this._format);\n        }\n\n        this.determineCursorPos();\n    }\n\n    /**\n     * Sets the character used to prompt the user for input.\n     * Default value is \"'-'\".\n     * ```html\n     * <igx-time-picker [promptChar] = \"'_'\">\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public promptChar = '-';\n\n    /**\n     * An @Input property that allows you to switch the interaction mode between\n     * a dialog picker or dropdown with editable masked input.\n     * Deafult is dialog picker.\n     *```html\n     *public mode = InteractionMode.DROPDOWN;\n     *  //..\n     *<igx-time-picker [mode]=\"mode\"></igx-time-picker>\n     *```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-time-picker [outlet]=\"outlet\"></igx-time-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n    * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.\n    * ```typescript\n    * const settings: OverlaySettings = {\n    *      closeOnOutsideClick: true,\n    *      modal: false\n    *  }\n    * ```\n    * ---\n    * ```html\n    * <igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>\n    * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public set overlaySettings(value: OverlaySettings) {\n        this._overlaySettings = value;\n    }\n\n    public get overlaySettings(): OverlaySettings {\n        return this._overlaySettings ? this._overlaySettings :\n            (this.mode === InteractionMode.Dialog ? this._dialogOverlaySettings : this._dropDownOverlaySettings);\n    }\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     *```typescript\n     * @ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValueChanged(timepicker){\n     *    this.toast.show()\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     *```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     *public min: string = \"09:00\";\n     *public max: string = \"18:00\";\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValidationFailed(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     * Emitted when a timePicker is being opened.\n     * ```html\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onOpen(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>\n     * ```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxTimePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     * Emitted when a timePicker is opened.\n     */\n    @Output()\n    public onOpened = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     * Emitted when a timePicker is being closed.\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxTimePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     * Emitted when a timePicker is closed.\n     */\n    @Output()\n    public onClosed = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList')\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList')\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('secondsList')\n    public secondsList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList')\n    public ampmList: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef, static: true })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerActionsDirective, { read: IgxTimePickerActionsDirective })\n    public timePickerActionsDirective: IgxTimePickerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxInputDirective, { read: ElementRef })\n    private _input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('input', { read: ElementRef })\n    private input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('group', { read: IgxInputGroupComponent })\n    private group: IgxInputGroupComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('dropdownInputTemplate', { read: TemplateRef, static: true })\n    private dropdownInputTemplate: TemplateRef<any>;\n\n    private _overlaySettings: OverlaySettings;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n\n    /**\n     * @hidden\n     */\n    public _secondsItems = [];\n\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    /**\n     * @hidden\n    */\n    public cleared = false;\n\n    /**\n     * @hidden\n    */\n    public isNotEmpty = false;\n\n    /**\n     * @hidden\n    */\n    public displayFormat = new TimeDisplayFormatPipe(this);\n\n    /**\n     * @hidden\n    */\n    public inputFormat = new TimeInputFormatPipe(this);\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n\n    /**\n     * @hidden\n     */\n    public selectedSeconds: string;\n\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    /** @hidden @internal */\n    private _value: Date;\n    private _resourceStrings = CurrentResourceStrings.TimePickerResStrings;\n    private _okButtonLabel = null;\n    private _cancelButtonLabel = null;\n    private _format: string;\n    private _mask: string;\n    private _displayValue: string;\n    private _itemsDelta: { hours: number, minutes: number, seconds: number } = { hours: 1, minutes: 1, seconds: 1 };\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n    private _isSecondsListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _secondsView = [];\n    private _ampmView = [];\n\n    private _dateFromModel: Date;\n    private _destroy$ = new Subject<boolean>();\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _dialogOverlaySettings: OverlaySettings;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedSeconds: string;\n    private _prevSelectedAmPm: string;\n\n    private _onOpen = new EventEmitter<IgxTimePickerComponent>();\n    private _onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    private _hoursPos = new Set();\n    private _minutesPos = new Set();\n    private _secondsPos = new Set();\n    private _amPmPos = new Set();\n\n    private _onTouchedCallback: () => void = () => { };\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    private trimMask(): void {\n        this.mask = this.mask.slice(this.mask.indexOf(':') + 1, this.mask.length);\n    }\n\n    /**\n     * @hidden\n    */\n    get mask(): string {\n        return this._mask || '00:00 LL';\n    }\n\n    set mask(val: string) {\n        this._mask = val;\n    }\n\n    /**\n     * @hidden\n     */\n    get displayValue(): string {\n        if (this._displayValue === undefined) {\n            return this._formatTime(this.value, this.format);\n        }\n        return this._displayValue;\n    }\n\n    set displayValue(value: string) {\n        this._displayValue = value;\n    }\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     *}\n     *```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get secondsView(): string[] {\n        return this._secondsView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * @hidden\n     */\n    get showClearButton(): boolean {\n        return (this.displayValue && this.displayValue !== this.parseMask(false)) || this.isNotEmpty;\n    }\n\n    /**\n     * @hidden\n     */\n    get showHoursList(): boolean {\n        return this.format.indexOf('h') !== - 1 || this.format.indexOf('H') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showMinutesList(): boolean {\n        return this.format.indexOf('m') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showSecondsList(): boolean {\n        return this.format.indexOf('s') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showAmPmList(): boolean {\n        return this.format.indexOf('t') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get validSecondsEntries(): any[] {\n        const secondsEntries = [];\n        for (let i = 0; i < 60; i++) {\n            secondsEntries.push(i);\n        }\n        return secondsEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validMinuteEntries(): any[] {\n        const minuteEntries = [];\n        for (let i = 0; i < 60; i++) {\n            minuteEntries.push(i);\n        }\n        return minuteEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validHourEntries(): any[] {\n        const hourEntries = [];\n        const index = this.format.indexOf('h') !== -1 ? 13 : 24;\n        for (let i = 0; i < index; i++) {\n            hourEntries.push(i);\n        }\n        return hourEntries;\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.mode === InteractionMode.Dialog ? this.defaultTimePickerTemplate : this.dropdownInputTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            displayValue: this.displayValue,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        this._generateSeconds();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n\n        this._dropDownOverlaySettings = {\n            modal: false,\n            closeOnOutsideClick: true,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy()\n        };\n        this._dialogOverlaySettings = {};\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this.input) {\n            fromEvent(this.input.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.UP_ARROW || event.key === KEYS.UP_ARROW_IE ||\n                    event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE) {\n                    this.spinOnEdit(event);\n                }\n            });\n        }\n\n        if (this.toggleRef && this.group) {\n            this.toggleRef.element.style.width = this.group.element.nativeElement.getBoundingClientRect().width + 'px';\n        }\n\n        if (this.toggleRef) {\n            this.toggleRef.onClosed.pipe(takeUntil(this._destroy$)).subscribe(() => {\n\n\n                if (this.mode === InteractionMode.DropDown) {\n                    this._onDropDownClosed();\n                }\n\n                this.onClosed.emit(this);\n\n                // TODO: remove this line after deprecating 'onClose'\n                this._onClose.emit(this);\n            });\n\n            this.toggleRef.onOpened.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                this.onOpened.emit(this);\n\n                // TODO: remove this line after deprecating 'onOpen'\n                this._onOpen.emit(this);\n            });\n\n            this.toggleRef.onClosing.pipe(takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n                // If canceled in a user onClosing handler\n                if (event.cancel) {\n                    return;\n                }\n                // Do not focus the input if clicking outside in dropdown mode\n                const input = this.getEditElement();\n                if (input && !(event.event && this.mode === InteractionMode.DropDown)) {\n                    input.focus();\n                }\n            });\n\n            this.determineCursorPos();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.Alt.ArrowDown')\n    public onAltArrowDown() {\n        this.openDialog(this.getInputGroupElement());\n    }\n\n    private determineCursorPos(): void {\n        this.clearCursorPos();\n        for (const char of this.format) {\n            switch (char) {\n                case 'H':\n                case 'h':\n                    this._hoursPos.size === 0 ? this._hoursPos.add(this.format.indexOf(char)) :\n                        this._hoursPos.add(this.format.lastIndexOf(char));\n                    this._hoursPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'M':\n                case 'm':\n                    this._minutesPos.size === 0 ? this._minutesPos.add(this.format.indexOf(char)) :\n                        this._minutesPos.add(this.format.lastIndexOf(char));\n                    this._minutesPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'S':\n                case 's':\n                    this._secondsPos.size === 0 ? this._secondsPos.add(this.format.indexOf(char)) :\n                        this._secondsPos.add(this.format.lastIndexOf(char));\n                    this._secondsPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'T':\n                case 't':\n                    this._amPmPos.size === 0 ? this._amPmPos.add(this.format.indexOf(char)) :\n                        this._amPmPos.add(this.format.lastIndexOf(char));\n                    this._amPmPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n            }\n        }\n    }\n\n    private clearCursorPos() {\n        this._hoursPos.forEach(v => this._hoursPos.delete(v));\n        this._minutesPos.forEach(v => this._minutesPos.delete(v));\n        this._secondsPos.forEach(v => this._secondsPos.delete(v));\n        this._amPmPos.forEach(v => this._amPmPos.delete(v));\n    }\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n            const leadZeroSeconds = (item < 10 && this.format.indexOf('ss') !== -1);\n\n            const leadZero = {\n                hour: leadZeroHour,\n                minute: leadZeroMinute,\n                seconds: leadZeroSeconds\n            }[viewType];\n\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            let formattedSeconds, formattedMinute, formattedHour;\n\n            const minute = value.getMinutes();\n            const seconds = value.getSeconds();\n            const amPM = (hour > 11) ? 'PM' : 'AM';\n\n            if (format.indexOf('h') !== -1) {\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            formattedSeconds = seconds < 10 && format.indexOf('ss') !== -1 ? '0' + seconds : `${seconds}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('ss', formattedSeconds).replace('s', formattedSeconds)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateSecondsView(start: any, end: any): void {\n        this._secondsView = this._viewToString(this._secondsItems.slice(start, end), 'seconds');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateSeconds(): void {\n        const secondsItemsCount = 60 / this.itemsDelta.seconds;\n\n        if (secondsItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._secondsItems);\n            this._isSecondsListLoop = false;\n        }\n\n        for (let i = 0; i < secondsItemsCount; i++) {\n            this._secondsItems.push(i * this.itemsDelta.seconds);\n        }\n\n        if (secondsItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._secondsItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        if (this.selectedHour) {\n            date.setHours(parseInt(this.selectedHour, 10));\n        }\n        if (this.selectedMinute) {\n            date.setMinutes(parseInt(this.selectedMinute, 10));\n        }\n        if (this.selectedSeconds) {\n            date.setSeconds(parseInt(this.selectedSeconds, 10));\n        }\n        if (((this.showHoursList && this.selectedHour !== '12') || (!this.showHoursList && this.selectedHour <= '11')) &&\n            this.selectedAmPm === 'PM') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (!this.showHoursList && this.selectedAmPm === 'AM' && this.selectedHour > '11') {\n            date.setHours(date.getHours() - 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    private _convertMinMaxValue(value: string): Date {\n        const date = this.value ? new Date(this.value) : this._dateFromModel ? new Date(this._dateFromModel) : new Date();\n        const sections = value.split(/[\\s:]+/);\n        let hour, minutes, seconds, amPM;\n\n        date.setSeconds(0);\n\n        if (this.showHoursList) {\n            hour = sections[0];\n            date.setHours(parseInt(hour, 10));\n        }\n\n        if (this.showMinutesList) {\n            minutes = this.showHoursList ? sections[1] : sections[0];\n            date.setMinutes(parseInt(minutes, 10));\n        }\n\n        if (this.showSecondsList) {\n            seconds = sections[sections.length - (this.showAmPmList ? 2 : 1)];\n            date.setSeconds(parseInt(seconds, 10));\n        }\n\n        if (this.showAmPmList) {\n            amPM = sections[sections.length - 1];\n\n            if (((this.showHoursList && date.getHours().toString() !== '12') ||\n                (!this.showHoursList && date.getHours().toString() <= '11')) && amPM === 'PM') {\n                date.setHours(date.getHours() + 12);\n            }\n\n            if (!this.showHoursList && amPM === 'AM' && date.getHours().toString() > '11') {\n                date.setHours(date.getHours() - 12);\n            }\n\n            if (this.showHoursList && date.getHours() === 12 && amPM === 'AM') {\n                date.setHours(0);\n            }\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _isEntryValid(val: string): boolean {\n        let validH = true;\n        let validM = true;\n        let validS = true;\n\n        const sections = val.split(/[\\s:]+/);\n        const re = new RegExp(this.promptChar, 'g');\n\n        if (this.showHoursList) {\n            validH = this.validHourEntries.indexOf(parseInt(sections[0].replace(re, ''), 10)) !== -1;\n        }\n\n        if (this.showMinutesList) {\n            const minutes = this.showHoursList ? sections[1] : sections[0];\n            validM = this.validMinuteEntries.indexOf(parseInt(minutes.replace(re, ''), 10)) !== -1;\n        }\n\n        if (this.showSecondsList) {\n            const seconds = sections[sections.length - (this.showAmPmList ? 2 : 1)];\n            validS = this.validSecondsEntries.indexOf(parseInt(seconds.replace(re, ''), 10)) !== -1;\n        }\n\n        return validH && validM && validS;\n    }\n\n    private _getCursorPosition(): number {\n        return this.input.nativeElement.selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        this.input.nativeElement.setSelectionRange(start, end);\n    }\n\n    private _updateEditableInput(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this._getSelectedTime(), this.format);\n        }\n    }\n\n    private _spinHours(currentVal: Date, minVal: Date, maxVal: Date, hDelta: number, sign: number): Date {\n        const oldVal = new Date(currentVal);\n\n        currentVal.setMinutes(sign * hDelta);\n        if (currentVal.getDate() !== oldVal.getDate() && this.isSpinLoop) {\n            currentVal.setDate(oldVal.getDate());\n        }\n\n        let minutes = currentVal.getMinutes();\n        if (currentVal.getTime() > maxVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes < minVal.getMinutes() ? 60 + minutes : minutes;\n                minVal.setMinutes(sign * minutes);\n                return minVal;\n            } else {\n                return oldVal;\n            }\n        } else if (currentVal.getTime() < minVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes <= maxVal.getMinutes() ? minutes : minutes - 60;\n                maxVal.setMinutes(minutes);\n                return maxVal;\n            } else {\n                return oldVal;\n            }\n        } else {\n            return currentVal;\n        }\n    }\n\n    private _spinMinutes(currentVal: Date, mDelta: number, sign: number) {\n        let minutes = currentVal.getMinutes() + (sign * mDelta);\n\n        if (minutes < 0 || minutes >= 60) {\n            minutes = this.isSpinLoop ? minutes - (sign * 60) : currentVal.getMinutes();\n        }\n\n        currentVal.setMinutes(minutes);\n        return currentVal;\n    }\n\n    private _spinSeconds(currentVal: Date, sDelta: number, sign: number) {\n        let seconds = currentVal.getSeconds() + (sign * sDelta);\n\n        if (seconds < 0 || seconds >= 60) {\n            seconds = this.isSpinLoop ? seconds - (sign * 60) : currentVal.getSeconds();\n        }\n\n        currentVal.setSeconds(seconds);\n        return currentVal;\n    }\n\n    private _initializeContainer() {\n        if (this.value) {\n            const formttedTime = this._formatTime(this.value, this.format);\n            const sections = formttedTime.split(/[\\s:]+/);\n\n            if (this.showHoursList) {\n                this.selectedHour = sections[0];\n            }\n\n            if (this.showMinutesList) {\n                this.selectedMinute = this.showHoursList ? sections[1] : sections[0];\n            }\n\n            if (this.showSecondsList) {\n                this.selectedSeconds = sections[sections.length - (this.showAmPmList ? 2 : 1)];\n            }\n\n            if (this.showAmPmList && this._ampmItems !== null) {\n                this.selectedAmPm = sections[sections.length - 1];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = !this.showHoursList && this.value ? this.value.getHours().toString() :\n                this.showHoursList ? `${this._hourItems[3]}` : '0';\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = !this.showMinutesList && this.value ? this.value.getMinutes().toString() : '0';\n        }\n        if (this.selectedSeconds === undefined) {\n            this.selectedSeconds = !this.showSecondsList && this.value ? this.value.getSeconds().toString() : '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedSeconds = this.selectedSeconds;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._onTouchedCallback();\n\n        this._updateHourView(0, ITEMS_COUNT);\n        this._updateMinuteView(0, ITEMS_COUNT);\n        this._updateSecondsView(0, ITEMS_COUNT);\n        this._updateAmPmView(0, ITEMS_COUNT);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedSeconds) {\n            this.scrollSecondsIntoView(this.selectedSeconds);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        requestAnimationFrame(() => {\n            if (this.hourList) {\n                this.hourList.nativeElement.focus();\n            } else if (this.minuteList) {\n                this.minuteList.nativeElement.focus();\n            } else if (this.secondsList) {\n                this.secondsList.nativeElement.focus();\n            }\n        });\n    }\n\n    private _onDropDownClosed(): void {\n        const oldValue = this.value;\n        const newVal = this._convertMinMaxValue(this.displayValue);\n\n        if (this._isValueValid(newVal)) {\n            if (!this.value || oldValue.getTime() !== newVal.getTime()) {\n                this.value = newVal;\n            }\n        } else {\n            this.displayValue = this.inputFormat.transform(this._formatTime(oldValue, this.format));\n\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: newVal,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getEditElement() {\n        return this._input ? this._input.nativeElement : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public getInputGroupElement() {\n        return this.group ? this.group.element.nativeElement : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        // use this flag to make sure that min/maxValue are checked (in _convertMinMaxValue() method)\n        // against the real value when initializing the component and value is bound via ngModel\n        this._dateFromModel = value;\n\n        this.value = value;\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /**\n     * opens the dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-time-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxTimePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayTime=\"displayTime\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayTime\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-time-picker>\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.toggleRef.collapsed) {\n            return this._onDropDownClosed();\n        }\n        const settings = this.overlaySettings;\n\n        if (target && settings && settings.positionStrategy) {\n            settings.positionStrategy.settings.target = target;\n        }\n        if (this.outlet) {\n            settings.outlet = this.outlet;\n        }\n\n        this.toggleRef.open(settings);\n        this._initializeContainer();\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     *scrhintoView(picker) {\n     *picker.scrollHourIntoView('2');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrhintoView(picker)\"></igx-time-picker>\n     *```\n     *@param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        if (this.showHoursList) {\n            const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n            if (hourIntoView) {\n                this._hourView = hourIntoView.view;\n                this.selectedHour = hourIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     *scrMintoView(picker) {\n     *picker.scrollMinuteIntoView('3');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        if (this.showMinutesList) {\n            const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n            if (minuteIntoView) {\n                this._minuteView = minuteIntoView.view;\n                this.selectedMinute = minuteIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls a seconds item into view.\n     * ```typescript\n     *scrMintoView(picker) {\n     *picker.scrollSecondsIntoView('4');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollSecondsIntoView(item: string): void {\n        if (this.showSecondsList) {\n            const secondsIntoView = this._scrollItemIntoView(item,\n                this._secondsItems, this.selectedSeconds, this._isSecondsListLoop, 'seconds');\n            if (secondsIntoView) {\n                this._secondsView = secondsIntoView.view;\n                this.selectedSeconds = secondsIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     *scrAmPmIntoView(picker) {\n     *picker.scrollAmPmIntoView('PM');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        if (this.showAmPmList) {\n            const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n            if (ampmIntoView) {\n                this._ampmView = ampmIntoView.view;\n                this.selectedAmPm = ampmIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextSeconds() {\n        const nextSeconds = this._nextItem(this._secondsItems, this.selectedSeconds, this._isSecondsListLoop, 'seconds');\n        this._secondsView = nextSeconds.view;\n        this.selectedSeconds = nextSeconds.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevSeconds() {\n        const prevSeconds = this._prevItem(this._secondsItems, this.selectedSeconds, this._isSecondsListLoop, 'seconds');\n        this._secondsView = prevSeconds.view;\n        this.selectedSeconds = prevSeconds.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        const time = this._getSelectedTime();\n        if (this._isValueValid(time)) {\n            this.close();\n            this.value = time;\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: time,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n\n        this.close();\n\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedSeconds = this._prevSelectedSeconds;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let hInView = this.picker.hoursInView;\n     *}\n     *```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.minutesInView;\n     *}\n     *```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the seconds currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.secondsInView;\n     *}\n     *```\n     */\n    public secondsInView(): string[] {\n        return this._secondsView.filter((seconds) => seconds !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let ApInView = this.picker.ampmInView;\n     *}\n     *```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * Closes the dropdown/dialog.\n     * ```html\n     *<igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.close();\n     * ```\n     */\n    public close(): void {\n        this.toggleRef.close();\n    }\n\n    /**\n     * @hidden\n     */\n    public parseMask(preserveAmPm = true): string {\n        const maskWithAmPm = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace('LL', 'AM');\n        const pureMask = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace(new RegExp('L', 'g'), this.promptChar);\n\n        return preserveAmPm ? maskWithAmPm : pureMask;\n    }\n\n    /**\n     * @hidden\n     */\n    public clear(): void {\n        if (this.toggleRef.collapsed) {\n            this.cleared = true;\n            this.isNotEmpty = false;\n\n            const oldVal = new Date(this.value);\n\n            this.displayValue = '';\n            this.value.setHours(0, 0);\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInput(event): void {\n        const val = event.target.value;\n        const oldVal = new Date(this.value);\n\n        this.isNotEmpty = val !== this.parseMask(false);\n\n        // handle cases where all empty positions (promts) are filled and we want to update\n        // timepicker own value property if it is a valid Date\n        if (val.indexOf(this.promptChar) === -1) {\n            if (this._isEntryValid(val)) {\n                const newVal = this._convertMinMaxValue(val);\n                if (oldVal.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: val,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n            // handle cases where the user deletes the display value (when pressing backspace or delete)\n        } else if (!this.value || !val || val === this.parseMask(false)) {\n            this.isNotEmpty = false;\n\n            this.value.setHours(0, 0);\n            this.displayValue = val;\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onFocus(event): void {\n        this.isNotEmpty = event.target.value !== this.parseMask(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public onBlur(event): void {\n        const value = event.target.value;\n\n        this.isNotEmpty = value !== '';\n        this.displayValue = value;\n\n        if (value && value !== this.parseMask()) {\n            if (this._isEntryValid(value)) {\n                const newVal = this._convertMinMaxValue(value);\n                if (!this.value || this.value.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: value,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public spinOnEdit(event): void {\n        event.preventDefault();\n\n        let sign: number;\n        let displayVal: string;\n        const currentVal = new Date(this.value);\n        const min = this.minValue ? this._convertMinMaxValue(this.minValue) : this._convertMinMaxValue('00:00');\n        const max = this.maxValue ? this._convertMinMaxValue(this.maxValue) : this._convertMinMaxValue('24:00');\n\n        const cursor = this._getCursorPosition();\n\n        if (event.key) {\n            const key = event.key;\n            sign = key === KEYS.DOWN_ARROW || key === KEYS.DOWN_ARROW_IE ? -1 : 1;\n        }\n\n        if (event.deltaY) {\n            sign = event.deltaY < 0 ? 1 : -1;\n        }\n\n        if (!this.displayValue) {\n            this.value = min;\n            displayVal = this._formatTime(this.value, this.format);\n        } else {\n            const hDelta = this.itemsDelta.hours * 60 + (sign * this.value.getMinutes());\n            const mDelta = this.itemsDelta.minutes;\n            const sDelta = this.itemsDelta.seconds;\n\n            if (this.cursorOnHours(cursor, this.showHoursList)) {\n                this.value = this._spinHours(currentVal, min, max, hDelta, sign);\n            }\n            if (this.cursorOnMinutes(cursor, this.showHoursList, this.showMinutesList)) {\n                this.value = this._spinMinutes(currentVal, mDelta, sign);\n            }\n            if (this.cursorOnSeconds(cursor, this.showHoursList, this.showMinutesList, this.showSecondsList)) {\n                this.value = this._spinSeconds(currentVal, sDelta, sign);\n            }\n            if (this.cursorOnAmPm(cursor, this.showHoursList, this.showMinutesList, this.showSecondsList, this.showAmPmList)) {\n                const sections = this.displayValue.split(/[\\s:]+/);\n                sign = sections[sections.length - 1] === 'AM' ? 1 : -1;\n                currentVal.setHours(currentVal.getHours() + (sign * 12));\n\n                this.value = currentVal;\n            }\n\n            displayVal = this._formatTime(this.value, this.format);\n        }\n\n        // minor hack for preventing cursor jumping in IE\n        this._displayValue = this.inputFormat.transform(displayVal);\n        this.input.nativeElement.value = this._displayValue;\n        this._setCursorPosition(cursor);\n\n        requestAnimationFrame(() => {\n            this._setCursorPosition(cursor);\n        });\n    }\n\n    private cursorOnHours(cursor: number, showHours: boolean): boolean {\n        return showHours && this._hoursPos.has(cursor);\n    }\n\n    private cursorOnMinutes(cursor: number, showHours: boolean, showMinutes: boolean): boolean {\n        return showMinutes &&\n            (showHours && this._minutesPos.has(cursor)) ||\n            (!showHours && this._minutesPos.has(cursor));\n    }\n\n    private cursorOnSeconds(cursor: number, showHours: boolean, showMinutes: boolean, showSeconds: boolean): boolean {\n        return showSeconds &&\n            (showHours && showMinutes && this._secondsPos.has(cursor)) ||\n            ((!showHours || !showMinutes) && this._secondsPos.has(cursor)) ||\n            (!showHours && !showMinutes && this._secondsPos.has(cursor));\n    }\n\n    private cursorOnAmPm(cursor: number, showHours: boolean, showMinutes: boolean,\n        showSeconds: boolean, showAmPm: boolean): boolean {\n        return showAmPm &&\n            (showHours && showMinutes && showSeconds && this._amPmPos.has(cursor)) ||\n            ((!showHours || !showMinutes || !showSeconds) && this._amPmPos.has(cursor)) ||\n            (!showHours && (!showMinutes || !showSeconds) && this._amPmPos.has(cursor));\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxMinuteItemDirective,\n        IgxSecondsItemDirective,\n        IgxItemListDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxIconModule,\n        IgxButtonModule,\n        IgxMaskModule,\n        IgxToggleModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n"]}
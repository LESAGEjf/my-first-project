var IgxCheckboxComponent_1;
import { __decorate } from "tslib";
import { Component, Directive, EventEmitter, forwardRef, HostBinding, Input, NgModule, Output, ViewChild } from '@angular/core';
import { CheckboxRequiredValidator, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { isIE } from '../core/utils';
export var LabelPosition;
(function (LabelPosition) {
    LabelPosition["BEFORE"] = "before";
    LabelPosition["AFTER"] = "after";
})(LabelPosition || (LabelPosition = {}));
const noop = () => { };
const Éµ0 = noop;
let nextId = 0;
/**
 * **Ignite UI for Angular Checkbox** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/checkbox.html)
 *
 * The Ignite UI Checkbox is a selection control that allows users to make a binary choice. It behaves similarly
 * to the native browser checkbox.
 *
 * Example:
 * ```html
 * <igx-checkbox checked="true">
 *   simple checkbox
 * </igx-checkbox>
 * ```
 */
let IgxCheckboxComponent = IgxCheckboxComponent_1 = class IgxCheckboxComponent {
    constructor() {
        /**
         * Sets/gets the `id` of the checkbox component.
         * If not set, the `id` of the first checkbox component will be `"igx-checkbox-0"`.
         * ```html
         * <igx-checkbox id="my-first-checkbox"></igx-checkbox>
         * ```
         * ```typescript
         * let checkboxId =  this.checkbox.id;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.id = `igx-checkbox-${nextId++}`;
        /**
         * Sets/gets the id of the `label` element.
         * If not set, the id of the `label` in the first checkbox component will be `"igx-checkbox-0-label"`.
         * ```html
         * <igx-checkbox labelId = "Label1"></igx-checkbox>
         * ```
         * ```typescript
         * let labelId =  this.checkbox.labelId;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.labelId = `${this.id}-label`;
        /**
         * Sets/gets the value of the `tabindex` attribute.
         * ```html
         * <igx-checkbox [tabindex] = "1"></igx-checkbox>
         * ```
         * ```typescript
         * let tabIndex =  this.checkbox.tabindex;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.tabindex = null;
        /**
         *  Sets/gets the position of the `label`.
         *  If not set, the `labelPosition` will have value `"after"`.
         * ```html
         * <igx-checkbox labelPosition = "before"></igx-checkbox>
         * ```
         * ```typescript
         * let labelPosition =  this.checkbox.labelPosition;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.labelPosition = LabelPosition.AFTER;
        /**
         * Enables/Disables the ripple effect.
         * If not set, `disableRipple` will have value `false`.
         * ```html
         * <igx-checkbox [disableRipple] = "true"></igx-checkbox>
         * ```
         * ```typescript
         * let isRippleDisabled = this.checkbox.desableRipple;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.disableRipple = false;
        /**
         * Sets/gets whether the checkbox is required.
         * If not set, `required` will have value `false`.
         * ```html
         * <igx-checkbox [required] = "true"></igx-checkbox>
         * ```
         * ```typescript
         * let isRequired =  this.checkbox.required;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.required = false;
        /**
         * Sets/gets the `aria-labelledby` attribute.
         * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.
         * ```html
         * <igx-checkbox aria-labelledby = "Checkbox1"></igx-checkbox>
         * ```
         * ```typescript
         * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.ariaLabelledBy = this.labelId;
        /**
         * Sets/gets the value of the `aria-label` attribute.
         * ```html
         * <igx-checkbox aria-label = "Checkbox1"></igx-checkbox>
         * ```
         * ```typescript
         * let ariaLabel = this.checkbox.aruaLabel;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.ariaLabel = null;
        /**
         * An event that is emitted after the checkbox state is changed.
         * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.
         * @memberof IgxCheckboxComponent
         */
        this.change = new EventEmitter();
        /**
         * Returns the class of the checkbox component.
         * ```typescript
         * let class =  this.checkbox.cssClass;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.cssClass = 'igx-checkbox';
        /**
         * Sets/gets whether the checkbox component is on focus.
         * Default value is `false`.
         * ```typescript
         * this.checkbox.focused =  true;
         * ```
         * ```typescript
         * let isFocused =  this.checkbox.focused;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.focused = false;
        /**
         * Sets/gets the checkbox indeterminate visual state.
         * Default value is `false`;
         * ```html
         * <igx-checkbox [indeterminate] = "true"></igx-checkbox>
         * ```
         * ```typescript
         * let isIndeterminate = this.checkbox.indeterminate;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.indeterminate = false;
        /**
         * Sets/gets whether the checkbox is checked.
         * Default value is `false`.
         * ```html
         * <igx-checkbox [checked] = "true"></igx-checkbox>
         * ```
         * ```typescript
         * let isChecked =  this.checkbox.checked;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.checked = false;
        /**
         * Sets/gets whether the checkbox is disabled.
         * Default value is `false`.
         * ```html
         * <igx-checkbox [disabled] = "true"></igx-checkbox>
         * ```
         * ```typescript
         * let isDisabled = this.checkbox.disabled;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.disabled = false;
        /**
         * Sets/gets whether the checkbox is readonly.
         * Default value is `false`.
         * ```html
         * <igx-checkbox [readonly]="true"></igx-checkbox>
         * ```
         * ```typescript
         * let readonly = this.checkbox.readonly;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.readonly = false;
        /**
         * Sets/gets whether the checkbox should disable all css transitions.
         * Default value is `false`.
         * ```html
         * <igx-checkbox [disableTransitions]="true"></igx-checkbox>
         * ```
         * ```typescript
         * let disableTransitions = this.checkbox.disableTransitions;
         * ```
         * @memberof IgxCheckboxComponent
         */
        this.disableTransitions = false;
        /**
         *@hidden
         */
        this.inputId = `${this.id}-input`;
        /**
         *@hidden
         */
        this._onTouchedCallback = noop;
        /**
         * @hidden
         */
        this._onChangeCallback = noop;
    }
    /**
     * If `disabled` is `false`, switches the `checked` state.
     * ```typescript
     * this.checkbox.toggle();
     * ```
     * @memberof IgxCheckboxComponent
     */
    toggle() {
        if (this.disabled || this.readonly) {
            return;
        }
        this.indeterminate = false;
        this.focused = false;
        this.checked = !this.checked;
        this.change.emit({ checked: this.checked, checkbox: this });
        this._onChangeCallback(this.checked);
    }
    /**
     *@hidden
     */
    _onCheckboxChange(event) {
        // We have to stop the original checkbox change event
        // from bubbling up since we emit our own change event
        event.stopPropagation();
    }
    /**
     *@hidden
     */
    _onCheckboxClick(event) {
        // Since the original checkbox is hidden and the label
        // is used for styling and to change the checked state of the checkbox,
        // we need to prevent the checkbox click event from bubbling up
        // as it gets triggered on label click
        event.stopPropagation();
        if (this.readonly) {
            // readonly prevents the component from changing state (see toggle() method).
            // However, the native checkbox can still be activated through user interaction (focus + space, label click)
            // Prevent the native change so the input remains in sync
            event.preventDefault();
        }
        if (isIE()) {
            this.nativeCheckbox.nativeElement.blur();
        }
        this.toggle();
    }
    /**
     *@hidden
     */
    _onLabelClick(event) {
        // We use a span element as a placeholder label
        // in place of the native label, we need to emit
        // the change event separately here alongside
        // the click event emitted on click
        this.toggle();
    }
    /**
     *@hidden
     */
    onFocus(event) {
        this.focused = true;
    }
    /**
     *@hidden
     */
    onBlur(event) {
        this.focused = false;
        this._onTouchedCallback();
    }
    /**
     *@hidden
     */
    writeValue(value) {
        this._value = value;
        this.checked = !!this._value;
    }
    /**
     *@hidden
     */
    get labelClass() {
        switch (this.labelPosition) {
            case LabelPosition.BEFORE:
                return `${this.cssClass}__label--before`;
            case LabelPosition.AFTER:
            default:
                return `${this.cssClass}__label`;
        }
    }
    /**
     *@hidden
     */
    registerOnChange(fn) { this._onChangeCallback = fn; }
    /**
     *@hidden
     */
    registerOnTouched(fn) { this._onTouchedCallback = fn; }
    /** @hidden */
    getEditElement() {
        return this.nativeCheckbox.nativeElement;
    }
};
__decorate([
    ViewChild('checkbox', { static: true })
], IgxCheckboxComponent.prototype, "nativeCheckbox", void 0);
__decorate([
    ViewChild('label', { static: true })
], IgxCheckboxComponent.prototype, "nativeLabel", void 0);
__decorate([
    ViewChild('placeholderLabel', { static: true })
], IgxCheckboxComponent.prototype, "placeholderLabel", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], IgxCheckboxComponent.prototype, "id", void 0);
__decorate([
    Input()
], IgxCheckboxComponent.prototype, "labelId", void 0);
__decorate([
    Input()
], IgxCheckboxComponent.prototype, "value", void 0);
__decorate([
    Input()
], IgxCheckboxComponent.prototype, "name", void 0);
__decorate([
    Input()
], IgxCheckboxComponent.prototype, "tabindex", void 0);
__decorate([
    Input()
], IgxCheckboxComponent.prototype, "labelPosition", void 0);
__decorate([
    Input()
], IgxCheckboxComponent.prototype, "disableRipple", void 0);
__decorate([
    Input()
], IgxCheckboxComponent.prototype, "required", void 0);
__decorate([
    Input('aria-labelledby')
], IgxCheckboxComponent.prototype, "ariaLabelledBy", void 0);
__decorate([
    Input('aria-label')
], IgxCheckboxComponent.prototype, "ariaLabel", void 0);
__decorate([
    Output()
], IgxCheckboxComponent.prototype, "change", void 0);
__decorate([
    HostBinding('class.igx-checkbox')
], IgxCheckboxComponent.prototype, "cssClass", void 0);
__decorate([
    HostBinding('class.igx-checkbox--focused')
], IgxCheckboxComponent.prototype, "focused", void 0);
__decorate([
    HostBinding('class.igx-checkbox--indeterminate'),
    Input()
], IgxCheckboxComponent.prototype, "indeterminate", void 0);
__decorate([
    HostBinding('class.igx-checkbox--checked'),
    Input()
], IgxCheckboxComponent.prototype, "checked", void 0);
__decorate([
    HostBinding('class.igx-checkbox--disabled'),
    Input()
], IgxCheckboxComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], IgxCheckboxComponent.prototype, "readonly", void 0);
__decorate([
    HostBinding('class.igx-checkbox--plain'),
    Input()
], IgxCheckboxComponent.prototype, "disableTransitions", void 0);
IgxCheckboxComponent = IgxCheckboxComponent_1 = __decorate([
    Component({
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent_1, multi: true }],
        selector: 'igx-checkbox',
        preserveWhitespaces: false,
        template: "<input #checkbox class=\"igx-checkbox__input\"\n    type=\"checkbox\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [indeterminate]=\"indeterminate\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (change)=\"_onCheckboxChange($event)\"\n    (click)=\"_onCheckboxClick($event)\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\" />\n\n<div\n    igxRipple\n    igxRippleTarget=\".igx-checkbox__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\"\n    class=\"igx-checkbox__composite-wrapper\"\n>\n    <label #label class=\"igx-checkbox__composite\"\n        [attr.for]=\"inputId\">\n        <svg class=\"igx-checkbox__composite-mark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n            <path d=\"M4.1,12.7 9,17.6 20.3,6.3\" />\n        </svg>\n    </label>\n\n    <div class=\"igx-checkbox__ripple\"></div>\n</div>\n\n<span #placeholderLabel role=\"label\"\n    [class]=\"labelClass\"\n    [id]=\"labelId\"\n    (click)=\"_onLabelClick($event)\">\n    <ng-content></ng-content>\n</span>\n"
    })
], IgxCheckboxComponent);
export { IgxCheckboxComponent };
export const IGX_CHECKBOX_REQUIRED_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),
    multi: true
};
/* tslint:disable directive-selector */
let IgxCheckboxRequiredDirective = class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator {
};
IgxCheckboxRequiredDirective = __decorate([
    Directive({
        selector: `igx-checkbox[required][formControlName],
    igx-checkbox[required][formControl],
    igx-checkbox[required][ngModel]`,
        providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]
    })
], IgxCheckboxRequiredDirective);
export { IgxCheckboxRequiredDirective };
/**
 * @hidden
 */
let IgxCheckboxModule = class IgxCheckboxModule {
};
IgxCheckboxModule = __decorate([
    NgModule({
        declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],
        exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],
        imports: [IgxRippleModule]
    })
], IgxCheckboxModule);
export { IgxCheckboxModule };
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,
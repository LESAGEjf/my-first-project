var IgxRadioGroupDirective_1;
import { __decorate } from "tslib";
import { Directive, NgModule, Input, Output, EventEmitter, ContentChildren, HostBinding } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxRadioComponent, RadioLabelPosition } from '../../radio/radio.component';
import { IgxRippleModule } from '../ripple/ripple.directive';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
const noop = () => { };
const Éµ0 = noop;
let nextId = 0;
/**
 * **Ignite UI for Angular Radio Group** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)
 *
 * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.
 *
 * Example:
 * ```html
 * <igx-radio-group name="radioGroup">
 *   <igx-radio *ngFor="let item of ['Foo', 'Bar', 'Baz']" value="{{item}}">
 *      {{item}}
 *   </igx-radio>
 * </igx-radio-group>
 * ```
 */
let IgxRadioGroupDirective = IgxRadioGroupDirective_1 = class IgxRadioGroupDirective {
    constructor() {
        /**
         * An event that is emitted after the radio group `value` is changed.
         * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.
         * @memberof IgxRadioGroupDirective
         */
        this.change = new EventEmitter();
        /**
         *@hidden
         */
        this.cssClass = 'igx-radio-group';
        /**
         *@hidden
         */
        this._onChangeCallback = noop;
        /**
         *@hidden
         */
        this._name = `igx-radio-group-${nextId++}`;
        /**
         *@hidden
         */
        this._value = null;
        /**
         *@hidden
         */
        this._selected = null;
        /**
         *@hidden
         */
        this._isInitialized = false;
        /**
         *@hidden
         */
        this._labelPosition = 'after';
        /**
         *@hidden
         */
        this._disabled = false;
        /**
         *@hidden
         */
        this._required = false;
        /**
         *@hidden
         */
        this.destroy$ = new Subject();
    }
    /**
     * Sets/gets the `value` attribute.
     * ```html
     * <igx-radio-group [value] = "'radioButtonValue'"></igx-radio-group>
     * ```
     * ```typescript
     * let value =  this.radioGroup.value;
     * ```
     * @memberof IgxRadioGroupDirective
     */
    get value() { return this._value; }
    set value(newValue) {
        if (this._value !== newValue) {
            this._value = newValue;
            this._selectRadioButton();
        }
    }
    /**
     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.
     * ```html
     * <igx-radio-group name = "Radio1"></igx-radio-group>
     *  ```
     * ```typescript
     * let name =  this.radioGroup.name;
     * ```
     * @memberof IgxRadioGroupDirective
     */
    get name() { return this._name; }
    set name(newValue) {
        if (this._name !== newValue) {
            this._name = newValue;
            this._setRadioButtonNames();
        }
    }
    /**
     * Sets/gets whether the radio group is required.
     * If not set, `required` will have value `false`.
     * ```html
     * <igx-radio-group [required] = "true"></igx-radio-group>
     * ```
     * ```typescript
     * let isRequired =  this.radioGroup.required;
     * ```
     * @memberof IgxRadioGroupDirective
     */
    get required() { return this._required; }
    set required(newValue) {
        if (this._required !== newValue) {
            this._required = newValue;
            this._setRadioButtonsRequired();
        }
    }
    /**
     * An @Input property that allows you to disable the radio group. By default it's false.
     * ```html
     * <igx-radio-group [disabled]="true"></igx-radio-group>
     * ```
     * @memberof IgxRadioGroupDirective
     */
    get disabled() { return this._disabled; }
    set disabled(newValue) {
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this._disableRadioButtons();
        }
    }
    /**
     * Sets/gets the position of the `label` in the child radio buttons.
     * If not set, `labelPosition` will have value `"after"`.
     * ```html
     * <igx-radio-group labelPosition = "before"></igx-radio-group>
     * ```
     * ```typescript
     * let labelPosition =  this.radioGroup.labelPosition;
     * ```
     * @memberof IgxRadioGroupDirective
     */
    get labelPosition() { return this._labelPosition; }
    set labelPosition(newValue) {
        if (this._labelPosition !== newValue) {
            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;
            this._setRadioButtonLabelPosition();
        }
    }
    /**
     * Sets/gets the selected child radio button.
     * ```typescript
     * let selectedButton = this.radioGroup.selected;
     * this.radioGroup.selected = selectedButton;
     * ```
     * @memberof IgxRadioGroupDirective
     */
    get selected() { return this._selected; }
    set selected(selected) {
        if (this._selected !== selected) {
            this._selected = selected;
            this.value = selected ? selected.value : null;
        }
    }
    ngAfterContentInit() {
        // The initial value can possibly be set by NgModel and it is possible that
        // the OnInit of the NgModel occurs after the OnInit of this class.
        this._isInitialized = true;
        setTimeout(() => { this._initRadioButtons(); });
    }
    /**
     * Checks whether the provided value is consistent to the current radio button.
     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.
     * ```typescript
     * this.radioGroup.writeValue('radioButtonValue');
     * ```
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     *@hidden
     */
    registerOnChange(fn) { this._onChangeCallback = fn; }
    /**
     *@hidden
     */
    registerOnTouched(fn) {
        if (this.radioButtons) {
            this.radioButtons.forEach((button) => {
                button.registerOnTouched(fn);
            });
        }
    }
    /**
     *@hidden
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     *@hidden
     */
    _initRadioButtons() {
        if (this.radioButtons) {
            const props = { name: this._name, labelPosition: this._labelPosition, disabled: this._disabled, required: this._required };
            this.radioButtons.forEach((button) => {
                Object.assign(button, props);
                if (button.value === this._value) {
                    button.checked = true;
                    this._selected = button;
                }
                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));
            });
        }
    }
    /**
     *@hidden
     */
    _selectedRadioButtonChanged(args) {
        if (this._selected !== args.radio) {
            if (this._selected) {
                this._selected.checked = false;
            }
            this._selected = args.radio;
        }
        this._value = args.value;
        if (this._isInitialized) {
            this.change.emit(args);
            this._onChangeCallback(this.value);
        }
    }
    /**
     *@hidden
     */
    _setRadioButtonNames() {
        if (this.radioButtons) {
            this.radioButtons.forEach((button) => {
                button.name = this._name;
            });
        }
    }
    /**
     *@hidden
     */
    _selectRadioButton() {
        if (this.radioButtons) {
            this.radioButtons.forEach((button) => {
                if (!this._value) {
                    // no value - uncheck all radio buttons
                    if (button.checked) {
                        button.checked = false;
                    }
                }
                else {
                    if (this._value === button.value) {
                        // selected button
                        if (this._selected !== button) {
                            this._selected = button;
                        }
                        if (!button.checked) {
                            button.select();
                        }
                    }
                    else {
                        // non-selected button
                        if (button.checked) {
                            button.checked = false;
                        }
                    }
                }
            });
        }
    }
    /**
     *@hidden
     */
    _setRadioButtonLabelPosition() {
        if (this.radioButtons) {
            this.radioButtons.forEach((button) => {
                button.labelPosition = this._labelPosition;
            });
        }
    }
    /**
     *@hidden
     */
    _disableRadioButtons() {
        if (this.radioButtons) {
            this.radioButtons.forEach((button) => {
                button.disabled = this._disabled;
            });
        }
    }
    /**
     *@hidden
     */
    _setRadioButtonsRequired() {
        if (this.radioButtons) {
            this.radioButtons.forEach((button) => {
                button.required = this._required;
            });
        }
    }
};
__decorate([
    ContentChildren(IgxRadioComponent, { descendants: true })
], IgxRadioGroupDirective.prototype, "radioButtons", void 0);
__decorate([
    Input()
], IgxRadioGroupDirective.prototype, "value", null);
__decorate([
    Input()
], IgxRadioGroupDirective.prototype, "name", null);
__decorate([
    Input()
], IgxRadioGroupDirective.prototype, "required", null);
__decorate([
    Input()
], IgxRadioGroupDirective.prototype, "disabled", null);
__decorate([
    Input()
], IgxRadioGroupDirective.prototype, "labelPosition", null);
__decorate([
    Input()
], IgxRadioGroupDirective.prototype, "selected", null);
__decorate([
    Output()
], IgxRadioGroupDirective.prototype, "change", void 0);
__decorate([
    HostBinding('class.igx-radio-group')
], IgxRadioGroupDirective.prototype, "cssClass", void 0);
IgxRadioGroupDirective = IgxRadioGroupDirective_1 = __decorate([
    Directive({
        exportAs: 'igxRadioGroup',
        selector: 'igx-radio-group, [igxRadioGroup]',
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective_1, multi: true }]
    })
], IgxRadioGroupDirective);
export { IgxRadioGroupDirective };
/**
 * @hidden
 */
let IgxRadioModule = class IgxRadioModule {
};
IgxRadioModule = __decorate([
    NgModule({
        declarations: [IgxRadioGroupDirective, IgxRadioComponent],
        exports: [IgxRadioGroupDirective, IgxRadioComponent],
        imports: [IgxRippleModule]
    })
], IgxRadioModule);
export { IgxRadioModule };
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,
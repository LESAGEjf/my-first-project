import { __decorate, __param } from "tslib";
import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, NgModule, Renderer2, HostListener, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken, DisplayDensity } from '../../core/density';
let IgxButtonDirective = class IgxButtonDirective extends DisplayDensityBase {
    constructor(element, _renderer, _displayDensityOptions) {
        super(_displayDensityOptions);
        this.element = element;
        this._renderer = _renderer;
        this._displayDensityOptions = _displayDensityOptions;
        /**
         *@hidden
         */
        this._defaultType = 'flat';
        /**
         *@hidden
         */
        this._cssClassPrefix = 'igx-button';
        /**
         * Called when the button is clicked
         */
        this.buttonClick = new EventEmitter();
        /**
         * Sets/gets the `role` attribute.
         * ```typescript
         * this.button.role = 'navbutton';
         * ```
         * ```typescript
         * let buttonRole =  this.button.role;
         * ```
         * @memberof IgxButtonDirective
         */
        this.role = 'button';
        /**
         * Gets or sets whether the button is selected.
         * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.
         * ```html
         * <button igxButton="flat" [selected]="button.selected"></button>
         * ```
         * @memberof IgxButtonDirective
         */
        this.selected = false;
    }
    /**
     * Returns the underlying DOM element
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * Sets the type of the button.
     * ```html
     * <button  igxButton= "icon"></button>
     * ```
     * @memberof IgxButtonDirective
     */
    set type(value) {
        const newValue = value ? value : this._defaultType;
        if (this._type !== newValue) {
            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);
            this._type = newValue;
            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);
        }
    }
    /**
     * Sets the button text color.
     * ```html
     * <button igxButton="gradient" igxButtonColor="blue"></button>
     * ```
     * @memberof IgxButtonDirective
     */
    set color(value) {
        this._color = value || this.nativeElement.style.color;
        this._renderer.setStyle(this.nativeElement, 'color', this._color);
    }
    /**
     * Sets the background color of the button.
     * ```html
     * <button igxButton="raised" igxButtonBackground="red"></button>
     * ```
     * @memberof IgxButtonDirective
     */
    set background(value) {
        this._backgroundColor = value || this._backgroundColor;
        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);
    }
    /**
     * Sets the `aria-label` attribute.
     * ```html
     * <button igxButton= "flat" igxLabel="Label"></button>
     * ```
     * @memberof IgxButtonDirective
     */
    set label(value) {
        this._label = value || this._label;
        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);
    }
    /**
     * Enables/disables the button.
     *  ```html
     * <button igxButton= "fab" [disabled]="true"></button>
     * ```
     * @memberof IgxButtonDirective
     */
    set disabled(val) {
        val = !!val;
        this._disabled = val;
        if (val) {
            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);
        }
        else {
            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);
        }
    }
    /**
     * @hidden
     */
    get cssClassCosy() {
        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&
            this.displayDensity === DisplayDensity.cosy;
    }
    /**
     * @hidden
     */
    get cssClassCompact() {
        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&
            this.displayDensity === DisplayDensity.compact;
    }
    /**
     * @hidden
     */
    get cssClassCosyFab() {
        return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;
    }
    /**
     * @hidden
     */
    get cssClassCompactFab() {
        return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;
    }
    /**
     * @hidden
     */
    get disabledAttribute() {
        return this._disabled ? this._disabled : null;
    }
    /**
     *@hidden
     */
    onClick(ev) {
        this.buttonClick.emit(ev);
    }
};
IgxButtonDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
__decorate([
    Output()
], IgxButtonDirective.prototype, "buttonClick", void 0);
__decorate([
    HostBinding('attr.role')
], IgxButtonDirective.prototype, "role", void 0);
__decorate([
    Input('igxButton')
], IgxButtonDirective.prototype, "type", null);
__decorate([
    Input('igxButtonColor')
], IgxButtonDirective.prototype, "color", null);
__decorate([
    Input('igxButtonBackground')
], IgxButtonDirective.prototype, "background", null);
__decorate([
    Input('igxLabel')
], IgxButtonDirective.prototype, "label", null);
__decorate([
    Input()
], IgxButtonDirective.prototype, "disabled", null);
__decorate([
    HostBinding('class.igx-button--cosy')
], IgxButtonDirective.prototype, "cssClassCosy", null);
__decorate([
    HostBinding('class.igx-button--compact')
], IgxButtonDirective.prototype, "cssClassCompact", null);
__decorate([
    HostBinding('class.igx-button--fab-cosy')
], IgxButtonDirective.prototype, "cssClassCosyFab", null);
__decorate([
    HostBinding('class.igx-button--fab-compact')
], IgxButtonDirective.prototype, "cssClassCompactFab", null);
__decorate([
    HostBinding('attr.disabled')
], IgxButtonDirective.prototype, "disabledAttribute", null);
__decorate([
    Input()
], IgxButtonDirective.prototype, "selected", void 0);
__decorate([
    HostListener('click', ['$event'])
], IgxButtonDirective.prototype, "onClick", null);
IgxButtonDirective = __decorate([
    Directive({
        selector: '[igxButton]'
    }),
    __param(2, Optional()), __param(2, Inject(DisplayDensityToken))
], IgxButtonDirective);
export { IgxButtonDirective };
/**
 * @hidden
 */
let IgxButtonModule = class IgxButtonModule {
};
IgxButtonModule = __decorate([
    NgModule({
        declarations: [IgxButtonDirective],
        exports: [IgxButtonDirective]
    })
], IgxButtonModule);
export { IgxButtonModule };
//# sourceMappingURL=data:application/json;base64,
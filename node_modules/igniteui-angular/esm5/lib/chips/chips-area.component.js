import { __decorate } from "tslib";
import { Component, ContentChildren, ChangeDetectorRef, EventEmitter, HostBinding, Input, IterableDiffer, IterableDiffers, Output, QueryList, DoCheck, AfterViewInit, OnDestroy, ElementRef } from '@angular/core';
import { IgxChipComponent } from './chip.component';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
var IgxChipsAreaComponent = /** @class */ (function () {
    function IgxChipsAreaComponent(cdr, element, _iterableDiffers) {
        this.cdr = cdr;
        this.element = element;
        this._iterableDiffers = _iterableDiffers;
        /**
         * @hidden
         */
        this.class = '';
        /**
         * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.
         * Returns an array of `IgxChipComponent`s.
         * ```html
         * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onReorder)="changedOrder($event)"></igx-chips-area>
         * ```
         * ```typescript
         * public changedOrder(event: IChipsAreaReorderEventArgs){
         *      let chips: IgxChipComponent[] = event.chipsArray;
         * }
         * ```
         */
        this.onReorder = new EventEmitter();
        /**
         * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.
         * Fired after the chips area is initialized if there are initially selected chips as well.
         * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.
         * ```html
         * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onSelection)="selection($event)"></igx-chips-area>
         * ```
         * ```typescript
         * public selection(event: IChipsAreaSelectEventArgs){
         *      let selectedChips: IgxChipComponent[] = event.newSelection;
         * }
         */
        this.onSelection = new EventEmitter();
        /**
         * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.
         * ```html
         * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onMoveStart)="moveStart($event)"></igx-chips-area>
         * ```
         * ```typescript
         * moveStart(event: IBaseChipsAreaEventArgs){
         *      let chipArea = event.owner;
         * }
         * ```
         */
        this.onMoveStart = new EventEmitter();
        /**
         * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.
         * ```html
         * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onMoveEnd)="moveEnd($event)"></igx-chips-area>
         * ```
         * ```typescript
         * moveEnd(event: IBaseChipsAreaEventArgs){
         *      let chipArea = event.owner;
         * }
         * ```
         */
        this.onMoveEnd = new EventEmitter();
        this._differ = null;
        this.destroy$ = new Subject();
        this._differ = this._iterableDiffers.find([]).create(null);
    }
    Object.defineProperty(IgxChipsAreaComponent.prototype, "hostClass", {
        /**
         * @hidden
         */
        get: function () {
            var classes = ['igx-chip-area'];
            classes.push(this.class);
            return classes.join(' ');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxChipsAreaComponent.prototype.ngAfterViewInit = function () {
        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.
        if (this.chipsList.length) {
            var selectedChips = this.chipsList.filter(function (item) { return item.selected; });
            if (selectedChips.length) {
                this.onSelection.emit({
                    originalEvent: null,
                    newSelection: selectedChips,
                    owner: this
                });
            }
        }
    };
    /**
     * @hidden
     */
    IgxChipsAreaComponent.prototype.ngDoCheck = function () {
        var _this = this;
        if (this.chipsList) {
            var changes = this._differ.diff(this.chipsList.toArray());
            if (changes) {
                changes.forEachAddedItem(function (addedChip) {
                    addedChip.item.onMoveStart.pipe(takeUntil(_this.destroy$)).subscribe(function (args) {
                        _this.onChipMoveStart(args);
                    });
                    addedChip.item.onMoveEnd.pipe(takeUntil(_this.destroy$)).subscribe(function (args) {
                        _this.onChipMoveEnd(args);
                    });
                    addedChip.item.onDragEnter.pipe(takeUntil(_this.destroy$)).subscribe(function (args) {
                        _this.onChipDragEnter(args);
                    });
                    addedChip.item.onKeyDown.pipe(takeUntil(_this.destroy$)).subscribe(function (args) {
                        _this.onChipKeyDown(args);
                    });
                    if (addedChip.item.selectable) {
                        addedChip.item.onSelection.pipe(takeUntil(_this.destroy$)).subscribe(function (args) {
                            _this.onChipSelectionChange(args);
                        });
                    }
                });
                this.modifiedChipsArray = this.chipsList.toArray();
            }
        }
    };
    /**
     *@hidden
     */
    IgxChipsAreaComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    /**
     * @hidden
     */
    IgxChipsAreaComponent.prototype.onChipKeyDown = function (event) {
        var _this = this;
        var orderChanged = false;
        var chipsArray = this.chipsList.toArray();
        var dragChipIndex = chipsArray.findIndex(function (el) { return el === event.owner; });
        if (event.originalEvent.shiftKey === true) {
            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {
                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);
                if (orderChanged) {
                    setTimeout(function () {
                        _this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();
                    });
                }
            }
            else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {
                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);
            }
        }
        else {
            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {
                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();
            }
            else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&
                dragChipIndex < chipsArray.length - 1) {
                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();
            }
        }
    };
    /**
     * @hidden
     */
    IgxChipsAreaComponent.prototype.onChipMoveStart = function (event) {
        this.onMoveStart.emit({
            originalEvent: event.originalEvent,
            owner: this
        });
    };
    /**
     * @hidden
     */
    IgxChipsAreaComponent.prototype.onChipMoveEnd = function (event) {
        this.onMoveEnd.emit({
            originalEvent: event.originalEvent,
            owner: this
        });
    };
    /**
     * @hidden
     */
    IgxChipsAreaComponent.prototype.onChipDragEnter = function (event) {
        var dropChipIndex = this.chipsList.toArray().findIndex(function (el) { return el === event.owner; });
        var dragChipIndex = this.chipsList.toArray().findIndex(function (el) { return el === event.dragChip; });
        if (dragChipIndex < dropChipIndex) {
            // from the left to right
            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);
        }
        else {
            // from the right to left
            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);
        }
    };
    /**
     * @hidden
     */
    IgxChipsAreaComponent.prototype.positionChipAtIndex = function (chipIndex, targetIndex, shiftRestLeft, originalEvent) {
        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||
            targetIndex < 0 || this.chipsList.length <= targetIndex) {
            return false;
        }
        var chipsArray = this.chipsList.toArray();
        var result = [];
        for (var i = 0; i < chipsArray.length; i++) {
            if (shiftRestLeft) {
                if (chipIndex <= i && i < targetIndex) {
                    result.push(chipsArray[i + 1]);
                }
                else if (i === targetIndex) {
                    result.push(chipsArray[chipIndex]);
                }
                else {
                    result.push(chipsArray[i]);
                }
            }
            else {
                if (targetIndex < i && i <= chipIndex) {
                    result.push(chipsArray[i - 1]);
                }
                else if (i === targetIndex) {
                    result.push(chipsArray[chipIndex]);
                }
                else {
                    result.push(chipsArray[i]);
                }
            }
        }
        this.modifiedChipsArray = result;
        var eventData = {
            chipsArray: this.modifiedChipsArray,
            originalEvent: originalEvent,
            owner: this
        };
        this.onReorder.emit(eventData);
        return true;
    };
    /**
     * @hidden
     */
    IgxChipsAreaComponent.prototype.onChipSelectionChange = function (event) {
        var selectedChips = this.chipsList.filter(function (chip) { return chip.selected; });
        if (event.selected && !selectedChips.includes(event.owner)) {
            selectedChips.push(event.owner);
        }
        else if (!event.selected && selectedChips.includes(event.owner)) {
            selectedChips = selectedChips.filter(function (chip) {
                return chip.id !== event.owner.id;
            });
        }
        this.onSelection.emit({
            originalEvent: event.originalEvent,
            newSelection: selectedChips,
            owner: this
        });
    };
    IgxChipsAreaComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: IterableDiffers }
    ]; };
    __decorate([
        Input()
    ], IgxChipsAreaComponent.prototype, "class", void 0);
    __decorate([
        HostBinding('attr.class')
    ], IgxChipsAreaComponent.prototype, "hostClass", null);
    __decorate([
        HostBinding('style.width.px'),
        Input()
    ], IgxChipsAreaComponent.prototype, "width", void 0);
    __decorate([
        HostBinding('style.height.px'),
        Input()
    ], IgxChipsAreaComponent.prototype, "height", void 0);
    __decorate([
        Output()
    ], IgxChipsAreaComponent.prototype, "onReorder", void 0);
    __decorate([
        Output()
    ], IgxChipsAreaComponent.prototype, "onSelection", void 0);
    __decorate([
        Output()
    ], IgxChipsAreaComponent.prototype, "onMoveStart", void 0);
    __decorate([
        Output()
    ], IgxChipsAreaComponent.prototype, "onMoveEnd", void 0);
    __decorate([
        ContentChildren(IgxChipComponent, { descendants: true })
    ], IgxChipsAreaComponent.prototype, "chipsList", void 0);
    IgxChipsAreaComponent = __decorate([
        Component({
            selector: 'igx-chips-area',
            template: "<ng-content></ng-content>\n"
        })
    ], IgxChipsAreaComponent);
    return IgxChipsAreaComponent;
}());
export { IgxChipsAreaComponent };
//# sourceMappingURL=data:application/json;base64,
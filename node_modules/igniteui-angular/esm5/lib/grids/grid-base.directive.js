import { __assign, __decorate, __extends, __param, __read, __spread, __values } from "tslib";
import { DOCUMENT } from '@angular/common';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ComponentFactoryResolver, ContentChildren, ContentChild, ElementRef, EventEmitter, HostBinding, Inject, Input, IterableChangeRecord, IterableDiffers, NgZone, OnDestroy, OnInit, Output, QueryList, TemplateRef, ViewChild, ViewChildren, ViewContainerRef, InjectionToken, Optional, DoCheck, Directive } from '@angular/core';
import ResizeObserver from 'resize-observer-polyfill';
import { Subject, combineLatest, pipe } from 'rxjs';
import { takeUntil, first, filter, throttleTime, map } from 'rxjs/operators';
import { cloneArray, isEdge, isNavigationKey, flatten, mergeObjects, isIE } from '../core/utils';
import { DataType } from '../data-operations/data-util';
import { FilteringLogic } from '../data-operations/filtering-expression.interface';
import { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';
import { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';
import { AbsoluteScrollStrategy, HorizontalAlignment, VerticalAlignment, IgxOverlayService, OverlaySettings, PositionSettings, ConnectedPositioningStrategy, ContainerPositionStrategy } from '../services/index';
import { GridBaseAPIService } from './api.service';
import { RowEditPositionStrategy } from './grid.common';
import { IgxGridToolbarComponent } from './toolbar/grid-toolbar.component';
import { IgxRowDirective } from './row.directive';
import { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { FilteringExpressionsTree, FilteringExpressionsTreeType } from '../data-operations/filtering-expressions-tree';
import { TransactionType } from '../services/index';
import { IgxRowEditTemplateDirective, IgxRowEditTabStopDirective, IgxRowEditTextDirective, IgxRowEditActionsDirective } from './grid.rowEdit.directive';
import { IgxGridNavigationService } from './grid-navigation.service';
import { DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';
import { IgxFilteringService } from './filtering/grid-filtering.service';
import { WatchChanges } from './watch-changes';
import { IgxGridHeaderGroupComponent } from './headers/grid-header-group.component';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { IgxGridSummaryService } from './summaries/grid-summary.service';
import { IgxSummaryRowComponent } from './summaries/summary-row.component';
import { IgxGridSelectionService, GridSelectionRange, IgxGridCRUDService, IgxRow, IgxCell, isChromium } from './selection/selection.service';
import { DragScrollDirection } from './selection/drag-select.directive';
import { IgxTemplateOutletDirective } from '../directives/template-outlet/template_outlet.directive';
import { IgxExcelStyleLoadingValuesTemplateDirective } from './filtering/excel-style/excel-style-search.component';
import { IgxExcelStyleSortingTemplateDirective, IgxExcelStylePinningTemplateDirective, IgxExcelStyleHidingTemplateDirective, IgxExcelStyleMovingTemplateDirective } from './filtering/excel-style/grid.excel-style-filtering.component';
import { IgxGridColumnResizerComponent } from './resizing/resizer.component';
import { IgxGridFilteringRowComponent } from './filtering/base/grid-filtering-row.component';
import { CharSeparatedValueData } from '../services/csv/char-separated-value-data';
import { IgxColumnResizingService } from './resizing/resizing.service';
import { DeprecateProperty } from '../core/deprecateDecorators';
import { IgxRowExpandedIndicatorDirective, IgxRowCollapsedIndicatorDirective, IgxHeaderExpandIndicatorDirective, IgxHeaderCollapseIndicatorDirective } from './grid/grid.directives';
import { GridKeydownTargetType, GridSelectionMode, GridSummaryPosition, GridSummaryCalculationMode, FilterMode } from './common/enums';
import { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';
import { IgxDecimalPipeComponent, IgxDatePipeComponent } from './common/pipes';
import { DropPosition } from './moving/moving.service';
import { IgxHeadSelectorDirective, IgxRowSelectorDirective } from './selection/row-selectors';
import { IgxGridToolbarCustomContentDirective } from './toolbar/toolbar.directive';
import { IgxColumnComponent } from './columns/column.component';
import { IgxColumnGroupComponent } from './columns/column-group.component';
import { IgxRowDragGhostDirective, IgxDragIndicatorIconDirective } from './row-drag.directive';
var MINIMUM_COLUMN_WIDTH = 136;
var FILTER_ROW_HEIGHT = 50;
// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.
// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.
// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.
// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,
// but in the same time we need to set row editing overlay outlet before opening the overlay itself.
var MIN_ROW_EDITING_COUNT_THRESHOLD = 2;
export var IgxGridTransaction = new InjectionToken('IgxGridTransaction');
var IgxGridBaseDirective = /** @class */ (function (_super) {
    __extends(IgxGridBaseDirective, _super);
    function IgxGridBaseDirective(selectionService, crudService, colResizingService, gridAPI, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation, filteringService, overlayService, summaryService, _displayDensityOptions) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this.selectionService = selectionService;
        _this.crudService = crudService;
        _this.colResizingService = colResizingService;
        _this.gridAPI = gridAPI;
        _this._transactions = _transactions;
        _this.elementRef = elementRef;
        _this.zone = zone;
        _this.document = document;
        _this.cdr = cdr;
        _this.resolver = resolver;
        _this.differs = differs;
        _this.viewRef = viewRef;
        _this.navigation = navigation;
        _this.filteringService = filteringService;
        _this.overlayService = overlayService;
        _this.summaryService = summaryService;
        _this._displayDensityOptions = _displayDensityOptions;
        _this._init = true;
        _this._cdrRequests = false;
        _this._cdrRequestRepaint = false;
        _this._resourceStrings = CurrentResourceStrings.GridResStrings;
        _this._emptyGridMessage = null;
        _this._emptyFilteredGridMessage = null;
        _this._isLoading = false;
        _this._locale = null;
        _this._destroyed = false;
        _this.overlayIDs = [];
        _this._advancedFilteringPositionSettings = {
            verticalDirection: VerticalAlignment.Middle,
            horizontalDirection: HorizontalAlignment.Center,
            horizontalStartPoint: HorizontalAlignment.Center,
            verticalStartPoint: VerticalAlignment.Middle
        };
        _this._advancedFilteringOverlaySettings = {
            closeOnOutsideClick: false,
            modal: false,
            positionStrategy: new ConnectedPositioningStrategy(_this._advancedFilteringPositionSettings),
        };
        /**
         * An @Input property that autogenerates the `IgxGridComponent` columns.
         * The default value is false.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.autoGenerate = false;
        /**
         * Emitted after filtering is performed.
         * Returns the filtering expressions tree of the column for which filtering was performed.
         * ```typescript
         * filteringExprTreeChange(event: IFilteringExpressionsTree){
         *     const filteringTree = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true"
         *              (filteringExpressionsTreeChange)="filteringExprTreeChange($event)"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.filteringExpressionsTreeChange = new EventEmitter();
        /**
         * Emitted after advanced filtering is performed.
         * Returns the advanced filtering expressions tree.
         * ```typescript
         * advancedFilteringExprTreeChange(event: IFilteringExpressionsTree){
         *     const filteringTree = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true"
         *           (advancedFilteringExpressionsTreeChange)="advancedFilteringExprTreeChange($event)"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.advancedFilteringExpressionsTreeChange = new EventEmitter();
        /**
         *@hidden
         */
        _this.pageChange = new EventEmitter();
        /**
         *@hidden
         */
        _this.perPageChange = new EventEmitter();
        /**
         * @hidden
         * @internal
         */
        _this.rowDragging = false;
        /**
         * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.
         * ```html
         * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-even-class'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.evenRowCSS = 'igx-grid__tr--even';
        /**
         * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.
         * ```html
         * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-odd-class'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.oddRowCSS = 'igx-grid__tr--odd';
        /**
         * An @Input property that sets the title to be displayed in the built-in column hiding UI.
         * ```html
         * <igx-grid [showToolbar]="true" [columnHiding]="true" columnHidingTitle="Column Hiding"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.columnHidingTitle = '';
        /**
         * An @Input property that sets the title to be displayed in the UI of the column pinning.
         * ```html
         * <igx-grid #grid [data]="localData" [columnPinning]="'true" [columnPinningTitle]="'Column Hiding'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.columnPinningTitle = '';
        /**
         * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.
         * ```html
         * <igx-grid #grid (onCellClick)="onCellClick($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * public onCellClick(e){
         *     alert("The cell has been clicked!");
         * }
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onCellClick = new EventEmitter();
        /**
         * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.
         * ```html
         * <igx-grid #grid (onSelection)="onCellSelect($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * public onCellSelect(e){
         *     alert("The cell has been selected!");
         * }
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onSelection = new EventEmitter();
        /**
         *  Emitted when `IgxGridRowComponent` is selected.
         * ```html
         * <igx-grid #grid (onRowSelectionChange)="onCellClickChange($event)" [data]="localData" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * public onCellClickChange(e){
         *     alert("The selected row has been changed!");
         * }
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onRowSelectionChange = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` is pinned.
         * The index that the column is inserted at may be changed through the `insertAtIndex` property.
         * ```typescript
         * public columnPinning(event) {
         *     if (event.column.field === "Name") {
         *       event.insertAtIndex = 0;
         *     }
         * }
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onColumnPinning = new EventEmitter();
        /**
         * An @Output property emitting an event when `IgxGridCellComponent`
         * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      cellID: {
         *          columnID: int,
         *          rowID: int,
         *          rowIndex: int
         *      }
         *      newValue: object,
         *      oldValue: object,
         *      rowID: int
         *  }
         *
         * ```typescript
         * editCancel(event: IGridEditEventArgs){
         *    const rowID: IgxColumnComponent = event.rowID;
         * }
         * ```
         * ```html
         * <igx-grid #grid3 (onCellEditCancel)="editCancel($event)" [data]="remote | async" [primaryKey]="'ProductID'">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * @memberof IgxGridComponent
         */
        _this.onCellEditCancel = new EventEmitter();
        /**
         * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      cellID: {
         *          columnID: int,
         *          rowID: int,
         *          rowIndex: int
         *      }
         *      oldValue: object,
         *      rowID: int
         *  }
         *
         * ```typescript
         * editStart(event: IGridEditEventArgs){
         *    const value: IgxColumnComponent = event.newValue;
         * }
         * ```
         * ```html
         * <igx-grid #grid3 (onCellEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * @memberof IgxGridComponent
         */
        _this.onCellEditEnter = new EventEmitter();
        /**
         * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.
         * Event is fired after editing is completed, when the cell is exiting edit mode.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      cellID: {
         *          columnID: int,
         *          rowID: int,
         *          rowIndex: int
         *      }
         *      newValue: object,
         *      oldValue: object,
         *      rowID: int
         *  }
         *
         * ```typescript
         * editDone(event: IGridEditEventArgs){
         *    const value: IgxColumnComponent = event.newValue;
         * }
         * ```
         * ```html
         * <igx-grid #grid3 (onCellEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onCellEdit = new EventEmitter();
        /**
         * An @Output property emitting an event when [rowEditable]="true" a row enters edit mode.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      oldValue: <rowObj>,
         *      rowID: int
         *  }
         *
         * Bind to the event in markup as follows:
         * ```html
         * <igx-grid #grid3 (onRowEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowEditable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * ```typescript
         *      editStart(event: IGridEditEventArgs) {
         *          const editedRowObj = event.oldValue;
         *          const cancelValue = event.cancel;
         *          const rowID = event.rowID;
         *      }
         * ```
         * @memberof IgxGridComponent
         */
        _this.onRowEditEnter = new EventEmitter();
        /**
         * An @Output property emitting an event when [rowEditable]="true" & `endEdit(true)` is called.
         * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,
         * performing paging operation, column resizing, pinning, moving or hitting  `Done`
         * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      newValue: <rowObj>,
         *      oldValue: <rowObj>,
         *      rowID: int
         *  }
         *
         * Bind to the event in markup as follows:
         * ```html
         * <igx-grid #grid3 (onRowEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowEditable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         *
         * ```typescript
         *      editDone(event: IGridEditEventArgs) {
         *          const originalRowObj = event.oldValue;
         *          const updatedRowObj = event.newValue;
         *          const cancelValue = event.cancel;
         *          const rowID = event.rowID;
         *      }
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onRowEdit = new EventEmitter();
        /**
         * An @Output property emitting an event when [rowEditable]="true" & `endEdit(false)` is called.
         * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button
         * in the row editing overlay.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      newValue: <rowObj>,
         *      oldValue: <rowObj>,
         *      rowID: int
         *  }
         *
         * Bind to the event in markup as follows:
         * ```html
         * <igx-grid #grid3 (onRowEditCancel)="editCancel($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowEditable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * ```typescript
         *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {
         *          const originalRowObj = event.oldValue;
         *          const updatedRowObj = event.newValue;
         *          const cancelValue = event.cancel;
         *          const rowID = event.rowID;
         *      }
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onRowEditCancel = new EventEmitter();
        /**
         * Emitted when a grid column is initialized. Returns the column object.
         * ```html
         * <igx-grid #grid [data]="localData" [onColumnInit]="initColumns($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * initColumns(event: IgxColumnComponent) {
         * const column: IgxColumnComponent = event;
         *       column.filterable = true;
         *       column.sortable = true;
         *       column.editable = true;
         * }
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onColumnInit = new EventEmitter();
        /**
         * Emitted when sorting is performed through the UI. Returns the sorting expression.
         * ```html
         * <igx-grid #grid [data]="localData" [autoGenerate]="true" (onSortingDone)="sortingDone($event)"></igx-grid>
         * ```
         * ```typescript
         * sortingDone(event: SortingDirection){
         *     const sortingDirection = event;
         * }
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onSortingDone = new EventEmitter();
        /**
         * Emitted when filtering is performed through the UI.
         * Returns the filtering expressions tree of the column for which filtering was performed.
         * ```typescript
         * filteringDone(event: IFilteringExpressionsTree){
         *     const filteringTree = event;
         *}
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onFilteringDone)="filteringDone($event)"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onFilteringDone = new EventEmitter();
        /**
         * Emitted when paging is performed. Returns an object consisting of the previous and next pages.
         * ```typescript
         * pagingDone(event: IPageEventArgs){
         *     const paging = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onPagingDone)="pagingDone($event)"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onPagingDone = new EventEmitter();
        /**
         * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.
         * Returns the data for the new `IgxGridRowComponent` object.
         * ```typescript
         * rowAdded(event: IRowDataEventArgs){
         *    const rowInfo = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onRowAdded)="rowAdded($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onRowAdded = new EventEmitter();
        /**
         * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.
         * Returns an `IRowDataEventArgs` object.
         * ```typescript
         * rowDeleted(event: IRowDataEventArgs){
         *    const rowInfo = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onRowDeleted)="rowDeleted($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onRowDeleted = new EventEmitter();
        /**
         * Emitted when a new chunk of data is loaded from virtualization.
         * ```typescript
         *  <igx-grid #grid [data]="localData" [autoGenerate]="true" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onDataPreLoad = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` is resized.
         * Returns the `IgxColumnComponent` object's old and new width.
         * ```typescript
         * resizing(event: IColumnResizeEventArgs){
         *     const grouping = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onColumnResized)="resizing($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onColumnResized = new EventEmitter();
        /**
         * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.
         * ```typescript
         * contextMenu(event: IGridCellEventArgs){
         *     const resizing = event;
         *     console.log(resizing);
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onContextMenu)="contextMenu($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onContextMenu = new EventEmitter();
        /**
         * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.
         * ```typescript
         * dblClick(event: IGridCellEventArgs){
         *     const dblClick = event;
         *     console.log(dblClick);
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onDoubleClick)="dblClick($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onDoubleClick = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }
         * ```typescript
         * visibilityChanged(event: IColumnVisibilityChangedEventArgs){
         *    const visiblity = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnVisibilityChanged)="visibilityChanged($event)"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onColumnVisibilityChanged = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.
         * ```typescript
         * movingStart(event: IColumnMovingStartEventArgs){
         *     const movingStarts = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingStart)="movingStart($event)"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onColumnMovingStart = new EventEmitter();
        /**
         * Emitted throughout the `IgxColumnComponent` moving operation.
         * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.
         * ```typescript
         * moving(event: IColumnMovingEventArgs){
         *     const moving = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMoving)="moving($event)"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onColumnMoving = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` moving ends.
         * Returns the source and target `IgxColumnComponent` objects.
         * ```typescript
         * movingEnds(event: IColumnMovingEndEventArgs){
         *     const movingEnds = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingEnd)="movingEnds($event)"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onColumnMovingEnd = new EventEmitter();
        /**
         * Emitted when keydown is triggered over element inside grid's body.
         * This event is fired only if the key combination is supported in the grid.
         * Return the target type, target object and the original event. This event is cancelable.
         * ```typescript
         * customKeydown(args: IGridKeydownEventArgs) {
         *  const keydownEvent = args.event;
         * }
         * ```
         * ```html
         *  <igx-grid (onGridKeydown)="customKeydown($event)"></igx-grid>
         * ```
         */
        _this.onGridKeydown = new EventEmitter();
        /**
         * Emitted when start dragging a row.
         * Return the dragged row.
         */
        _this.onRowDragStart = new EventEmitter();
        /**
         * Emitted when dropping a row.
         * Return the dropped row.
         */
        _this.onRowDragEnd = new EventEmitter();
        /**
         * Emitted when a copy operation is executed.
         * Fired only if copy behavior is enabled through the [`clipboardOptions`]{@link IgxGridBaseDirective#clipboardOptions}.
         */
        _this.onGridCopy = new EventEmitter();
        /**
         *@hidden
         */
        _this.expansionStatesChange = new EventEmitter();
        /**
         * Emitted when the expanded state of a row gets changed.
         * ```typescript
         * rowToggle(event: IRowToggleEventArgs){
         *  // the id of the row
         *  const rowID = event.rowID;
         *  // the new expansion state
         *  const newExpandedState = event.expanded;
         *  // the original event that triggered onRowToggle
         *  const originalEvent = event.event;
         *  // whether the event should be cancelled
         *  event.cancel = true;
         * }
         * ```
         * ```html
         * <igx-grid [data]="employeeData" (onRowToggle)="rowToggle($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onRowToggle = new EventEmitter();
        /**
         * @hidden
         */
        _this.columnList = new QueryList();
        /**
         * @hidden
        */
        _this.tmpOutlets = new QueryList();
        /**
        * The custom template, if any, that should be used when rendering a row expand indicator.
        */
        _this.rowExpandedIndicatorTemplate = null;
        /**
        * The custom template, if any, that should be used when rendering a row collapse indicator.
        */
        _this.rowCollapsedIndicatorTemplate = null;
        /**
        * The custom template, if any, that should be used when rendering a header expand indicator.
        */
        _this.headerExpandIndicatorTemplate = null;
        /**
        * The custom template, if any, that should be used when rendering a header collapse indicator.
        */
        _this.headerCollapseIndicatorTemplate = null;
        /**
         * @hidden
         */
        _this.tabindex = 0;
        /**
         * @hidden
         */
        _this.hostRole = 'grid';
        /**
         * Emitted before sorting is performed. Returns the sorting expressions.
         * ```html
         * <igx-grid #grid [data]="localData" [autoGenerate]="true" (sortingExpressionsChange)="sortingExprChange($event)"></igx-grid>
         * ```
         * ```typescript
         * sortingExprChange(event: ISortingExpression[]){
         *     const sortingExpressions = event;
         * }
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.sortingExpressionsChange = new EventEmitter();
        /**
         * @hidden
        */
        _this.columnsWithNoSetWidths = null;
        /* Toolbar related definitions */
        _this._showToolbar = false;
        _this._exportExcel = false;
        _this._exportCsv = false;
        _this._toolbarTitle = null;
        _this._exportText = null;
        _this._exportExcelText = null;
        _this._exportCsvText = null;
        _this._rowEditable = false;
        _this._filteredSortedData = null;
        /**
         * Provides access to the `IgxToolbarComponent`.
         * ```typescript
         * const gridToolbar = this.grid.toolbar;
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.toolbar = null;
        _this.toolbarHtml = null;
        /**
         * Controls the copy behavior of the grid.
         */
        _this.clipboardOptions = {
            /**
             * Enables/disables the copy behavior
             */
            enabled: true,
            /**
             * Include the columns headers in the clipboard output.
             */
            copyHeaders: true,
            /**
             * Apply the columns formatters (if any) on the data in the clipboard output.
             */
            copyFormatters: true,
            /**
             * The separator used for formatting the copy output. Defaults to `\t`.
             */
            separator: '\t'
        };
        /**
         * Emitted when an export process is initiated by the user.
         * ```typescript
         * toolbarExporting(event: IGridToolbarExportEventArgs){
         *     const toolbarExporting = event;
         * }
         * ```
         * @memberof IgxGridBaseDirective
         */
        _this.onToolbarExporting = new EventEmitter();
        /* End of toolbar related definitions */
        /**
         * Emitted when making a range selection either through
         * drag selection or through keyboard selection.
         */
        _this.onRangeSelection = new EventEmitter();
        /**
         * @hidden
         */
        _this.calcHeight = 0;
        /**
         * @hidden
         */
        _this.chipsGoupingExpressions = [];
        /**
         * @hidden
         */
        _this.disableTransitions = false;
        /**
         * @hidden
         */
        _this.lastSearchInfo = {
            searchText: '',
            caseSensitive: false,
            exactMatch: false,
            activeMatchIndex: 0,
            matchInfoCache: []
        };
        /**
         * @hidden
         */
        _this.columnWidthSetByUser = false;
        /**
         * @hidden
         */
        _this.destroy$ = new Subject();
        /**
         * @hidden
         */
        _this._perPage = 15;
        /**
         * @hidden
         */
        _this._page = 0;
        /**
         * @hidden
         */
        _this._paging = false;
        /**
         * @hidden
         */
        _this._hideRowSelectors = false;
        /**
         * @hidden
         */
        _this._rowDrag = false;
        /**
         * @hidden
         */
        _this._pipeTrigger = 0;
        /**
         * @hidden
         */
        _this._filteringPipeTrigger = 0;
        /**
         * @hidden
         */
        _this._summaryPipeTrigger = 0;
        /**
         * @hidden
         */
        _this._columns = [];
        /**
         * @hidden
         */
        _this._pinnedColumns = [];
        /**
         * @hidden
         */
        _this._unpinnedColumns = [];
        /**
         * @hidden
         */
        _this._filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);
        /**
         * @hidden
         */
        _this._sortingExpressions = [];
        /**
         * @hidden
         */
        _this._maxLevelHeaderDepth = null;
        /**
         * @hidden
         */
        _this._columnHiding = false;
        /**
         * @hidden
         */
        _this._columnPinning = false;
        _this._allowFiltering = false;
        _this._allowAdvancedFiltering = false;
        _this._filterMode = FilterMode.quickFilter;
        _this.observer = new ResizeObserver(function () { });
        _this.resizeNotify = new Subject();
        _this._hiddenColumnsText = '';
        _this._pinnedColumnsText = '';
        _this._height = '100%';
        _this._width = '100%';
        _this._horizontalForOfs = [];
        _this._multiRowLayoutRowSize = 1;
        _this._expansionStates = new Map();
        _this._defaultExpandState = false;
        // Caches
        _this._totalWidth = NaN;
        _this._pinnedVisible = [];
        _this._unpinnedVisible = [];
        _this._pinnedWidth = NaN;
        _this._unpinnedWidth = NaN;
        _this._visibleColumns = [];
        _this._columnGroups = false;
        _this._headerFeaturesWidth = NaN;
        _this._defaultTargetRecordNumber = 10;
        _this._summaryPosition = GridSummaryPosition.bottom;
        _this._summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;
        _this._cellSelectionMode = GridSelectionMode.multiple;
        _this._rowSelectionMode = GridSelectionMode.none;
        _this.rowEditPositioningStrategy = new RowEditPositionStrategy({
            horizontalDirection: HorizontalAlignment.Right,
            verticalDirection: VerticalAlignment.Bottom,
            horizontalStartPoint: HorizontalAlignment.Left,
            verticalStartPoint: VerticalAlignment.Bottom,
            closeAnimation: null
        });
        _this.rowEditSettings = {
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: false,
            outlet: _this.rowOutletDirective,
            positionStrategy: _this.rowEditPositioningStrategy
        };
        _this.verticalScrollHandler = function (event) {
            _this.verticalScrollContainer.onScroll(event);
            if (isEdge()) {
                _this.wheelHandler(false);
            }
            _this.disableTransitions = true;
            _this.zone.run(function () {
                _this.zone.onStable.pipe(first()).subscribe(function () {
                    _this.verticalScrollContainer.onChunkLoad.emit(_this.verticalScrollContainer.state);
                });
                if (_this.rowEditable) {
                    _this.changeRowEditingOverlayStateOnScroll(_this.rowInEditMode);
                }
            });
            _this.disableTransitions = false;
            _this.hideOverlays();
        };
        _this.horizontalScrollHandler = function (event) {
            var scrollLeft = event.target.scrollLeft;
            if (isEdge()) {
                _this.wheelHandler(true);
            }
            _this.headerContainer.onHScroll(scrollLeft);
            _this._horizontalForOfs.forEach(function (vfor) { return vfor.onHScroll(scrollLeft); });
            _this.cdr.markForCheck();
            _this.zone.run(function () {
                _this.zone.onStable.pipe(first()).subscribe(function () {
                    _this.parentVirtDir.onChunkLoad.emit(_this.headerContainer.state);
                });
            });
            _this.hideOverlays();
        };
        _this.keydownHandler = function (event) {
            var key = event.key.toLowerCase();
            if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {
                event.preventDefault();
                if (key === 'pagedown') {
                    _this.verticalScrollContainer.scrollNextPage();
                    _this.nativeElement.focus();
                }
                else if (key === 'pageup') {
                    _this.verticalScrollContainer.scrollPrevPage();
                    _this.nativeElement.focus();
                }
            }
        };
        /**
         * @hidden
         */
        _this.scrollHandler = function (event) {
            _this.headerContainer.scrollPosition += event.target.scrollLeft;
            _this.verticalScrollContainer.scrollPosition += event.target.scrollTop;
            event.target.scrollLeft = 0;
            event.target.scrollTop = 0;
        };
        /**
         * @hidden
         */
        _this.wheelHandler = function (isScroll) {
            if (isScroll === void 0) { isScroll = false; }
            if (_this.document.activeElement &&
                // tslint:disable-next-line:no-bitwise
                (_this.document.activeElement.compareDocumentPosition(_this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||
                    // tslint:disable-next-line:no-bitwise
                    (_this.document.activeElement.
                        compareDocumentPosition(_this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {
                _this.document.activeElement.blur();
            }
        };
        /**
         * @hidden
         */
        _this.rowEditingWheelHandler = function (event) {
            if (event.deltaY > 0) {
                _this.verticalScrollContainer.scrollNext();
            }
            else {
                _this.verticalScrollContainer.scrollPrev();
            }
        };
        _this.cdr.detach();
        return _this;
    }
    Object.defineProperty(IgxGridBaseDirective.prototype, "scrollWidth", {
        get: function () {
            return this._scrollWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "resourceStrings", {
        /**
         * An accessor that returns the resource strings.
        */
        get: function () {
            return this._resourceStrings;
        },
        /**
         * An accessor that sets the resource strings.
         * By default it uses EN resources.
        */
        set: function (value) {
            this._resourceStrings = Object.assign({}, this._resourceStrings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "filteringLogic", {
        get: function () {
            return this._filteringExpressionsTree.operator;
        },
        /**
         * Sets the filtering logic of the `IgxGridComponent`.
         * The default is AND.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true" [filteringLogic]="filtering"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            this._filteringExpressionsTree.operator = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "filteringExpressionsTree", {
        /**
         * Returns the filtering state of `IgxGridComponent`.
         * ```typescript
         * let filteringExpressionsTree = this.grid.filteringExpressionsTree;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._filteringExpressionsTree;
        },
        /**
         * Sets the filtering state of the `IgxGridComponent`.
         * ```typescript
         * const logic = new FilteringExpressionsTree(FilteringLogic.And, "ID");
         * logic.filteringOperands = [
         *     {
         *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),
         *          fieldName: 'ID',
         *          searchVal: 1
         *     }
         * ];
         * this.grid.filteringExpressionsTree = (logic);
         * ```
         * Two-way data binding.
         * ```html
         * <igx-grid #grid [data]="Data" [autoGenerate]="true" [(filteringExpressionsTree)]="model.filteringExpressions"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            if (value && value instanceof FilteringExpressionsTree) {
                var val = value;
                for (var index = 0; index < val.filteringOperands.length; index++) {
                    if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {
                        var newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);
                        newExpressionsTree.filteringOperands.push(val.filteringOperands[index]);
                        val.filteringOperands[index] = newExpressionsTree;
                    }
                }
                value.type = FilteringExpressionsTreeType.Regular;
                this._filteringExpressionsTree = value;
                this._filteringPipeTrigger++;
                this.filteringExpressionsTreeChange.emit(this._filteringExpressionsTree);
                if (this.filteringService.isFilteringExpressionsTreeEmpty(this._filteringExpressionsTree) &&
                    !this.advancedFilteringExpressionsTree) {
                    this.filteredData = null;
                }
                this.filteringService.refreshExpressions();
                this.selectionService.clearHeaderCBState();
                this.summaryService.clearSummaryCache();
                this.notifyChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "advancedFilteringExpressionsTree", {
        /**
         * Returns the advanced filtering state of `IgxGridComponent`.
         * ```typescript
         * let advancedFilteringExpressionsTree = this.grid.advancedFilteringExpressionsTree;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._advancedFilteringExpressionsTree;
        },
        /**
         * Sets the advanced filtering state of the `IgxGridComponent`.
         * ```typescript
         * const logic = new FilteringExpressionsTree(FilteringLogic.And);
         * logic.filteringOperands = [
         *     {
         *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),
         *          fieldName: 'ID',
         *          searchVal: 1
         *     },
         *     {
         *          condition: IgxStringFilteringOperand.instance().condition('contains'),
         *          fieldName: 'CompanyName',
         *          searchVal: 'a'
         *     }
         * ];
         * this.grid.advancedFilteringExpressionsTree = logic;
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            var _this = this;
            if (value && value instanceof FilteringExpressionsTree) {
                value.type = FilteringExpressionsTreeType.Advanced;
                this._advancedFilteringExpressionsTree = value;
                this._filteringPipeTrigger++;
            }
            else {
                this._advancedFilteringExpressionsTree = null;
            }
            this.advancedFilteringExpressionsTreeChange.emit(this._advancedFilteringExpressionsTree);
            if (this.filteringService.isFilteringExpressionsTreeEmpty(this._advancedFilteringExpressionsTree) &&
                !this.advancedFilteringExpressionsTree) {
                this.filteredData = null;
            }
            this.selectionService.clearHeaderCBState();
            this.summaryService.clearSummaryCache();
            this.notifyChanges();
            // Wait for the change detection to update filtered data through the pipes and then emit the event.
            requestAnimationFrame(function () { return _this.onFilteringDone.emit(_this._advancedFilteringExpressionsTree); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "locale", {
        /**
         * Returns the locale of the grid.
         * If not set, returns browser's language.
         */
        get: function () {
            if (this._locale) {
                return this._locale;
            }
            else {
                return 'en';
            }
        },
        /**
         * Sets the locale of the grid.
         */
        set: function (value) {
            this._locale = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "paging", {
        /**
         * Returns whether the paging feature is enabled/disabled.
         * The default state is disabled (false).
         * ```
         * const paging = this.grid.paging;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._paging;
        },
        /**
         * Enables/Disables the paging feature.
         * ```html
         * <igx-grid #grid [data]="Data" [autoGenerate]="true" [paging]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            this._paging = value;
            this._pipeTrigger++;
            this.notifyChanges(true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "page", {
        /**
         * Returns the current page index.
         * ```html
         * let gridPage = this.grid.page;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._page;
        },
        /**
         * Sets the current page index.
         * ```html
         * <igx-grid #grid [data]="Data" [paging]="true" [page]="5" [autoGenerate]="true"></igx-grid>
         *```
         * Two-way data binding.
         * ```html
         * <igx-grid #grid [data]="Data" [paging]="true" [(page)]="model.page" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (val) {
            if (val === this._page || val < 0 || val > this.totalPages - 1) {
                return;
            }
            this.selectionService.clear(true);
            this.onPagingDone.emit({ previous: this._page, current: val });
            this._page = val;
            this.pageChange.emit(this._page);
            this.navigateTo(0);
            this.notifyChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "perPage", {
        /**
         * Returns the number of visible items per page of the `IgxGridComponent`.
         * The default is 15.
         * ```html
         * let itemsPerPage = this.grid.perPage;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._perPage;
        },
        /**
         * Sets the number of visible items per page of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [paging]="true" [perPage]="5" [autoGenerate]="true"></igx-grid>
         * ```
         *
         * Two-way data binding.
         * ```html
         * <igx-grid #grid [data]="Data" [paging]="true" [(perPage)]="model.perPage" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (val) {
            if (val < 0) {
                return;
            }
            this.selectionService.clear(true);
            this._perPage = val;
            this.perPageChange.emit(this._perPage);
            this.page = 0;
            this.endEdit(true);
            this.notifyChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "columnHiding", {
        /**
         * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.
         * By default it is disabled (false).
         * ```typescript
         * let gridColHiding = this.grid.columnHiding;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._columnHiding;
        },
        /**
         * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.
         * In order for the UI to work, you need to enable the toolbar as shown in the example below.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true" [showToolbar]="true" [columnHiding]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            if (this._columnHiding !== value) {
                this._columnHiding = value;
                if (!this._init) {
                    this.notifyChanges(true);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowSelectable", {
        get: function () {
            return this.isRowSelectable;
        },
        set: function (val) {
            this.rowSelection = val ? GridSelectionMode.multiple : GridSelectionMode.none;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "hideRowSelectors", {
        /**
         * Returns if the row selectors are hidden
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._hideRowSelectors;
        },
        /**
         * Allows you to change the visibility of the row selectors
         * By default row selectors are shown
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            this._hideRowSelectors = value;
            this.notifyChanges(true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowDraggable", {
        get: function () {
            return this._rowDrag && this.hasVisibleColumns;
        },
        /**
         * Sets whether rows can be moved.
         * ```html
         * <igx-grid #grid [rowDraggable]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (val) {
            this._rowDrag = val;
            this.notifyChanges(true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowEditable", {
        /**
     * Sets whether the `IgxGridRowComponent` is editable.
     * By default it is set to false.
     * ```typescript
     * let rowEditable = this.grid.rowEditable;
     * ```
     * @memberof IgxGridBaseDirective
     */
        get: function () {
            return this._rowEditable;
        },
        /**
        * Sets whether rows can be edited.
        * ```html
        * <igx-grid #grid [showToolbar]="true" [rowEditable]="true" [primaryKey]="'ProductID'" [columnHiding]="true"></igx-grid>
        * ```
        * @memberof IgxGridBaseDirective
        */
        set: function (val) {
            if (!this._init) {
                this.refreshGridState();
            }
            this._rowEditable = val;
            this.notifyChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "height", {
        /**
         * Returns the height of the `IgxGridComponent`.
         * ```typescript
         * let gridHeight = this.grid.height;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._height;
        },
        /**
         * Sets the height of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            if (this._height !== value) {
                this._height = value;
                this.nativeElement.style.height = value;
                this.notifyChanges(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "hostWidth", {
        /**
         * @hidden
        */
        get: function () {
            return this._width || this._hostWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "width", {
        /**
         * Returns the width of the `IgxGridComponent`.
         * ```typescript
         * let gridWidth = this.grid.width;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._width;
        },
        set: function (value) {
            if (this._width !== value) {
                this._width = value;
                this.nativeElement.style.width = value;
                this.notifyChanges(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "headerWidth", {
        /**
         * Returns the width of the header of the `IgxGridComponent`.
         * ```html
         * let gridHeaderWidth = this.grid.headerWidth;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return parseInt(this.width, 10) - 17;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowHeight", {
        /**
         * Returns the row height.
         * ```typescript
         * const rowHeight = this.grid.rowHeight;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._rowHeight ? this._rowHeight : this.defaultRowHeight;
        },
        /**
         * Sets the row height.
         * ```html
         * <igx-grid #grid [data]="localData" [showToolbar]="true" [rowHeight]="100" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            this._rowHeight = parseInt(value, 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "columnWidth", {
        /**
         * An @Input property that sets the default width of the `IgxGridComponent`'s columns.
         * ```html
         * <igx-grid #grid [data]="localData" [showToolbar]="true" [columnWidth]="100" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._columnWidth;
        },
        set: function (value) {
            this._columnWidth = value;
            this.columnWidthSetByUser = true;
            this.notifyChanges(true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "emptyGridMessage", {
        /**
         * An accessor that returns the message displayed when there are no records.
        */
        get: function () {
            return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;
        },
        /**
         * An @Input property that sets the message displayed when there are no records.
         * ```html
         * <igx-grid #grid [data]="Data" [emptyGridMessage]="'The grid is empty'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            this._emptyGridMessage = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "isLoading", {
        /**
         * An accessor that returns whether the grid is showing loading indicator.
         */
        get: function () {
            return this._isLoading;
        },
        /**
         * An @Input property that sets whether the grid is going to show loading indicator.
         * ```html
         * <igx-grid #grid [data]="Data" [isLoading]="true" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            var _this = this;
            if (this._isLoading !== value) {
                this._isLoading = value;
                this.evaluateLoadingState();
            }
            Promise.resolve().then(function () {
                // wait for the current detection cycle to end before triggering a new one.
                _this.notifyChanges();
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "emptyFilteredGridMessage", {
        /**
         * An accessor that returns the message displayed when there are no records and the grid is filtered.
        */
        get: function () {
            return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;
        },
        /**
         * An @Input property that sets the message displayed when there are no records and the grid is filtered.
         * ```html
         * <igx-grid #grid [data]="Data" [emptyGridMessage]="'The grid is empty'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            this._emptyFilteredGridMessage = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "columnPinning", {
        /**
         * Returns if the built-in column pinning UI should be shown in the toolbar.
         * ```typescript
         *  let colPinning = this.grid.columnPinning;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._columnPinning;
        },
        /**
         * Sets if the built-in column pinning UI should be shown in the toolbar.
         * By default it's disabled.
         * ```html
         * <igx-grid #grid [data]="localData" [columnPinning]="'true" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            if (this._columnPinning !== value) {
                this._columnPinning = value;
                if (!this._init) {
                    this.notifyChanges(true);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "allowFiltering", {
        /**
         * Returns if the filtering is enabled.
         * ```typescript
         *  let filtering = this.grid.allowFiltering;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._allowFiltering;
        },
        /**
         * Sets if the filtering is enabled.
         * By default it's disabled.
         * ```html
         * <igx-grid #grid [data]="localData" [allowFiltering]="true" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            if (this._allowFiltering !== value) {
                this._allowFiltering = value;
                this.filteringService.registerSVGIcons();
                if (!this._init) {
                    this.calcGridHeadRow();
                }
                this.filteringService.isFilterRowVisible = false;
                this.filteringService.filteredColumn = null;
                this.notifyChanges(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "allowAdvancedFiltering", {
        /**
         * Returns a value indicating whether the advanced filtering is enabled.
         * ```typescript
         *  let filtering = this.grid.allowAdvancedFiltering;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._allowAdvancedFiltering;
        },
        /**
         * Sets a value indicating whether the advanced filtering is enabled.
         * By default it's disabled.
         * ```html
         * <igx-grid #grid [data]="localData" [allowAdvancedFiltering]="true" [showToolbar]="true" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            if (this._allowAdvancedFiltering !== value) {
                this._allowAdvancedFiltering = value;
                this.filteringService.registerSVGIcons();
                if (!this._init) {
                    this.notifyChanges(true);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "filterMode", {
        /**
         * Returns the filter mode.
         * ```typescript
         *  let filtering = this.grid.filterMode;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._filterMode;
        },
        /**
         * Sets filter mode.
         * By default it's set to FilterMode.quickFilter.
         * ```html
         * <igx-grid #grid [data]="localData" [filterMode]="'quickFilter'" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            this._filterMode = value;
            if (this.filteringService.isFilterRowVisible) {
                this.filteringRow.close();
            }
            this.notifyChanges(true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "summaryPosition", {
        /**
         * Returns the summary position.
         * ```typescript
         *  let summaryPosition = this.grid.summaryPosition;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._summaryPosition;
        },
        /**
         * Sets summary position.
         * By default it is bottom.
         * ```html
         * <igx-grid #grid [data]="localData" summaryPosition="top" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            this._summaryPosition = value;
            this.notifyChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "summaryCalculationMode", {
        /**
         * Returns the summary calculation mode.
         * ```typescript
         *  let summaryCalculationMode = this.grid.summaryCalculationMode;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._summaryCalculationMode;
        },
        /**
         * Sets summary calculation mode.
         * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.
         * ```html
         * <igx-grid #grid [data]="localData" summaryCalculationMode="rootLevelOnly" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            this._summaryCalculationMode = value;
            if (!this._init) {
                this.endEdit(true);
                this.summaryService.resetSummaryHeight();
                this.notifyChanges(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "filterStrategy", {
        /**
         * Gets the filtering strategy of the grid.
         * ```typescript
         *  let filterStrategy = this.grid.filterStrategy
         * ```
         */
        get: function () {
            return this._filteringStrategy;
        },
        /**
         * Sets the filtering strategy of the grid.
         * ```html
         *  <igx-grid #grid [data]="localData" [filterStrategy]="filterStrategy"></igx-grid>
         * ```
         */
        set: function (classRef) {
            this._filteringStrategy = classRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "sortStrategy", {
        /**
         * Gets the sorting strategy of the grid.
         * ```typescript
         *  let sortStrategy = this.grid.sortStrategy
         * ```
         */
        get: function () {
            return this._sortingStrategy;
        },
        /**
         * Sets the sorting strategy of the grid.
         * ```html
         *  <igx-grid #grid [data]="localData" [sortStrategy]="sortStrategy"></igx-grid>
         * ```
         */
        set: function (value) {
            this._sortingStrategy = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "headerGroupsList", {
        /**
         * A list of all `IgxGridHeaderGroupComponent`.
         * ```typescript
         * const headerGroupsList = this.grid.headerGroupsList;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "headerCellList", {
        /**
         * A list of all `IgxGridHeaderComponent`.
         * ```typescript
         * const headers = this.grid.headerCellList;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.headerGroupsList.map(function (headerGroup) { return headerGroup.headerCell; }).filter(function (headerCell) { return headerCell; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "filterCellList", {
        /**
         * A list of all `IgxGridFilteringCellComponent`.
         * ```typescript
         * const filterCells = this.grid.filterCellList;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.headerGroupsList.map(function (headerGroup) { return headerGroup.filterCell; }).filter(function (filterCell) { return filterCell; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "summariesRowList", {
        get: function () {
            var res = new QueryList();
            if (!this._summaryRowList) {
                return res;
            }
            var sumList = this._summaryRowList.filter(function (item) {
                return item.element.nativeElement.parentElement !== null;
            });
            res.reset(sumList);
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowList", {
        /**
         * A list of `IgxGridRowComponent`.
         * ```typescript
         * const rowList = this.grid.rowList;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            var res = new QueryList();
            if (!this._rowList) {
                return res;
            }
            var rList = this._rowList
                .filter(function (item) {
                return item.element.nativeElement.parentElement !== null;
            })
                .sort(function (a, b) {
                return a.index - b.index;
            });
            res.reset(rList);
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "dataRowList", {
        /**
         * A list of `IgxGridRowComponent`, currently rendered.
         * ```typescript
         * const dataList = this.grid.dataRowList;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            var res = new QueryList();
            if (!this._dataRowList) {
                return res;
            }
            var rList = this._dataRowList.filter(function (item) {
                return item.element.nativeElement.parentElement !== null;
            }).sort(function (a, b) {
                return a.index - b.index;
            });
            res.reset(rList);
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "toolbarCustomContentTemplate", {
        /**
         * Returns the template which will be used by the toolbar to show custom content.
         * ```typescript
         * let customContentTemplate = this.grid.toolbarCustomContentTemplate;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.toolbarCustomContentTemplates.first;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "headSelectorTemplate", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            if (this.headSelectorsTemplates && this.headSelectorsTemplates.first) {
                return this.headSelectorsTemplates.first.templateRef;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowSelectorTemplate", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            if (this.rowSelectorsTemplates && this.rowSelectorsTemplates.first) {
                return this.rowSelectorsTemplates.first.templateRef;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "outletDirective", {
        /**
         * @hidden
         */
        get: function () {
            return this._outletDirective;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowOutletDirective", {
        /**
         * @hidden
         */
        get: function () {
            return this.rowEditingOutletDirective;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "parentRowOutletDirective", {
        /**
         * @hidden
         */
        get: function () {
            return this.outletDirective;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowEditContainer", {
        /** @hidden */
        get: function () {
            return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "dragIndicatorIconTemplate", {
        /**
        * The custom template, if any, that should be used when rendering the row drag indicator icon
        */
        get: function () {
            return this._customDragIndicatorIconTemplate || this.dragIndicatorIconTemplates.first;
        },
        set: function (val) {
            this._customDragIndicatorIconTemplate = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowInEditMode", {
        /**
         * @hidden
         */
        get: function () {
            var editRowState = this.crudService.row;
            return editRowState !== null ? this.rowList.find(function (e) { return e.rowID === editRowState.id; }) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "firstEditableColumnIndex", {
        /**
         * @hidden
         */
        get: function () {
            var index = this.navigation.gridOrderedColumns.findIndex(function (e) { return e.editable; });
            return index !== -1 ? index : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "lastEditableColumnIndex", {
        /**
         * @hidden
         */
        get: function () {
            var orderedColumns = this.navigation.gridOrderedColumns;
            var index = orderedColumns.reverse().findIndex(function (e) { return e.editable; });
            return index !== -1 ? orderedColumns.length - 1 - index : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowEditTabs", {
        /**
         * @hidden
         * TODO: Nav service logic doesn't handle 0 results from this querylist
         */
        get: function () {
            return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "hostClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.getComponentDensityClass('igx-grid');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "bannerClass", {
        get: function () {
            var position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';
            return this.getComponentDensityClass('igx-banner') + " " + position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "pipeTrigger", {
        /**
         * @hidden
         */
        get: function () {
            return this._pipeTrigger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "filteringPipeTrigger", {
        /**
         * @hidden
         */
        get: function () {
            return this._filteringPipeTrigger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "summaryPipeTrigger", {
        /**
         * @hidden
         */
        get: function () {
            return this._summaryPipeTrigger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "sortingExpressions", {
        /**
         * Returns the sorting state of the `IgxGridComponent`.
         * ```typescript
         * const sortingState = this.grid.sortingExpressions;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._sortingExpressions;
        },
        /**
         * Sets the sorting state of the `IgxGridComponent`.
         * ```typescript
         * this.grid.sortingExpressions = [{
         *     fieldName: "ID",
         *     dir: SortingDirection.Desc,
         *     ignoreCase: true
         * }];
         * ```
         *
         * Two-way data binding.
         * ```html
         * <igx-grid #grid [data]="Data" [autoGenerate]="true" [(sortingExpressions)]="model.sortingExpressions"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            this._sortingExpressions = cloneArray(value);
            this.sortingExpressionsChange.emit(this._sortingExpressions);
            this.notifyChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "maxLevelHeaderDepth", {
        /**
         * @hidden
         */
        get: function () {
            if (this._maxLevelHeaderDepth === null) {
                this._maxLevelHeaderDepth = this.hasColumnLayouts ?
                    this.columnList.reduce(function (acc, col) { return Math.max(acc, col.rowStart); }, 0) :
                    this.columnList.reduce(function (acc, col) { return Math.max(acc, col.level); }, 0);
            }
            return this._maxLevelHeaderDepth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "hiddenColumnsCount", {
        /**
         * Returns the number of hidden `IgxColumnComponent`.
         * ```typescript
         * const hiddenCol = this.grid.hiddenColumnsCount;
         * ``
         */
        get: function () {
            return this.columnList.filter(function (col) { return col.columnGroup === false && col.hidden === true; }).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "hiddenColumnsText", {
        /**
         * Returns the text to be displayed inside the toggle button
         * for the built-in column hiding UI of the`IgxColumnComponent`.
         * ```typescript
         * const hiddenColText = this.grid.hiddenColumnsText;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._hiddenColumnsText;
        },
        /**
         * Sets the text to be displayed inside the toggle button
         * for the built-in column hiding UI of the`IgxColumnComponent`.
         * ```typescript
         * <igx-grid [columnHiding]="true" [showToolbar]="true" [hiddenColumnsText]="'Hidden Columns'"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            this._hiddenColumnsText = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "pinnedColumnsText", {
        /**
         * Returns the text to be displayed inside the toggle button
         * for the built-in column pinning UI of the`IgxColumnComponent`.
         * ```typescript
         * const pinnedText = this.grid.pinnedColumnsText;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._pinnedColumnsText;
        },
        /**
         * Sets the text to be displayed inside the toggle button
         * for the built-in column pinning UI of the`IgxColumnComponent`.
         * ```html
         * <igx-grid [pinnedColumnsText]="'PinnedCols Text" [data]="data" [width]="'100%'" [height]="'500px'"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (value) {
            this._pinnedColumnsText = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "transactions", {
        /**
         * Get transactions service for the grid.
         */
        get: function () {
            return this._transactions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "currentRowState", {
        /**
         * @hidden
        */
        get: function () {
            return this._currentRowState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "showToolbar", {
        /**
         * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.
         * ```typescript
         * const toolbarGrid = this.grid.showToolbar;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._showToolbar;
        },
        /**
         * Shows or hides the `IgxGridComponent`'s toolbar.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" ></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (newValue) {
            if (this._showToolbar !== newValue) {
                this._showToolbar = newValue;
                if (!this._init) {
                    this.notifyChanges(true);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "toolbarTitle", {
        /**
         * Returns the toolbar's title.
         * ```typescript
         * const toolbarTitle  = this.grid.toolbarTitle;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._toolbarTitle;
        },
        /**
         * Sets the toolbar's title.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [toolbarTitle]="'My Grid'"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (newValue) {
            if (this._toolbarTitle !== newValue) {
                this._toolbarTitle = newValue;
                if (!this._init) {
                    this.notifyChanges(true);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "exportExcel", {
        /**
         * Returns whether the option for exporting to MS Excel is enabled or disabled.
         * ```typescript
         * cosnt excelExporter = this.grid.exportExcel;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.getExportExcel();
        },
        /**
         * Enable or disable the option for exporting to MS Excel.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [exportExcel]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (newValue) {
            if (this._exportExcel !== newValue) {
                this._exportExcel = newValue;
                if (!this._init) {
                    this.notifyChanges(true);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "exportCsv", {
        /**
         * Returns whether the option for exporting to CSV is enabled or disabled.
         * ```typescript
         * const exportCsv = this.grid.exportCsv;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.getExportCsv();
        },
        /**
         * Enable or disable the option for exporting to CSV.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [exportCsv]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (newValue) {
            if (this._exportCsv !== newValue) {
                this._exportCsv = newValue;
                if (!this._init) {
                    this.notifyChanges(true);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "exportText", {
        /**
         * Returns the textual content for the main export button.
         * ```typescript
         * const exportText = this.grid.exportText;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._exportText;
        },
        /**
         * Sets the textual content for the main export button.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [exportText]="'My Exporter'" [exportCsv]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (newValue) {
            if (this._exportText !== newValue) {
                this._exportText = newValue;
                if (!this._init) {
                    this.notifyChanges(true);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "exportExcelText", {
        /**
         * Returns the textual content for the MS Excel export button.
         * ```typescript
         * const excelText = this.grid.exportExcelText;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._exportExcelText;
        },
        /**
         * Sets the textual content for the MS Excel export button.
         * ```html
         * <igx-grid [exportExcelText]="'My Excel Exporter" [showToolbar]="true" [exportText]="'My Exporter'" [exportCsv]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (newValue) {
            if (this._exportExcelText !== newValue) {
                this._exportExcelText = newValue;
                if (!this._init) {
                    this.notifyChanges(true);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "exportCsvText", {
        /**
         * Returns the textual content for the CSV export button.
         * ```typescript
         * const csvText = this.grid.exportCsvText;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._exportCsvText;
        },
        /**
         * Sets the textual content for the CSV export button.
         * ```html
         * <igx-grid [exportCsvText]="'My Csv Exporter" [showToolbar]="true" [exportText]="'My Exporter'" [exportExcel]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseDirective
         */
        set: function (newValue) {
            if (this._exportCsvText !== newValue) {
                this._exportCsvText = newValue;
                if (!this._init) {
                    this.notifyChanges(true);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "cellSelection", {
        /**
         * Returns the current cell selection state, which can be none, single or multiple
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._cellSelectionMode;
        },
        /**
         * Allows you to set cell selection mode
         * By default the cell selection mode is multiple
         * @param selectionMode: GridSelectionMode
         * @memberof IgxGridBaseDirective
         */
        set: function (selectionMode) {
            this._cellSelectionMode = selectionMode;
            if (this.gridAPI.grid) {
                this.selectionService.clear(true);
                this.notifyChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowSelection", {
        /**
         * Returns the current row selection state, which can be none, single or multiple
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._rowSelectionMode;
        },
        /**
         * Allows you to set row selection mode
         * By default the row selection mode is none
         * @param selectionMode: GridSelectionMode
         * @memberof IgxGridBaseDirective
         */
        set: function (selectionMode) {
            this._rowSelectionMode = selectionMode;
            if (this.gridAPI.grid && this.columnList) {
                this.selectionService.clearAllSelectedRows();
                this.notifyChanges(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
    * @hidden
    * @internal
    */
    IgxGridBaseDirective.prototype.isDetailRecord = function (rec) {
        return false;
    };
    /**
    * @hidden
    * @internal
    */
    IgxGridBaseDirective.prototype.isGroupByRecord = function (rec) {
        return false;
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "hasDetails", {
        /**
        * @hidden
        * @internal
        */
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "virtualizationState", {
        /**
         * Returns the state of the grid virtualization, including the start index and how many records are rendered.
         * ```typescript
         * const gridVirtState = this.grid1.virtualizationState;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.verticalScrollContainer.state;
        },
        /**
         * @hidden
         */
        set: function (state) {
            this.verticalScrollContainer.state = state;
        },
        enumerable: true,
        configurable: true
    });
    /**
    * @hidden
    * @internal
    */
    IgxGridBaseDirective.prototype.hideOverlays = function () {
        var _this = this;
        this.overlayIDs.forEach(function (overlayID) {
            _this.overlayService.hide(overlayID);
            _this.overlayService.onClosed.pipe(filter(function (o) { return o.id === overlayID; }), takeUntil(_this.destroy$)).subscribe(function () {
                _this.nativeElement.focus();
            });
        });
    };
    IgxGridBaseDirective.prototype._setupServices = function () {
        this.gridAPI.grid = this;
        this.crudService.grid = this;
        this.selectionService.grid = this;
        this.navigation.grid = this;
        this.filteringService.grid = this;
        this.summaryService.grid = this;
    };
    IgxGridBaseDirective.prototype._setupListeners = function () {
        var _this = this;
        var destructor = takeUntil(this.destroy$);
        this.onRowAdded.pipe(destructor).subscribe(function (args) { return _this.refreshGridState(args); });
        this.onRowDeleted.pipe(destructor).subscribe(function (args) {
            _this.summaryService.deleteOperation = true;
            _this.summaryService.clearSummaryCache(args);
        });
        this.transactions.onStateUpdate.pipe(destructor).subscribe(function () {
            _this.selectionService.clearHeaderCBState();
            _this.summaryService.clearSummaryCache();
            _this._pipeTrigger++;
            _this.notifyChanges();
            if (_this.transactions.getAggregatedChanges(false).length === 0) {
                // Needs better check, calling 'transactions.clear()' will also trigger this
                if (_this.gridAPI.atInexistingPage()) {
                    _this.page--;
                }
            }
        });
        this.resizeNotify.pipe(destructor, filter(function () { return !_this._init; }), throttleTime(100))
            .subscribe(function () {
            _this.zone.run(function () {
                _this.notifyChanges(true);
            });
        });
        this.onPagingDone.pipe(destructor).subscribe(function () {
            _this.endEdit(true);
            _this.selectionService.clear(true);
        });
        this.onColumnMoving.pipe(destructor).subscribe(function () { return _this.endEdit(true); });
        this.onColumnResized.pipe(destructor).subscribe(function () { return _this.endEdit(true); });
        this.overlayService.onOpening.pipe(destructor).subscribe(function (event) {
            if (_this._advancedFilteringOverlayId === event.id) {
                var instance = event.componentRef.instance;
                if (instance) {
                    instance.initialize(_this, _this.overlayService, event.id);
                }
            }
        });
        this.overlayService.onOpened.pipe(destructor).subscribe(function (event) {
            // do not hide the advanced filtering overlay on scroll
            if (_this._advancedFilteringOverlayId === event.id) {
                var instance = event.componentRef.instance;
                if (instance) {
                    instance.setAddButtonFocus();
                }
                return;
            }
            if (_this.overlayService.getOverlayById(event.id).settings.outlet === _this.outletDirective &&
                _this.overlayIDs.indexOf(event.id) < 0) {
                _this.overlayIDs.push(event.id);
            }
        });
        this.overlayService.onClosed.pipe(destructor, filter(function () { return !_this._init; })).subscribe(function (event) {
            if (_this._advancedFilteringOverlayId === event.id) {
                _this._advancedFilteringOverlayId = null;
                return;
            }
            var ind = _this.overlayIDs.indexOf(event.id);
            if (ind !== -1) {
                _this.overlayIDs.splice(ind, 1);
            }
        });
        this.verticalScrollContainer.onDataChanging.pipe(destructor, filter(function () { return !_this._init; })).subscribe(function ($event) {
            var shouldRecalcSize = _this.isPercentHeight &&
                (!_this.calcHeight || _this.calcHeight === _this.getDataBasedBodyHeight() ||
                    _this.calcHeight === _this.renderedRowHeight * _this._defaultTargetRecordNumber);
            if (shouldRecalcSize) {
                _this.calculateGridHeight();
                $event.containerSize = _this.calcHeight;
            }
            _this.evaluateLoadingState();
        });
        this.verticalScrollContainer.onScrollbarVisibilityChanged.pipe(destructor, filter(function () { return !_this._init; })).subscribe(function () {
            // called to recalc all widths that may have changes as a result of
            // the vert. scrollbar showing/hiding
            _this.notifyChanges(true);
        });
        this.verticalScrollContainer.onContentSizeChange.pipe(destructor, filter(function () { return !_this._init; })).subscribe(function ($event) {
            _this.calculateGridSizes(false);
        });
        this.onDensityChanged.pipe(destructor).subscribe(function () {
            _this._headerFeaturesWidth = NaN;
            _this.summaryService.summaryHeight = 0;
            _this.endEdit(true);
            _this.cdr.markForCheck();
        });
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        this._setupServices();
        this._setupListeners();
        this.columnListDiffer = this.differs.find([]).create(null);
        this.calcWidth = this.width && this.width.indexOf('%') === -1 ? parseInt(this.width, 10) : 0;
        this.shouldGenerate = this.autoGenerate;
        this._scrollWidth = this.getScrollWidth();
    };
    IgxGridBaseDirective.prototype.setupColumns = function () {
        var _this = this;
        if (this.autoGenerate) {
            this.autogenerateColumns();
        }
        this.initColumns(this.columnList, function (col) { return _this.onColumnInit.emit(col); });
        this.columnListDiffer.diff(this.columnList);
        this.columnList.changes
            .pipe(takeUntil(this.destroy$))
            .subscribe(function (change) { _this.onColumnsChanged(change); });
    };
    /**
     * @hidden
     * @internal
     */
    IgxGridBaseDirective.prototype.resetColumnsCaches = function () {
        this.columnList.forEach(function (column) { return column.resetCaches(); });
    };
    /**
     * @hidden
     * @internal
     */
    IgxGridBaseDirective.prototype.resetForOfCache = function () {
        var firstVirtRow = this.dataRowList.first;
        if (firstVirtRow) {
            if (this._cdrRequests) {
                firstVirtRow.virtDirRow.cdr.detectChanges();
            }
            firstVirtRow.virtDirRow.assumeMaster();
        }
    };
    /**
     * @hidden
     * @internal
     */
    IgxGridBaseDirective.prototype.resetColumnCollections = function () {
        this._visibleColumns.length = 0;
        this._pinnedVisible.length = 0;
        this._unpinnedVisible.length = 0;
    };
    /**
     * @hidden
     * @internal
     */
    IgxGridBaseDirective.prototype.resetCachedWidths = function () {
        this._unpinnedWidth = NaN;
        this._pinnedWidth = NaN;
        this._totalWidth = NaN;
    };
    /**
     * @hidden
     * @internal
     */
    IgxGridBaseDirective.prototype.resetCaches = function (recalcFeatureWidth) {
        if (recalcFeatureWidth === void 0) { recalcFeatureWidth = true; }
        if (recalcFeatureWidth) {
            this._headerFeaturesWidth = NaN;
        }
        this.resetForOfCache();
        this.resetColumnsCaches();
        this.resetColumnCollections();
        this.resetCachedWidths();
        this.hasVisibleColumns = undefined;
        this._columnGroups = this.columnList.some(function (col) { return col.columnGroup; });
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.ngAfterContentInit = function () {
        this.setupColumns();
    };
    IgxGridBaseDirective.prototype._setupRowObservers = function () {
        var _this = this;
        var elementFilter = function (item) { return _this.isDefined(item.nativeElement.parentElement); };
        var extractForOfs = pipe(map(function (collection) { return collection.filter(elementFilter).map(function (item) { return item.virtDirRow; }); }));
        var rowListObserver = extractForOfs(this._dataRowList.changes);
        var summaryRowObserver = extractForOfs(this._summaryRowList.changes);
        combineLatest([rowListObserver, summaryRowObserver]).pipe(takeUntil(this.destroy$))
            .subscribe(function (_a) {
            var _b = __read(_a, 2), row = _b[0], summary = _b[1];
            return _this._horizontalForOfs = __spread(row, summary);
        });
        this._horizontalForOfs = __spread(this._dataRowList.filter(elementFilter).map(function (item) { return item.virtDirRow; }), this._summaryRowList.filter(elementFilter).map(function (item) { return item.virtDirRow; }));
    };
    IgxGridBaseDirective.prototype._zoneBegoneListeners = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.nativeElement.addEventListener('keydown', _this.keydownHandler);
            _this.verticalScrollContainer.getScroll().addEventListener('scroll', _this.verticalScrollHandler);
            _this.headerContainer.getScroll().addEventListener('scroll', _this.horizontalScrollHandler);
            _this.observer = new ResizeObserver(function () { return _this.resizeNotify.next(); });
            _this.observer.observe(_this.nativeElement);
        });
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.initPinning();
        this.calculateGridSizes();
        this._init = false;
        this.cdr.reattach();
        this._setupRowObservers();
        this._zoneBegoneListeners();
        var vertScrDC = this.verticalScrollContainer.displayContainer;
        vertScrDC.addEventListener('scroll', this.scrollHandler);
        vertScrDC.addEventListener('wheel', function () { return _this.wheelHandler(); });
    };
    IgxGridBaseDirective.prototype.notifyChanges = function (repaint) {
        if (repaint === void 0) { repaint = false; }
        this._cdrRequests = true;
        this._cdrRequestRepaint = repaint;
        this.cdr.markForCheck();
    };
    IgxGridBaseDirective.prototype.resetNotifyChanges = function () {
        this._cdrRequestRepaint = false;
        this._cdrRequests = false;
    };
    IgxGridBaseDirective.prototype.ngDoCheck = function () {
        _super.prototype.ngDoCheck.call(this);
        if (this._init) {
            return;
        }
        if (this._cdrRequestRepaint) {
            this.resetNotifyChanges();
            this.calculateGridSizes();
            this.refreshSearch(true);
            return;
        }
        if (this._cdrRequests) {
            this.resetNotifyChanges();
            this.cdr.detectChanges();
        }
    };
    /**
     * @hidden
     * @internal
    */
    IgxGridBaseDirective.prototype.getDragGhostCustomTemplate = function () {
        if (this.dragGhostCustomTemplates && this.dragGhostCustomTemplates.first) {
            return this.dragGhostCustomTemplates.first;
        }
        return null;
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.ngOnDestroy = function () {
        var _this = this;
        this.tmpOutlets.forEach(function (tmplOutlet) {
            tmplOutlet.cleanCache();
        });
        this.destroy$.next(true);
        this.destroy$.complete();
        this._destroyed = true;
        if (this._advancedFilteringOverlayId) {
            this.overlayService.hide(this._advancedFilteringOverlayId);
        }
        this.zone.runOutsideAngular(function () {
            _this.observer.disconnect();
            _this.nativeElement.removeEventListener('keydown', _this.keydownHandler);
            _this.verticalScrollContainer.getScroll().removeEventListener('scroll', _this.verticalScrollHandler);
            _this.headerContainer.getScroll().removeEventListener('scroll', _this.horizontalScrollHandler);
            var vertScrDC = _this.verticalScrollContainer.displayContainer;
            vertScrDC.removeEventListener('scroll', _this.scrollHandler);
            vertScrDC.removeEventListener('wheel', function () { return _this.wheelHandler(); });
        });
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.dataLoading = function (event) {
        this.onDataPreLoad.emit(event);
    };
    /**
     * Toggles the specified column's visibility.
     * ```typescript
     * this.grid1.toggleColumnVisibility({
     *       column: this.grid1.columns[0],
     *       newValue: true
     * });
     * ```
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.toggleColumnVisibility = function (args) {
        var col = args.column ? this.columnList.find(function (c) { return c === args.column; }) : undefined;
        if (!col) {
            return;
        }
        col.hidden = args.newValue;
        this.onColumnVisibilityChanged.emit(args);
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "expansionStates", {
        /**
         * Returns a list of key-value pairs [row ID, expansion state]. Includes only states that differ from the default one.
         * ```typescript
         * const expansionStates = this.grid.expansionStates;
         * ```
         * @memberof IgxGridComponent
         */
        get: function () {
            return this._expansionStates;
        },
        /**
        * Sets a list of key-value pairs [row ID, expansion state].
        * ```typescript
        * const states = new Map<any, boolean>();
        * states.set(1, true);
        * this.grid.expansionStates = states;
        * ```
        *
        * Two-way data binding.
        * ```html
        * <igx-grid #grid [data]="data" [(expansionStates)]="model.expansionStates">
        * <ng-template igxGridDetail let-dataItem>
        * <div *ngIf="dataItem.Category">
        *  <header>{{dataItem.Category?.CategoryName}}</header>
        * <span>{{dataItem.Category?.Description}}</span>
        * </div>
        * </ng-template>
        * </igx-grid>
        * ```
        * @memberof IgxGridBaseDirective
        */
        set: function (value) {
            this._expansionStates = new Map(value);
            this.expansionStatesChange.emit(this._expansionStates);
            if (this.gridAPI.grid) {
                this.cdr.detectChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
      * Expands all rows.
      * ```typescript
      * this.grid.expandAll();
      * ```
      * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.expandAll = function () {
        this._defaultExpandState = true;
        this.expansionStates = new Map();
    };
    /**
      * Collapses all rows.
      * ```typescript
      * this.grid.collapseAll();
      * ```
      * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.collapseAll = function () {
        this._defaultExpandState = false;
        this.expansionStates = new Map();
    };
    /**
     * Expands the row by its id. ID is either the primaryKey value or the data record instance.
     * ```typescript
     * this.grid.expandRow(rowID);
     * ```
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.expandRow = function (rowID) {
        this.gridAPI.set_row_expansion_state(rowID, true);
    };
    /**
     * Collapses the row by its id. ID is either the primaryKey value or the data record instance.
     * ```typescript
     * this.grid.collapseRow(rowID);
     * ```
     * @memberof IgxGridBaseDirective
    */
    IgxGridBaseDirective.prototype.collapseRow = function (rowID) {
        this.gridAPI.set_row_expansion_state(rowID, false);
    };
    /**
     * Toggles the row by its id. ID is either the primaryKey value or the data record instance.
     * ```typescript
     * this.grid.toggleRow(rowID);
     * ```
     * @memberof IgxGridBaseDirective
    */
    IgxGridBaseDirective.prototype.toggleRow = function (rowID) {
        var rec = this.gridAPI.get_rec_by_id(rowID);
        var state = this.gridAPI.get_row_expansion_state(rec);
        this.gridAPI.set_row_expansion_state(rowID, !state);
    };
    IgxGridBaseDirective.prototype.getDefaultExpandState = function (rec) {
        return this._defaultExpandState;
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "nativeElement", {
        /**
         * Returns the native element of the `IgxGridComponent`.
         * ```typescript
         * const nativeEl = this.grid.nativeElement.
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "outlet", {
        /**
         * @hidden
         */
        get: function () {
            return this.outletDirective;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "defaultRowHeight", {
        /**
         * Returns the `IgxGridComponent`'s rows height.
         * ```typescript
         * const rowHeigh = this.grid.defaultRowHeight;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            switch (this.displayDensity) {
                case DisplayDensity.cosy:
                    return 40;
                case DisplayDensity.compact:
                    return 32;
                default:
                    return 50;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "defaultSummaryHeight", {
        get: function () {
            switch (this.displayDensity) {
                case DisplayDensity.cosy:
                    return 30;
                case DisplayDensity.compact:
                    return 24;
                default:
                    return 36;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "defaultHeaderGroupMinWidth", {
        /**
         * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.
         * Used internally for restricting header group component width.
         * The values below depend on the header cell default right/left padding values.
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            switch (this.displayDensity) {
                case DisplayDensity.cosy:
                    return 32;
                case DisplayDensity.compact:
                    return 24;
                default:
                    return 48;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxGridBaseDirective.prototype.paginatorClassName = function () {
        switch (this.displayDensity) {
            case DisplayDensity.cosy:
                return 'igx-paginator--cosy';
            case DisplayDensity.compact:
                return 'igx-paginator--compact';
            default:
                return 'igx-paginator';
        }
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "pinnedWidth", {
        /**
         * Returns the current width of the container for the pinned `IgxColumnComponent`s.
         * ```typescript
         * const pinnedWidth = this.grid.getPinnedWidth;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            if (!isNaN(this._pinnedWidth)) {
                return this._pinnedWidth;
            }
            this._pinnedWidth = this.getPinnedWidth();
            return this._pinnedWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "unpinnedWidth", {
        /**
         * Returns the current width of the container for the unpinned `IgxColumnComponent`s.
         * ```typescript
         * const unpinnedWidth = this.grid.getUnpinnedWidth;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            if (!isNaN(this._unpinnedWidth)) {
                return this._unpinnedWidth;
            }
            this._unpinnedWidth = this.getUnpinnedWidth();
            return this._unpinnedWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "isHorizontalScrollHidden", {
        get: function () {
            var diff = this.unpinnedWidth - this.totalWidth;
            return this.width === null || diff >= 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
     */
    IgxGridBaseDirective.prototype.featureColumnsWidth = function (expander) {
        if (Number.isNaN(this._headerFeaturesWidth)) {
            var rowSelectArea = this.headerSelectorContainer ?
                this.headerSelectorContainer.nativeElement.getBoundingClientRect().width : 0;
            var rowDragArea = this.rowDraggable && this.headerDragContainer ?
                this.headerDragContainer.nativeElement.getBoundingClientRect().width : 0;
            var groupableArea = this.headerGroupContainer ?
                this.headerGroupContainer.nativeElement.getBoundingClientRect().width : 0;
            var expanderWidth = expander ? expander.nativeElement.getBoundingClientRect().width : 0;
            this._headerFeaturesWidth = rowSelectArea + rowDragArea + groupableArea + expanderWidth;
        }
        return this._headerFeaturesWidth;
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "summariesMargin", {
        /**
         * @hidden
         */
        get: function () {
            return this.featureColumnsWidth();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "columns", {
        /**
         * Returns an array of `IgxColumnComponent`s.
         * ```typescript
         * const colums = this.grid.columns.
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._columns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "pinnedColumns", {
        /**
         * Returns an array of the pinned `IgxColumnComponent`s.
         * ```typescript
         * const pinnedColumns = this.grid.pinnedColumns.
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            if (this._pinnedVisible.length) {
                return this._pinnedVisible;
            }
            this._pinnedVisible = this._pinnedColumns.filter(function (col) { return !col.hidden; });
            return this._pinnedVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "unpinnedColumns", {
        /**
         * Returns an array of unpinned `IgxColumnComponent`s.
         * ```typescript
         * const unpinnedColumns = this.grid.unpinnedColumns.
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            if (this._unpinnedVisible.length) {
                return this._unpinnedVisible;
            }
            this._unpinnedVisible = this._unpinnedColumns.filter(function (col) { return !col.hidden; });
            return this._unpinnedVisible;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.getHeaderGroupWidth = function (column) {
        if (this.hasColumnLayouts) {
            return '';
        }
        var colWidth = column.width;
        var minWidth = this.defaultHeaderGroupMinWidth;
        var isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;
        if (!isPercentageWidth && parseInt(colWidth, 10) < minWidth) {
            return minWidth + 'px';
        }
        return colWidth;
    };
    /**
     * Returns the `IgxColumnComponent` by field name.
     * ```typescript
     * const myCol = this.grid1.getColumnByName("ID");
     * ```
     * @param name
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.getColumnByName = function (name) {
        return this.columnList.find(function (col) { return col.field === name; });
    };
    /**
     * Returns the `IgxRowDirective` by index.
     * ```typescript
     * const myRow = this.grid1.getRowByIndex(1);
     * ```
     * @param index
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.getRowByIndex = function (index) {
        return this.gridAPI.get_row_by_index(index);
    };
    /**
     * Returns `IgxGridRowComponent` object by the specified primary key .
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * const myRow = this.grid1.getRowByKey("cell5");
     * ```
     * @param keyValue
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.getRowByKey = function (keyValue) {
        return this.gridAPI.get_row_by_key(keyValue);
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "visibleColumns", {
        /**
         * Returns an array of visible `IgxColumnComponent`s.
         * ```typescript
         * const visibleColumns = this.grid.visibleColumns.
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            if (this._visibleColumns.length) {
                return this._visibleColumns;
            }
            this._visibleColumns = this.columnList.filter(function (c) { return !c.hidden; });
            return this._visibleColumns;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the `IgxGridCellComponent` that matches the conditions.
     * ```typescript
     * const myCell = this.grid1.getCellByColumn(2,"UnitPrice");
     * ```
     * @param rowIndex
     * @param columnField
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.getCellByColumn = function (rowIndex, columnField) {
        var columnId = this.columnList.map(function (column) { return column.field; }).indexOf(columnField);
        if (columnId !== -1) {
            return this.gridAPI.get_cell_by_index(rowIndex, columnId);
        }
    };
    /**
     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.
     * Requires that the primaryKey property is set.
     * ```typescript
     * grid.getCellByKey(1, 'index');
     * ```
     * @param rowSelector match any rowID
     * @param columnField
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.getCellByKey = function (rowSelector, columnField) {
        return this.gridAPI.get_cell_by_key(rowSelector, columnField);
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "totalPages", {
        /**
         * Returns the total number of pages.
         * ```typescript
         * const totalPages = this.grid.totalPages;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            if (this.pagingState) {
                return this.pagingState.metadata.countPages;
            }
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "isFirstPage", {
        /**
         * Returns if the current page is the first page.
         * ```typescript
         * const firstPage = this.grid.isFirstPage;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.page === 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.
     * ```typescript
     * this.grid1.nextPage();
     * ```
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.nextPage = function () {
        if (!this.isLastPage) {
            this.page += 1;
        }
    };
    /**
     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.
     * ```typescript
     * this.grid1.previousPage();
     * ```
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.previousPage = function () {
        if (!this.isFirstPage) {
            this.page -= 1;
        }
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "totalRecords", {
        /**
         * Returns the total number of records.
         * Only functions when paging is enabled.
         * ```typescript
         * const totalRecords = this.grid.totalRecords;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            if (this.pagingState) {
                return this.pagingState.metadata.countRecords;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "isLastPage", {
        /**
         * Returns if the current page is the last page.
         * ```typescript
         * const lastPage = this.grid.isLastPage;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.page + 1 >= this.totalPages;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "totalWidth", {
        /**
         * Returns the total width of the `IgxGridComponent`.
         * ```typescript
         * const gridWidth = this.grid.totalWidth;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            if (!isNaN(this._totalWidth)) {
                return this._totalWidth;
            }
            // Take only top level columns
            var cols = this.visibleColumns.filter(function (col) { return col.level === 0 && !col.pinned; });
            var totalWidth = 0;
            var i = 0;
            for (i; i < cols.length; i++) {
                totalWidth += parseInt(cols[i].calcWidth, 10) || 0;
            }
            this._totalWidth = totalWidth;
            return totalWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "showRowSelectors", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            return this.isRowSelectable && this.hasVisibleColumns && !this.hideRowSelectors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "showDragIcons", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            return this.rowDraggable && this.columns.length > this.hiddenColumnsCount;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype._moveColumns = function (from, to, pos) {
        var list = this.columnList.toArray();
        var fromIndex = list.indexOf(from);
        var toIndex = list.indexOf(to);
        if (pos === DropPosition.BeforeDropTarget) {
            toIndex--;
            if (toIndex < 0) {
                toIndex = 0;
            }
        }
        if (pos === DropPosition.AfterDropTarget) {
            toIndex++;
        }
        list.splice.apply(list, __spread([toIndex, 0], list.splice(fromIndex, 1)));
        var newList = this._resetColumnList(list);
        this.columnList.reset(newList);
        this.columnList.notifyOnChanges();
        this._columns = this.columnList.toArray();
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype._resetColumnList = function (list) {
        if (!list) {
            list = this.columnList.toArray();
        }
        var newList = [];
        list.filter(function (c) { return c.level === 0; }).forEach(function (p) {
            newList.push(p);
            if (p.columnGroup) {
                newList = newList.concat(p.allChildren);
            }
        });
        return newList;
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype._reorderColumns = function (from, to, position, columnCollection) {
        var dropIndex = columnCollection.indexOf(to);
        if (to.columnGroup) {
            dropIndex += to.allChildren.length;
        }
        if (position === DropPosition.BeforeDropTarget) {
            dropIndex--;
        }
        if (position === DropPosition.AfterDropTarget) {
            dropIndex++;
        }
        columnCollection.splice.apply(columnCollection, __spread([dropIndex, 0], columnCollection.splice(columnCollection.indexOf(from), 1)));
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype._moveChildColumns = function (parent, from, to, pos) {
        var buffer = parent.children.toArray();
        var fromIndex = buffer.indexOf(from);
        var toIndex = buffer.indexOf(to);
        if (pos === DropPosition.BeforeDropTarget) {
            toIndex--;
        }
        if (pos === DropPosition.AfterDropTarget) {
            toIndex++;
        }
        buffer.splice.apply(buffer, __spread([toIndex, 0], buffer.splice(fromIndex, 1)));
        parent.children.reset(buffer);
    };
    /**
     * Moves a column to the specified drop target.
     * ```typescript
     * grid.moveColumn(compName, persDetails);
     * ```
      * @memberof IgxGridBaseDirective
      */
    IgxGridBaseDirective.prototype.moveColumn = function (column, dropTarget, pos) {
        if (pos === void 0) { pos = DropPosition.None; }
        var position = pos;
        var fromIndex = column.visibleIndex;
        var toIndex = dropTarget.visibleIndex;
        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {
            position = DropPosition.BeforeDropTarget;
        }
        else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {
            position = DropPosition.AfterDropTarget;
        }
        else {
            position = DropPosition.None;
        }
        if ((column.level !== dropTarget.level) ||
            (column.topLevelParent !== dropTarget.topLevelParent)) {
            return;
        }
        this.endEdit(true);
        if (column.level) {
            this._moveChildColumns(column.parent, column, dropTarget, position);
        }
        if (dropTarget.pinned && column.pinned) {
            this._reorderColumns(column, dropTarget, position, this._pinnedColumns);
        }
        if (dropTarget.pinned && !column.pinned) {
            column.pin();
            this._reorderColumns(column, dropTarget, position, this._pinnedColumns);
        }
        if (!dropTarget.pinned && column.pinned) {
            column.unpin();
            var list = [];
            if (this.pinnedColumns.indexOf(column) === -1 && this.pinnedColumns.indexOf(dropTarget) === -1) {
                list = this._unpinnedColumns;
            }
            else {
                list = this._pinnedColumns;
            }
            var fi = list.indexOf(column);
            var ti = list.indexOf(dropTarget);
            if (pos === DropPosition.BeforeDropTarget && fi < ti) {
                position = DropPosition.BeforeDropTarget;
            }
            else if (pos === DropPosition.AfterDropTarget && fi > ti) {
                position = DropPosition.AfterDropTarget;
            }
            else {
                position = DropPosition.None;
            }
        }
        if (!dropTarget.pinned) {
            this._reorderColumns(column, dropTarget, position, this._unpinnedColumns);
        }
        this._moveColumns(column, dropTarget, position);
        this.notifyChanges();
        if (this.hasColumnLayouts) {
            this.columns.filter(function (x) { return x.columnLayout; }).forEach(function (x) { return x.populateVisibleIndexes(); });
        }
        var args = {
            source: column,
            target: dropTarget
        };
        this.onColumnMovingEnd.emit(args);
    };
    /**
     * Goes to the desired page index.
     * ```typescript
     * this.grid1.paginate(1);
     * ```
     * @param val
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.paginate = function (val) {
        if (val < 0 || val > this.totalPages - 1) {
            return;
        }
        this.page = val;
    };
    /**
     * Manually marks the `IgxGridComponent` for change detection.
     * ```typescript
     * this.grid1.markForCheck();
     * ```
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.markForCheck = function () {
        this.cdr.detectChanges();
    };
    /**
     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.
     * ```typescript
     * const record = {
     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,
     *     Name: this.newRecord
     * };
     * this.grid1.addRow(record);
     * ```
     * @param data
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.addRow = function (data) {
        // commit pending states prior to adding a row
        this.endEdit(true);
        this.gridAPI.addRowToData(data);
        this.onRowAdded.emit({ data: data });
        this._pipeTrigger++;
        this.notifyChanges();
    };
    /**
     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * The method accept rowSelector as a parameter, which is the rowID.
     * ```typescript
     * this.grid1.deleteRow(0);
     * ```
     * @param rowSelector
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.deleteRow = function (rowSelector) {
        if (this.primaryKey !== undefined && this.primaryKey !== null) {
            this.deleteRowById(rowSelector);
        }
    };
    /** @hidden */
    IgxGridBaseDirective.prototype.deleteRowById = function (rowId) {
        this.gridAPI.deleteRowById(rowId);
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.deleteRowFromData = function (rowID, index) {
        //  if there is a row (index !== 0) delete it
        //  if there is a row in ADD or UPDATE state change it's state to DELETE
        if (index !== -1) {
            if (this.transactions.enabled) {
                var transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };
                this.transactions.add(transaction, this.data[index]);
            }
            else {
                this.data.splice(index, 1);
            }
        }
        else {
            var state = this.transactions.getState(rowID);
            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);
        }
    };
    /**
     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');
     * ```
     * @param value the new value which is to be set.
     * @param rowSelector corresponds to rowID.
     * @param column corresponds to column field.
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.updateCell = function (value, rowSelector, column) {
        if (this.isDefined(this.primaryKey)) {
            var col = this.columnList.toArray().find(function (c) { return c.field === column; });
            if (col) {
                // Simplify
                var rowData = this.gridAPI.getRowData(rowSelector);
                var index = this.gridAPI.get_row_index_in_data(rowSelector);
                // If row passed is invalid
                if (index < 0) {
                    return;
                }
                var id = {
                    rowID: rowSelector,
                    columnID: col.index,
                    rowIndex: index
                };
                var cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);
                var args = this.gridAPI.update_cell(cell, value);
                if (this.crudService.cell && this.crudService.sameCell(cell)) {
                    if (args.cancel) {
                        return;
                    }
                    this.gridAPI.escape_editMode();
                }
                this.cdr.detectChanges();
            }
        }
    };
    /**
     * Updates the `IgxGridRowComponent`, which is specified by
     * rowSelector parameter and the data source record with the passed value.
     * This method will apply requested update only if primary key is specified in the grid.
     * ```typescript
     * grid.updateRow({
     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')
     *   }, 1);
     * ```
     * @param value
     * @param rowSelector correspond to rowID
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.updateRow = function (value, rowSelector) {
        if (this.isDefined(this.primaryKey)) {
            var editableCell = this.crudService.cell;
            if (editableCell && editableCell.id.rowID === rowSelector) {
                this.gridAPI.escape_editMode();
            }
            var row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));
            this.gridAPI.update_row(row, value);
            // TODO: fix for #5934 and probably break for #5763
            // consider adding of third optional boolean parameter in updateRow.
            // If developer set this parameter to true we should call notifyChanges(true), and
            // vise-versa if developer set it to false we should call notifyChanges(false).
            // The parameter should default to false
            this.notifyChanges();
        }
    };
    /**
     * Sort a single `IgxColumnComponent`.
     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.
     * ```typescript
     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });
     * ```
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.sort = function (expression) {
        this.endEdit(false);
        if (expression instanceof Array) {
            this.gridAPI.sort_multiple(expression);
        }
        else {
            this.gridAPI.sort(expression);
        }
        this.onSortingDone.emit(expression);
    };
    /**
     * Filters a single `IgxColumnComponent`.
     * ```typescript
     * public filter(term) {
     *      this.grid.filter("ProductName", term, IgxStringFilteringOperand.instance().condition("contains"));
     * }
     * ```
     * @param name
     * @param value
     * @param conditionOrExpressionTree
     * @param ignoreCase
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.filter = function (name, value, conditionOrExpressionTree, ignoreCase) {
        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);
    };
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     * ```typescript
     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));
     * ```
     * @param value
     * @param condition
     * @param ignoreCase
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.filterGlobal = function (value, condition, ignoreCase) {
        this.filteringService.filterGlobal(value, condition, ignoreCase);
    };
    /**
     * Enables summaries for the specified column and applies your customSummary.
     * If you do not provide the customSummary, then the default summary for the column data type will be applied.
     * ```typescript
     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);
     * ```
     * Enable summaries for the listed columns.
     * ```typescript
     * grid.enableSummaries('ProductName');
     * ```
     * @param rest
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.enableSummaries = function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        if (rest.length === 1 && Array.isArray(rest[0])) {
            this._multipleSummaries(rest[0], true);
        }
        else {
            this._summaries(rest[0], true, rest[1]);
        }
    };
    /**
     * Disable summaries for the specified column.
     * ```typescript
     * grid.disableSummaries('ProductName');
     * ```
     *
     * Disable summaries for the listed columns.
     * ```typescript
     * grid.disableSummaries([{ fieldName: 'ProductName' }]);
     * ```
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.disableSummaries = function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        if (rest.length === 1 && Array.isArray(rest[0])) {
            this._disableMultipleSummaries(rest[0]);
        }
        else {
            this._summaries(rest[0], false);
        }
    };
    /**
     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,
     * otherwise clears the filtering state of all `IgxColumnComponent`s.
     * ```typescript
     * this.grid.clearFilter();
     * ```
     * @param name
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.clearFilter = function (name) {
        this.filteringService.clearFilter(name);
    };
    /**
     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,
     * otherwise clears the sorting state of all `IgxColumnComponent`.
     * ```typescript
     * this.grid.clearSort();
     * ```
     * @param name
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.clearSort = function (name) {
        if (!name) {
            this.sortingExpressions = [];
            return;
        }
        if (!this.gridAPI.get_column_by_name(name)) {
            return;
        }
        this.gridAPI.clear_sort(name);
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.refreshGridState = function (args) {
        this.endEdit(true);
        this.selectionService.clearHeaderCBState();
        this.summaryService.clearSummaryCache(args);
    };
    // TODO: We have return values here. Move them to event args ??
    /**
     * Pins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * @param columnName
     * @param index
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.pinColumn = function (columnName, index) {
        var col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);
        return col.pin(index);
    };
    /**
     * Unpins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * @param columnName
     * @param index
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.unpinColumn = function (columnName, index) {
        var col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);
        return col.unpin(index);
    };
    /**
     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.
     * ```typescript
     * this.grid.reflow();
     * ```
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.reflow = function () {
        this.calculateGridSizes();
    };
    /**
     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findNext("financial");
     * ```
     * @param text the string to search.
     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.findNext = function (text, caseSensitive, exactMatch) {
        return this.find(text, 1, caseSensitive, exactMatch);
    };
    /**
     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findPrev("financial");
     * ```
     * @param text the string to search.
     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param exactMatch optionally, if the text should match the entire value (defaults to false).
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.findPrev = function (text, caseSensitive, exactMatch) {
        return this.find(text, -1, caseSensitive, exactMatch);
    };
    /**
     * Reapplies the existing search.
     * Returns how many times the grid contains the last search.
     * ```typescript
     * this.grid.refreshSearch();
     * ```
     * @param updateActiveInfo
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.refreshSearch = function (updateActiveInfo) {
        var _this = this;
        if (this.lastSearchInfo.searchText) {
            this.rebuildMatchCache();
            if (updateActiveInfo) {
                var activeInfo_1 = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);
                this.lastSearchInfo.matchInfoCache.forEach(function (match, i) {
                    if (match.column === activeInfo_1.column &&
                        match.row === activeInfo_1.row &&
                        match.index === activeInfo_1.index) {
                        _this.lastSearchInfo.activeMatchIndex = i;
                    }
                });
            }
            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);
        }
        else {
            return 0;
        }
    };
    /**
     * Removes all the highlights in the cell.
     * ```typescript
     * this.grid.clearSearch();
     * ```
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.clearSearch = function () {
        this.lastSearchInfo = {
            searchText: '',
            caseSensitive: false,
            exactMatch: false,
            activeMatchIndex: 0,
            matchInfoCache: []
        };
        this.rowList.forEach(function (row) {
            if (row.cells) {
                row.cells.forEach(function (c) {
                    c.clearHighlight();
                });
            }
        });
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "hasSortableColumns", {
        /**
         * Returns if the `IgxGridComponent` has sortable columns.
         * ```typescript
         * const sortableGrid = this.grid.hasSortableColumns;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.columnList.some(function (col) { return col.sortable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "hasEditableColumns", {
        /**
         * Returns if the `IgxGridComponent` has editable columns.
         * ```typescript
         * const editableGrid = this.grid.hasEditableColumns;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.columnList.some(function (col) { return col.editable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "hasFilterableColumns", {
        /**
         * Returns if the `IgxGridComponent` has fiterable columns.
         * ```typescript
         * const filterableGrid = this.grid.hasFilterableColumns;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.columnList.some(function (col) { return col.filterable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "hasSummarizedColumns", {
        /**
         * Returns if the `IgxGridComponent` has summarized columns.
         * ```typescript
         * const summarizedGrid = this.grid.hasSummarizedColumns;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.summaryService.hasSummarizedColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rootSummariesEnabled", {
        /**
         * @hidden
         */
        get: function () {
            return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "hasVisibleColumns", {
        /**
         * @hidden
         */
        get: function () {
            if (this._hasVisibleColumns === undefined) {
                return this.columnList ? this.columnList.some(function (c) { return !c.hidden; }) : false;
            }
            return this._hasVisibleColumns;
        },
        set: function (value) {
            this._hasVisibleColumns = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "hasMovableColumns", {
        /**
         * Returns if the `IgxGridComponent` has moveable columns.
         * ```typescript
         * const movableGrid = this.grid.hasMovableColumns;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this.columnList && this.columnList.some(function (col) { return col.movable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "hasColumnGroups", {
        /**
         * Returns if the `IgxGridComponent` has column groups.
         * ```typescript
         * const groupGrid = this.grid.hasColumnGroups;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._columnGroups;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "hasColumnLayouts", {
        /**
         * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.
         * ```typescript
         * const layoutGrid = this.grid.hasColumnLayouts;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return !!this.columnList.some(function (col) { return col.columnLayout; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "selectedCells", {
        /**
         * Returns an array of the selected `IgxGridCellComponent`s.
         * ```typescript
         * const selectedCells = this.grid.selectedCells;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            if (this.dataRowList) {
                return this.dataRowList.map(function (row) { return row.cells.filter(function (cell) { return cell.selected; }); })
                    .reduce(function (a, b) { return a.concat(b); }, []);
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "multiRowLayoutRowSize", {
        /**
         * @hidden
         */
        get: function () {
            return this._multiRowLayoutRowSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowBasedHeight", {
        /**
         * @hidden
         */
        get: function () {
            return this.dataLength * this.rowHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "isPercentWidth", {
        /**
         * @hidden
         */
        get: function () {
            return this.width && this.width.indexOf('%') !== -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "isPercentHeight", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this._height && this._height.indexOf('%') !== -1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Sets columns defaultWidth property
     */
    IgxGridBaseDirective.prototype._derivePossibleWidth = function () {
        var _this = this;
        if (!this.columnWidthSetByUser) {
            this._columnWidth = this.width !== null ? this.getPossibleColumnWidth() : MINIMUM_COLUMN_WIDTH + 'px';
        }
        this.columnList.forEach(function (column) {
            if (_this.hasColumnLayouts && parseInt(_this._columnWidth, 10)) {
                var columnWidthCombined = parseInt(_this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);
                column.defaultWidth = columnWidthCombined + 'px';
            }
            else {
                column.defaultWidth = _this._columnWidth;
                column.resetCaches();
            }
        });
        this.resetCachedWidths();
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "defaultTargetBodyHeight", {
        /**
         * @hidden
         */
        get: function () {
            var allItems = this.dataLength;
            return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber, this.paging ? Math.min(allItems, this.perPage) : allItems);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "renderedRowHeight", {
        /**
         * @hidden @internal
         * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases
         */
        get: function () {
            return this.rowHeight + 1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @internal
     */
    IgxGridBaseDirective.prototype.calcGridHeadRow = function () {
        if (this.maxLevelHeaderDepth) {
            this._baseFontSize = parseFloat(getComputedStyle(this.document.documentElement).getPropertyValue('font-size'));
            var minSize = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight / this._baseFontSize;
            if (this._allowFiltering && this._filterMode === FilterMode.quickFilter) {
                minSize += (FILTER_ROW_HEIGHT + 1) / this._baseFontSize;
            }
            this.theadRow.nativeElement.style.minHeight = minSize + "rem";
        }
    };
    /**
     * @hidden
     * Sets TBODY height i.e. this.calcHeight
     */
    IgxGridBaseDirective.prototype.calculateGridHeight = function () {
        this.calcGridHeadRow();
        this.summariesHeight = 0;
        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {
            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();
        }
        this.calcHeight = this._calculateGridBodyHeight();
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.getGroupAreaHeight = function () {
        return 0;
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.getToolbarHeight = function () {
        var toolbarHeight = 0;
        if (this.showToolbar && this.toolbarHtml != null) {
            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?
                this.toolbarHtml.nativeElement.offsetHeight : 0;
        }
        return toolbarHeight;
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.getPagingHeight = function () {
        var pagingHeight = 0;
        if (this.paging && this.footer) {
            pagingHeight = this.footer.nativeElement.firstElementChild ?
                this.footer.nativeElement.offsetHeight : 0;
        }
        return pagingHeight;
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.getFilterCellHeight = function () {
        var headerGroupNativeEl = (this.headerGroupsList.length !== 0) ?
            this.headerGroupsList[0].element.nativeElement : null;
        var filterCellNativeEl = (headerGroupNativeEl) ?
            headerGroupNativeEl.querySelector('igx-grid-filtering-cell') : null;
        return (filterCellNativeEl) ? filterCellNativeEl.offsetHeight : 0;
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype._calculateGridBodyHeight = function () {
        if (!this._height) {
            return null;
        }
        var actualTheadRow = (!this.allowFiltering || (this.allowFiltering && this.filterMode !== FilterMode.quickFilter)) ?
            this.theadRow.nativeElement.offsetHeight - this.getFilterCellHeight() :
            this.theadRow.nativeElement.offsetHeight;
        var footerHeight = this.summariesHeight || this.tfoot.nativeElement.offsetHeight - this.tfoot.nativeElement.clientHeight;
        var toolbarHeight = this.getToolbarHeight();
        var pagingHeight = this.getPagingHeight();
        var groupAreaHeight = this.getGroupAreaHeight();
        var renderedHeight = toolbarHeight + actualTheadRow +
            footerHeight + pagingHeight + groupAreaHeight +
            this.scr.nativeElement.clientHeight;
        var computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('height');
        var gridHeight = 0;
        if (this.isPercentHeight) {
            var autoSize = this._shouldAutoSize(renderedHeight);
            if (autoSize || computed.indexOf('%') !== -1) {
                var bodyHeight = this.getDataBasedBodyHeight();
                return bodyHeight > 0 ? bodyHeight : null;
            }
            gridHeight = parseInt(computed, 10);
        }
        else {
            gridHeight = parseInt(this._height, 10);
        }
        var height = Math.abs(gridHeight - renderedHeight);
        if (height === 0 || isNaN(gridHeight)) {
            var bodyHeight = this.defaultTargetBodyHeight;
            return bodyHeight > 0 ? bodyHeight : null;
        }
        return height;
    };
    IgxGridBaseDirective.prototype.checkContainerSizeChange = function () {
        var origHeight = this.nativeElement.parentElement.offsetHeight;
        this.nativeElement.style.display = 'none';
        var height = this.nativeElement.parentElement.offsetHeight;
        this.nativeElement.style.display = '';
        return origHeight !== height;
    };
    IgxGridBaseDirective.prototype._shouldAutoSize = function (renderedHeight) {
        this.tbody.nativeElement.style.display = 'none';
        var res = !this.nativeElement.parentElement ||
            this.nativeElement.parentElement.clientHeight === 0 ||
            this.nativeElement.parentElement.clientHeight === renderedHeight;
        if (!isChromium()) {
            // If grid causes the parent container to extend (for example when container is flex)
            // we should always auto-size since the actual size of the container will continuously change as the grid renders elements.
            res = this.checkContainerSizeChange();
        }
        this.tbody.nativeElement.style.display = '';
        return res;
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "outerWidth", {
        get: function () {
            return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Gets the visible content height that includes header + tbody + footer.
     */
    IgxGridBaseDirective.prototype.getVisibleContentHeight = function () {
        var height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;
        if (this.hasSummarizedColumns) {
            height += this.tfoot.nativeElement.clientHeight;
        }
        return height;
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.getPossibleColumnWidth = function (baseWidth) {
        if (baseWidth === void 0) { baseWidth = null; }
        var computedWidth;
        if (baseWidth !== null) {
            computedWidth = baseWidth;
        }
        else {
            computedWidth = this.calcWidth ||
                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);
        }
        computedWidth -= this.featureColumnsWidth();
        var visibleChildColumns = this.visibleColumns.filter(function (c) { return !c.columnGroup; });
        // Column layouts related
        var visibleCols = [];
        var columnBlocks = this.visibleColumns.filter(function (c) { return c.columnGroup; });
        var colsPerBlock = columnBlocks.map(function (block) { return block.getInitialChildColumnSizes(block.children); });
        var combinedBlocksSize = colsPerBlock.reduce(function (acc, item) { return acc + item.length; }, 0);
        colsPerBlock.forEach(function (blockCols) { return visibleCols = visibleCols.concat(blockCols); });
        //
        var columnsWithSetWidths = this.hasColumnLayouts ?
            visibleCols.filter(function (c) { return c.widthSetByUser; }) :
            visibleChildColumns.filter(function (c) { return c.widthSetByUser; });
        var columnsToSize = this.hasColumnLayouts ?
            combinedBlocksSize - columnsWithSetWidths.length :
            visibleChildColumns.length - columnsWithSetWidths.length;
        var sumExistingWidths = columnsWithSetWidths
            .reduce(function (prev, curr) {
            var colWidth = curr.width;
            var widthValue = parseInt(colWidth, 10);
            var currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?
                widthValue / 100 * computedWidth :
                widthValue;
            return prev + currWidth;
        }, 0);
        // When all columns are hidden, return 0px width
        if (!sumExistingWidths && !columnsToSize) {
            return '0px';
        }
        var columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?
            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :
            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));
        return columnWidth + 'px';
    };
    /**
     * @hidden
     * Sets grid width i.e. this.calcWidth
     */
    IgxGridBaseDirective.prototype.calculateGridWidth = function () {
        var width;
        var computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width');
        if (this.isPercentWidth) {
            /* width in %*/
            width = computed.indexOf('%') === -1 ? parseInt(computed, 10) : null;
        }
        else {
            width = parseInt(this.width, 10);
        }
        if (!width && this.nativeElement) {
            width = this.nativeElement.offsetWidth;
        }
        if (this.width === null || !width) {
            width = this.getColumnWidthSum();
        }
        if (this.hasVerticalSroll() && this.width !== null) {
            width -= this.scrollWidth;
        }
        if ((Number.isFinite(width) || width === null) && width !== this.calcWidth) {
            this.calcWidth = width;
        }
        this._derivePossibleWidth();
    };
    IgxGridBaseDirective.prototype.getColumnWidthSum = function () {
        var colSum = 0;
        var cols = this.hasColumnLayouts ?
            this.visibleColumns.filter(function (x) { return x.columnLayout; }) : this.visibleColumns.filter(function (x) { return !x.columnGroup; });
        cols.forEach(function (item) {
            var isWidthInPercent = item.width && typeof item.width === 'string' && item.width.indexOf('%') !== -1;
            if (isWidthInPercent) {
                item.width = item.calcWidth || MINIMUM_COLUMN_WIDTH + 'px';
            }
            colSum += parseInt((item.width || item.defaultWidth), 10) || MINIMUM_COLUMN_WIDTH;
        });
        if (!colSum) {
            return null;
        }
        this.cdr.detectChanges();
        colSum += this.featureColumnsWidth();
        return colSum;
    };
    IgxGridBaseDirective.prototype.hasVerticalSroll = function () {
        if (this._init) {
            return false;
        }
        var isScrollable = this.verticalScrollContainer ? this.verticalScrollContainer.isScrollable() : false;
        return !!(this.calcWidth && this.dataView &&
            this.dataView.length > 0 &&
            isScrollable);
    };
    /**
     * @hidden @internal
     */
    IgxGridBaseDirective.prototype.getDataBasedBodyHeight = function () {
        return !this.data || (this.data.length < this._defaultTargetRecordNumber) ?
            0 : this.defaultTargetBodyHeight;
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.onColumnsChanged = function (change) {
        var _this = this;
        var diff = this.columnListDiffer.diff(change);
        if (diff) {
            var added_1 = false;
            var removed_1 = false;
            this.initColumns(this.columnList);
            diff.forEachAddedItem(function (record) {
                _this.onColumnInit.emit(record.item);
                added_1 = true;
            });
            diff.forEachRemovedItem(function (record) {
                var isColumnGroup = record.item instanceof IgxColumnGroupComponent;
                if (!isColumnGroup) {
                    // Clear Grouping
                    _this.gridAPI.clear_groupby(record.item.field);
                    // Clear Filtering
                    _this.gridAPI.clear_filter(record.item.field);
                    // Close filter row
                    if (_this.filteringService.isFilterRowVisible
                        && _this.filteringService.filteredColumn
                        && _this.filteringService.filteredColumn.field === record.item.field) {
                        _this.filteringRow.close();
                    }
                    // Clear Sorting
                    _this.gridAPI.clear_sort(record.item.field);
                }
                removed_1 = true;
            });
            this.resetCaches();
            if (added_1 || removed_1) {
                this.summaryService.clearSummaryCache();
                Promise.resolve().then(function () {
                    // `onColumnsChanged` can be executed midway a current detectChange cycle and markForCheck will be ignored then.
                    // This ensures that we will wait for the current cycle to end so we can trigger a new one and ngDoCheck to fire.
                    _this.notifyChanges(true);
                });
            }
        }
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.calculateGridSizes = function (recalcFeatureWidth) {
        var _this = this;
        if (recalcFeatureWidth === void 0) { recalcFeatureWidth = true; }
        /*
            TODO: (R.K.) This layered lasagne should be refactored
            ASAP. The reason I have to reset the caches so many times is because
            after teach `detectChanges` call they are filled with invalid
            state. Of course all of this happens midway through the grid
            sizing process which of course, uses values from the caches, thus resulting
            in a broken layout.
        */
        this.resetCaches(recalcFeatureWidth);
        this.cdr.detectChanges();
        var hasScroll = this.hasVerticalSroll();
        this.calculateGridWidth();
        this.resetCaches(recalcFeatureWidth);
        this.cdr.detectChanges();
        this.calculateGridHeight();
        if (this.rowEditable) {
            this.repositionRowEditingOverlay(this.rowInEditMode);
        }
        if (this.filteringService.isFilterRowVisible) {
            this.filteringRow.resetChipsArea();
        }
        this.cdr.detectChanges();
        // in case scrollbar has appeared recalc to size correctly.
        if (hasScroll !== this.hasVerticalSroll()) {
            this.calculateGridWidth();
            this.cdr.detectChanges();
        }
        if (this.zone.isStable) {
            this.zone.run(function () {
                _this._applyWidthHostBinding();
                _this.cdr.detectChanges();
            });
        }
        else {
            this.zone.onStable.pipe(first()).subscribe(function () {
                _this.zone.run(function () {
                    _this._applyWidthHostBinding();
                });
            });
        }
        this.resetCaches(recalcFeatureWidth);
    };
    IgxGridBaseDirective.prototype._applyWidthHostBinding = function () {
        var width = this._width;
        if (width === null) {
            var currentWidth = this.calcWidth;
            if (this.hasVerticalSroll()) {
                currentWidth += this.scrollWidth;
            }
            width = currentWidth + 'px';
            this.resetCaches();
        }
        this._hostWidth = width;
        this.cdr.markForCheck();
    };
    /**
     * Gets calculated width of the pinned area.
     * ```typescript
     * const pinnedWidth = this.grid.getPinnedWidth();
     * ```
     * @param takeHidden If we should take into account the hidden columns in the pinned area.
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.getPinnedWidth = function (takeHidden) {
        var e_1, _a;
        if (takeHidden === void 0) { takeHidden = false; }
        var fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;
        var sum = 0;
        try {
            for (var fc_1 = __values(fc), fc_1_1 = fc_1.next(); !fc_1_1.done; fc_1_1 = fc_1.next()) {
                var col = fc_1_1.value;
                if (col.level === 0) {
                    sum += parseInt(col.calcWidth, 10);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (fc_1_1 && !fc_1_1.done && (_a = fc_1.return)) _a.call(fc_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        sum += this.featureColumnsWidth();
        return sum;
    };
    /**
     * @hidden
     * Gets calculated width of the unpinned area
     * @param takeHidden If we should take into account the hidden columns in the pinned area.
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.getUnpinnedWidth = function (takeHidden) {
        if (takeHidden === void 0) { takeHidden = false; }
        var width = this.isPercentWidth ?
            this.calcWidth :
            parseInt(this.width, 10) || parseInt(this.hostWidth, 10) || this.calcWidth;
        if (this.hasVerticalSroll() && !this.isPercentWidth) {
            width -= this.scrollWidth;
        }
        return width - this.getPinnedWidth(takeHidden);
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype._summaries = function (fieldName, hasSummary, summaryOperand) {
        var column = this.gridAPI.get_column_by_name(fieldName);
        if (column) {
            column.hasSummary = hasSummary;
            if (summaryOperand) {
                if (this.rootSummariesEnabled) {
                    this.summaryService.retriggerRootPipe++;
                }
                column.summaries = summaryOperand;
            }
        }
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype._multipleSummaries = function (expressions, hasSummary) {
        var _this = this;
        expressions.forEach(function (element) {
            _this._summaries(element.fieldName, hasSummary, element.customSummary);
        });
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype._disableMultipleSummaries = function (expressions) {
        var _this = this;
        expressions.forEach(function (column) {
            var columnName = column && column.fieldName ? column.fieldName : column;
            _this._summaries(columnName, false);
        });
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.resolveDataTypes = function (rec) {
        if (typeof rec === 'number') {
            return DataType.Number;
        }
        else if (typeof rec === 'boolean') {
            return DataType.Boolean;
        }
        else if (typeof rec === 'object' && rec instanceof Date) {
            return DataType.Date;
        }
        return DataType.String;
    };
    IgxGridBaseDirective.prototype.getScrollWidth = function () {
        var div = document.createElement('div');
        var style = div.style;
        style.width = '100px';
        style.height = '100px';
        style.position = 'absolute';
        style.top = '-10000px';
        style.top = '-10000px';
        style.overflow = 'scroll';
        document.body.appendChild(div);
        var scrollWidth = div.offsetWidth - div.clientWidth;
        document.body.removeChild(div);
        return scrollWidth;
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.autogenerateColumns = function () {
        var _this = this;
        var data = this.gridAPI.get_data();
        var factory = this.resolver.resolveComponentFactory(IgxColumnComponent);
        var fields = this.generateDataFields(data);
        var columns = [];
        fields.forEach(function (field) {
            var ref = factory.create(_this.viewRef.injector);
            ref.instance.field = field;
            ref.instance.dataType = _this.resolveDataTypes(data[0][field]);
            ref.changeDetectorRef.detectChanges();
            columns.push(ref.instance);
        });
        this.columnList.reset(columns);
        if (data && data.length > 0) {
            this.shouldGenerate = false;
        }
    };
    IgxGridBaseDirective.prototype.generateDataFields = function (data) {
        return Object.keys(data && data.length !== 0 ? data[0] : []);
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.onlyTopLevel = function (arr) {
        return arr.filter(function (c) { return c.level === 0; });
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.initColumns = function (collection, cb) {
        var _this = this;
        if (cb === void 0) { cb = null; }
        this._columnGroups = this.columnList.some(function (col) { return col.columnGroup; });
        if (this.hasColumnLayouts) {
            // Set overall row layout size
            this.columnList.forEach(function (col) {
                if (col.columnLayout) {
                    var layoutSize = col.children ?
                        col.children.reduce(function (acc, val) { return Math.max(val.rowStart + val.gridRowSpan - 1, acc); }, 1) :
                        1;
                    _this._multiRowLayoutRowSize = Math.max(layoutSize, _this._multiRowLayoutRowSize);
                }
            });
        }
        if (this.hasColumnLayouts && this.hasColumnGroups) {
            // invalid configuration - multi-row and column groups
            // remove column groups
            var columnLayoutColumns = this.columnList.filter(function (col) { return col.columnLayout || col.columnLayoutChild; });
            this.columnList.reset(columnLayoutColumns);
        }
        this._maxLevelHeaderDepth = null;
        this._columns = this.columnList.toArray();
        collection.forEach(function (column) {
            column.defaultWidth = _this.columnWidthSetByUser ? _this._columnWidth : column.defaultWidth ? column.defaultWidth : '';
            if (cb) {
                cb(column);
            }
        });
        this.reinitPinStates();
        if (this.hasColumnLayouts) {
            collection.forEach(function (column) {
                column.populateVisibleIndexes();
            });
        }
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.reinitPinStates = function () {
        var _this = this;
        this._pinnedColumns = (this.hasColumnGroups) ? this.columnList.filter(function (c) { return c.pinned; }) :
            this.columnList.filter(function (c) { return c.pinned; }).sort(function (a, b) { return _this._pinnedColumns.indexOf(a) - _this._pinnedColumns.indexOf(b); });
        this._unpinnedColumns = this.hasColumnGroups ? this.columnList.filter(function (c) { return !c.pinned; }) :
            this.columnList.filter(function (c) { return !c.pinned; })
                .sort(function (a, b) { return _this._unpinnedColumns.indexOf(a) - _this._unpinnedColumns.indexOf(b); });
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.isColumnGrouped = function (fieldName) {
        return false;
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.onHeaderSelectorClick = function (event) {
        if (!this.isMultiRowSelectionEnabled) {
            return;
        }
        this.selectionService.areAllRowSelected() ?
            this.selectionService.clearRowSelection(event) : this.selectionService.selectAllRows(event);
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "headSelectorBaseAriaLabel", {
        /**
         * @hidden
         */
        get: function () {
            if (this._filteringExpressionsTree.filteringOperands.length > 0) {
                return this.selectionService.areAllRowSelected() ? 'Deselect all filtered' : 'Select all filtered';
            }
            return this.selectionService.areAllRowSelected() ? 'Deselect all' : 'Select all';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "totalRowsCountAfterFilter", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            if (this.data) {
                return this.selectionService.allData.length;
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "dataView", {
        /**
         * Returns the currently transformed paged/filtered/sorted/grouped data, displayed in the grid.
         * ```typescript
         *      const dataView = this.grid.dataView;
         * ```
         * @memberof IgxGridComponent
         */
        get: function () {
            return this.verticalScrollContainer.igxForOf;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get current selection state.
     * Returns an array with selected rows' IDs (primaryKey or rowData)
     * ```typescript
     * const selectedRows = this.grid.selectedRows();
     * ```
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.selectedRows = function () {
        return this.selectionService.getSelectedRows();
    };
    /**
     * Select specified rows by ID.
     * ```typescript
     * this.grid.selectRows([1,2,5], true);
     * ```
     * @param rowIDs
     * @param clearCurrentSelection if true clears the current selection
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.selectRows = function (rowIDs, clearCurrentSelection) {
        this.selectionService.selectRowsWithNoEvent(rowIDs, clearCurrentSelection);
        this.notifyChanges();
    };
    /**
     * Deselect specified rows by ID.
     * ```typescript
     * this.grid.deselectRows([1,2,5]);
     * ```
     * @param rowIDs
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.deselectRows = function (rowIDs) {
        this.selectionService.deselectRowsWithNoEvent(rowIDs);
        this.notifyChanges();
    };
    /**
     * Selects all rows
     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.
     * ```typescript
     * this.grid.selectAllRows();
     * this.grid.selectAllRows(false);
     * ```
     * @param onlyFilterData
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.selectAllRows = function (onlyFilterData) {
        var _this = this;
        if (onlyFilterData === void 0) { onlyFilterData = true; }
        var data = onlyFilterData && this.filteredData ? this.filteredData : this.gridAPI.get_all_data(true);
        var rowIDs = this.selectionService.getRowIDs(data).filter(function (rID) { return !_this.gridAPI.row_deleted_transaction(rID); });
        this.selectRows(rowIDs);
    };
    /**
     * Deselects all rows
     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.
     * ```typescript
     * this.grid.deselectAllRows();
     * ```
     * @param onlyFilterData
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.deselectAllRows = function (onlyFilterData) {
        if (onlyFilterData === void 0) { onlyFilterData = true; }
        if (onlyFilterData && this.filteredData && this.filteredData.length > 0) {
            this.deselectRows(this.selectionService.getRowIDs(this.filteredData));
        }
        else {
            this.selectionService.clearAllSelectedRows();
            this.notifyChanges();
        }
    };
    IgxGridBaseDirective.prototype.clearCellSelection = function () {
        this.selectionService.clear(true);
        this.notifyChanges();
    };
    IgxGridBaseDirective.prototype.dragScroll = function (dir) {
        var scrollDelta = 48;
        var horizontal = this.headerContainer.getScroll();
        var vertical = this.verticalScrollContainer.getScroll();
        switch (dir) {
            case DragScrollDirection.LEFT:
                horizontal.scrollLeft -= scrollDelta;
                break;
            case DragScrollDirection.RIGHT:
                horizontal.scrollLeft += scrollDelta;
                break;
            case DragScrollDirection.TOP:
                vertical.scrollTop -= scrollDelta;
                break;
            case DragScrollDirection.BOTTOM:
                vertical.scrollTop += scrollDelta;
                break;
            case DragScrollDirection.BOTTOMLEFT:
                horizontal.scrollLeft -= scrollDelta;
                vertical.scrollTop += scrollDelta;
                break;
            case DragScrollDirection.BOTTOMRIGHT:
                horizontal.scrollLeft += scrollDelta;
                vertical.scrollTop += scrollDelta;
                break;
            case DragScrollDirection.TOPLEFT:
                horizontal.scrollLeft -= scrollDelta;
                vertical.scrollTop -= scrollDelta;
                break;
            case DragScrollDirection.TOPRIGHT:
                horizontal.scrollLeft += scrollDelta;
                vertical.scrollTop -= scrollDelta;
                break;
            default:
                return;
        }
        this.wheelHandler();
    };
    IgxGridBaseDirective.prototype.isDefined = function (arg) {
        return arg !== undefined && arg !== null;
    };
    IgxGridBaseDirective.prototype.selectRange = function (arg) {
        var _this = this;
        if (!this.isDefined(arg)) {
            this.clearCellSelection();
            return;
        }
        if (arg instanceof Array) {
            arg.forEach(function (range) { return _this.setSelection(range); });
        }
        else {
            this.setSelection(arg);
        }
        this.notifyChanges();
    };
    IgxGridBaseDirective.prototype.columnToVisibleIndex = function (field) {
        var visibleColumns = this.visibleColumns;
        if (typeof field === 'number') {
            return field;
        }
        return visibleColumns.find(function (column) { return column.field === field; }).visibleIndex;
    };
    IgxGridBaseDirective.prototype.setSelection = function (range) {
        var startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };
        var endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };
        this.selectionService.pointerState.node = startNode;
        this.selectionService.selectRange(endNode, this.selectionService.pointerState);
        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);
        this.selectionService.initPointerState();
    };
    IgxGridBaseDirective.prototype.getSelectedRanges = function () {
        return this.selectionService.ranges;
    };
    IgxGridBaseDirective.prototype.extractDataFromSelection = function (source, formatters, headers) {
        var e_2, _a;
        if (formatters === void 0) { formatters = false; }
        if (headers === void 0) { headers = false; }
        var columnsArray;
        var record = {};
        var selectedData = [];
        var activeEl = this.selectionService.activeElement;
        var selectionMap = Array.from(this.selectionService.selection)
            .filter(function (tuple) { return tuple[0] < source.length; });
        if (this.cellSelection === GridSelectionMode.single && activeEl) {
            selectionMap.push([activeEl.row, new Set().add(activeEl.column)]);
        }
        var _loop_1 = function (row, set) {
            var e_3, _a;
            if (!source[row] || source[row].detailsData !== undefined) {
                return "continue";
            }
            var temp = Array.from(set);
            try {
                for (var temp_1 = (e_3 = void 0, __values(temp)), temp_1_1 = temp_1.next(); !temp_1_1.done; temp_1_1 = temp_1.next()) {
                    var each = temp_1_1.value;
                    columnsArray = this_1.getSelectableColumnsAt(each);
                    columnsArray.forEach(function (col) {
                        if (col) {
                            var key = headers ? col.header || col.field : col.field;
                            record[key] = formatters && col.formatter ? col.formatter(source[row][col.field])
                                : source[row][col.field];
                        }
                    });
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (temp_1_1 && !temp_1_1.done && (_a = temp_1.return)) _a.call(temp_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (Object.keys(record).length) {
                selectedData.push(record);
            }
            record = {};
        };
        var this_1 = this;
        try {
            for (var selectionMap_1 = __values(selectionMap), selectionMap_1_1 = selectionMap_1.next(); !selectionMap_1_1.done; selectionMap_1_1 = selectionMap_1.next()) {
                var _b = __read(selectionMap_1_1.value, 2), row = _b[0], set = _b[1];
                _loop_1(row, set);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (selectionMap_1_1 && !selectionMap_1_1.done && (_a = selectionMap_1.return)) _a.call(selectionMap_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return selectedData;
    };
    IgxGridBaseDirective.prototype.getSelectableColumnsAt = function (index) {
        if (this.hasColumnLayouts) {
            var visibleLayoutColumns = this.visibleColumns
                .filter(function (col) { return col.columnLayout; })
                .sort(function (a, b) { return a.visibleIndex - b.visibleIndex; });
            var colLayout = visibleLayoutColumns[index];
            return colLayout ? colLayout.children.toArray() : [];
        }
        else {
            var visibleColumns = this.visibleColumns
                .filter(function (col) { return !col.columnGroup; })
                .sort(function (a, b) { return a.visibleIndex - b.visibleIndex; });
            return [visibleColumns[index]];
        }
    };
    /**
     *
     * Returns an array of the current cell selection in the form of `[{ column.field: cell.value }, ...]`.
     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).
     * If `headers` is enabled, it will use the column header (if any) instead of the column field.
     */
    IgxGridBaseDirective.prototype.getSelectedData = function (formatters, headers) {
        if (formatters === void 0) { formatters = false; }
        if (headers === void 0) { headers = false; }
        var source = this.dataView;
        return this.extractDataFromSelection(source, formatters, headers);
    };
    IgxGridBaseDirective.prototype.copyHandlerIE = function () {
        if (isIE()) {
            this.copyHandler(null, true);
        }
    };
    /**
     * @hidden
     * @internal
     */
    IgxGridBaseDirective.prototype.copyHandler = function (event, ie11) {
        if (ie11 === void 0) { ie11 = false; }
        if (!this.clipboardOptions.enabled || this.crudService.inEditMode) {
            return;
        }
        var data = this.getSelectedData(this.clipboardOptions.copyFormatters, this.clipboardOptions.copyHeaders);
        var ev = { data: data, cancel: false };
        this.onGridCopy.emit(ev);
        if (ev.cancel) {
            return;
        }
        var transformer = new CharSeparatedValueData(ev.data, this.clipboardOptions.separator);
        var result = transformer.prepareData();
        if (!this.clipboardOptions.copyHeaders) {
            result = result.substring(result.indexOf('\n') + 1);
        }
        if (ie11) {
            window.clipboardData.setData('Text', result);
            return;
        }
        event.preventDefault();
        /* Necessary for the hiearachical case but will probably have to
           change how getSelectedData is propagated in the hiearachical grid
        */
        event.stopPropagation();
        event.clipboardData.setData('text/plain', result);
    };
    /**
     * This method allows you to navigate to a position
     * in the grid based on provided `rowindex` and `visibleColumnIndex`,
     * also to execute a custom logic over the target element,
     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }
     * ```typescript
     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });
     * ```
     * @memberof IgxGridBaseDirective
     */
    IgxGridBaseDirective.prototype.navigateTo = function (rowIndex, visibleColIndex, cb) {
        var _this = this;
        if (visibleColIndex === void 0) { visibleColIndex = -1; }
        if (cb === void 0) { cb = null; }
        if (rowIndex < 0 || rowIndex > this.dataView.length - 1
            || (visibleColIndex !== -1 && this.columnList.map(function (col) { return col.visibleIndex; }).indexOf(visibleColIndex) === -1)) {
            return;
        }
        this.wheelHandler();
        if (this.dataView.slice(rowIndex, rowIndex + 1).find(function (rec) { return rec.expression || rec.childGridsData; })) {
            visibleColIndex = -1;
        }
        var shouldScrollVertically = this.navigation.shouldPerformVerticalScroll(rowIndex, visibleColIndex);
        var shouldScrollHorizontally = visibleColIndex !== -1 && !this.navigation.isColumnFullyVisible(visibleColIndex);
        if (shouldScrollVertically) {
            this.navigation.performVerticalScrollToCell(rowIndex, visibleColIndex, function () { _this.navigateTo(rowIndex, visibleColIndex, cb); });
        }
        else if (shouldScrollHorizontally) {
            this.navigation.performHorizontalScrollToCell(rowIndex, visibleColIndex, false, function () { _this.navigateTo(rowIndex, visibleColIndex, cb); });
        }
        else {
            this.executeCallback(rowIndex, visibleColIndex, cb);
        }
    };
    /**
    * Returns `ICellPosition` which defines the next cell,
    * according to the current position, that match specific criteria.
    * You can pass callback function as a third parameter of `getPreviousCell` method.
    * The callback function accepts IgxColumnComponent as a param
    * ```typescript
    *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);
    * ```
    * @memberof IgxGridBaseDirective
    */
    IgxGridBaseDirective.prototype.getNextCell = function (currRowIndex, curVisibleColIndex, callback) {
        if (callback === void 0) { callback = null; }
        var columns = this.columnList.filter(function (col) { return !col.columnGroup && col.visibleIndex >= 0; });
        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {
            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
        }
        var colIndexes = callback ? columns.filter(function (col) { return callback(col); }).map(function (editCol) { return editCol.visibleIndex; }).sort(function (a, b) { return a - b; }) :
            columns.map(function (editCol) { return editCol.visibleIndex; }).sort(function (a, b) { return a - b; });
        var nextCellIndex = colIndexes.find(function (index) { return index > curVisibleColIndex; });
        if (this.dataView.slice(currRowIndex, currRowIndex + 1)
            .find(function (rec) { return !rec.expression && !rec.summaries && !rec.childGridsData; }) && nextCellIndex !== undefined) {
            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };
        }
        else {
            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {
                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
            }
            else {
                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };
            }
        }
    };
    /**
    * Returns `ICellPosition` which defines the previous cell,
    * according to the current position, that match specific criteria.
    * You can pass callback function as a third parameter of `getPreviousCell` method.
    * The callback function accepts IgxColumnComponent as a param
    * ```typescript
    *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);
    * ```
    * @memberof IgxGridBaseDirective
    */
    IgxGridBaseDirective.prototype.getPreviousCell = function (currRowIndex, curVisibleColIndex, callback) {
        if (callback === void 0) { callback = null; }
        var columns = this.columnList.filter(function (col) { return !col.columnGroup && col.visibleIndex >= 0; });
        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {
            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
        }
        var colIndexes = callback ? columns.filter(function (col) { return callback(col); }).map(function (editCol) { return editCol.visibleIndex; }).sort(function (a, b) { return b - a; }) :
            columns.map(function (editCol) { return editCol.visibleIndex; }).sort(function (a, b) { return b - a; });
        var prevCellIndex = colIndexes.find(function (index) { return index < curVisibleColIndex; });
        if (this.dataView.slice(currRowIndex, currRowIndex + 1)
            .find(function (rec) { return !rec.expression && !rec.summaries && !rec.childGridsData; }) && prevCellIndex !== undefined) {
            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };
        }
        else {
            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {
                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
            }
            else {
                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };
            }
        }
    };
    IgxGridBaseDirective.prototype.executeCallback = function (rowIndex, visibleColIndex, cb) {
        if (visibleColIndex === void 0) { visibleColIndex = -1; }
        if (cb === void 0) { cb = null; }
        if (!cb) {
            return;
        }
        var targetType, target;
        var row = this.summariesRowList.filter(function (s) { return s.index !== 0; }).concat(this.rowList.toArray()).find(function (r) { return r.index === rowIndex; });
        if (!row) {
            return;
        }
        switch (row.nativeElement.tagName.toLowerCase()) {
            case 'igx-grid-groupby-row':
                targetType = GridKeydownTargetType.groupRow;
                target = row;
                break;
            case 'igx-grid-summary-row':
                targetType = GridKeydownTargetType.summaryCell;
                target = visibleColIndex !== -1 ?
                    row.summaryCells.find(function (c) { return c.visibleColumnIndex === visibleColIndex; }) : row.summaryCells.first;
                break;
            case 'igx-child-grid-row':
                targetType = GridKeydownTargetType.hierarchicalRow;
                target = row;
                break;
            default:
                targetType = GridKeydownTargetType.dataCell;
                target = visibleColIndex !== -1 ? row.cells.find(function (c) { return c.visibleColumnIndex === visibleColIndex; }) : row.cells.first;
                break;
        }
        var args = { targetType: targetType, target: target };
        cb(args);
    };
    IgxGridBaseDirective.prototype.getPrevDataRowIndex = function (currentRowIndex) {
        if (currentRowIndex <= 0) {
            return currentRowIndex;
        }
        var prevRow = this.dataView.slice(0, currentRowIndex).reverse()
            .find(function (rec) { return !rec.expression && !rec.summaries && !rec.childGridsData; });
        return prevRow ? this.dataView.indexOf(prevRow) : currentRowIndex;
    };
    IgxGridBaseDirective.prototype.getNextDataRowIndex = function (currentRowIndex) {
        if (currentRowIndex === this.dataView.length) {
            return currentRowIndex;
        }
        var nextRow = this.dataView.slice(currentRowIndex + 1, this.dataView.length)
            .find(function (rec) { return !rec.expression && !rec.summaries && !rec.childGridsData; });
        return nextRow ? this.dataView.indexOf(nextRow) : currentRowIndex;
    };
    IgxGridBaseDirective.prototype.isValidPosition = function (rowIndex, colIndex) {
        var rows = this.summariesRowList.filter(function (s) { return s.index !== 0; }).concat(this.rowList.toArray()).length;
        var cols = this.columnList.filter(function (col) { return !col.columnGroup && col.visibleIndex >= 0; }).length;
        if (rows < 1 || cols < 1) {
            return false;
        }
        if (rowIndex > -1 && rowIndex < this.dataView.length &&
            colIndex > -1 && colIndex <= this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex) {
            return true;
        }
        return false;
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.trackColumnChanges = function (index, col) {
        return col.field + col._calcWidth;
    };
    IgxGridBaseDirective.prototype.find = function (text, increment, caseSensitive, exactMatch, scroll) {
        if (!this.rowList) {
            return 0;
        }
        this.endEdit(false);
        if (!text) {
            this.clearSearch();
            return 0;
        }
        var caseSensitiveResolved = caseSensitive ? true : false;
        var exactMatchResolved = exactMatch ? true : false;
        var rebuildCache = false;
        if (this.lastSearchInfo.searchText !== text ||
            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||
            this.lastSearchInfo.exactMatch !== exactMatchResolved) {
            this.lastSearchInfo = {
                searchText: text,
                activeMatchIndex: 0,
                caseSensitive: caseSensitiveResolved,
                exactMatch: exactMatchResolved,
                matchInfoCache: []
            };
            rebuildCache = true;
        }
        else {
            this.lastSearchInfo.activeMatchIndex += increment;
        }
        if (rebuildCache) {
            this.rowList.forEach(function (row) {
                if (row.cells) {
                    row.cells.forEach(function (c) {
                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);
                    });
                }
            });
            this.rebuildMatchCache();
        }
        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {
            this.lastSearchInfo.activeMatchIndex = 0;
        }
        else if (this.lastSearchInfo.activeMatchIndex < 0) {
            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;
        }
        if (this.lastSearchInfo.matchInfoCache.length) {
            var matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];
            this.lastSearchInfo = __assign({}, this.lastSearchInfo);
            if (scroll !== false) {
                this.scrollTo(matchInfo.row, matchInfo.column);
            }
            IgxTextHighlightDirective.setActiveHighlight(this.id, {
                column: matchInfo.column,
                row: matchInfo.row,
                index: matchInfo.index,
            });
        }
        else {
            IgxTextHighlightDirective.clearActiveHighlight(this.id);
        }
        return this.lastSearchInfo.matchInfoCache.length;
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "filteredSortedData", {
        /**
         * Returns an array containing the filtered sorted data.
         * ```typescript
         * const filteredSortedData = this.grid1.filteredSortedData;
         * ```
         * @memberof IgxGridBaseDirective
         */
        get: function () {
            return this._filteredSortedData;
        },
        set: function (value) {
            this._filteredSortedData = value;
            this.refreshSearch(true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.initPinning = function () {
        var currentPinnedWidth = 0;
        var pinnedColumns = [];
        var unpinnedColumns = [];
        this.calculateGridWidth();
        this.resetCaches();
        // When a column is a group or is inside a group, pin all related.
        this._pinnedColumns.forEach(function (col) {
            if (col.parent) {
                col.parent.pinned = true;
            }
            if (col.columnGroup) {
                col.children.forEach(function (child) { return child.pinned = true; });
            }
        });
        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.
        // We take into account top level columns (top level groups and non groups).
        // If top level is unpinned the pinning handles all children to be unpinned as well.
        for (var i = 0; i < this._columns.length; i++) {
            if (this._columns[i].pinned && !this._columns[i].parent) {
                // Pinned column. Check if with it the unpinned min width is exceeded.
                var colWidth = parseInt(this._columns[i].width, 10);
                currentPinnedWidth += colWidth;
                pinnedColumns.push(this._columns[i]);
            }
            else if (this._columns[i].pinned && this._columns[i].parent) {
                if (this._columns[i].topLevelParent.pinned) {
                    pinnedColumns.push(this._columns[i]);
                }
                else {
                    this._columns[i].pinned = false;
                    unpinnedColumns.push(this._columns[i]);
                }
            }
            else {
                unpinnedColumns.push(this._columns[i]);
            }
        }
        // Assign the applicaple collections.
        this._pinnedColumns = pinnedColumns;
        this._unpinnedColumns = unpinnedColumns;
        this.notifyChanges();
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.scrollTo = function (row, column, inCollection) {
        var _this = this;
        if (inCollection === void 0) { inCollection = this.filteredSortedData; }
        var delayScrolling = false;
        if (this.paging && typeof (row) !== 'number') {
            var rowIndex = inCollection.indexOf(row);
            var page = Math.floor(rowIndex / this.perPage);
            if (this.page !== page) {
                delayScrolling = true;
                this.page = page;
            }
        }
        if (delayScrolling) {
            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(function () {
                _this.scrollDirective(_this.verticalScrollContainer, typeof (row) === 'number' ? row : _this.dataView.indexOf(row));
            });
        }
        else {
            this.scrollDirective(this.verticalScrollContainer, typeof (row) === 'number' ? row : this.dataView.indexOf(row));
        }
        this.scrollToHorizontally(column);
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.scrollToHorizontally = function (column) {
        var columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;
        var scrollRow = this.rowList.find(function (r) { return r.virtDirRow; });
        var virtDir = scrollRow ? scrollRow.virtDirRow : null;
        if (this.pinnedColumns.length) {
            if (columnIndex >= this.pinnedColumns.length) {
                columnIndex -= this.pinnedColumns.length;
                this.scrollDirective(virtDir, columnIndex);
            }
        }
        else {
            this.scrollDirective(virtDir, columnIndex);
        }
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.scrollDirective = function (directive, goal) {
        if (!directive) {
            return;
        }
        directive.scrollTo(goal);
    };
    IgxGridBaseDirective.prototype.rebuildMatchCache = function () {
        var _this = this;
        this.lastSearchInfo.matchInfoCache = [];
        var caseSensitive = this.lastSearchInfo.caseSensitive;
        var exactMatch = this.lastSearchInfo.exactMatch;
        var searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();
        var data = this.filteredSortedData;
        var columnItems = this.visibleColumns.filter(function (c) { return !c.columnGroup; }).sort(function (c1, c2) { return c1.visibleIndex - c2.visibleIndex; });
        var numberPipe = new IgxDecimalPipeComponent(this.locale);
        var datePipe = new IgxDatePipeComponent(this.locale);
        data.forEach(function (dataRow) {
            columnItems.forEach(function (c) {
                var value = c.formatter ? c.formatter(dataRow[c.field]) :
                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], _this.locale) :
                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], _this.locale)
                            : dataRow[c.field];
                if (value !== undefined && value !== null && c.searchable) {
                    var searchValue = caseSensitive ? String(value) : String(value).toLowerCase();
                    if (exactMatch) {
                        if (searchValue === searchText) {
                            _this.lastSearchInfo.matchInfoCache.push({
                                row: dataRow,
                                column: c.field,
                                index: 0,
                            });
                        }
                    }
                    else {
                        var occurenceIndex = 0;
                        var searchIndex = searchValue.indexOf(searchText);
                        while (searchIndex !== -1) {
                            _this.lastSearchInfo.matchInfoCache.push({
                                row: dataRow,
                                column: c.field,
                                index: occurenceIndex++,
                            });
                            searchValue = searchValue.substring(searchIndex + searchText.length);
                            searchIndex = searchValue.indexOf(searchText);
                        }
                    }
                }
            });
        });
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.isExpandedGroup = function (_group) {
        return undefined;
    };
    IgxGridBaseDirective.prototype.changeRowEditingOverlayStateOnScroll = function (row) {
        if (!this.rowEditable || !this.rowEditingOverlay || this.rowEditingOverlay.collapsed) {
            return;
        }
        if (!row) {
            this.toggleRowEditingOverlay(false);
        }
        else {
            this.repositionRowEditingOverlay(row);
        }
    };
    /**
     * Should be called when data and/or isLoading input changes so that the overlay can be
     * hidden/shown based on the current value of shouldOverlayLoading
     */
    IgxGridBaseDirective.prototype.evaluateLoadingState = function () {
        if (this.shouldOverlayLoading) {
            // a new overlay should be shown
            var overlaySettings = {
                outlet: this.loadingOutlet,
                closeOnOutsideClick: false,
                positionStrategy: new ContainerPositionStrategy()
            };
            if (!this._loadingId) {
                this._loadingId = this.overlayService.attach(this.loadingOverlay, overlaySettings);
                this.overlayService.show(this._loadingId, overlaySettings);
            }
        }
        else {
            if (this._loadingId) {
                this.overlayService.hide(this._loadingId);
                this._loadingId = null;
            }
        }
    };
    IgxGridBaseDirective.prototype.openRowOverlay = function (id) {
        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);
        this.rowEditingOverlay.open(this.rowEditSettings);
        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;
        this.rowEditingOverlay.element.addEventListener('wheel', this.rowEditingWheelHandler);
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.closeRowEditingOverlay = function () {
        this.rowEditingOverlay.element.removeEventListener('wheel', this.rowEditingWheelHandler);
        this.rowEditPositioningStrategy.isTopInitialPosition = null;
        this.rowEditingOverlay.close();
        this.rowEditingOverlay.element.parentElement.style.display = '';
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.toggleRowEditingOverlay = function (show) {
        var rowStyle = this.rowEditingOverlay.element.style;
        if (show) {
            rowStyle.display = 'block';
        }
        else {
            rowStyle.display = 'none';
        }
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.repositionRowEditingOverlay = function (row) {
        if (row && !this.rowEditingOverlay.collapsed) {
            var rowStyle = this.rowEditingOverlay.element.parentElement.style;
            if (row) {
                rowStyle.display = '';
                this.configureRowEditingOverlay(row.rowID);
                this.rowEditingOverlay.reposition();
            }
            else {
                rowStyle.display = 'none';
            }
        }
    };
    IgxGridBaseDirective.prototype.configureRowEditingOverlay = function (rowID, useOuter) {
        if (useOuter === void 0) { useOuter = false; }
        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;
        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;
        var targetRow = this.gridAPI.get_row_by_key(rowID);
        if (!targetRow) {
            return;
        }
        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;
        this.toggleRowEditingOverlay(true);
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "rowChangesCount", {
        /**
         * @hidden
         */
        get: function () {
            if (!this.crudService.row) {
                return 0;
            }
            var rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);
            return rowChanges ? Object.keys(rowChanges).length : 0;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridBaseDirective.prototype.writeToData = function (rowIndex, value) {
        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);
    };
    IgxGridBaseDirective.prototype.endRowTransaction = function (commit, row) {
        row.newData = this.transactions.getAggregatedValue(row.id, true);
        var args = row.createEditEventArgs();
        if (!commit) {
            this.onRowEditCancel.emit(args);
            this.transactions.endPending(false);
        }
        else {
            args = this.gridAPI.update_row(row, row.newData);
        }
        if (args.cancel) {
            this.transactions.startPending();
            return;
        }
        this.crudService.endRowEdit();
        this.closeRowEditingOverlay();
    };
    /**
    * @hidden
    */
    IgxGridBaseDirective.prototype.gridOutletKeyboardHandler = function (event) {
        // TODO: This should be removed after grid keyboard refactoring
        // call stopPropagation for keydown event for the outlet not to propagate event to the grid
        event.stopPropagation();
    };
    // TODO: Refactor
    /**
     * Finishes the row transactions on the current row.
     * If `commit === true`, passes them from the pending state to the data (or transaction service)
     *
     * Binding to the event
     * ```html
     * <button igxButton (click)="grid.endEdit(true)">Commit Row</button>
     * ```
     * @param commit
     */
    IgxGridBaseDirective.prototype.endEdit = function (commit, event) {
        if (commit === void 0) { commit = true; }
        var row = this.crudService.row;
        var cell = this.crudService.cell;
        // TODO: Merge the crudService with wht BaseAPI service
        if (!row && !cell) {
            return;
        }
        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();
        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {
            return;
        }
        this.endRowTransaction(commit, row);
        var activeCell = this.selectionService.activeElement;
        if (event && activeCell) {
            var rowIndex = activeCell.row;
            var visibleColIndex = activeCell.layout ? activeCell.layout.columnVisibleIndex : activeCell.column;
            this.navigateTo(rowIndex, visibleColIndex, function (c) {
                if (c.targetType === GridKeydownTargetType.dataCell && c.target) {
                    c.target.nativeElement.focus();
                }
            });
        }
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "dataWithAddedInTransactionRows", {
        /**
         * @hidden
         */
        get: function () {
            var result = cloneArray(this.gridAPI.get_all_data());
            if (this.transactions.enabled) {
                result.push.apply(result, __spread(this.transactions.getAggregatedChanges(true)
                    .filter(function (t) { return t.type === TransactionType.ADD; })
                    .map(function (t) { return t.newValue; })));
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "dataLength", {
        get: function () {
            return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridBaseDirective.prototype.hasHorizontalScroll = function () {
        return this.totalWidth - this.unpinnedWidth > 0;
    };
    IgxGridBaseDirective.prototype._restoreVirtState = function (row) {
        // check virtualization state of data record added from cache
        // in case state is no longer valid - update it.
        var rowForOf = row.virtDirRow;
        var gridScrLeft = rowForOf.getScroll().scrollLeft;
        var left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);
        var actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);
        if (gridScrLeft !== actualScrollLeft) {
            rowForOf.onHScroll(gridScrLeft);
            rowForOf.cdr.detectChanges();
        }
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.getExportExcel = function () {
        return this._exportExcel;
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.getExportCsv = function () {
        return this._exportCsv;
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "shouldOverlayLoading", {
        /**
         * @hidden
         */
        get: function () {
            return this.isLoading && this.data && this.data.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
    * @hidden
    */
    IgxGridBaseDirective.prototype.isSummaryRow = function (rowData) {
        return rowData.summaries && (rowData.summaries instanceof Map);
    };
    Object.defineProperty(IgxGridBaseDirective.prototype, "isMultiRowSelectionEnabled", {
        /** @hidden */
        get: function () {
            return this.rowSelection === GridSelectionMode.multiple;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "isRowSelectable", {
        /** @hidden */
        get: function () {
            return this.rowSelection !== GridSelectionMode.none;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseDirective.prototype, "isCellSelectable", {
        /** @hidden */
        get: function () {
            return this.cellSelection !== GridSelectionMode.none;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridBaseDirective.prototype.viewDetachHandler = function (args) {
        var context = args.view.context;
        if (context['templateID'] === 'dataRow') {
            // some browsers (like FireFox and Edge) do not trigger onBlur when the focused element is detached from DOM
            // hence we need to trigger it manually when cell is detached.
            var row = this.getRowByIndex(context.index);
            var focusedCell = row && row.cells ? row.cells.find(function (x) { return x.focused; }) : false;
            if (focusedCell) {
                focusedCell.onBlur();
            }
        }
    };
    /**
     * @hidden
     */
    IgxGridBaseDirective.prototype.cachedViewLoaded = function (args) {
        var _this = this;
        if (this.hasHorizontalScroll()) {
            var tmplId_1 = args.context.templateID;
            var index_1 = args.context.index;
            args.view.detectChanges();
            this.zone.onStable.pipe(first()).subscribe(function () {
                var row = tmplId_1 === 'dataRow' ? _this.getRowByIndex(index_1) : null;
                var summaryRow = tmplId_1 === 'summaryRow' ? _this.summariesRowList.find(function (sr) { return sr.dataRowIndex === index_1; }) : null;
                if (row && row instanceof IgxRowDirective) {
                    _this._restoreVirtState(row);
                }
                else if (summaryRow) {
                    _this._restoreVirtState(summaryRow);
                }
            });
        }
    };
    /**
     * Opens the advanced filtering dialog.
     */
    IgxGridBaseDirective.prototype.openAdvancedFilteringDialog = function () {
        if (!this._advancedFilteringOverlayId) {
            this._advancedFilteringOverlaySettings.positionStrategy.settings.target =
                this.rootGrid ? this.rootGrid.nativeElement : this.nativeElement;
            this._advancedFilteringOverlaySettings.outlet = this.outletDirective;
            this._advancedFilteringOverlayId = this.overlayService.attach(IgxAdvancedFilteringDialogComponent, this._advancedFilteringOverlaySettings, {
                injector: this.viewRef.injector,
                componentFactoryResolver: this.resolver
            });
            this.overlayService.show(this._advancedFilteringOverlayId, this._advancedFilteringOverlaySettings);
        }
    };
    /**
     * Closes the advanced filtering dialog.
     * @param applyChanges indicates whether the changes should be applied
     */
    IgxGridBaseDirective.prototype.closeAdvancedFilteringDialog = function (applyChanges) {
        if (this._advancedFilteringOverlayId) {
            var advancedFilteringOverlay = this.overlayService.getOverlayById(this._advancedFilteringOverlayId);
            var advancedFilteringDialog = advancedFilteringOverlay.componentRef.instance;
            if (applyChanges) {
                advancedFilteringDialog.applyChanges();
            }
            advancedFilteringDialog.closeDialog();
        }
    };
    IgxGridBaseDirective.ctorParameters = function () { return [
        { type: IgxGridSelectionService },
        { type: IgxGridCRUDService },
        { type: IgxColumnResizingService },
        { type: GridBaseAPIService },
        { type: undefined, decorators: [{ type: Inject, args: [IgxGridTransaction,] }] },
        { type: ElementRef },
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: IterableDiffers },
        { type: ViewContainerRef },
        { type: IgxGridNavigationService },
        { type: IgxFilteringService },
        { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
        { type: IgxGridSummaryService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    __decorate([
        ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })
    ], IgxGridBaseDirective.prototype, "defaultExpandedTemplate", void 0);
    __decorate([
        ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })
    ], IgxGridBaseDirective.prototype, "defaultCollapsedTemplate", void 0);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "resourceStrings", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "autoGenerate", void 0);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "emptyGridTemplate", void 0);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "loadingGridTemplate", void 0);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "filteringLogic", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "filteringExpressionsTree", null);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "filteringExpressionsTreeChange", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "advancedFilteringExpressionsTreeChange", void 0);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "advancedFilteringExpressionsTree", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "locale", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "paging", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "page", null);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "pageChange", void 0);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "perPage", null);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "perPageChange", void 0);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "paginationTemplate", void 0);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "columnHiding", null);
    __decorate([
        DeprecateProperty('rowSelectable property is deprecated. Use rowSelection property instead.'),
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "rowSelectable", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "hideRowSelectors", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "rowDraggable", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "rowEditable", null);
    __decorate([
        WatchChanges(),
        HostBinding('style.height'),
        Input()
    ], IgxGridBaseDirective.prototype, "height", null);
    __decorate([
        HostBinding('style.width')
    ], IgxGridBaseDirective.prototype, "hostWidth", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "width", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "evenRowCSS", void 0);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "oddRowCSS", void 0);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "rowHeight", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "columnWidth", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "primaryKey", void 0);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "emptyGridMessage", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "isLoading", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "emptyFilteredGridMessage", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "columnHidingTitle", void 0);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "columnPinning", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "columnPinningTitle", void 0);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "allowFiltering", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "allowAdvancedFiltering", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "filterMode", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "summaryPosition", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "summaryCalculationMode", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "filterStrategy", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "sortStrategy", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "uniqueColumnValuesStrategy", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onCellClick", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onSelection", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onRowSelectionChange", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onColumnPinning", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onCellEditCancel", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onCellEditEnter", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onCellEdit", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onRowEditEnter", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onRowEdit", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onRowEditCancel", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onColumnInit", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onSortingDone", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onFilteringDone", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onPagingDone", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onRowAdded", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onRowDeleted", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onDataPreLoad", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onColumnResized", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onContextMenu", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onDoubleClick", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onColumnVisibilityChanged", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onColumnMovingStart", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onColumnMoving", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onColumnMovingEnd", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onGridKeydown", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onRowDragStart", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onRowDragEnd", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onGridCopy", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "expansionStatesChange", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onRowToggle", void 0);
    __decorate([
        ViewChild(IgxGridColumnResizerComponent)
    ], IgxGridBaseDirective.prototype, "resizeLine", void 0);
    __decorate([
        ViewChild('loadingOverlay', { static: true })
    ], IgxGridBaseDirective.prototype, "loadingOverlay", void 0);
    __decorate([
        ViewChild('igxLoadingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })
    ], IgxGridBaseDirective.prototype, "loadingOutlet", void 0);
    __decorate([
        ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })
    ], IgxGridBaseDirective.prototype, "columnList", void 0);
    __decorate([
        ContentChild(IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective })
    ], IgxGridBaseDirective.prototype, "excelStyleSortingTemplateDirective", void 0);
    __decorate([
        ContentChild(IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective })
    ], IgxGridBaseDirective.prototype, "excelStyleMovingTemplateDirective", void 0);
    __decorate([
        ContentChild(IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective })
    ], IgxGridBaseDirective.prototype, "excelStyleHidingTemplateDirective", void 0);
    __decorate([
        ContentChild(IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective })
    ], IgxGridBaseDirective.prototype, "excelStylePinningTemplateDirective", void 0);
    __decorate([
        ContentChild(IgxExcelStyleLoadingValuesTemplateDirective, { read: IgxExcelStyleLoadingValuesTemplateDirective, static: true })
    ], IgxGridBaseDirective.prototype, "excelStyleLoadingValuesTemplateDirective", void 0);
    __decorate([
        ViewChildren(IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent })
    ], IgxGridBaseDirective.prototype, "headerGroups", void 0);
    __decorate([
        ViewChildren('row')
    ], IgxGridBaseDirective.prototype, "_rowList", void 0);
    __decorate([
        ViewChildren('summaryRow', { read: IgxSummaryRowComponent })
    ], IgxGridBaseDirective.prototype, "_summaryRowList", void 0);
    __decorate([
        ViewChildren(IgxRowDirective, { read: IgxRowDirective })
    ], IgxGridBaseDirective.prototype, "_dataRowList", void 0);
    __decorate([
        ViewChild('emptyFilteredGrid', { read: TemplateRef, static: true })
    ], IgxGridBaseDirective.prototype, "emptyFilteredGridTemplate", void 0);
    __decorate([
        ViewChild('defaultEmptyGrid', { read: TemplateRef, static: true })
    ], IgxGridBaseDirective.prototype, "emptyGridDefaultTemplate", void 0);
    __decorate([
        ViewChild('defaultLoadingGrid', { read: TemplateRef, static: true })
    ], IgxGridBaseDirective.prototype, "loadingGridDefaultTemplate", void 0);
    __decorate([
        ViewChild('scrollContainer', { read: IgxGridForOfDirective, static: true })
    ], IgxGridBaseDirective.prototype, "parentVirtDir", void 0);
    __decorate([
        ContentChildren(IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false })
    ], IgxGridBaseDirective.prototype, "toolbarCustomContentTemplates", void 0);
    __decorate([
        ContentChildren(IgxHeadSelectorDirective, { read: IgxHeadSelectorDirective, descendants: false })
    ], IgxGridBaseDirective.prototype, "headSelectorsTemplates", void 0);
    __decorate([
        ContentChildren(IgxRowSelectorDirective, { read: IgxRowSelectorDirective, descendants: false })
    ], IgxGridBaseDirective.prototype, "rowSelectorsTemplates", void 0);
    __decorate([
        ContentChildren(IgxRowDragGhostDirective, { read: TemplateRef, descendants: false })
    ], IgxGridBaseDirective.prototype, "dragGhostCustomTemplates", void 0);
    __decorate([
        ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective, static: true })
    ], IgxGridBaseDirective.prototype, "verticalScrollContainer", void 0);
    __decorate([
        ViewChild('verticalScrollHolder', { read: IgxGridForOfDirective, static: true })
    ], IgxGridBaseDirective.prototype, "verticalScroll", void 0);
    __decorate([
        ViewChild('scr', { read: ElementRef, static: true })
    ], IgxGridBaseDirective.prototype, "scr", void 0);
    __decorate([
        ViewChild('footer', { read: ElementRef })
    ], IgxGridBaseDirective.prototype, "footer", void 0);
    __decorate([
        ViewChild('hContainer', { read: IgxGridForOfDirective, static: true })
    ], IgxGridBaseDirective.prototype, "headerContainer", void 0);
    __decorate([
        ViewChild('headerSelectorContainer')
    ], IgxGridBaseDirective.prototype, "headerSelectorContainer", void 0);
    __decorate([
        ViewChild('headerDragContainer')
    ], IgxGridBaseDirective.prototype, "headerDragContainer", void 0);
    __decorate([
        ViewChild('headerGroupContainer')
    ], IgxGridBaseDirective.prototype, "headerGroupContainer", void 0);
    __decorate([
        ViewChild('filteringRow', { read: IgxGridFilteringRowComponent })
    ], IgxGridBaseDirective.prototype, "filteringRow", void 0);
    __decorate([
        ViewChild('theadRow', { static: true })
    ], IgxGridBaseDirective.prototype, "theadRow", void 0);
    __decorate([
        ViewChild('tbody', { static: true })
    ], IgxGridBaseDirective.prototype, "tbody", void 0);
    __decorate([
        ViewChild('tfoot', { static: true })
    ], IgxGridBaseDirective.prototype, "tfoot", void 0);
    __decorate([
        ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })
    ], IgxGridBaseDirective.prototype, "_outletDirective", void 0);
    __decorate([
        ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })
    ], IgxGridBaseDirective.prototype, "rowEditingOutletDirective", void 0);
    __decorate([
        ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })
    ], IgxGridBaseDirective.prototype, "tmpOutlets", void 0);
    __decorate([
        ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })
    ], IgxGridBaseDirective.prototype, "dragIndicatorIconBase", void 0);
    __decorate([
        ViewChild('defaultRowEditTemplate', { read: TemplateRef, static: true })
    ], IgxGridBaseDirective.prototype, "defaultRowEditTemplate", void 0);
    __decorate([
        ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef })
    ], IgxGridBaseDirective.prototype, "rowEditCustom", void 0);
    __decorate([
        ContentChild(IgxRowEditTextDirective, { read: TemplateRef })
    ], IgxGridBaseDirective.prototype, "rowEditText", void 0);
    __decorate([
        ContentChild(IgxRowEditActionsDirective, { read: TemplateRef })
    ], IgxGridBaseDirective.prototype, "rowEditActions", void 0);
    __decorate([
        ContentChild(IgxRowExpandedIndicatorDirective, { read: TemplateRef })
    ], IgxGridBaseDirective.prototype, "rowExpandedIndicatorTemplate", void 0);
    __decorate([
        ContentChild(IgxRowCollapsedIndicatorDirective, { read: TemplateRef })
    ], IgxGridBaseDirective.prototype, "rowCollapsedIndicatorTemplate", void 0);
    __decorate([
        ContentChild(IgxHeaderExpandIndicatorDirective, { read: TemplateRef })
    ], IgxGridBaseDirective.prototype, "headerExpandIndicatorTemplate", void 0);
    __decorate([
        ContentChild(IgxHeaderCollapseIndicatorDirective, { read: TemplateRef })
    ], IgxGridBaseDirective.prototype, "headerCollapseIndicatorTemplate", void 0);
    __decorate([
        ContentChildren(IgxDragIndicatorIconDirective, { read: TemplateRef, descendants: false })
    ], IgxGridBaseDirective.prototype, "dragIndicatorIconTemplates", void 0);
    __decorate([
        ViewChildren(IgxRowEditTabStopDirective)
    ], IgxGridBaseDirective.prototype, "rowEditTabsDEFAULT", void 0);
    __decorate([
        ContentChildren(IgxRowEditTabStopDirective)
    ], IgxGridBaseDirective.prototype, "rowEditTabsCUSTOM", void 0);
    __decorate([
        ViewChild(IgxToggleDirective)
    ], IgxGridBaseDirective.prototype, "rowEditingOverlay", void 0);
    __decorate([
        HostBinding('attr.tabindex')
    ], IgxGridBaseDirective.prototype, "tabindex", void 0);
    __decorate([
        HostBinding('attr.class')
    ], IgxGridBaseDirective.prototype, "hostClass", null);
    __decorate([
        HostBinding('attr.role')
    ], IgxGridBaseDirective.prototype, "hostRole", void 0);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "sortingExpressions", null);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "sortingExpressionsChange", void 0);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "hiddenColumnsText", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "pinnedColumnsText", null);
    __decorate([
        ViewChild('toolbar', { read: IgxGridToolbarComponent })
    ], IgxGridBaseDirective.prototype, "toolbar", void 0);
    __decorate([
        ViewChild('toolbar', { read: ElementRef })
    ], IgxGridBaseDirective.prototype, "toolbarHtml", void 0);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "showToolbar", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "toolbarTitle", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "exportExcel", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "exportCsv", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "exportText", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "exportExcelText", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "exportCsvText", null);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "clipboardOptions", void 0);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "cellSelection", null);
    __decorate([
        WatchChanges(),
        Input()
    ], IgxGridBaseDirective.prototype, "rowSelection", null);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onToolbarExporting", void 0);
    __decorate([
        Output()
    ], IgxGridBaseDirective.prototype, "onRangeSelection", void 0);
    __decorate([
        Input()
    ], IgxGridBaseDirective.prototype, "expansionStates", null);
    IgxGridBaseDirective = __decorate([
        Directive({
            selector: '[igxGridBaseComponent]'
        }),
        __param(4, Inject(IgxGridTransaction)),
        __param(7, Inject(DOCUMENT)),
        __param(14, Inject(IgxOverlayService)),
        __param(16, Optional()), __param(16, Inject(DisplayDensityToken))
    ], IgxGridBaseDirective);
    return IgxGridBaseDirective;
}(DisplayDensityBase));
export { IgxGridBaseDirective };
//# sourceMappingURL=data:application/json;base64,
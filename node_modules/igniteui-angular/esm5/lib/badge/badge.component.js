import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { Component, HostBinding, Input, NgModule } from '@angular/core';
import { IgxIconModule } from '../icon/index';
var NEXT_ID = 0;
export var IgxBadgeType;
(function (IgxBadgeType) {
    IgxBadgeType["PRIMARY"] = "primary";
    IgxBadgeType["INFO"] = "info";
    IgxBadgeType["SUCCESS"] = "success";
    IgxBadgeType["WARNING"] = "warning";
    IgxBadgeType["ERROR"] = "error";
})(IgxBadgeType || (IgxBadgeType = {}));
/**
 * **Ignite UI for Angular Badge** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)
 *
 * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the
 * application when visual notification is needed. They are usually designed as icons with a predefined
 * style to communicate information, success, warnings, or errors.
 *
 * Example:
 * ```html
 * <igx-avatar icon="person" roundShape="true" size="small">
 *   <igx-badge icon="check" type="success" class="badge-style">
 *   </igx-badge>
 * </igx-avatar>
 * ```
 * The `badge-style` class is used to position the badge:
 * ```css
 * .badge-style {
 *   position: absolute;
 *   bottom: -6px;
 *   right:-50px;
 * }
 * ```
 */
var IgxBadgeComponent = /** @class */ (function () {
    function IgxBadgeComponent() {
        /**
        * An @Input property that sets the value of the `id` attribute.
        * ```html
        *<igx-badge id="igx-badge-2" icon="check" type="success" class="badge-style"></igx-badge>
        * ```
        */
        this.id = "igx-badge-" + NEXT_ID++;
        /**
        * An @Input property controlling the type of the badge.
        * Allowed values are `primary`, `info`, `success`, `warning`, `error`.
        * Providing an invalid value won't display a badge.
        * ```html
        *<igx-badge type="success" icon="check" class="badge-style"></igx-badge>
        * ```
        */
        this.type = IgxBadgeType.PRIMARY;
        /**
        * An @Input property that sets the value to be displayed inside the badge.
        * If an `icon` property is already set the `icon` will be displayed.
        * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.
        * ```html
        *<igx-badge value="11" type="success" class="badge-style"></igx-badge>
        * ```
        */
        this.value = '';
        /**
         * This allows you to set value to role attribute.
         *```html
         *@ViewChild("MyBadge", { read: IgxBadgeComponent })
         *public badge: IgxBadgeComponent;
         * //...
         *badge.label = "badge-status";
         * ```
         */
        this.role = 'status';
        /**
         * This allows you to disable igx-badge class. The default it's applied.
         *```html
         *@ViewChild("MyBadge", { read: IgxBadgeComponent })
         *public badge: IgxBadgeComponent;
         * //...
         *badge.cssClass = false;
         * ```
         */
        this.cssClass = 'igx-badge';
        /**
         * This allows you to set value to aria-label attribute.
         *```html
         *@ViewChild("MyBadge", { read: IgxBadgeComponent })
         *public badge: IgxBadgeComponent;
         * //...
         *badge.label = "icon-badge";
         * ```
         */
        this.label = 'badge';
    }
    Object.defineProperty(IgxBadgeComponent.prototype, "roleDescription", {
        /**
         * @hidden
         * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.
         */
        get: function () {
            var message;
            // tslint:disable-next-line:prefer-conditional-expression
            if (this.icon) {
                message = this.type + ' type badge with icon type ' + this.icon;
            }
            else if (this.value) {
                message = this.type + ' badge type with value ' + this.value;
            }
            else {
                message = this.type + ' badge type without value';
            }
            return message;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Method which makes the name of the class more descriptive.
     * This helps the styling of the badges.
     */
    IgxBadgeComponent.prototype.setClasses = function () {
        var _a, _b, _c, _d, _e;
        var classes = {};
        switch (IgxBadgeType[this.type.toUpperCase()]) {
            case IgxBadgeType.INFO:
                classes = (_a = {},
                    _a[this.cssClass + "__circle--info"] = true,
                    _a);
                break;
            case IgxBadgeType.SUCCESS:
                classes = (_b = {},
                    _b[this.cssClass + "__circle--success"] = true,
                    _b);
                break;
            case IgxBadgeType.WARNING:
                classes = (_c = {},
                    _c[this.cssClass + "__circle--warning"] = true,
                    _c);
                break;
            case IgxBadgeType.ERROR:
                classes = (_d = {},
                    _d[this.cssClass + "__circle--error"] = true,
                    _d);
                break;
            default:
                classes = (_e = {},
                    _e[this.cssClass + "__circle--default"] = true,
                    _e);
        }
        return classes;
    };
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxBadgeComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxBadgeComponent.prototype, "type", void 0);
    __decorate([
        Input()
    ], IgxBadgeComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], IgxBadgeComponent.prototype, "icon", void 0);
    __decorate([
        HostBinding('attr.role')
    ], IgxBadgeComponent.prototype, "role", void 0);
    __decorate([
        HostBinding('class.igx-badge')
    ], IgxBadgeComponent.prototype, "cssClass", void 0);
    __decorate([
        HostBinding('attr.aria-label')
    ], IgxBadgeComponent.prototype, "label", void 0);
    IgxBadgeComponent = __decorate([
        Component({
            selector: 'igx-badge',
            template: "<div class=\"igx-badge__circle\" [ngClass]=\"setClasses()\" [attr.aria-roledescription]=\"roleDescription\">\n    <span *ngIf=\"!icon\" class=\"igx-badge__circle-value\">{{value}}</span>\n    <igx-icon *ngIf=\"icon\" fontSet=\"material\">{{icon}}</igx-icon>\n</div>\n"
        })
    ], IgxBadgeComponent);
    return IgxBadgeComponent;
}());
export { IgxBadgeComponent };
/**
 * @hidden
 */
var IgxBadgeModule = /** @class */ (function () {
    function IgxBadgeModule() {
    }
    IgxBadgeModule = __decorate([
        NgModule({
            declarations: [IgxBadgeComponent],
            exports: [IgxBadgeComponent],
            imports: [CommonModule, IgxIconModule]
        })
    ], IgxBadgeModule);
    return IgxBadgeModule;
}());
export { IgxBadgeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9iYWRnZS9iYWRnZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBRWhCLE1BQU0sQ0FBTixJQUFZLFlBTVg7QUFORCxXQUFZLFlBQVk7SUFDcEIsbUNBQW1CLENBQUE7SUFDbkIsNkJBQWEsQ0FBQTtJQUNiLG1DQUFtQixDQUFBO0lBQ25CLG1DQUFtQixDQUFBO0lBQ25CLCtCQUFlLENBQUE7QUFDbkIsQ0FBQyxFQU5XLFlBQVksS0FBWixZQUFZLFFBTXZCO0FBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBdUJHO0FBS0g7SUFBQTtRQUVJOzs7OztVQUtFO1FBR0ssT0FBRSxHQUFHLGVBQWEsT0FBTyxFQUFJLENBQUM7UUFFckM7Ozs7Ozs7VUFPRTtRQUVLLFNBQUksR0FBMEIsWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUUxRDs7Ozs7OztVQU9FO1FBRUssVUFBSyxHQUFHLEVBQUUsQ0FBQztRQWNsQjs7Ozs7Ozs7V0FRRztRQUVJLFNBQUksR0FBRyxRQUFRLENBQUM7UUFFdkI7Ozs7Ozs7O1dBUUc7UUFFSSxhQUFRLEdBQUcsV0FBVyxDQUFDO1FBRTlCOzs7Ozs7OztXQVFHO1FBRUksVUFBSyxHQUFHLE9BQU8sQ0FBQztJQTJEM0IsQ0FBQztJQXJERyxzQkFBSSw4Q0FBZTtRQUpuQjs7O1dBR0c7YUFDSDtZQUNJLElBQUksT0FBZSxDQUFDO1lBRXBCLHlEQUF5RDtZQUN6RCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1gsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsNkJBQTZCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQzthQUNuRTtpQkFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ25CLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHlCQUF5QixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDaEU7aUJBQU07Z0JBQ0gsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMkJBQTJCLENBQUM7YUFDckQ7WUFFRCxPQUFPLE9BQU8sQ0FBQztRQUNuQixDQUFDOzs7T0FBQTtJQUVEOzs7O09BSUc7SUFDSSxzQ0FBVSxHQUFqQjs7UUFDSSxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFFakIsUUFBUSxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFO1lBQzNDLEtBQUssWUFBWSxDQUFDLElBQUk7Z0JBQ2xCLE9BQU87b0JBQ0gsR0FBSSxJQUFJLENBQUMsUUFBUSxtQkFBZ0IsSUFBRyxJQUFJO3VCQUMzQyxDQUFDO2dCQUNGLE1BQU07WUFDVixLQUFLLFlBQVksQ0FBQyxPQUFPO2dCQUNyQixPQUFPO29CQUNILEdBQUksSUFBSSxDQUFDLFFBQVEsc0JBQW1CLElBQUcsSUFBSTt1QkFDOUMsQ0FBQztnQkFDRixNQUFNO1lBQ1YsS0FBSyxZQUFZLENBQUMsT0FBTztnQkFDckIsT0FBTztvQkFDSCxHQUFJLElBQUksQ0FBQyxRQUFRLHNCQUFtQixJQUFHLElBQUk7dUJBQzlDLENBQUM7Z0JBQ0YsTUFBTTtZQUNWLEtBQUssWUFBWSxDQUFDLEtBQUs7Z0JBQ25CLE9BQU87b0JBQ0gsR0FBSSxJQUFJLENBQUMsUUFBUSxvQkFBaUIsSUFBRyxJQUFJO3VCQUM1QyxDQUFDO2dCQUNGLE1BQU07WUFDVjtnQkFDSSxPQUFPO29CQUNILEdBQUksSUFBSSxDQUFDLFFBQVEsc0JBQW1CLElBQUcsSUFBSTt1QkFDOUMsQ0FBQztTQUNUO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQS9IRDtRQUZDLFdBQVcsQ0FBQyxTQUFTLENBQUM7UUFDdEIsS0FBSyxFQUFFO2lEQUM2QjtJQVdyQztRQURDLEtBQUssRUFBRTttREFDa0Q7SUFXMUQ7UUFEQyxLQUFLLEVBQUU7b0RBQ1U7SUFZbEI7UUFEQyxLQUFLLEVBQUU7bURBQ1k7SUFZcEI7UUFEQyxXQUFXLENBQUMsV0FBVyxDQUFDO21EQUNGO0lBWXZCO1FBREMsV0FBVyxDQUFDLGlCQUFpQixDQUFDO3VEQUNEO0lBWTlCO1FBREMsV0FBVyxDQUFDLGlCQUFpQixDQUFDO29EQUNSO0lBaEZkLGlCQUFpQjtRQUo3QixTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsV0FBVztZQUNyQix1UkFBbUM7U0FDdEMsQ0FBQztPQUNXLGlCQUFpQixDQTJJN0I7SUFBRCx3QkFBQztDQUFBLEFBM0lELElBMklDO1NBM0lZLGlCQUFpQjtBQTZJOUI7O0dBRUc7QUFNSDtJQUFBO0lBQThCLENBQUM7SUFBbEIsY0FBYztRQUwxQixRQUFRLENBQUM7WUFDTixZQUFZLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztZQUNqQyxPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztZQUM1QixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDO1NBQ3pDLENBQUM7T0FDVyxjQUFjLENBQUk7SUFBRCxxQkFBQztDQUFBLEFBQS9CLElBQStCO1NBQWxCLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9pbmRleCc7XG5cbmxldCBORVhUX0lEID0gMDtcblxuZXhwb3J0IGVudW0gSWd4QmFkZ2VUeXBlIHtcbiAgICBQUklNQVJZID0gJ3ByaW1hcnknLFxuICAgIElORk8gPSAnaW5mbycsXG4gICAgU1VDQ0VTUyA9ICdzdWNjZXNzJyxcbiAgICBXQVJOSU5HID0gJ3dhcm5pbmcnLFxuICAgIEVSUk9SID0gJ2Vycm9yJ1xufVxuLyoqXG4gKiAqKklnbml0ZSBVSSBmb3IgQW5ndWxhciBCYWRnZSoqIC1cbiAqIFtEb2N1bWVudGF0aW9uXShodHRwczovL3d3dy5pbmZyYWdpc3RpY3MuY29tL3Byb2R1Y3RzL2lnbml0ZS11aS1hbmd1bGFyL2FuZ3VsYXIvY29tcG9uZW50cy9iYWRnZS5odG1sKVxuICpcbiAqIFRoZSBJZ25pdGUgVUkgQmFkZ2UgaXMgdXNlZCB0byBkZWNvcmF0ZSBhdmF0YXJzLCBuYXZpZ2F0aW9uIG1lbnVzLCBvciBvdGhlciBjb21wb25lbnRzIGluIHRoZVxuICogYXBwbGljYXRpb24gd2hlbiB2aXN1YWwgbm90aWZpY2F0aW9uIGlzIG5lZWRlZC4gVGhleSBhcmUgdXN1YWxseSBkZXNpZ25lZCBhcyBpY29ucyB3aXRoIGEgcHJlZGVmaW5lZFxuICogc3R5bGUgdG8gY29tbXVuaWNhdGUgaW5mb3JtYXRpb24sIHN1Y2Nlc3MsIHdhcm5pbmdzLCBvciBlcnJvcnMuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtYXZhdGFyIGljb249XCJwZXJzb25cIiByb3VuZFNoYXBlPVwidHJ1ZVwiIHNpemU9XCJzbWFsbFwiPlxuICogICA8aWd4LWJhZGdlIGljb249XCJjaGVja1wiIHR5cGU9XCJzdWNjZXNzXCIgY2xhc3M9XCJiYWRnZS1zdHlsZVwiPlxuICogICA8L2lneC1iYWRnZT5cbiAqIDwvaWd4LWF2YXRhcj5cbiAqIGBgYFxuICogVGhlIGBiYWRnZS1zdHlsZWAgY2xhc3MgaXMgdXNlZCB0byBwb3NpdGlvbiB0aGUgYmFkZ2U6XG4gKiBgYGBjc3NcbiAqIC5iYWRnZS1zdHlsZSB7XG4gKiAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAqICAgYm90dG9tOiAtNnB4O1xuICogICByaWdodDotNTBweDtcbiAqIH1cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC1iYWRnZScsXG4gICAgdGVtcGxhdGVVcmw6ICdiYWRnZS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4QmFkZ2VDb21wb25lbnQge1xuXG4gICAgLyoqXG4gICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgYGlkYCBhdHRyaWJ1dGUuXG4gICAgKiBgYGBodG1sXG4gICAgKjxpZ3gtYmFkZ2UgaWQ9XCJpZ3gtYmFkZ2UtMlwiIGljb249XCJjaGVja1wiIHR5cGU9XCJzdWNjZXNzXCIgY2xhc3M9XCJiYWRnZS1zdHlsZVwiPjwvaWd4LWJhZGdlPlxuICAgICogYGBgXG4gICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuaWQnKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGlkID0gYGlneC1iYWRnZS0ke05FWFRfSUQrK31gO1xuXG4gICAgLyoqXG4gICAgKiBBbiBASW5wdXQgcHJvcGVydHkgY29udHJvbGxpbmcgdGhlIHR5cGUgb2YgdGhlIGJhZGdlLlxuICAgICogQWxsb3dlZCB2YWx1ZXMgYXJlIGBwcmltYXJ5YCwgYGluZm9gLCBgc3VjY2Vzc2AsIGB3YXJuaW5nYCwgYGVycm9yYC5cbiAgICAqIFByb3ZpZGluZyBhbiBpbnZhbGlkIHZhbHVlIHdvbid0IGRpc3BsYXkgYSBiYWRnZS5cbiAgICAqIGBgYGh0bWxcbiAgICAqPGlneC1iYWRnZSB0eXBlPVwic3VjY2Vzc1wiIGljb249XCJjaGVja1wiIGNsYXNzPVwiYmFkZ2Utc3R5bGVcIj48L2lneC1iYWRnZT5cbiAgICAqIGBgYFxuICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdHlwZTogc3RyaW5nIHwgSWd4QmFkZ2VUeXBlID0gSWd4QmFkZ2VUeXBlLlBSSU1BUlk7XG5cbiAgICAvKipcbiAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHZhbHVlIHRvIGJlIGRpc3BsYXllZCBpbnNpZGUgdGhlIGJhZGdlLlxuICAgICogSWYgYW4gYGljb25gIHByb3BlcnR5IGlzIGFscmVhZHkgc2V0IHRoZSBgaWNvbmAgd2lsbCBiZSBkaXNwbGF5ZWQuXG4gICAgKiBJZiBuZWl0aGVyIGEgYHZhbHVlYCBub3IgYW4gYGljb25gIGlzIHNldCB0aGUgY29udGVudGVudCBvZiB0aGUgYmFkZ2Ugd2lsbCBiZSBlbXB0eS5cbiAgICAqIGBgYGh0bWxcbiAgICAqPGlneC1iYWRnZSB2YWx1ZT1cIjExXCIgdHlwZT1cInN1Y2Nlc3NcIiBjbGFzcz1cImJhZGdlLXN0eWxlXCI+PC9pZ3gtYmFkZ2U+XG4gICAgKiBgYGBcbiAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHZhbHVlID0gJyc7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgYW4gaWNvbiBmb3IgdGhlIGJhZGdlIGZyb20gdGhlIG1hdGVyaWFsIGljb25zIHNldC5cbiAgICAgKiBIYXMgcHJpb3JpdHkgb3ZlciB0aGUgYHZhbHVlYCBwcm9wZXJ0eS5cbiAgICAgKiBJZiBuZWl0aGVyIGEgYHZhbHVlYCBub3IgYW4gYGljb25gIGlzIHNldCB0aGUgY29udGVudCBvZiB0aGUgYmFkZ2Ugd2lsbCBiZSBlbXB0eS5cbiAgICAgKiBQcm92aWRpbmcgYW4gaW52YWxpZCB2YWx1ZSB3b24ndCBkaXNwbGF5IGFueXRoaW5nLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKjxpZ3gtYmFkZ2UgaWNvbj1cImNoZWNrXCIgdHlwZT1cInN1Y2Nlc3NcIiBjbGFzcz1cImJhZGdlLXN0eWxlXCIgdmFsdWU9XCIxMVwiPjwvaWd4LWJhZGdlPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGljb246IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoaXMgYWxsb3dzIHlvdSB0byBzZXQgdmFsdWUgdG8gcm9sZSBhdHRyaWJ1dGUuXG4gICAgICpgYGBodG1sXG4gICAgICpAVmlld0NoaWxkKFwiTXlCYWRnZVwiLCB7IHJlYWQ6IElneEJhZGdlQ29tcG9uZW50IH0pXG4gICAgICpwdWJsaWMgYmFkZ2U6IElneEJhZGdlQ29tcG9uZW50O1xuICAgICAqIC8vLi4uXG4gICAgICpiYWRnZS5sYWJlbCA9IFwiYmFkZ2Utc3RhdHVzXCI7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICAgIHB1YmxpYyByb2xlID0gJ3N0YXR1cyc7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGFsbG93cyB5b3UgdG8gZGlzYWJsZSBpZ3gtYmFkZ2UgY2xhc3MuIFRoZSBkZWZhdWx0IGl0J3MgYXBwbGllZC5cbiAgICAgKmBgYGh0bWxcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUJhZGdlXCIsIHsgcmVhZDogSWd4QmFkZ2VDb21wb25lbnQgfSlcbiAgICAgKnB1YmxpYyBiYWRnZTogSWd4QmFkZ2VDb21wb25lbnQ7XG4gICAgICogLy8uLi5cbiAgICAgKmJhZGdlLmNzc0NsYXNzID0gZmFsc2U7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtYmFkZ2UnKVxuICAgIHB1YmxpYyBjc3NDbGFzcyA9ICdpZ3gtYmFkZ2UnO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBhbGxvd3MgeW91IHRvIHNldCB2YWx1ZSB0byBhcmlhLWxhYmVsIGF0dHJpYnV0ZS5cbiAgICAgKmBgYGh0bWxcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUJhZGdlXCIsIHsgcmVhZDogSWd4QmFkZ2VDb21wb25lbnQgfSlcbiAgICAgKnB1YmxpYyBiYWRnZTogSWd4QmFkZ2VDb21wb25lbnQ7XG4gICAgICogLy8uLi5cbiAgICAgKmJhZGdlLmxhYmVsID0gXCJpY29uLWJhZGdlXCI7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtbGFiZWwnKVxuICAgIHB1YmxpYyBsYWJlbCA9ICdiYWRnZSc7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogRGVmaW5lcyBhIGh1bWFuLXJlYWRhYmxlLCBhY2Nlc3NvciwgYXV0aG9yLWxvY2FsaXplZCBkZXNjcmlwdGlvbiBmb3IgdGhlIGB0eXBlYCBhbmQgdGhlIGBpY29uYCBvciBgdmFsdWVgIG9mIHRoZSBlbGVtZW50LlxuICAgICAqL1xuICAgIGdldCByb2xlRGVzY3JpcHRpb24oKSB7XG4gICAgICAgIGxldCBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnByZWZlci1jb25kaXRpb25hbC1leHByZXNzaW9uXG4gICAgICAgIGlmICh0aGlzLmljb24pIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSB0aGlzLnR5cGUgKyAnIHR5cGUgYmFkZ2Ugd2l0aCBpY29uIHR5cGUgJyArIHRoaXMuaWNvbjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gdGhpcy50eXBlICsgJyBiYWRnZSB0eXBlIHdpdGggdmFsdWUgJyArIHRoaXMudmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gdGhpcy50eXBlICsgJyBiYWRnZSB0eXBlIHdpdGhvdXQgdmFsdWUnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIE1ldGhvZCB3aGljaCBtYWtlcyB0aGUgbmFtZSBvZiB0aGUgY2xhc3MgbW9yZSBkZXNjcmlwdGl2ZS5cbiAgICAgKiBUaGlzIGhlbHBzIHRoZSBzdHlsaW5nIG9mIHRoZSBiYWRnZXMuXG4gICAgICovXG4gICAgcHVibGljIHNldENsYXNzZXMoKSB7XG4gICAgICAgIGxldCBjbGFzc2VzID0ge307XG5cbiAgICAgICAgc3dpdGNoIChJZ3hCYWRnZVR5cGVbdGhpcy50eXBlLnRvVXBwZXJDYXNlKCldKSB7XG4gICAgICAgICAgICBjYXNlIElneEJhZGdlVHlwZS5JTkZPOlxuICAgICAgICAgICAgICAgIGNsYXNzZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIFtgJHt0aGlzLmNzc0NsYXNzfV9fY2lyY2xlLS1pbmZvYF06IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBJZ3hCYWRnZVR5cGUuU1VDQ0VTUzpcbiAgICAgICAgICAgICAgICBjbGFzc2VzID0ge1xuICAgICAgICAgICAgICAgICAgICBbYCR7dGhpcy5jc3NDbGFzc31fX2NpcmNsZS0tc3VjY2Vzc2BdOiB0cnVlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgSWd4QmFkZ2VUeXBlLldBUk5JTkc6XG4gICAgICAgICAgICAgICAgY2xhc3NlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgW2Ake3RoaXMuY3NzQ2xhc3N9X19jaXJjbGUtLXdhcm5pbmdgXTogdHJ1ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIElneEJhZGdlVHlwZS5FUlJPUjpcbiAgICAgICAgICAgICAgICBjbGFzc2VzID0ge1xuICAgICAgICAgICAgICAgICAgICBbYCR7dGhpcy5jc3NDbGFzc31fX2NpcmNsZS0tZXJyb3JgXTogdHJ1ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNsYXNzZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIFtgJHt0aGlzLmNzc0NsYXNzfV9fY2lyY2xlLS1kZWZhdWx0YF06IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsYXNzZXM7XG4gICAgfVxuXG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW0lneEJhZGdlQ29tcG9uZW50XSxcbiAgICBleHBvcnRzOiBbSWd4QmFkZ2VDb21wb25lbnRdLFxuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIElneEljb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIElneEJhZGdlTW9kdWxlIHsgfVxuIl19
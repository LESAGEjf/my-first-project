import { __decorate } from "tslib";
import { Directive, NgModule, Input, Output, EventEmitter, ContentChildren, HostBinding } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxRadioComponent, RadioLabelPosition } from '../../radio/radio.component';
import { IgxRippleModule } from '../ripple/ripple.directive';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
var noop = function () { };
var Éµ0 = noop;
var nextId = 0;
/**
 * **Ignite UI for Angular Radio Group** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)
 *
 * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.
 *
 * Example:
 * ```html
 * <igx-radio-group name="radioGroup">
 *   <igx-radio *ngFor="let item of ['Foo', 'Bar', 'Baz']" value="{{item}}">
 *      {{item}}
 *   </igx-radio>
 * </igx-radio-group>
 * ```
 */
var IgxRadioGroupDirective = /** @class */ (function () {
    function IgxRadioGroupDirective() {
        /**
         * An event that is emitted after the radio group `value` is changed.
         * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.
         * @memberof IgxRadioGroupDirective
         */
        this.change = new EventEmitter();
        /**
         *@hidden
         */
        this.cssClass = 'igx-radio-group';
        /**
         *@hidden
         */
        this._onChangeCallback = noop;
        /**
         *@hidden
         */
        this._name = "igx-radio-group-" + nextId++;
        /**
         *@hidden
         */
        this._value = null;
        /**
         *@hidden
         */
        this._selected = null;
        /**
         *@hidden
         */
        this._isInitialized = false;
        /**
         *@hidden
         */
        this._labelPosition = 'after';
        /**
         *@hidden
         */
        this._disabled = false;
        /**
         *@hidden
         */
        this._required = false;
        /**
         *@hidden
         */
        this.destroy$ = new Subject();
    }
    IgxRadioGroupDirective_1 = IgxRadioGroupDirective;
    Object.defineProperty(IgxRadioGroupDirective.prototype, "value", {
        /**
         * Sets/gets the `value` attribute.
         * ```html
         * <igx-radio-group [value] = "'radioButtonValue'"></igx-radio-group>
         * ```
         * ```typescript
         * let value =  this.radioGroup.value;
         * ```
         * @memberof IgxRadioGroupDirective
         */
        get: function () { return this._value; },
        set: function (newValue) {
            if (this._value !== newValue) {
                this._value = newValue;
                this._selectRadioButton();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRadioGroupDirective.prototype, "name", {
        /**
         * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.
         * ```html
         * <igx-radio-group name = "Radio1"></igx-radio-group>
         *  ```
         * ```typescript
         * let name =  this.radioGroup.name;
         * ```
         * @memberof IgxRadioGroupDirective
         */
        get: function () { return this._name; },
        set: function (newValue) {
            if (this._name !== newValue) {
                this._name = newValue;
                this._setRadioButtonNames();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRadioGroupDirective.prototype, "required", {
        /**
         * Sets/gets whether the radio group is required.
         * If not set, `required` will have value `false`.
         * ```html
         * <igx-radio-group [required] = "true"></igx-radio-group>
         * ```
         * ```typescript
         * let isRequired =  this.radioGroup.required;
         * ```
         * @memberof IgxRadioGroupDirective
         */
        get: function () { return this._required; },
        set: function (newValue) {
            if (this._required !== newValue) {
                this._required = newValue;
                this._setRadioButtonsRequired();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRadioGroupDirective.prototype, "disabled", {
        /**
         * An @Input property that allows you to disable the radio group. By default it's false.
         * ```html
         * <igx-radio-group [disabled]="true"></igx-radio-group>
         * ```
         * @memberof IgxRadioGroupDirective
         */
        get: function () { return this._disabled; },
        set: function (newValue) {
            if (this._disabled !== newValue) {
                this._disabled = newValue;
                this._disableRadioButtons();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRadioGroupDirective.prototype, "labelPosition", {
        /**
         * Sets/gets the position of the `label` in the child radio buttons.
         * If not set, `labelPosition` will have value `"after"`.
         * ```html
         * <igx-radio-group labelPosition = "before"></igx-radio-group>
         * ```
         * ```typescript
         * let labelPosition =  this.radioGroup.labelPosition;
         * ```
         * @memberof IgxRadioGroupDirective
         */
        get: function () { return this._labelPosition; },
        set: function (newValue) {
            if (this._labelPosition !== newValue) {
                this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;
                this._setRadioButtonLabelPosition();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRadioGroupDirective.prototype, "selected", {
        /**
         * Sets/gets the selected child radio button.
         * ```typescript
         * let selectedButton = this.radioGroup.selected;
         * this.radioGroup.selected = selectedButton;
         * ```
         * @memberof IgxRadioGroupDirective
         */
        get: function () { return this._selected; },
        set: function (selected) {
            if (this._selected !== selected) {
                this._selected = selected;
                this.value = selected ? selected.value : null;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxRadioGroupDirective.prototype.ngAfterContentInit = function () {
        var _this = this;
        // The initial value can possibly be set by NgModel and it is possible that
        // the OnInit of the NgModel occurs after the OnInit of this class.
        this._isInitialized = true;
        setTimeout(function () { _this._initRadioButtons(); });
    };
    /**
     * Checks whether the provided value is consistent to the current radio button.
     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.
     * ```typescript
     * this.radioGroup.writeValue('radioButtonValue');
     * ```
     */
    IgxRadioGroupDirective.prototype.writeValue = function (value) {
        this.value = value;
    };
    /**
     *@hidden
     */
    IgxRadioGroupDirective.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    /**
     *@hidden
     */
    IgxRadioGroupDirective.prototype.registerOnTouched = function (fn) {
        if (this.radioButtons) {
            this.radioButtons.forEach(function (button) {
                button.registerOnTouched(fn);
            });
        }
    };
    /**
     *@hidden
     */
    IgxRadioGroupDirective.prototype.ngOnDestroy = function () {
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    /**
     *@hidden
     */
    IgxRadioGroupDirective.prototype._initRadioButtons = function () {
        var _this = this;
        if (this.radioButtons) {
            var props_1 = { name: this._name, labelPosition: this._labelPosition, disabled: this._disabled, required: this._required };
            this.radioButtons.forEach(function (button) {
                Object.assign(button, props_1);
                if (button.value === _this._value) {
                    button.checked = true;
                    _this._selected = button;
                }
                button.change.pipe(takeUntil(_this.destroy$)).subscribe(function (ev) { return _this._selectedRadioButtonChanged(ev); });
            });
        }
    };
    /**
     *@hidden
     */
    IgxRadioGroupDirective.prototype._selectedRadioButtonChanged = function (args) {
        if (this._selected !== args.radio) {
            if (this._selected) {
                this._selected.checked = false;
            }
            this._selected = args.radio;
        }
        this._value = args.value;
        if (this._isInitialized) {
            this.change.emit(args);
            this._onChangeCallback(this.value);
        }
    };
    /**
     *@hidden
     */
    IgxRadioGroupDirective.prototype._setRadioButtonNames = function () {
        var _this = this;
        if (this.radioButtons) {
            this.radioButtons.forEach(function (button) {
                button.name = _this._name;
            });
        }
    };
    /**
     *@hidden
     */
    IgxRadioGroupDirective.prototype._selectRadioButton = function () {
        var _this = this;
        if (this.radioButtons) {
            this.radioButtons.forEach(function (button) {
                if (!_this._value) {
                    // no value - uncheck all radio buttons
                    if (button.checked) {
                        button.checked = false;
                    }
                }
                else {
                    if (_this._value === button.value) {
                        // selected button
                        if (_this._selected !== button) {
                            _this._selected = button;
                        }
                        if (!button.checked) {
                            button.select();
                        }
                    }
                    else {
                        // non-selected button
                        if (button.checked) {
                            button.checked = false;
                        }
                    }
                }
            });
        }
    };
    /**
     *@hidden
     */
    IgxRadioGroupDirective.prototype._setRadioButtonLabelPosition = function () {
        var _this = this;
        if (this.radioButtons) {
            this.radioButtons.forEach(function (button) {
                button.labelPosition = _this._labelPosition;
            });
        }
    };
    /**
     *@hidden
     */
    IgxRadioGroupDirective.prototype._disableRadioButtons = function () {
        var _this = this;
        if (this.radioButtons) {
            this.radioButtons.forEach(function (button) {
                button.disabled = _this._disabled;
            });
        }
    };
    /**
     *@hidden
     */
    IgxRadioGroupDirective.prototype._setRadioButtonsRequired = function () {
        var _this = this;
        if (this.radioButtons) {
            this.radioButtons.forEach(function (button) {
                button.required = _this._required;
            });
        }
    };
    var IgxRadioGroupDirective_1;
    __decorate([
        ContentChildren(IgxRadioComponent, { descendants: true })
    ], IgxRadioGroupDirective.prototype, "radioButtons", void 0);
    __decorate([
        Input()
    ], IgxRadioGroupDirective.prototype, "value", null);
    __decorate([
        Input()
    ], IgxRadioGroupDirective.prototype, "name", null);
    __decorate([
        Input()
    ], IgxRadioGroupDirective.prototype, "required", null);
    __decorate([
        Input()
    ], IgxRadioGroupDirective.prototype, "disabled", null);
    __decorate([
        Input()
    ], IgxRadioGroupDirective.prototype, "labelPosition", null);
    __decorate([
        Input()
    ], IgxRadioGroupDirective.prototype, "selected", null);
    __decorate([
        Output()
    ], IgxRadioGroupDirective.prototype, "change", void 0);
    __decorate([
        HostBinding('class.igx-radio-group')
    ], IgxRadioGroupDirective.prototype, "cssClass", void 0);
    IgxRadioGroupDirective = IgxRadioGroupDirective_1 = __decorate([
        Directive({
            exportAs: 'igxRadioGroup',
            selector: 'igx-radio-group, [igxRadioGroup]',
            providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective_1, multi: true }]
        })
    ], IgxRadioGroupDirective);
    return IgxRadioGroupDirective;
}());
export { IgxRadioGroupDirective };
/**
 * @hidden
 */
var IgxRadioModule = /** @class */ (function () {
    function IgxRadioModule() {
    }
    IgxRadioModule = __decorate([
        NgModule({
            declarations: [IgxRadioGroupDirective, IgxRadioComponent],
            exports: [IgxRadioGroupDirective, IgxRadioComponent],
            imports: [IgxRippleModule]
        })
    ], IgxRadioModule);
    return IgxRadioModule;
}());
export { IgxRadioModule };
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,
import { __decorate, __extends } from "tslib";
import { Component, HostListener, ViewChild, HostBinding, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { trigger, transition, useAnimation } from '@angular/animations';
import { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';
import { IgxMonthsViewComponent } from '../months-view/months-view.component';
import { IgxMonthPickerBaseDirective, CalendarView } from '../month-picker-base';
import { IgxYearsViewComponent } from '../years-view/years-view.component';
import { IgxDaysViewComponent } from '../days-view/days-view.component';
var NEXT_ID = 0;
var IgxMonthPickerComponent = /** @class */ (function (_super) {
    __extends(IgxMonthPickerComponent, _super);
    function IgxMonthPickerComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Sets/gets the `id` of the month picker.
         * If not set, the `id` will have value `"igx-month-picker-0"`.
         */
        _this.id = "igx-month-picker-" + NEXT_ID++;
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        _this.styleClass = true;
        /**
         * @hidden
         */
        _this.yearAction = '';
        return _this;
    }
    IgxMonthPickerComponent_1 = IgxMonthPickerComponent;
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.animationDone = function () {
        this.yearAction = '';
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.activeViewDecadeKB = function (event) {
        var _this = this;
        _super.prototype.activeViewDecadeKB.call(this, event);
        if (event.key === "ArrowRight" /* RIGHT_ARROW */ || event.key === "Right" /* RIGHT_ARROW_IE */) {
            event.preventDefault();
            this.nextYear();
        }
        if (event.key === "ArrowLeft" /* LEFT_ARROW */ || event.key === "Left" /* LEFT_ARROW_IE */) {
            event.preventDefault();
            this.previousYear();
        }
        requestAnimationFrame(function () {
            if (_this.dacadeView) {
                _this.dacadeView.el.nativeElement.focus();
            }
        });
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.activeViewDecade = function () {
        var _this = this;
        _super.prototype.activeViewDecade.call(this);
        requestAnimationFrame(function () {
            _this.dacadeView.el.nativeElement.focus();
        });
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.nextYear = function () {
        this.yearAction = 'next';
        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);
        this.selectDate(this.viewDate);
        this.onSelection.emit(this.selectedDates);
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.nextYearKB = function (event) {
        if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
            event.preventDefault();
            event.stopPropagation();
            this.nextYear();
        }
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.previousYear = function () {
        this.yearAction = 'prev';
        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);
        this.selectDate(this.viewDate);
        this.onSelection.emit(this.selectedDates);
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.previousYearKB = function (event) {
        if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
            event.preventDefault();
            event.stopPropagation();
            this.previousYear();
        }
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.selectYear = function (event) {
        var _this = this;
        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());
        this.activeView = CalendarView.DEFAULT;
        this.selectDate(event);
        this.onSelection.emit(this.selectedDates);
        requestAnimationFrame(function () {
            if (_this.yearsBtn) {
                _this.yearsBtn.nativeElement.focus();
            }
        });
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.selectMonth = function (event) {
        this.selectDate(event);
        this.onSelection.emit(this.selectedDates);
    };
    /**
     * Selects a date.
     *```typescript
     * this.monPicker.selectDate(new Date(`2018-06-12`));
     *```
     */
    IgxMonthPickerComponent.prototype.selectDate = function (value) {
        if (!value) {
            return new Date();
        }
        // TO DO: to be refactored after discussion on the desired behavior
        _super.prototype.selectDate.call(this, value);
        this.viewDate = value;
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.writeValue = function (value) {
        // TO DO: to be refactored after discussion on the desired behavior
        if (value) {
            this.viewDate = this.selectedDates = value;
        }
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.onKeydownPageUp = function (event) {
        event.preventDefault();
        this.yearAction = 'prev';
        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.onKeydownPageDown = function (event) {
        event.preventDefault();
        this.yearAction = 'next';
        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.onKeydownHome = function (event) {
        if (this.monthsView) {
            this.monthsView.el.nativeElement.focus();
            this.monthsView.onKeydownHome(event);
        }
    };
    /**
     * @hidden
     */
    IgxMonthPickerComponent.prototype.onKeydownEnd = function (event) {
        if (this.monthsView) {
            this.monthsView.el.nativeElement.focus();
            this.monthsView.onKeydownEnd(event);
        }
    };
    var IgxMonthPickerComponent_1;
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxMonthPickerComponent.prototype, "id", void 0);
    __decorate([
        HostBinding('class.igx-calendar')
    ], IgxMonthPickerComponent.prototype, "styleClass", void 0);
    __decorate([
        ViewChild('months', { read: IgxMonthsViewComponent })
    ], IgxMonthPickerComponent.prototype, "monthsView", void 0);
    __decorate([
        ViewChild('decade', { read: IgxYearsViewComponent })
    ], IgxMonthPickerComponent.prototype, "dacadeView", void 0);
    __decorate([
        ViewChild('days', { read: IgxDaysViewComponent })
    ], IgxMonthPickerComponent.prototype, "daysView", void 0);
    __decorate([
        HostListener('keydown.pageup', ['$event'])
    ], IgxMonthPickerComponent.prototype, "onKeydownPageUp", null);
    __decorate([
        HostListener('keydown.pagedown', ['$event'])
    ], IgxMonthPickerComponent.prototype, "onKeydownPageDown", null);
    __decorate([
        HostListener('keydown.home', ['$event'])
    ], IgxMonthPickerComponent.prototype, "onKeydownHome", null);
    __decorate([
        HostListener('keydown.end', ['$event'])
    ], IgxMonthPickerComponent.prototype, "onKeydownEnd", null);
    IgxMonthPickerComponent = IgxMonthPickerComponent_1 = __decorate([
        Component({
            providers: [
                {
                    multi: true,
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: IgxMonthPickerComponent_1
                }
            ],
            animations: [
                trigger('animateView', [
                    transition('void => 0', useAnimation(fadeIn)),
                    transition('void => *', useAnimation(scaleInCenter, {
                        params: {
                            duration: '.2s',
                            fromScale: .9
                        }
                    }))
                ]),
                trigger('animateChange', [
                    transition('* => prev', useAnimation(slideInLeft, {
                        params: {
                            fromPosition: 'translateX(-30%)'
                        }
                    })),
                    transition('* => next', useAnimation(slideInRight, {
                        params: {
                            fromPosition: 'translateX(30%)'
                        }
                    }))
                ])
            ],
            selector: 'igx-month-picker',
            template: "<div *ngIf=\"isDefaultView\" [@animateView]=\"activeView\" class=\"igx-calendar__body\" (swiperight)=\"previousYear()\" (swipeleft)=\"nextYear()\">\n    <div class=\"igx-calendar-picker\">\n        <div tabindex=\"0\" class=\"igx-calendar-picker__prev\" (click)=\"previousYear()\" (keydown)=\"previousYearKB($event)\" [ngStyle]=\"{\n            'min-width.%': 25,\n            'left': 0\n        }\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_left</igx-icon>\n        </div>\n        <div [style.width.%]=\"100\">\n            <span tabindex=\"0\" #yearsBtn (keydown)=\"activeViewDecadeKB($event)\" (click)=\"activeViewDecade()\" class=\"igx-calendar-picker__date\">\n                {{ formattedYear(viewDate) }}\n            </span>\n        </div>\n        <div tabindex=\"0\" class=\"igx-calendar-picker__next\" (click)=\"nextYear()\" (keydown)=\"nextYearKB($event)\" [ngStyle]=\"{\n            'min-width.%': 25,\n            'right': 0\n        }\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_right</igx-icon>\n        </div>\n    </div>\n\n    <igx-months-view [@animateChange]=\"yearAction\" #months\n                     (@animateChange.done)=\"animationDone()\"\n                     [date]=\"viewDate\"\n                     [locale]=\"locale\"\n                     [formatView]=\"formatViews.month\"\n                     [monthFormat]=\"formatOptions.month\"\n                     (onSelection)=\"selectMonth($event)\">\n    </igx-months-view>\n</div>\n<igx-years-view *ngIf=\"isDecadeView\" [@animateView]=\"activeView\" #decade\n                [date]=\"viewDate\"\n                [locale]=\"locale\"\n                [formatView]=\"formatViews.year\"\n                [yearFormat]=\"formatOptions.year\"\n                (onSelection)=\"selectYear($event)\">\n</igx-years-view>\n"
        })
    ], IgxMonthPickerComponent);
    return IgxMonthPickerComponent;
}(IgxMonthPickerBaseDirective));
export { IgxMonthPickerComponent };
//# sourceMappingURL=data:application/json;base64,
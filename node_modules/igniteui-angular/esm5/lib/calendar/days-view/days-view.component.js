import { __decorate, __extends, __values } from "tslib";
import { Component, Output, EventEmitter, Input, HostListener, ViewChildren, HostBinding } from '@angular/core';
import { isDateInRanges } from '../../calendar/calendar';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxDayItemComponent } from './day-item.component';
import { DateRangeType } from '../../core/dates';
import { IgxCalendarBaseDirective, CalendarSelection } from '../calendar-base';
import { isEqual } from '../../core/utils';
import { IgxDaysViewNavigationService } from './daysview-navigation.service';
var NEXT_ID = 0;
var IgxDaysViewComponent = /** @class */ (function (_super) {
    __extends(IgxDaysViewComponent, _super);
    /**
     * @hidden
     */
    function IgxDaysViewComponent(navService) {
        var _this = _super.call(this) || this;
        _this.navService = navService;
        /**
         * Sets/gets the `id` of the days view.
         * If not set, the `id` will have value `"igx-days-view-0"`.
         * ```html
         * <igx-days-view id="my-days-view"></igx-days-view>
         * ```
         * ```typescript
         * let daysViewId =  this.daysView.id;
         * ```
         */
        _this.id = "igx-days-view-" + NEXT_ID++;
        /**
         * @hidden
         */
        _this.changeDaysView = false;
        /**
         * @hidden
         */
        _this.onDateSelection = new EventEmitter();
        /**
         * @hidden
         */
        _this.onViewChanging = new EventEmitter();
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        _this.styleClass = true;
        return _this;
    }
    IgxDaysViewComponent_1 = IgxDaysViewComponent;
    Object.defineProperty(IgxDaysViewComponent.prototype, "getCalendarMonth", {
        /**
         * @hidden
         */
        get: function () {
            return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.ngOnInit = function () {
        this.navService.monthView = this;
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.ngDoCheck = function () {
        if (!this.changeDaysView && this.dates) {
            this.disableOutOfRangeDates();
        }
    };
    /**
     * Returns the locale representation of the date in the days view.
     *
     * @hidden
     */
    IgxDaysViewComponent.prototype.formattedDate = function (value) {
        if (this.formatViews.day) {
            return this.formatterDay.format(value);
        }
        return "" + value.getDate();
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.generateWeekHeader = function () {
        var e_1, _a;
        var dayNames = [];
        var rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];
        try {
            for (var rv_1 = __values(rv), rv_1_1 = rv_1.next(); !rv_1_1.done; rv_1_1 = rv_1.next()) {
                var day = rv_1_1.value;
                dayNames.push(this.formatterWeekday.format(day.date));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (rv_1_1 && !rv_1_1.done && (_a = rv_1.return)) _a.call(rv_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return dayNames;
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.rowTracker = function (index, item) {
        return "" + item[index].date.getMonth() + item[index].date.getDate();
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.dateTracker = function (index, item) {
        return item.date.getMonth() + "--" + item.date.getDate();
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.isCurrentMonth = function (value) {
        return this.viewDate.getMonth() === value.getMonth();
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.isCurrentYear = function (value) {
        return this.viewDate.getFullYear() === value.getFullYear();
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.isSelected = function (date) {
        var selectedDates;
        if (this.isDateDisabled(date.date) || !this.value ||
            (Array.isArray(this.value) && this.value.length === 0)) {
            return false;
        }
        if (this.selection === CalendarSelection.SINGLE) {
            selectedDates = this.value;
            return this.getDateOnly(selectedDates).getTime() === date.date.getTime();
        }
        selectedDates = this.value;
        if (this.selection === CalendarSelection.RANGE && selectedDates.length === 1) {
            return this.getDateOnly(selectedDates[0]).getTime() === date.date.getTime();
        }
        if (this.selection === CalendarSelection.MULTI) {
            var start = this.getDateOnly(selectedDates[0]);
            var end = this.getDateOnly(selectedDates[selectedDates.length - 1]);
            if (this.isWithinRange(date.date, false, start, end)) {
                var currentDate = selectedDates.find(function (element) { return element.getTime() === date.date.getTime(); });
                return !!currentDate;
            }
            else {
                return false;
            }
        }
        else {
            return this.isWithinRange(date.date, true);
        }
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.isLastInRange = function (date) {
        if (this.isSingleSelection || !this.value) {
            return false;
        }
        var dates = this.value;
        var lastDate = dates[dates.length - 1];
        return isEqual(lastDate, date.date);
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.isFirstInRange = function (date) {
        if (this.isSingleSelection || !this.value) {
            return false;
        }
        return isEqual(this.value[0], date.date);
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.isWithinRange = function (date, checkForRange, min, max) {
        if (checkForRange && !(Array.isArray(this.value) && this.value.length > 1)) {
            return false;
        }
        min = min ? min : this.value[0];
        max = max ? max : this.value[this.value.length - 1];
        return isDateInRanges(date, [
            {
                type: DateRangeType.Between,
                dateRange: [min, max]
            }
        ]);
    };
    /**
     *@hidden
     */
    IgxDaysViewComponent.prototype.focusActiveDate = function () {
        var date = this.dates.find(function (d) { return d.selected; });
        if (!date) {
            date = this.dates.find(function (d) { return d.isToday; });
        }
        if (date.isFocusable) {
            date.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.selectDay = function (event) {
        this.selectDateFromClient(event.date);
        this.onDateSelection.emit(event);
        this.onSelection.emit(this.selectedDates);
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.disableOutOfRangeDates = function () {
        var dateRange = [];
        this.dates.toArray().forEach(function (date) {
            if (!date.isCurrentMonth) {
                dateRange.push(date.date.date);
            }
        });
        this.outOfRangeDates = [{
                type: DateRangeType.Specific,
                dateRange: dateRange
            }];
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.getFirstMonthView = function () {
        var monthView = this;
        while (monthView.prevMonthView) {
            monthView = monthView.prevMonthView;
        }
        return monthView;
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.getLastMonthView = function () {
        var monthView = this;
        while (monthView.nextMonthView) {
            monthView = monthView.nextMonthView;
        }
        return monthView;
    };
    Object.defineProperty(IgxDaysViewComponent.prototype, "isSingleSelection", {
        /**
         * @hidden
         */
        get: function () {
            return this.selection !== CalendarSelection.RANGE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.onKeydownArrow = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.navService.focusNextDate(event.target, event.key);
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.onKeydownHome = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.getFirstMonthView().navService.focusHomeDate();
    };
    /**
     * @hidden
     */
    IgxDaysViewComponent.prototype.onKeydownEnd = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.getLastMonthView().navService.focusEndDate();
    };
    var IgxDaysViewComponent_1;
    IgxDaysViewComponent.ctorParameters = function () { return [
        { type: IgxDaysViewNavigationService }
    ]; };
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxDaysViewComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxDaysViewComponent.prototype, "changeDaysView", void 0);
    __decorate([
        Output()
    ], IgxDaysViewComponent.prototype, "onDateSelection", void 0);
    __decorate([
        Output()
    ], IgxDaysViewComponent.prototype, "onViewChanging", void 0);
    __decorate([
        ViewChildren(IgxDayItemComponent, { read: IgxDayItemComponent })
    ], IgxDaysViewComponent.prototype, "dates", void 0);
    __decorate([
        HostBinding('class.igx-calendar')
    ], IgxDaysViewComponent.prototype, "styleClass", void 0);
    __decorate([
        HostListener('keydown.arrowleft', ['$event']),
        HostListener('keydown.arrowright', ['$event']),
        HostListener('keydown.arrowup', ['$event']),
        HostListener('keydown.arrowdown', ['$event'])
    ], IgxDaysViewComponent.prototype, "onKeydownArrow", null);
    __decorate([
        HostListener('keydown.home', ['$event'])
    ], IgxDaysViewComponent.prototype, "onKeydownHome", null);
    __decorate([
        HostListener('keydown.end', ['$event'])
    ], IgxDaysViewComponent.prototype, "onKeydownEnd", null);
    IgxDaysViewComponent = IgxDaysViewComponent_1 = __decorate([
        Component({
            providers: [
                {
                    multi: true,
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: IgxDaysViewComponent_1
                },
                { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }
            ],
            selector: 'igx-days-view',
            template: "<div class=\"igx-calendar__body-row\">\n    <span *ngFor=\"let dayName of generateWeekHeader()\" class=\"igx-calendar__label\">\n        {{ dayName | titlecase }}\n    </span>\n</div>\n\n<div *ngFor=\"let week of getCalendarMonth; last as isLast; index as i; trackBy: rowTracker\"\n    class=\"igx-calendar__body-row\">\n    <igx-day-item\n        *ngFor=\"let day of week; trackBy: dateTracker\"\n        [date]=\"day\"\n        [selection]=\"selection\"\n        [selected]=\"isSelected(day)\"\n        [isLastInRange]=\"isLastInRange(day)\"\n        [isFirstInRange]=\"isFirstInRange(day)\"\n        [isWithinRange]=\"isWithinRange(day.date, true)\"\n        [disabledDates]=\"disabledDates\"\n        [specialDates]=\"specialDates\"\n        [outOfRangeDates]=\"outOfRangeDates\"\n        [hideOutsideDays]=\"hideOutsideDays\"\n        (onDateSelection)=\"selectDay($event)\">\n        {{ formattedDate(day.date) }}\n    </igx-day-item>\n</div>\n"
        })
    ], IgxDaysViewComponent);
    return IgxDaysViewComponent;
}(IgxCalendarBaseDirective));
export { IgxDaysViewComponent };
//# sourceMappingURL=data:application/json;base64,